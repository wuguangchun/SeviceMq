using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace OracleDataDomain
{
	/// <summary>
	/// Strongly-typed collection for the XST14 class.
	/// </summary>
    [Serializable]
	public partial class XST14Collection : ActiveList<XST14, XST14Collection>
	{	   
		public XST14Collection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>XST14Collection</returns>
		public XST14Collection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                XST14 o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the XST14 table.
	/// </summary>
	[Serializable]
	public partial class XST14 : ActiveRecord<XST14>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public XST14()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public XST14(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public XST14(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public XST14(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("XST14", TableType.Table, DataService.GetInstance("ErpNowthwin"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"FYERP";
				//columns
				
				TableSchema.TableColumn colvarXslrry = new TableSchema.TableColumn(schema);
				colvarXslrry.ColumnName = "XSLRRY";
				colvarXslrry.DataType = DbType.String;
				colvarXslrry.MaxLength = 8;
				colvarXslrry.AutoIncrement = false;
				colvarXslrry.IsNullable = true;
				colvarXslrry.IsPrimaryKey = false;
				colvarXslrry.IsForeignKey = false;
				colvarXslrry.IsReadOnly = false;
				colvarXslrry.DefaultSetting = @"";
				colvarXslrry.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXslrry);
				
				TableSchema.TableColumn colvarXslrrq = new TableSchema.TableColumn(schema);
				colvarXslrrq.ColumnName = "XSLRRQ";
				colvarXslrrq.DataType = DbType.DateTime;
				colvarXslrrq.MaxLength = 0;
				colvarXslrrq.AutoIncrement = false;
				colvarXslrrq.IsNullable = true;
				colvarXslrrq.IsPrimaryKey = false;
				colvarXslrrq.IsForeignKey = false;
				colvarXslrrq.IsReadOnly = false;
				colvarXslrrq.DefaultSetting = @"";
				colvarXslrrq.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXslrrq);
				
				TableSchema.TableColumn colvarXtxsdm = new TableSchema.TableColumn(schema);
				colvarXtxsdm.ColumnName = "XTXSDM";
				colvarXtxsdm.DataType = DbType.String;
				colvarXtxsdm.MaxLength = 4;
				colvarXtxsdm.AutoIncrement = false;
				colvarXtxsdm.IsNullable = true;
				colvarXtxsdm.IsPrimaryKey = false;
				colvarXtxsdm.IsForeignKey = false;
				colvarXtxsdm.IsReadOnly = false;
				colvarXtxsdm.DefaultSetting = @"";
				colvarXtxsdm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXtxsdm);
				
				TableSchema.TableColumn colvarXthbdm = new TableSchema.TableColumn(schema);
				colvarXthbdm.ColumnName = "XTHBDM";
				colvarXthbdm.DataType = DbType.String;
				colvarXthbdm.MaxLength = 3;
				colvarXthbdm.AutoIncrement = false;
				colvarXthbdm.IsNullable = true;
				colvarXthbdm.IsPrimaryKey = false;
				colvarXthbdm.IsForeignKey = false;
				colvarXthbdm.IsReadOnly = false;
				colvarXthbdm.DefaultSetting = @"";
				colvarXthbdm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXthbdm);
				
				TableSchema.TableColumn colvarXtdhhl = new TableSchema.TableColumn(schema);
				colvarXtdhhl.ColumnName = "XTDHHL";
				colvarXtdhhl.DataType = DbType.Decimal;
				colvarXtdhhl.MaxLength = 0;
				colvarXtdhhl.AutoIncrement = false;
				colvarXtdhhl.IsNullable = true;
				colvarXtdhhl.IsPrimaryKey = false;
				colvarXtdhhl.IsForeignKey = false;
				colvarXtdhhl.IsReadOnly = false;
				colvarXtdhhl.DefaultSetting = @"";
				colvarXtdhhl.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXtdhhl);
				
				TableSchema.TableColumn colvarXsphdh = new TableSchema.TableColumn(schema);
				colvarXsphdh.ColumnName = "XSPHDH";
				colvarXsphdh.DataType = DbType.String;
				colvarXsphdh.MaxLength = 12;
				colvarXsphdh.AutoIncrement = false;
				colvarXsphdh.IsNullable = false;
				colvarXsphdh.IsPrimaryKey = true;
				colvarXsphdh.IsForeignKey = false;
				colvarXsphdh.IsReadOnly = false;
				colvarXsphdh.DefaultSetting = @"";
				colvarXsphdh.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXsphdh);
				
				TableSchema.TableColumn colvarKcckdm = new TableSchema.TableColumn(schema);
				colvarKcckdm.ColumnName = "KCCKDM";
				colvarKcckdm.DataType = DbType.String;
				colvarKcckdm.MaxLength = 8;
				colvarKcckdm.AutoIncrement = false;
				colvarKcckdm.IsNullable = true;
				colvarKcckdm.IsPrimaryKey = false;
				colvarKcckdm.IsForeignKey = false;
				colvarKcckdm.IsReadOnly = false;
				colvarKcckdm.DefaultSetting = @"";
				colvarKcckdm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarKcckdm);
				
				TableSchema.TableColumn colvarXtbmdm = new TableSchema.TableColumn(schema);
				colvarXtbmdm.ColumnName = "XTBMDM";
				colvarXtbmdm.DataType = DbType.String;
				colvarXtbmdm.MaxLength = 8;
				colvarXtbmdm.AutoIncrement = false;
				colvarXtbmdm.IsNullable = true;
				colvarXtbmdm.IsPrimaryKey = false;
				colvarXtbmdm.IsForeignKey = false;
				colvarXtbmdm.IsReadOnly = false;
				colvarXtbmdm.DefaultSetting = @"";
				colvarXtbmdm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXtbmdm);
				
				TableSchema.TableColumn colvarXsphzt = new TableSchema.TableColumn(schema);
				colvarXsphzt.ColumnName = "XSPHZT";
				colvarXsphzt.DataType = DbType.String;
				colvarXsphzt.MaxLength = 1;
				colvarXsphzt.AutoIncrement = false;
				colvarXsphzt.IsNullable = true;
				colvarXsphzt.IsPrimaryKey = false;
				colvarXsphzt.IsForeignKey = false;
				colvarXsphzt.IsReadOnly = false;
				colvarXsphzt.DefaultSetting = @"";
				colvarXsphzt.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXsphzt);
				
				TableSchema.TableColumn colvarXsshry = new TableSchema.TableColumn(schema);
				colvarXsshry.ColumnName = "XSSHRY";
				colvarXsshry.DataType = DbType.String;
				colvarXsshry.MaxLength = 8;
				colvarXsshry.AutoIncrement = false;
				colvarXsshry.IsNullable = true;
				colvarXsshry.IsPrimaryKey = false;
				colvarXsshry.IsForeignKey = false;
				colvarXsshry.IsReadOnly = false;
				colvarXsshry.DefaultSetting = @"";
				colvarXsshry.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXsshry);
				
				TableSchema.TableColumn colvarXsshrq = new TableSchema.TableColumn(schema);
				colvarXsshrq.ColumnName = "XSSHRQ";
				colvarXsshrq.DataType = DbType.DateTime;
				colvarXsshrq.MaxLength = 0;
				colvarXsshrq.AutoIncrement = false;
				colvarXsshrq.IsNullable = true;
				colvarXsshrq.IsPrimaryKey = false;
				colvarXsshrq.IsForeignKey = false;
				colvarXsshrq.IsReadOnly = false;
				colvarXsshrq.DefaultSetting = @"";
				colvarXsshrq.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXsshrq);
				
				TableSchema.TableColumn colvarXsphbz = new TableSchema.TableColumn(schema);
				colvarXsphbz.ColumnName = "XSPHBZ";
				colvarXsphbz.DataType = DbType.String;
				colvarXsphbz.MaxLength = 255;
				colvarXsphbz.AutoIncrement = false;
				colvarXsphbz.IsNullable = true;
				colvarXsphbz.IsPrimaryKey = false;
				colvarXsphbz.IsForeignKey = false;
				colvarXsphbz.IsReadOnly = false;
				colvarXsphbz.DefaultSetting = @"";
				colvarXsphbz.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXsphbz);
				
				TableSchema.TableColumn colvarXsthbz = new TableSchema.TableColumn(schema);
				colvarXsthbz.ColumnName = "XSTHBZ";
				colvarXsthbz.DataType = DbType.String;
				colvarXsthbz.MaxLength = 1;
				colvarXsthbz.AutoIncrement = false;
				colvarXsthbz.IsNullable = true;
				colvarXsthbz.IsPrimaryKey = false;
				colvarXsthbz.IsForeignKey = false;
				colvarXsthbz.IsReadOnly = false;
				colvarXsthbz.DefaultSetting = @"";
				colvarXsthbz.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXsthbz);
				
				TableSchema.TableColumn colvarKcshck = new TableSchema.TableColumn(schema);
				colvarKcshck.ColumnName = "KCSHCK";
				colvarKcshck.DataType = DbType.String;
				colvarKcshck.MaxLength = 8;
				colvarKcshck.AutoIncrement = false;
				colvarKcshck.IsNullable = true;
				colvarKcshck.IsPrimaryKey = false;
				colvarKcshck.IsForeignKey = false;
				colvarKcshck.IsReadOnly = false;
				colvarKcshck.DefaultSetting = @"";
				colvarKcshck.ForeignKeyTableName = "";
				schema.Columns.Add(colvarKcshck);
				
				TableSchema.TableColumn colvarXsdzbz = new TableSchema.TableColumn(schema);
				colvarXsdzbz.ColumnName = "XSDZBZ";
				colvarXsdzbz.DataType = DbType.String;
				colvarXsdzbz.MaxLength = 1;
				colvarXsdzbz.AutoIncrement = false;
				colvarXsdzbz.IsNullable = true;
				colvarXsdzbz.IsPrimaryKey = false;
				colvarXsdzbz.IsForeignKey = false;
				colvarXsdzbz.IsReadOnly = false;
				colvarXsdzbz.DefaultSetting = @"";
				colvarXsdzbz.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXsdzbz);
				
				TableSchema.TableColumn colvarXsshzt = new TableSchema.TableColumn(schema);
				colvarXsshzt.ColumnName = "XSSHZT";
				colvarXsshzt.DataType = DbType.String;
				colvarXsshzt.MaxLength = 1;
				colvarXsshzt.AutoIncrement = false;
				colvarXsshzt.IsNullable = true;
				colvarXsshzt.IsPrimaryKey = false;
				colvarXsshzt.IsForeignKey = false;
				colvarXsshzt.IsReadOnly = false;
				colvarXsshzt.DefaultSetting = @"";
				colvarXsshzt.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXsshzt);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ErpNowthwin"].AddSchema("XST14",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Xslrry")]
		[Bindable(true)]
		public string Xslrry 
		{
			get { return GetColumnValue<string>(Columns.Xslrry); }
			set { SetColumnValue(Columns.Xslrry, value); }
		}
		  
		[XmlAttribute("Xslrrq")]
		[Bindable(true)]
		public DateTime? Xslrrq 
		{
			get { return GetColumnValue<DateTime?>(Columns.Xslrrq); }
			set { SetColumnValue(Columns.Xslrrq, value); }
		}
		  
		[XmlAttribute("Xtxsdm")]
		[Bindable(true)]
		public string Xtxsdm 
		{
			get { return GetColumnValue<string>(Columns.Xtxsdm); }
			set { SetColumnValue(Columns.Xtxsdm, value); }
		}
		  
		[XmlAttribute("Xthbdm")]
		[Bindable(true)]
		public string Xthbdm 
		{
			get { return GetColumnValue<string>(Columns.Xthbdm); }
			set { SetColumnValue(Columns.Xthbdm, value); }
		}
		  
		[XmlAttribute("Xtdhhl")]
		[Bindable(true)]
		public decimal? Xtdhhl 
		{
			get { return GetColumnValue<decimal?>(Columns.Xtdhhl); }
			set { SetColumnValue(Columns.Xtdhhl, value); }
		}
		  
		[XmlAttribute("Xsphdh")]
		[Bindable(true)]
		public string Xsphdh 
		{
			get { return GetColumnValue<string>(Columns.Xsphdh); }
			set { SetColumnValue(Columns.Xsphdh, value); }
		}
		  
		[XmlAttribute("Kcckdm")]
		[Bindable(true)]
		public string Kcckdm 
		{
			get { return GetColumnValue<string>(Columns.Kcckdm); }
			set { SetColumnValue(Columns.Kcckdm, value); }
		}
		  
		[XmlAttribute("Xtbmdm")]
		[Bindable(true)]
		public string Xtbmdm 
		{
			get { return GetColumnValue<string>(Columns.Xtbmdm); }
			set { SetColumnValue(Columns.Xtbmdm, value); }
		}
		  
		[XmlAttribute("Xsphzt")]
		[Bindable(true)]
		public string Xsphzt 
		{
			get { return GetColumnValue<string>(Columns.Xsphzt); }
			set { SetColumnValue(Columns.Xsphzt, value); }
		}
		  
		[XmlAttribute("Xsshry")]
		[Bindable(true)]
		public string Xsshry 
		{
			get { return GetColumnValue<string>(Columns.Xsshry); }
			set { SetColumnValue(Columns.Xsshry, value); }
		}
		  
		[XmlAttribute("Xsshrq")]
		[Bindable(true)]
		public DateTime? Xsshrq 
		{
			get { return GetColumnValue<DateTime?>(Columns.Xsshrq); }
			set { SetColumnValue(Columns.Xsshrq, value); }
		}
		  
		[XmlAttribute("Xsphbz")]
		[Bindable(true)]
		public string Xsphbz 
		{
			get { return GetColumnValue<string>(Columns.Xsphbz); }
			set { SetColumnValue(Columns.Xsphbz, value); }
		}
		  
		[XmlAttribute("Xsthbz")]
		[Bindable(true)]
		public string Xsthbz 
		{
			get { return GetColumnValue<string>(Columns.Xsthbz); }
			set { SetColumnValue(Columns.Xsthbz, value); }
		}
		  
		[XmlAttribute("Kcshck")]
		[Bindable(true)]
		public string Kcshck 
		{
			get { return GetColumnValue<string>(Columns.Kcshck); }
			set { SetColumnValue(Columns.Kcshck, value); }
		}
		  
		[XmlAttribute("Xsdzbz")]
		[Bindable(true)]
		public string Xsdzbz 
		{
			get { return GetColumnValue<string>(Columns.Xsdzbz); }
			set { SetColumnValue(Columns.Xsdzbz, value); }
		}
		  
		[XmlAttribute("Xsshzt")]
		[Bindable(true)]
		public string Xsshzt 
		{
			get { return GetColumnValue<string>(Columns.Xsshzt); }
			set { SetColumnValue(Columns.Xsshzt, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varXslrry,DateTime? varXslrrq,string varXtxsdm,string varXthbdm,decimal? varXtdhhl,string varXsphdh,string varKcckdm,string varXtbmdm,string varXsphzt,string varXsshry,DateTime? varXsshrq,string varXsphbz,string varXsthbz,string varKcshck,string varXsdzbz,string varXsshzt)
		{
			XST14 item = new XST14();
			
			item.Xslrry = varXslrry;
			
			item.Xslrrq = varXslrrq;
			
			item.Xtxsdm = varXtxsdm;
			
			item.Xthbdm = varXthbdm;
			
			item.Xtdhhl = varXtdhhl;
			
			item.Xsphdh = varXsphdh;
			
			item.Kcckdm = varKcckdm;
			
			item.Xtbmdm = varXtbmdm;
			
			item.Xsphzt = varXsphzt;
			
			item.Xsshry = varXsshry;
			
			item.Xsshrq = varXsshrq;
			
			item.Xsphbz = varXsphbz;
			
			item.Xsthbz = varXsthbz;
			
			item.Kcshck = varKcshck;
			
			item.Xsdzbz = varXsdzbz;
			
			item.Xsshzt = varXsshzt;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(string varXslrry,DateTime? varXslrrq,string varXtxsdm,string varXthbdm,decimal? varXtdhhl,string varXsphdh,string varKcckdm,string varXtbmdm,string varXsphzt,string varXsshry,DateTime? varXsshrq,string varXsphbz,string varXsthbz,string varKcshck,string varXsdzbz,string varXsshzt)
		{
			XST14 item = new XST14();
			
				item.Xslrry = varXslrry;
			
				item.Xslrrq = varXslrrq;
			
				item.Xtxsdm = varXtxsdm;
			
				item.Xthbdm = varXthbdm;
			
				item.Xtdhhl = varXtdhhl;
			
				item.Xsphdh = varXsphdh;
			
				item.Kcckdm = varKcckdm;
			
				item.Xtbmdm = varXtbmdm;
			
				item.Xsphzt = varXsphzt;
			
				item.Xsshry = varXsshry;
			
				item.Xsshrq = varXsshrq;
			
				item.Xsphbz = varXsphbz;
			
				item.Xsthbz = varXsthbz;
			
				item.Kcshck = varKcshck;
			
				item.Xsdzbz = varXsdzbz;
			
				item.Xsshzt = varXsshzt;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn XslrryColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn XslrrqColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn XtxsdmColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn XthbdmColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn XtdhhlColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn XsphdhColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn KcckdmColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn XtbmdmColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn XsphztColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn XsshryColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn XsshrqColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn XsphbzColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn XsthbzColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        public static TableSchema.TableColumn KcshckColumn
        {
            get { return Schema.Columns[13]; }
        }
        
        
        
        public static TableSchema.TableColumn XsdzbzColumn
        {
            get { return Schema.Columns[14]; }
        }
        
        
        
        public static TableSchema.TableColumn XsshztColumn
        {
            get { return Schema.Columns[15]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Xslrry = @"XSLRRY";
			 public static string Xslrrq = @"XSLRRQ";
			 public static string Xtxsdm = @"XTXSDM";
			 public static string Xthbdm = @"XTHBDM";
			 public static string Xtdhhl = @"XTDHHL";
			 public static string Xsphdh = @"XSPHDH";
			 public static string Kcckdm = @"KCCKDM";
			 public static string Xtbmdm = @"XTBMDM";
			 public static string Xsphzt = @"XSPHZT";
			 public static string Xsshry = @"XSSHRY";
			 public static string Xsshrq = @"XSSHRQ";
			 public static string Xsphbz = @"XSPHBZ";
			 public static string Xsthbz = @"XSTHBZ";
			 public static string Kcshck = @"KCSHCK";
			 public static string Xsdzbz = @"XSDZBZ";
			 public static string Xsshzt = @"XSSHZT";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}

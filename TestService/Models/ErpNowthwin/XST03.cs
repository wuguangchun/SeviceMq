using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace OracleDataDomain
{
	/// <summary>
	/// Strongly-typed collection for the XST03 class.
	/// </summary>
    [Serializable]
	public partial class XST03Collection : ActiveList<XST03, XST03Collection>
	{	   
		public XST03Collection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>XST03Collection</returns>
		public XST03Collection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                XST03 o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the XST03 table.
	/// </summary>
	[Serializable]
	public partial class XST03 : ActiveRecord<XST03>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public XST03()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public XST03(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public XST03(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public XST03(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("XST03", TableType.Table, DataService.GetInstance("ErpNowthwin"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"FYERP";
				//columns
				
				TableSchema.TableColumn colvarScdzbz = new TableSchema.TableColumn(schema);
				colvarScdzbz.ColumnName = "SCDZBZ";
				colvarScdzbz.DataType = DbType.String;
				colvarScdzbz.MaxLength = 1;
				colvarScdzbz.AutoIncrement = false;
				colvarScdzbz.IsNullable = true;
				colvarScdzbz.IsPrimaryKey = false;
				colvarScdzbz.IsForeignKey = false;
				colvarScdzbz.IsReadOnly = false;
				colvarScdzbz.DefaultSetting = @"";
				colvarScdzbz.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScdzbz);
				
				TableSchema.TableColumn colvarXtxsdm = new TableSchema.TableColumn(schema);
				colvarXtxsdm.ColumnName = "XTXSDM";
				colvarXtxsdm.DataType = DbType.String;
				colvarXtxsdm.MaxLength = 4;
				colvarXtxsdm.AutoIncrement = false;
				colvarXtxsdm.IsNullable = true;
				colvarXtxsdm.IsPrimaryKey = false;
				colvarXtxsdm.IsForeignKey = false;
				colvarXtxsdm.IsReadOnly = false;
				colvarXtxsdm.DefaultSetting = @"";
				colvarXtxsdm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXtxsdm);
				
				TableSchema.TableColumn colvarXthbdm = new TableSchema.TableColumn(schema);
				colvarXthbdm.ColumnName = "XTHBDM";
				colvarXthbdm.DataType = DbType.String;
				colvarXthbdm.MaxLength = 3;
				colvarXthbdm.AutoIncrement = false;
				colvarXthbdm.IsNullable = true;
				colvarXthbdm.IsPrimaryKey = false;
				colvarXthbdm.IsForeignKey = false;
				colvarXthbdm.IsReadOnly = false;
				colvarXthbdm.DefaultSetting = @"";
				colvarXthbdm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXthbdm);
				
				TableSchema.TableColumn colvarXtdhhl = new TableSchema.TableColumn(schema);
				colvarXtdhhl.ColumnName = "XTDHHL";
				colvarXtdhhl.DataType = DbType.Decimal;
				colvarXtdhhl.MaxLength = 0;
				colvarXtdhhl.AutoIncrement = false;
				colvarXtdhhl.IsNullable = true;
				colvarXtdhhl.IsPrimaryKey = false;
				colvarXtdhhl.IsForeignKey = false;
				colvarXtdhhl.IsReadOnly = false;
				colvarXtdhhl.DefaultSetting = @"";
				colvarXtdhhl.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXtdhhl);
				
				TableSchema.TableColumn colvarXsthdh = new TableSchema.TableColumn(schema);
				colvarXsthdh.ColumnName = "XSTHDH";
				colvarXsthdh.DataType = DbType.String;
				colvarXsthdh.MaxLength = 12;
				colvarXsthdh.AutoIncrement = false;
				colvarXsthdh.IsNullable = false;
				colvarXsthdh.IsPrimaryKey = true;
				colvarXsthdh.IsForeignKey = false;
				colvarXsthdh.IsReadOnly = false;
				colvarXsthdh.DefaultSetting = @"";
				colvarXsthdh.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXsthdh);
				
				TableSchema.TableColumn colvarXtwldm = new TableSchema.TableColumn(schema);
				colvarXtwldm.ColumnName = "XTWLDM";
				colvarXtwldm.DataType = DbType.String;
				colvarXtwldm.MaxLength = 8;
				colvarXtwldm.AutoIncrement = false;
				colvarXtwldm.IsNullable = false;
				colvarXtwldm.IsPrimaryKey = false;
				colvarXtwldm.IsForeignKey = false;
				colvarXtwldm.IsReadOnly = false;
				colvarXtwldm.DefaultSetting = @"";
				colvarXtwldm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXtwldm);
				
				TableSchema.TableColumn colvarXtbmdm = new TableSchema.TableColumn(schema);
				colvarXtbmdm.ColumnName = "XTBMDM";
				colvarXtbmdm.DataType = DbType.String;
				colvarXtbmdm.MaxLength = 8;
				colvarXtbmdm.AutoIncrement = false;
				colvarXtbmdm.IsNullable = true;
				colvarXtbmdm.IsPrimaryKey = false;
				colvarXtbmdm.IsForeignKey = false;
				colvarXtbmdm.IsReadOnly = false;
				colvarXtbmdm.DefaultSetting = @"";
				colvarXtbmdm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXtbmdm);
				
				TableSchema.TableColumn colvarXsxsdb = new TableSchema.TableColumn(schema);
				colvarXsxsdb.ColumnName = "XSXSDB";
				colvarXsxsdb.DataType = DbType.String;
				colvarXsxsdb.MaxLength = 20;
				colvarXsxsdb.AutoIncrement = false;
				colvarXsxsdb.IsNullable = true;
				colvarXsxsdb.IsPrimaryKey = false;
				colvarXsxsdb.IsForeignKey = false;
				colvarXsxsdb.IsReadOnly = false;
				colvarXsxsdb.DefaultSetting = @"";
				colvarXsxsdb.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXsxsdb);
				
				TableSchema.TableColumn colvarXsddhm = new TableSchema.TableColumn(schema);
				colvarXsddhm.ColumnName = "XSDDHM";
				colvarXsddhm.DataType = DbType.String;
				colvarXsddhm.MaxLength = 12;
				colvarXsddhm.AutoIncrement = false;
				colvarXsddhm.IsNullable = true;
				colvarXsddhm.IsPrimaryKey = false;
				colvarXsddhm.IsForeignKey = false;
				colvarXsddhm.IsReadOnly = false;
				colvarXsddhm.DefaultSetting = @"";
				colvarXsddhm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXsddhm);
				
				TableSchema.TableColumn colvarKcckdm = new TableSchema.TableColumn(schema);
				colvarKcckdm.ColumnName = "KCCKDM";
				colvarKcckdm.DataType = DbType.String;
				colvarKcckdm.MaxLength = 8;
				colvarKcckdm.AutoIncrement = false;
				colvarKcckdm.IsNullable = true;
				colvarKcckdm.IsPrimaryKey = false;
				colvarKcckdm.IsForeignKey = false;
				colvarKcckdm.IsReadOnly = false;
				colvarKcckdm.DefaultSetting = @"";
				colvarKcckdm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarKcckdm);
				
				TableSchema.TableColumn colvarXsddth = new TableSchema.TableColumn(schema);
				colvarXsddth.ColumnName = "XSDDTH";
				colvarXsddth.DataType = DbType.String;
				colvarXsddth.MaxLength = 1;
				colvarXsddth.AutoIncrement = false;
				colvarXsddth.IsNullable = true;
				colvarXsddth.IsPrimaryKey = false;
				colvarXsddth.IsForeignKey = false;
				colvarXsddth.IsReadOnly = false;
				colvarXsddth.DefaultSetting = @"";
				colvarXsddth.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXsddth);
				
				TableSchema.TableColumn colvarXtjhdd = new TableSchema.TableColumn(schema);
				colvarXtjhdd.ColumnName = "XTJHDD";
				colvarXtjhdd.DataType = DbType.String;
				colvarXtjhdd.MaxLength = 40;
				colvarXtjhdd.AutoIncrement = false;
				colvarXtjhdd.IsNullable = true;
				colvarXtjhdd.IsPrimaryKey = false;
				colvarXtjhdd.IsForeignKey = false;
				colvarXtjhdd.IsReadOnly = false;
				colvarXtjhdd.DefaultSetting = @"";
				colvarXtjhdd.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXtjhdd);
				
				TableSchema.TableColumn colvarXsysfs = new TableSchema.TableColumn(schema);
				colvarXsysfs.ColumnName = "XSYSFS";
				colvarXsysfs.DataType = DbType.String;
				colvarXsysfs.MaxLength = 4;
				colvarXsysfs.AutoIncrement = false;
				colvarXsysfs.IsNullable = true;
				colvarXsysfs.IsPrimaryKey = false;
				colvarXsysfs.IsForeignKey = false;
				colvarXsysfs.IsReadOnly = false;
				colvarXsysfs.DefaultSetting = @"";
				colvarXsysfs.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXsysfs);
				
				TableSchema.TableColumn colvarXsxqrq = new TableSchema.TableColumn(schema);
				colvarXsxqrq.ColumnName = "XSXQRQ";
				colvarXsxqrq.DataType = DbType.DateTime;
				colvarXsxqrq.MaxLength = 0;
				colvarXsxqrq.AutoIncrement = false;
				colvarXsxqrq.IsNullable = true;
				colvarXsxqrq.IsPrimaryKey = false;
				colvarXsxqrq.IsForeignKey = false;
				colvarXsxqrq.IsReadOnly = false;
				colvarXsxqrq.DefaultSetting = @"";
				colvarXsxqrq.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXsxqrq);
				
				TableSchema.TableColumn colvarXstdze = new TableSchema.TableColumn(schema);
				colvarXstdze.ColumnName = "XSTDZE";
				colvarXstdze.DataType = DbType.Decimal;
				colvarXstdze.MaxLength = 0;
				colvarXstdze.AutoIncrement = false;
				colvarXstdze.IsNullable = true;
				colvarXstdze.IsPrimaryKey = false;
				colvarXstdze.IsForeignKey = false;
				colvarXstdze.IsReadOnly = false;
				colvarXstdze.DefaultSetting = @"";
				colvarXstdze.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXstdze);
				
				TableSchema.TableColumn colvarXsthrq = new TableSchema.TableColumn(schema);
				colvarXsthrq.ColumnName = "XSTHRQ";
				colvarXsthrq.DataType = DbType.DateTime;
				colvarXsthrq.MaxLength = 0;
				colvarXsthrq.AutoIncrement = false;
				colvarXsthrq.IsNullable = true;
				colvarXsthrq.IsPrimaryKey = false;
				colvarXsthrq.IsForeignKey = false;
				colvarXsthrq.IsReadOnly = false;
				colvarXsthrq.DefaultSetting = @"";
				colvarXsthrq.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXsthrq);
				
				TableSchema.TableColumn colvarXskjnd = new TableSchema.TableColumn(schema);
				colvarXskjnd.ColumnName = "XSKJND";
				colvarXskjnd.DataType = DbType.Decimal;
				colvarXskjnd.MaxLength = 0;
				colvarXskjnd.AutoIncrement = false;
				colvarXskjnd.IsNullable = true;
				colvarXskjnd.IsPrimaryKey = false;
				colvarXskjnd.IsForeignKey = false;
				colvarXskjnd.IsReadOnly = false;
				colvarXskjnd.DefaultSetting = @"";
				colvarXskjnd.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXskjnd);
				
				TableSchema.TableColumn colvarXskjyf = new TableSchema.TableColumn(schema);
				colvarXskjyf.ColumnName = "XSKJYF";
				colvarXskjyf.DataType = DbType.Decimal;
				colvarXskjyf.MaxLength = 0;
				colvarXskjyf.AutoIncrement = false;
				colvarXskjyf.IsNullable = true;
				colvarXskjyf.IsPrimaryKey = false;
				colvarXskjyf.IsForeignKey = false;
				colvarXskjyf.IsReadOnly = false;
				colvarXskjyf.DefaultSetting = @"";
				colvarXskjyf.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXskjyf);
				
				TableSchema.TableColumn colvarXstdzt = new TableSchema.TableColumn(schema);
				colvarXstdzt.ColumnName = "XSTDZT";
				colvarXstdzt.DataType = DbType.String;
				colvarXstdzt.MaxLength = 1;
				colvarXstdzt.AutoIncrement = false;
				colvarXstdzt.IsNullable = true;
				colvarXstdzt.IsPrimaryKey = false;
				colvarXstdzt.IsForeignKey = false;
				colvarXstdzt.IsReadOnly = false;
				colvarXstdzt.DefaultSetting = @"";
				colvarXstdzt.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXstdzt);
				
				TableSchema.TableColumn colvarXsthbz = new TableSchema.TableColumn(schema);
				colvarXsthbz.ColumnName = "XSTHBZ";
				colvarXsthbz.DataType = DbType.String;
				colvarXsthbz.MaxLength = 1;
				colvarXsthbz.AutoIncrement = false;
				colvarXsthbz.IsNullable = true;
				colvarXsthbz.IsPrimaryKey = false;
				colvarXsthbz.IsForeignKey = false;
				colvarXsthbz.IsReadOnly = false;
				colvarXsthbz.DefaultSetting = @"";
				colvarXsthbz.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXsthbz);
				
				TableSchema.TableColumn colvarXslrry = new TableSchema.TableColumn(schema);
				colvarXslrry.ColumnName = "XSLRRY";
				colvarXslrry.DataType = DbType.String;
				colvarXslrry.MaxLength = 8;
				colvarXslrry.AutoIncrement = false;
				colvarXslrry.IsNullable = true;
				colvarXslrry.IsPrimaryKey = false;
				colvarXslrry.IsForeignKey = false;
				colvarXslrry.IsReadOnly = false;
				colvarXslrry.DefaultSetting = @"";
				colvarXslrry.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXslrry);
				
				TableSchema.TableColumn colvarXslrrq = new TableSchema.TableColumn(schema);
				colvarXslrrq.ColumnName = "XSLRRQ";
				colvarXslrrq.DataType = DbType.DateTime;
				colvarXslrrq.MaxLength = 0;
				colvarXslrrq.AutoIncrement = false;
				colvarXslrrq.IsNullable = true;
				colvarXslrrq.IsPrimaryKey = false;
				colvarXslrrq.IsForeignKey = false;
				colvarXslrrq.IsReadOnly = false;
				colvarXslrrq.DefaultSetting = @"";
				colvarXslrrq.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXslrrq);
				
				TableSchema.TableColumn colvarXsshry = new TableSchema.TableColumn(schema);
				colvarXsshry.ColumnName = "XSSHRY";
				colvarXsshry.DataType = DbType.String;
				colvarXsshry.MaxLength = 8;
				colvarXsshry.AutoIncrement = false;
				colvarXsshry.IsNullable = true;
				colvarXsshry.IsPrimaryKey = false;
				colvarXsshry.IsForeignKey = false;
				colvarXsshry.IsReadOnly = false;
				colvarXsshry.DefaultSetting = @"";
				colvarXsshry.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXsshry);
				
				TableSchema.TableColumn colvarXsshrq = new TableSchema.TableColumn(schema);
				colvarXsshrq.ColumnName = "XSSHRQ";
				colvarXsshrq.DataType = DbType.DateTime;
				colvarXsshrq.MaxLength = 0;
				colvarXsshrq.AutoIncrement = false;
				colvarXsshrq.IsNullable = true;
				colvarXsshrq.IsPrimaryKey = false;
				colvarXsshrq.IsForeignKey = false;
				colvarXsshrq.IsReadOnly = false;
				colvarXsshrq.DefaultSetting = @"";
				colvarXsshrq.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXsshrq);
				
				TableSchema.TableColumn colvarXsxslx = new TableSchema.TableColumn(schema);
				colvarXsxslx.ColumnName = "XSXSLX";
				colvarXsxslx.DataType = DbType.String;
				colvarXsxslx.MaxLength = 1;
				colvarXsxslx.AutoIncrement = false;
				colvarXsxslx.IsNullable = true;
				colvarXsxslx.IsPrimaryKey = false;
				colvarXsxslx.IsForeignKey = false;
				colvarXsxslx.IsReadOnly = false;
				colvarXsxslx.DefaultSetting = @"";
				colvarXsxslx.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXsxslx);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ErpNowthwin"].AddSchema("XST03",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Scdzbz")]
		[Bindable(true)]
		public string Scdzbz 
		{
			get { return GetColumnValue<string>(Columns.Scdzbz); }
			set { SetColumnValue(Columns.Scdzbz, value); }
		}
		  
		[XmlAttribute("Xtxsdm")]
		[Bindable(true)]
		public string Xtxsdm 
		{
			get { return GetColumnValue<string>(Columns.Xtxsdm); }
			set { SetColumnValue(Columns.Xtxsdm, value); }
		}
		  
		[XmlAttribute("Xthbdm")]
		[Bindable(true)]
		public string Xthbdm 
		{
			get { return GetColumnValue<string>(Columns.Xthbdm); }
			set { SetColumnValue(Columns.Xthbdm, value); }
		}
		  
		[XmlAttribute("Xtdhhl")]
		[Bindable(true)]
		public decimal? Xtdhhl 
		{
			get { return GetColumnValue<decimal?>(Columns.Xtdhhl); }
			set { SetColumnValue(Columns.Xtdhhl, value); }
		}
		  
		[XmlAttribute("Xsthdh")]
		[Bindable(true)]
		public string Xsthdh 
		{
			get { return GetColumnValue<string>(Columns.Xsthdh); }
			set { SetColumnValue(Columns.Xsthdh, value); }
		}
		  
		[XmlAttribute("Xtwldm")]
		[Bindable(true)]
		public string Xtwldm 
		{
			get { return GetColumnValue<string>(Columns.Xtwldm); }
			set { SetColumnValue(Columns.Xtwldm, value); }
		}
		  
		[XmlAttribute("Xtbmdm")]
		[Bindable(true)]
		public string Xtbmdm 
		{
			get { return GetColumnValue<string>(Columns.Xtbmdm); }
			set { SetColumnValue(Columns.Xtbmdm, value); }
		}
		  
		[XmlAttribute("Xsxsdb")]
		[Bindable(true)]
		public string Xsxsdb 
		{
			get { return GetColumnValue<string>(Columns.Xsxsdb); }
			set { SetColumnValue(Columns.Xsxsdb, value); }
		}
		  
		[XmlAttribute("Xsddhm")]
		[Bindable(true)]
		public string Xsddhm 
		{
			get { return GetColumnValue<string>(Columns.Xsddhm); }
			set { SetColumnValue(Columns.Xsddhm, value); }
		}
		  
		[XmlAttribute("Kcckdm")]
		[Bindable(true)]
		public string Kcckdm 
		{
			get { return GetColumnValue<string>(Columns.Kcckdm); }
			set { SetColumnValue(Columns.Kcckdm, value); }
		}
		  
		[XmlAttribute("Xsddth")]
		[Bindable(true)]
		public string Xsddth 
		{
			get { return GetColumnValue<string>(Columns.Xsddth); }
			set { SetColumnValue(Columns.Xsddth, value); }
		}
		  
		[XmlAttribute("Xtjhdd")]
		[Bindable(true)]
		public string Xtjhdd 
		{
			get { return GetColumnValue<string>(Columns.Xtjhdd); }
			set { SetColumnValue(Columns.Xtjhdd, value); }
		}
		  
		[XmlAttribute("Xsysfs")]
		[Bindable(true)]
		public string Xsysfs 
		{
			get { return GetColumnValue<string>(Columns.Xsysfs); }
			set { SetColumnValue(Columns.Xsysfs, value); }
		}
		  
		[XmlAttribute("Xsxqrq")]
		[Bindable(true)]
		public DateTime? Xsxqrq 
		{
			get { return GetColumnValue<DateTime?>(Columns.Xsxqrq); }
			set { SetColumnValue(Columns.Xsxqrq, value); }
		}
		  
		[XmlAttribute("Xstdze")]
		[Bindable(true)]
		public decimal? Xstdze 
		{
			get { return GetColumnValue<decimal?>(Columns.Xstdze); }
			set { SetColumnValue(Columns.Xstdze, value); }
		}
		  
		[XmlAttribute("Xsthrq")]
		[Bindable(true)]
		public DateTime? Xsthrq 
		{
			get { return GetColumnValue<DateTime?>(Columns.Xsthrq); }
			set { SetColumnValue(Columns.Xsthrq, value); }
		}
		  
		[XmlAttribute("Xskjnd")]
		[Bindable(true)]
		public decimal? Xskjnd 
		{
			get { return GetColumnValue<decimal?>(Columns.Xskjnd); }
			set { SetColumnValue(Columns.Xskjnd, value); }
		}
		  
		[XmlAttribute("Xskjyf")]
		[Bindable(true)]
		public decimal? Xskjyf 
		{
			get { return GetColumnValue<decimal?>(Columns.Xskjyf); }
			set { SetColumnValue(Columns.Xskjyf, value); }
		}
		  
		[XmlAttribute("Xstdzt")]
		[Bindable(true)]
		public string Xstdzt 
		{
			get { return GetColumnValue<string>(Columns.Xstdzt); }
			set { SetColumnValue(Columns.Xstdzt, value); }
		}
		  
		[XmlAttribute("Xsthbz")]
		[Bindable(true)]
		public string Xsthbz 
		{
			get { return GetColumnValue<string>(Columns.Xsthbz); }
			set { SetColumnValue(Columns.Xsthbz, value); }
		}
		  
		[XmlAttribute("Xslrry")]
		[Bindable(true)]
		public string Xslrry 
		{
			get { return GetColumnValue<string>(Columns.Xslrry); }
			set { SetColumnValue(Columns.Xslrry, value); }
		}
		  
		[XmlAttribute("Xslrrq")]
		[Bindable(true)]
		public DateTime? Xslrrq 
		{
			get { return GetColumnValue<DateTime?>(Columns.Xslrrq); }
			set { SetColumnValue(Columns.Xslrrq, value); }
		}
		  
		[XmlAttribute("Xsshry")]
		[Bindable(true)]
		public string Xsshry 
		{
			get { return GetColumnValue<string>(Columns.Xsshry); }
			set { SetColumnValue(Columns.Xsshry, value); }
		}
		  
		[XmlAttribute("Xsshrq")]
		[Bindable(true)]
		public DateTime? Xsshrq 
		{
			get { return GetColumnValue<DateTime?>(Columns.Xsshrq); }
			set { SetColumnValue(Columns.Xsshrq, value); }
		}
		  
		[XmlAttribute("Xsxslx")]
		[Bindable(true)]
		public string Xsxslx 
		{
			get { return GetColumnValue<string>(Columns.Xsxslx); }
			set { SetColumnValue(Columns.Xsxslx, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varScdzbz,string varXtxsdm,string varXthbdm,decimal? varXtdhhl,string varXsthdh,string varXtwldm,string varXtbmdm,string varXsxsdb,string varXsddhm,string varKcckdm,string varXsddth,string varXtjhdd,string varXsysfs,DateTime? varXsxqrq,decimal? varXstdze,DateTime? varXsthrq,decimal? varXskjnd,decimal? varXskjyf,string varXstdzt,string varXsthbz,string varXslrry,DateTime? varXslrrq,string varXsshry,DateTime? varXsshrq,string varXsxslx)
		{
			XST03 item = new XST03();
			
			item.Scdzbz = varScdzbz;
			
			item.Xtxsdm = varXtxsdm;
			
			item.Xthbdm = varXthbdm;
			
			item.Xtdhhl = varXtdhhl;
			
			item.Xsthdh = varXsthdh;
			
			item.Xtwldm = varXtwldm;
			
			item.Xtbmdm = varXtbmdm;
			
			item.Xsxsdb = varXsxsdb;
			
			item.Xsddhm = varXsddhm;
			
			item.Kcckdm = varKcckdm;
			
			item.Xsddth = varXsddth;
			
			item.Xtjhdd = varXtjhdd;
			
			item.Xsysfs = varXsysfs;
			
			item.Xsxqrq = varXsxqrq;
			
			item.Xstdze = varXstdze;
			
			item.Xsthrq = varXsthrq;
			
			item.Xskjnd = varXskjnd;
			
			item.Xskjyf = varXskjyf;
			
			item.Xstdzt = varXstdzt;
			
			item.Xsthbz = varXsthbz;
			
			item.Xslrry = varXslrry;
			
			item.Xslrrq = varXslrrq;
			
			item.Xsshry = varXsshry;
			
			item.Xsshrq = varXsshrq;
			
			item.Xsxslx = varXsxslx;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(string varScdzbz,string varXtxsdm,string varXthbdm,decimal? varXtdhhl,string varXsthdh,string varXtwldm,string varXtbmdm,string varXsxsdb,string varXsddhm,string varKcckdm,string varXsddth,string varXtjhdd,string varXsysfs,DateTime? varXsxqrq,decimal? varXstdze,DateTime? varXsthrq,decimal? varXskjnd,decimal? varXskjyf,string varXstdzt,string varXsthbz,string varXslrry,DateTime? varXslrrq,string varXsshry,DateTime? varXsshrq,string varXsxslx)
		{
			XST03 item = new XST03();
			
				item.Scdzbz = varScdzbz;
			
				item.Xtxsdm = varXtxsdm;
			
				item.Xthbdm = varXthbdm;
			
				item.Xtdhhl = varXtdhhl;
			
				item.Xsthdh = varXsthdh;
			
				item.Xtwldm = varXtwldm;
			
				item.Xtbmdm = varXtbmdm;
			
				item.Xsxsdb = varXsxsdb;
			
				item.Xsddhm = varXsddhm;
			
				item.Kcckdm = varKcckdm;
			
				item.Xsddth = varXsddth;
			
				item.Xtjhdd = varXtjhdd;
			
				item.Xsysfs = varXsysfs;
			
				item.Xsxqrq = varXsxqrq;
			
				item.Xstdze = varXstdze;
			
				item.Xsthrq = varXsthrq;
			
				item.Xskjnd = varXskjnd;
			
				item.Xskjyf = varXskjyf;
			
				item.Xstdzt = varXstdzt;
			
				item.Xsthbz = varXsthbz;
			
				item.Xslrry = varXslrry;
			
				item.Xslrrq = varXslrrq;
			
				item.Xsshry = varXsshry;
			
				item.Xsshrq = varXsshrq;
			
				item.Xsxslx = varXsxslx;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn ScdzbzColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn XtxsdmColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn XthbdmColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn XtdhhlColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn XsthdhColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn XtwldmColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn XtbmdmColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn XsxsdbColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn XsddhmColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn KcckdmColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn XsddthColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn XtjhddColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn XsysfsColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        public static TableSchema.TableColumn XsxqrqColumn
        {
            get { return Schema.Columns[13]; }
        }
        
        
        
        public static TableSchema.TableColumn XstdzeColumn
        {
            get { return Schema.Columns[14]; }
        }
        
        
        
        public static TableSchema.TableColumn XsthrqColumn
        {
            get { return Schema.Columns[15]; }
        }
        
        
        
        public static TableSchema.TableColumn XskjndColumn
        {
            get { return Schema.Columns[16]; }
        }
        
        
        
        public static TableSchema.TableColumn XskjyfColumn
        {
            get { return Schema.Columns[17]; }
        }
        
        
        
        public static TableSchema.TableColumn XstdztColumn
        {
            get { return Schema.Columns[18]; }
        }
        
        
        
        public static TableSchema.TableColumn XsthbzColumn
        {
            get { return Schema.Columns[19]; }
        }
        
        
        
        public static TableSchema.TableColumn XslrryColumn
        {
            get { return Schema.Columns[20]; }
        }
        
        
        
        public static TableSchema.TableColumn XslrrqColumn
        {
            get { return Schema.Columns[21]; }
        }
        
        
        
        public static TableSchema.TableColumn XsshryColumn
        {
            get { return Schema.Columns[22]; }
        }
        
        
        
        public static TableSchema.TableColumn XsshrqColumn
        {
            get { return Schema.Columns[23]; }
        }
        
        
        
        public static TableSchema.TableColumn XsxslxColumn
        {
            get { return Schema.Columns[24]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Scdzbz = @"SCDZBZ";
			 public static string Xtxsdm = @"XTXSDM";
			 public static string Xthbdm = @"XTHBDM";
			 public static string Xtdhhl = @"XTDHHL";
			 public static string Xsthdh = @"XSTHDH";
			 public static string Xtwldm = @"XTWLDM";
			 public static string Xtbmdm = @"XTBMDM";
			 public static string Xsxsdb = @"XSXSDB";
			 public static string Xsddhm = @"XSDDHM";
			 public static string Kcckdm = @"KCCKDM";
			 public static string Xsddth = @"XSDDTH";
			 public static string Xtjhdd = @"XTJHDD";
			 public static string Xsysfs = @"XSYSFS";
			 public static string Xsxqrq = @"XSXQRQ";
			 public static string Xstdze = @"XSTDZE";
			 public static string Xsthrq = @"XSTHRQ";
			 public static string Xskjnd = @"XSKJND";
			 public static string Xskjyf = @"XSKJYF";
			 public static string Xstdzt = @"XSTDZT";
			 public static string Xsthbz = @"XSTHBZ";
			 public static string Xslrry = @"XSLRRY";
			 public static string Xslrrq = @"XSLRRQ";
			 public static string Xsshry = @"XSSHRY";
			 public static string Xsshrq = @"XSSHRQ";
			 public static string Xsxslx = @"XSXSLX";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}

using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace OracleDataDomain
{
	/// <summary>
	/// Strongly-typed collection for the SCT282 class.
	/// </summary>
    [Serializable]
	public partial class SCT282Collection : ActiveList<SCT282, SCT282Collection>
	{	   
		public SCT282Collection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>SCT282Collection</returns>
		public SCT282Collection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                SCT282 o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the SCT282 table.
	/// </summary>
	[Serializable]
	public partial class SCT282 : ActiveRecord<SCT282>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public SCT282()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public SCT282(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public SCT282(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public SCT282(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("SCT282", TableType.Table, DataService.GetInstance("ErpNowthwin"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"FYERP";
				//columns
				
				TableSchema.TableColumn colvarSczsbh = new TableSchema.TableColumn(schema);
				colvarSczsbh.ColumnName = "SCZSBH";
				colvarSczsbh.DataType = DbType.String;
				colvarSczsbh.MaxLength = 12;
				colvarSczsbh.AutoIncrement = false;
				colvarSczsbh.IsNullable = false;
				colvarSczsbh.IsPrimaryKey = true;
				colvarSczsbh.IsForeignKey = false;
				colvarSczsbh.IsReadOnly = false;
				colvarSczsbh.DefaultSetting = @"";
				colvarSczsbh.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSczsbh);
				
				TableSchema.TableColumn colvarSchtbh = new TableSchema.TableColumn(schema);
				colvarSchtbh.ColumnName = "SCHTBH";
				colvarSchtbh.DataType = DbType.String;
				colvarSchtbh.MaxLength = 12;
				colvarSchtbh.AutoIncrement = false;
				colvarSchtbh.IsNullable = false;
				colvarSchtbh.IsPrimaryKey = true;
				colvarSchtbh.IsForeignKey = false;
				colvarSchtbh.IsReadOnly = false;
				colvarSchtbh.DefaultSetting = @"";
				colvarSchtbh.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSchtbh);
				
				TableSchema.TableColumn colvarXtwpks = new TableSchema.TableColumn(schema);
				colvarXtwpks.ColumnName = "XTWPKS";
				colvarXtwpks.DataType = DbType.String;
				colvarXtwpks.MaxLength = 20;
				colvarXtwpks.AutoIncrement = false;
				colvarXtwpks.IsNullable = false;
				colvarXtwpks.IsPrimaryKey = true;
				colvarXtwpks.IsForeignKey = false;
				colvarXtwpks.IsReadOnly = false;
				colvarXtwpks.DefaultSetting = @"";
				colvarXtwpks.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXtwpks);
				
				TableSchema.TableColumn colvarXtwpys = new TableSchema.TableColumn(schema);
				colvarXtwpys.ColumnName = "XTWPYS";
				colvarXtwpys.DataType = DbType.String;
				colvarXtwpys.MaxLength = 20;
				colvarXtwpys.AutoIncrement = false;
				colvarXtwpys.IsNullable = false;
				colvarXtwpys.IsPrimaryKey = true;
				colvarXtwpys.IsForeignKey = false;
				colvarXtwpys.IsReadOnly = false;
				colvarXtwpys.DefaultSetting = @"";
				colvarXtwpys.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXtwpys);
				
				TableSchema.TableColumn colvarScclxh = new TableSchema.TableColumn(schema);
				colvarScclxh.ColumnName = "SCCLXH";
				colvarScclxh.DataType = DbType.Decimal;
				colvarScclxh.MaxLength = 0;
				colvarScclxh.AutoIncrement = false;
				colvarScclxh.IsNullable = false;
				colvarScclxh.IsPrimaryKey = true;
				colvarScclxh.IsForeignKey = false;
				colvarScclxh.IsReadOnly = false;
				colvarScclxh.DefaultSetting = @"";
				colvarScclxh.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScclxh);
				
				TableSchema.TableColumn colvarScfddm = new TableSchema.TableColumn(schema);
				colvarScfddm.ColumnName = "SCFDDM";
				colvarScfddm.DataType = DbType.String;
				colvarScfddm.MaxLength = 10;
				colvarScfddm.AutoIncrement = false;
				colvarScfddm.IsNullable = true;
				colvarScfddm.IsPrimaryKey = false;
				colvarScfddm.IsForeignKey = false;
				colvarScfddm.IsReadOnly = false;
				colvarScfddm.DefaultSetting = @"";
				colvarScfddm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScfddm);
				
				TableSchema.TableColumn colvarXttxhm = new TableSchema.TableColumn(schema);
				colvarXttxhm.ColumnName = "XTTXHM";
				colvarXttxhm.DataType = DbType.String;
				colvarXttxhm.MaxLength = 18;
				colvarXttxhm.AutoIncrement = false;
				colvarXttxhm.IsNullable = true;
				colvarXttxhm.IsPrimaryKey = false;
				colvarXttxhm.IsForeignKey = false;
				colvarXttxhm.IsReadOnly = false;
				colvarXttxhm.DefaultSetting = @"";
				colvarXttxhm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXttxhm);
				
				TableSchema.TableColumn colvarScbzyl = new TableSchema.TableColumn(schema);
				colvarScbzyl.ColumnName = "SCBZYL";
				colvarScbzyl.DataType = DbType.Decimal;
				colvarScbzyl.MaxLength = 0;
				colvarScbzyl.AutoIncrement = false;
				colvarScbzyl.IsNullable = true;
				colvarScbzyl.IsPrimaryKey = false;
				colvarScbzyl.IsForeignKey = false;
				colvarScbzyl.IsReadOnly = false;
				colvarScbzyl.DefaultSetting = @"";
				colvarScbzyl.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScbzyl);
				
				TableSchema.TableColumn colvarScgcsh = new TableSchema.TableColumn(schema);
				colvarScgcsh.ColumnName = "SCGCSH";
				colvarScgcsh.DataType = DbType.Decimal;
				colvarScgcsh.MaxLength = 0;
				colvarScgcsh.AutoIncrement = false;
				colvarScgcsh.IsNullable = true;
				colvarScgcsh.IsPrimaryKey = false;
				colvarScgcsh.IsForeignKey = false;
				colvarScgcsh.IsReadOnly = false;
				colvarScgcsh.DefaultSetting = @"";
				colvarScgcsh.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScgcsh);
				
				TableSchema.TableColumn colvarScyfsl = new TableSchema.TableColumn(schema);
				colvarScyfsl.ColumnName = "SCYFSL";
				colvarScyfsl.DataType = DbType.Decimal;
				colvarScyfsl.MaxLength = 0;
				colvarScyfsl.AutoIncrement = false;
				colvarScyfsl.IsNullable = true;
				colvarScyfsl.IsPrimaryKey = false;
				colvarScyfsl.IsForeignKey = false;
				colvarScyfsl.IsReadOnly = false;
				colvarScyfsl.DefaultSetting = @"";
				colvarScyfsl.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScyfsl);
				
				TableSchema.TableColumn colvarScytdm = new TableSchema.TableColumn(schema);
				colvarScytdm.ColumnName = "SCYTDM";
				colvarScytdm.DataType = DbType.String;
				colvarScytdm.MaxLength = 2;
				colvarScytdm.AutoIncrement = false;
				colvarScytdm.IsNullable = true;
				colvarScytdm.IsPrimaryKey = false;
				colvarScytdm.IsForeignKey = false;
				colvarScytdm.IsReadOnly = false;
				colvarScytdm.DefaultSetting = @"";
				colvarScytdm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScytdm);
				
				TableSchema.TableColumn colvarScylbz = new TableSchema.TableColumn(schema);
				colvarScylbz.ColumnName = "SCYLBZ";
				colvarScylbz.DataType = DbType.String;
				colvarScylbz.MaxLength = 100;
				colvarScylbz.AutoIncrement = false;
				colvarScylbz.IsNullable = true;
				colvarScylbz.IsPrimaryKey = false;
				colvarScylbz.IsForeignKey = false;
				colvarScylbz.IsReadOnly = false;
				colvarScylbz.DefaultSetting = @"";
				colvarScylbz.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScylbz);
				
				TableSchema.TableColumn colvarScglbz = new TableSchema.TableColumn(schema);
				colvarScglbz.ColumnName = "SCGLBZ";
				colvarScglbz.DataType = DbType.String;
				colvarScglbz.MaxLength = 1;
				colvarScglbz.AutoIncrement = false;
				colvarScglbz.IsNullable = true;
				colvarScglbz.IsPrimaryKey = false;
				colvarScglbz.IsForeignKey = false;
				colvarScglbz.IsReadOnly = false;
				colvarScglbz.DefaultSetting = @"";
				colvarScglbz.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScglbz);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ErpNowthwin"].AddSchema("SCT282",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Sczsbh")]
		[Bindable(true)]
		public string Sczsbh 
		{
			get { return GetColumnValue<string>(Columns.Sczsbh); }
			set { SetColumnValue(Columns.Sczsbh, value); }
		}
		  
		[XmlAttribute("Schtbh")]
		[Bindable(true)]
		public string Schtbh 
		{
			get { return GetColumnValue<string>(Columns.Schtbh); }
			set { SetColumnValue(Columns.Schtbh, value); }
		}
		  
		[XmlAttribute("Xtwpks")]
		[Bindable(true)]
		public string Xtwpks 
		{
			get { return GetColumnValue<string>(Columns.Xtwpks); }
			set { SetColumnValue(Columns.Xtwpks, value); }
		}
		  
		[XmlAttribute("Xtwpys")]
		[Bindable(true)]
		public string Xtwpys 
		{
			get { return GetColumnValue<string>(Columns.Xtwpys); }
			set { SetColumnValue(Columns.Xtwpys, value); }
		}
		  
		[XmlAttribute("Scclxh")]
		[Bindable(true)]
		public decimal Scclxh 
		{
			get { return GetColumnValue<decimal>(Columns.Scclxh); }
			set { SetColumnValue(Columns.Scclxh, value); }
		}
		  
		[XmlAttribute("Scfddm")]
		[Bindable(true)]
		public string Scfddm 
		{
			get { return GetColumnValue<string>(Columns.Scfddm); }
			set { SetColumnValue(Columns.Scfddm, value); }
		}
		  
		[XmlAttribute("Xttxhm")]
		[Bindable(true)]
		public string Xttxhm 
		{
			get { return GetColumnValue<string>(Columns.Xttxhm); }
			set { SetColumnValue(Columns.Xttxhm, value); }
		}
		  
		[XmlAttribute("Scbzyl")]
		[Bindable(true)]
		public decimal? Scbzyl 
		{
			get { return GetColumnValue<decimal?>(Columns.Scbzyl); }
			set { SetColumnValue(Columns.Scbzyl, value); }
		}
		  
		[XmlAttribute("Scgcsh")]
		[Bindable(true)]
		public decimal? Scgcsh 
		{
			get { return GetColumnValue<decimal?>(Columns.Scgcsh); }
			set { SetColumnValue(Columns.Scgcsh, value); }
		}
		  
		[XmlAttribute("Scyfsl")]
		[Bindable(true)]
		public decimal? Scyfsl 
		{
			get { return GetColumnValue<decimal?>(Columns.Scyfsl); }
			set { SetColumnValue(Columns.Scyfsl, value); }
		}
		  
		[XmlAttribute("Scytdm")]
		[Bindable(true)]
		public string Scytdm 
		{
			get { return GetColumnValue<string>(Columns.Scytdm); }
			set { SetColumnValue(Columns.Scytdm, value); }
		}
		  
		[XmlAttribute("Scylbz")]
		[Bindable(true)]
		public string Scylbz 
		{
			get { return GetColumnValue<string>(Columns.Scylbz); }
			set { SetColumnValue(Columns.Scylbz, value); }
		}
		  
		[XmlAttribute("Scglbz")]
		[Bindable(true)]
		public string Scglbz 
		{
			get { return GetColumnValue<string>(Columns.Scglbz); }
			set { SetColumnValue(Columns.Scglbz, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varSczsbh,string varSchtbh,string varXtwpks,string varXtwpys,decimal varScclxh,string varScfddm,string varXttxhm,decimal? varScbzyl,decimal? varScgcsh,decimal? varScyfsl,string varScytdm,string varScylbz,string varScglbz)
		{
			SCT282 item = new SCT282();
			
			item.Sczsbh = varSczsbh;
			
			item.Schtbh = varSchtbh;
			
			item.Xtwpks = varXtwpks;
			
			item.Xtwpys = varXtwpys;
			
			item.Scclxh = varScclxh;
			
			item.Scfddm = varScfddm;
			
			item.Xttxhm = varXttxhm;
			
			item.Scbzyl = varScbzyl;
			
			item.Scgcsh = varScgcsh;
			
			item.Scyfsl = varScyfsl;
			
			item.Scytdm = varScytdm;
			
			item.Scylbz = varScylbz;
			
			item.Scglbz = varScglbz;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(string varSczsbh,string varSchtbh,string varXtwpks,string varXtwpys,decimal varScclxh,string varScfddm,string varXttxhm,decimal? varScbzyl,decimal? varScgcsh,decimal? varScyfsl,string varScytdm,string varScylbz,string varScglbz)
		{
			SCT282 item = new SCT282();
			
				item.Sczsbh = varSczsbh;
			
				item.Schtbh = varSchtbh;
			
				item.Xtwpks = varXtwpks;
			
				item.Xtwpys = varXtwpys;
			
				item.Scclxh = varScclxh;
			
				item.Scfddm = varScfddm;
			
				item.Xttxhm = varXttxhm;
			
				item.Scbzyl = varScbzyl;
			
				item.Scgcsh = varScgcsh;
			
				item.Scyfsl = varScyfsl;
			
				item.Scytdm = varScytdm;
			
				item.Scylbz = varScylbz;
			
				item.Scglbz = varScglbz;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn SczsbhColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn SchtbhColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn XtwpksColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn XtwpysColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn ScclxhColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn ScfddmColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn XttxhmColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn ScbzylColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn ScgcshColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn ScyfslColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn ScytdmColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn ScylbzColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn ScglbzColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Sczsbh = @"SCZSBH";
			 public static string Schtbh = @"SCHTBH";
			 public static string Xtwpks = @"XTWPKS";
			 public static string Xtwpys = @"XTWPYS";
			 public static string Scclxh = @"SCCLXH";
			 public static string Scfddm = @"SCFDDM";
			 public static string Xttxhm = @"XTTXHM";
			 public static string Scbzyl = @"SCBZYL";
			 public static string Scgcsh = @"SCGCSH";
			 public static string Scyfsl = @"SCYFSL";
			 public static string Scytdm = @"SCYTDM";
			 public static string Scylbz = @"SCYLBZ";
			 public static string Scglbz = @"SCGLBZ";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}

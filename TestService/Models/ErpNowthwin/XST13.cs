using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace OracleDataDomain
{
	/// <summary>
	/// Strongly-typed collection for the XST13 class.
	/// </summary>
    [Serializable]
	public partial class XST13Collection : ActiveList<XST13, XST13Collection>
	{	   
		public XST13Collection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>XST13Collection</returns>
		public XST13Collection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                XST13 o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the XST13 table.
	/// </summary>
	[Serializable]
	public partial class XST13 : ActiveRecord<XST13>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public XST13()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public XST13(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public XST13(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public XST13(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("XST13", TableType.Table, DataService.GetInstance("ErpNowthwin"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"FYERP";
				//columns
				
				TableSchema.TableColumn colvarXsyhdh = new TableSchema.TableColumn(schema);
				colvarXsyhdh.ColumnName = "XSYHDH";
				colvarXsyhdh.DataType = DbType.String;
				colvarXsyhdh.MaxLength = 12;
				colvarXsyhdh.AutoIncrement = false;
				colvarXsyhdh.IsNullable = false;
				colvarXsyhdh.IsPrimaryKey = true;
				colvarXsyhdh.IsForeignKey = false;
				colvarXsyhdh.IsReadOnly = false;
				colvarXsyhdh.DefaultSetting = @"";
				colvarXsyhdh.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXsyhdh);
				
				TableSchema.TableColumn colvarXsydhh = new TableSchema.TableColumn(schema);
				colvarXsydhh.ColumnName = "XSYDHH";
				colvarXsydhh.DataType = DbType.Decimal;
				colvarXsydhh.MaxLength = 0;
				colvarXsydhh.AutoIncrement = false;
				colvarXsydhh.IsNullable = false;
				colvarXsydhh.IsPrimaryKey = true;
				colvarXsydhh.IsForeignKey = false;
				colvarXsydhh.IsReadOnly = false;
				colvarXsydhh.DefaultSetting = @"";
				colvarXsydhh.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXsydhh);
				
				TableSchema.TableColumn colvarXtwpdm = new TableSchema.TableColumn(schema);
				colvarXtwpdm.ColumnName = "XTWPDM";
				colvarXtwpdm.DataType = DbType.String;
				colvarXtwpdm.MaxLength = 20;
				colvarXtwpdm.AutoIncrement = false;
				colvarXtwpdm.IsNullable = true;
				colvarXtwpdm.IsPrimaryKey = false;
				colvarXtwpdm.IsForeignKey = false;
				colvarXtwpdm.IsReadOnly = false;
				colvarXtwpdm.DefaultSetting = @"";
				colvarXtwpdm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXtwpdm);
				
				TableSchema.TableColumn colvarXtjldw = new TableSchema.TableColumn(schema);
				colvarXtjldw.ColumnName = "XTJLDW";
				colvarXtjldw.DataType = DbType.String;
				colvarXtjldw.MaxLength = 6;
				colvarXtjldw.AutoIncrement = false;
				colvarXtjldw.IsNullable = true;
				colvarXtjldw.IsPrimaryKey = false;
				colvarXtjldw.IsForeignKey = false;
				colvarXtjldw.IsReadOnly = false;
				colvarXtjldw.DefaultSetting = @"";
				colvarXtjldw.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXtjldw);
				
				TableSchema.TableColumn colvarXsyhsl = new TableSchema.TableColumn(schema);
				colvarXsyhsl.ColumnName = "XSYHSL";
				colvarXsyhsl.DataType = DbType.Decimal;
				colvarXsyhsl.MaxLength = 0;
				colvarXsyhsl.AutoIncrement = false;
				colvarXsyhsl.IsNullable = true;
				colvarXsyhsl.IsPrimaryKey = false;
				colvarXsyhsl.IsForeignKey = false;
				colvarXsyhsl.IsReadOnly = false;
				colvarXsyhsl.DefaultSetting = @"";
				colvarXsyhsl.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXsyhsl);
				
				TableSchema.TableColumn colvarXsyhje = new TableSchema.TableColumn(schema);
				colvarXsyhje.ColumnName = "XSYHJE";
				colvarXsyhje.DataType = DbType.Decimal;
				colvarXsyhje.MaxLength = 0;
				colvarXsyhje.AutoIncrement = false;
				colvarXsyhje.IsNullable = true;
				colvarXsyhje.IsPrimaryKey = false;
				colvarXsyhje.IsForeignKey = false;
				colvarXsyhje.IsReadOnly = false;
				colvarXsyhje.DefaultSetting = @"";
				colvarXsyhje.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXsyhje);
				
				TableSchema.TableColumn colvarXsyphl = new TableSchema.TableColumn(schema);
				colvarXsyphl.ColumnName = "XSYPHL";
				colvarXsyphl.DataType = DbType.Decimal;
				colvarXsyphl.MaxLength = 0;
				colvarXsyphl.AutoIncrement = false;
				colvarXsyphl.IsNullable = true;
				colvarXsyphl.IsPrimaryKey = false;
				colvarXsyphl.IsForeignKey = false;
				colvarXsyphl.IsReadOnly = false;
				colvarXsyphl.DefaultSetting = @"";
				colvarXsyphl.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXsyphl);
				
				TableSchema.TableColumn colvarXsphjq = new TableSchema.TableColumn(schema);
				colvarXsphjq.ColumnName = "XSPHJQ";
				colvarXsphjq.DataType = DbType.String;
				colvarXsphjq.MaxLength = 1;
				colvarXsphjq.AutoIncrement = false;
				colvarXsphjq.IsNullable = true;
				colvarXsphjq.IsPrimaryKey = false;
				colvarXsphjq.IsForeignKey = false;
				colvarXsphjq.IsReadOnly = false;
				colvarXsphjq.DefaultSetting = @"";
				colvarXsphjq.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXsphjq);
				
				TableSchema.TableColumn colvarXsyhdj = new TableSchema.TableColumn(schema);
				colvarXsyhdj.ColumnName = "XSYHDJ";
				colvarXsyhdj.DataType = DbType.Decimal;
				colvarXsyhdj.MaxLength = 0;
				colvarXsyhdj.AutoIncrement = false;
				colvarXsyhdj.IsNullable = true;
				colvarXsyhdj.IsPrimaryKey = false;
				colvarXsyhdj.IsForeignKey = false;
				colvarXsyhdj.IsReadOnly = false;
				colvarXsyhdj.DefaultSetting = @"";
				colvarXsyhdj.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXsyhdj);
				
				TableSchema.TableColumn colvarXtbmdm = new TableSchema.TableColumn(schema);
				colvarXtbmdm.ColumnName = "XTBMDM";
				colvarXtbmdm.DataType = DbType.String;
				colvarXtbmdm.MaxLength = 8;
				colvarXtbmdm.AutoIncrement = false;
				colvarXtbmdm.IsNullable = true;
				colvarXtbmdm.IsPrimaryKey = false;
				colvarXtbmdm.IsForeignKey = false;
				colvarXtbmdm.IsReadOnly = false;
				colvarXtbmdm.DefaultSetting = @"";
				colvarXtbmdm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXtbmdm);
				
				TableSchema.TableColumn colvarKcckdm = new TableSchema.TableColumn(schema);
				colvarKcckdm.ColumnName = "KCCKDM";
				colvarKcckdm.DataType = DbType.String;
				colvarKcckdm.MaxLength = 8;
				colvarKcckdm.AutoIncrement = false;
				colvarKcckdm.IsNullable = true;
				colvarKcckdm.IsPrimaryKey = false;
				colvarKcckdm.IsForeignKey = false;
				colvarKcckdm.IsReadOnly = false;
				colvarKcckdm.DefaultSetting = @"";
				colvarKcckdm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarKcckdm);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ErpNowthwin"].AddSchema("XST13",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Xsyhdh")]
		[Bindable(true)]
		public string Xsyhdh 
		{
			get { return GetColumnValue<string>(Columns.Xsyhdh); }
			set { SetColumnValue(Columns.Xsyhdh, value); }
		}
		  
		[XmlAttribute("Xsydhh")]
		[Bindable(true)]
		public decimal Xsydhh 
		{
			get { return GetColumnValue<decimal>(Columns.Xsydhh); }
			set { SetColumnValue(Columns.Xsydhh, value); }
		}
		  
		[XmlAttribute("Xtwpdm")]
		[Bindable(true)]
		public string Xtwpdm 
		{
			get { return GetColumnValue<string>(Columns.Xtwpdm); }
			set { SetColumnValue(Columns.Xtwpdm, value); }
		}
		  
		[XmlAttribute("Xtjldw")]
		[Bindable(true)]
		public string Xtjldw 
		{
			get { return GetColumnValue<string>(Columns.Xtjldw); }
			set { SetColumnValue(Columns.Xtjldw, value); }
		}
		  
		[XmlAttribute("Xsyhsl")]
		[Bindable(true)]
		public decimal? Xsyhsl 
		{
			get { return GetColumnValue<decimal?>(Columns.Xsyhsl); }
			set { SetColumnValue(Columns.Xsyhsl, value); }
		}
		  
		[XmlAttribute("Xsyhje")]
		[Bindable(true)]
		public decimal? Xsyhje 
		{
			get { return GetColumnValue<decimal?>(Columns.Xsyhje); }
			set { SetColumnValue(Columns.Xsyhje, value); }
		}
		  
		[XmlAttribute("Xsyphl")]
		[Bindable(true)]
		public decimal? Xsyphl 
		{
			get { return GetColumnValue<decimal?>(Columns.Xsyphl); }
			set { SetColumnValue(Columns.Xsyphl, value); }
		}
		  
		[XmlAttribute("Xsphjq")]
		[Bindable(true)]
		public string Xsphjq 
		{
			get { return GetColumnValue<string>(Columns.Xsphjq); }
			set { SetColumnValue(Columns.Xsphjq, value); }
		}
		  
		[XmlAttribute("Xsyhdj")]
		[Bindable(true)]
		public decimal? Xsyhdj 
		{
			get { return GetColumnValue<decimal?>(Columns.Xsyhdj); }
			set { SetColumnValue(Columns.Xsyhdj, value); }
		}
		  
		[XmlAttribute("Xtbmdm")]
		[Bindable(true)]
		public string Xtbmdm 
		{
			get { return GetColumnValue<string>(Columns.Xtbmdm); }
			set { SetColumnValue(Columns.Xtbmdm, value); }
		}
		  
		[XmlAttribute("Kcckdm")]
		[Bindable(true)]
		public string Kcckdm 
		{
			get { return GetColumnValue<string>(Columns.Kcckdm); }
			set { SetColumnValue(Columns.Kcckdm, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varXsyhdh,decimal varXsydhh,string varXtwpdm,string varXtjldw,decimal? varXsyhsl,decimal? varXsyhje,decimal? varXsyphl,string varXsphjq,decimal? varXsyhdj,string varXtbmdm,string varKcckdm)
		{
			XST13 item = new XST13();
			
			item.Xsyhdh = varXsyhdh;
			
			item.Xsydhh = varXsydhh;
			
			item.Xtwpdm = varXtwpdm;
			
			item.Xtjldw = varXtjldw;
			
			item.Xsyhsl = varXsyhsl;
			
			item.Xsyhje = varXsyhje;
			
			item.Xsyphl = varXsyphl;
			
			item.Xsphjq = varXsphjq;
			
			item.Xsyhdj = varXsyhdj;
			
			item.Xtbmdm = varXtbmdm;
			
			item.Kcckdm = varKcckdm;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(string varXsyhdh,decimal varXsydhh,string varXtwpdm,string varXtjldw,decimal? varXsyhsl,decimal? varXsyhje,decimal? varXsyphl,string varXsphjq,decimal? varXsyhdj,string varXtbmdm,string varKcckdm)
		{
			XST13 item = new XST13();
			
				item.Xsyhdh = varXsyhdh;
			
				item.Xsydhh = varXsydhh;
			
				item.Xtwpdm = varXtwpdm;
			
				item.Xtjldw = varXtjldw;
			
				item.Xsyhsl = varXsyhsl;
			
				item.Xsyhje = varXsyhje;
			
				item.Xsyphl = varXsyphl;
			
				item.Xsphjq = varXsphjq;
			
				item.Xsyhdj = varXsyhdj;
			
				item.Xtbmdm = varXtbmdm;
			
				item.Kcckdm = varKcckdm;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn XsyhdhColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn XsydhhColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn XtwpdmColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn XtjldwColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn XsyhslColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn XsyhjeColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn XsyphlColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn XsphjqColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn XsyhdjColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn XtbmdmColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn KcckdmColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Xsyhdh = @"XSYHDH";
			 public static string Xsydhh = @"XSYDHH";
			 public static string Xtwpdm = @"XTWPDM";
			 public static string Xtjldw = @"XTJLDW";
			 public static string Xsyhsl = @"XSYHSL";
			 public static string Xsyhje = @"XSYHJE";
			 public static string Xsyphl = @"XSYPHL";
			 public static string Xsphjq = @"XSPHJQ";
			 public static string Xsyhdj = @"XSYHDJ";
			 public static string Xtbmdm = @"XTBMDM";
			 public static string Kcckdm = @"KCCKDM";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}

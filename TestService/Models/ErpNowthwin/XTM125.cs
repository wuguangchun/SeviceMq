using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace OracleDataDomain
{
	/// <summary>
	/// Strongly-typed collection for the XTM125 class.
	/// </summary>
    [Serializable]
	public partial class XTM125Collection : ActiveList<XTM125, XTM125Collection>
	{	   
		public XTM125Collection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>XTM125Collection</returns>
		public XTM125Collection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                XTM125 o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the XTM125 table.
	/// </summary>
	[Serializable]
	public partial class XTM125 : ActiveRecord<XTM125>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public XTM125()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public XTM125(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public XTM125(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public XTM125(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("XTM125", TableType.Table, DataService.GetInstance("ErpNowthwin"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"FYERP";
				//columns
				
				TableSchema.TableColumn colvarOld = new TableSchema.TableColumn(schema);
				colvarOld.ColumnName = "OLD";
				colvarOld.DataType = DbType.String;
				colvarOld.MaxLength = 25;
				colvarOld.AutoIncrement = false;
				colvarOld.IsNullable = false;
				colvarOld.IsPrimaryKey = false;
				colvarOld.IsForeignKey = false;
				colvarOld.IsReadOnly = false;
				colvarOld.DefaultSetting = @"";
				colvarOld.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOld);
				
				TableSchema.TableColumn colvarPp = new TableSchema.TableColumn(schema);
				colvarPp.ColumnName = "PP";
				colvarPp.DataType = DbType.String;
				colvarPp.MaxLength = 1;
				colvarPp.AutoIncrement = false;
				colvarPp.IsNullable = true;
				colvarPp.IsPrimaryKey = false;
				colvarPp.IsForeignKey = false;
				colvarPp.IsReadOnly = false;
				colvarPp.DefaultSetting = @"";
				colvarPp.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPp);
				
				TableSchema.TableColumn colvarDl = new TableSchema.TableColumn(schema);
				colvarDl.ColumnName = "DL";
				colvarDl.DataType = DbType.String;
				colvarDl.MaxLength = 2;
				colvarDl.AutoIncrement = false;
				colvarDl.IsNullable = true;
				colvarDl.IsPrimaryKey = false;
				colvarDl.IsForeignKey = false;
				colvarDl.IsReadOnly = false;
				colvarDl.DefaultSetting = @"";
				colvarDl.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDl);
				
				TableSchema.TableColumn colvarNd = new TableSchema.TableColumn(schema);
				colvarNd.ColumnName = "ND";
				colvarNd.DataType = DbType.String;
				colvarNd.MaxLength = 1;
				colvarNd.AutoIncrement = false;
				colvarNd.IsNullable = true;
				colvarNd.IsPrimaryKey = false;
				colvarNd.IsForeignKey = false;
				colvarNd.IsReadOnly = false;
				colvarNd.DefaultSetting = @"";
				colvarNd.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNd);
				
				TableSchema.TableColumn colvarLs = new TableSchema.TableColumn(schema);
				colvarLs.ColumnName = "LS";
				colvarLs.DataType = DbType.String;
				colvarLs.MaxLength = 3;
				colvarLs.AutoIncrement = false;
				colvarLs.IsNullable = true;
				colvarLs.IsPrimaryKey = false;
				colvarLs.IsForeignKey = false;
				colvarLs.IsReadOnly = false;
				colvarLs.DefaultSetting = @"";
				colvarLs.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLs);
				
				TableSchema.TableColumn colvarMl = new TableSchema.TableColumn(schema);
				colvarMl.ColumnName = "ML";
				colvarMl.DataType = DbType.String;
				colvarMl.MaxLength = 7;
				colvarMl.AutoIncrement = false;
				colvarMl.IsNullable = true;
				colvarMl.IsPrimaryKey = false;
				colvarMl.IsForeignKey = false;
				colvarMl.IsReadOnly = false;
				colvarMl.DefaultSetting = @"";
				colvarMl.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMl);
				
				TableSchema.TableColumn colvarCm = new TableSchema.TableColumn(schema);
				colvarCm.ColumnName = "CM";
				colvarCm.DataType = DbType.String;
				colvarCm.MaxLength = 3;
				colvarCm.AutoIncrement = false;
				colvarCm.IsNullable = true;
				colvarCm.IsPrimaryKey = false;
				colvarCm.IsForeignKey = false;
				colvarCm.IsReadOnly = false;
				colvarCm.DefaultSetting = @"";
				colvarCm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCm);
				
				TableSchema.TableColumn colvarNEW1 = new TableSchema.TableColumn(schema);
				colvarNEW1.ColumnName = "NEW1";
				colvarNEW1.DataType = DbType.String;
				colvarNEW1.MaxLength = 20;
				colvarNEW1.AutoIncrement = false;
				colvarNEW1.IsNullable = false;
				colvarNEW1.IsPrimaryKey = false;
				colvarNEW1.IsForeignKey = false;
				colvarNEW1.IsReadOnly = false;
				colvarNEW1.DefaultSetting = @"";
				colvarNEW1.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNEW1);
				
				TableSchema.TableColumn colvarMc = new TableSchema.TableColumn(schema);
				colvarMc.ColumnName = "MC";
				colvarMc.DataType = DbType.String;
				colvarMc.MaxLength = 100;
				colvarMc.AutoIncrement = false;
				colvarMc.IsNullable = true;
				colvarMc.IsPrimaryKey = false;
				colvarMc.IsForeignKey = false;
				colvarMc.IsReadOnly = false;
				colvarMc.DefaultSetting = @"";
				colvarMc.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMc);
				
				TableSchema.TableColumn colvarJldw = new TableSchema.TableColumn(schema);
				colvarJldw.ColumnName = "JLDW";
				colvarJldw.DataType = DbType.String;
				colvarJldw.MaxLength = 6;
				colvarJldw.AutoIncrement = false;
				colvarJldw.IsNullable = true;
				colvarJldw.IsPrimaryKey = false;
				colvarJldw.IsForeignKey = false;
				colvarJldw.IsReadOnly = false;
				colvarJldw.DefaultSetting = @"";
				colvarJldw.ForeignKeyTableName = "";
				schema.Columns.Add(colvarJldw);
				
				TableSchema.TableColumn colvarWphsjg = new TableSchema.TableColumn(schema);
				colvarWphsjg.ColumnName = "WPHSJG";
				colvarWphsjg.DataType = DbType.Decimal;
				colvarWphsjg.MaxLength = 0;
				colvarWphsjg.AutoIncrement = false;
				colvarWphsjg.IsNullable = true;
				colvarWphsjg.IsPrimaryKey = false;
				colvarWphsjg.IsForeignKey = false;
				colvarWphsjg.IsReadOnly = false;
				colvarWphsjg.DefaultSetting = @"";
				colvarWphsjg.ForeignKeyTableName = "";
				schema.Columns.Add(colvarWphsjg);
				
				TableSchema.TableColumn colvarWpxsdj = new TableSchema.TableColumn(schema);
				colvarWpxsdj.ColumnName = "WPXSDJ";
				colvarWpxsdj.DataType = DbType.Decimal;
				colvarWpxsdj.MaxLength = 0;
				colvarWpxsdj.AutoIncrement = false;
				colvarWpxsdj.IsNullable = true;
				colvarWpxsdj.IsPrimaryKey = false;
				colvarWpxsdj.IsForeignKey = false;
				colvarWpxsdj.IsReadOnly = false;
				colvarWpxsdj.DefaultSetting = @"";
				colvarWpxsdj.ForeignKeyTableName = "";
				schema.Columns.Add(colvarWpxsdj);
				
				TableSchema.TableColumn colvarSl = new TableSchema.TableColumn(schema);
				colvarSl.ColumnName = "SL";
				colvarSl.DataType = DbType.Decimal;
				colvarSl.MaxLength = 0;
				colvarSl.AutoIncrement = false;
				colvarSl.IsNullable = true;
				colvarSl.IsPrimaryKey = false;
				colvarSl.IsForeignKey = false;
				colvarSl.IsReadOnly = false;
				colvarSl.DefaultSetting = @"";
				colvarSl.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSl);
				
				TableSchema.TableColumn colvarKcckdm = new TableSchema.TableColumn(schema);
				colvarKcckdm.ColumnName = "KCCKDM";
				colvarKcckdm.DataType = DbType.String;
				colvarKcckdm.MaxLength = 8;
				colvarKcckdm.AutoIncrement = false;
				colvarKcckdm.IsNullable = true;
				colvarKcckdm.IsPrimaryKey = false;
				colvarKcckdm.IsForeignKey = false;
				colvarKcckdm.IsReadOnly = false;
				colvarKcckdm.DefaultSetting = @"";
				colvarKcckdm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarKcckdm);
				
				TableSchema.TableColumn colvarSn = new TableSchema.TableColumn(schema);
				colvarSn.ColumnName = "SN";
				colvarSn.DataType = DbType.Decimal;
				colvarSn.MaxLength = 0;
				colvarSn.AutoIncrement = false;
				colvarSn.IsNullable = false;
				colvarSn.IsPrimaryKey = true;
				colvarSn.IsForeignKey = false;
				colvarSn.IsReadOnly = false;
				colvarSn.DefaultSetting = @"";
				colvarSn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSn);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ErpNowthwin"].AddSchema("XTM125",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Old")]
		[Bindable(true)]
		public string Old 
		{
			get { return GetColumnValue<string>(Columns.Old); }
			set { SetColumnValue(Columns.Old, value); }
		}
		  
		[XmlAttribute("Pp")]
		[Bindable(true)]
		public string Pp 
		{
			get { return GetColumnValue<string>(Columns.Pp); }
			set { SetColumnValue(Columns.Pp, value); }
		}
		  
		[XmlAttribute("Dl")]
		[Bindable(true)]
		public string Dl 
		{
			get { return GetColumnValue<string>(Columns.Dl); }
			set { SetColumnValue(Columns.Dl, value); }
		}
		  
		[XmlAttribute("Nd")]
		[Bindable(true)]
		public string Nd 
		{
			get { return GetColumnValue<string>(Columns.Nd); }
			set { SetColumnValue(Columns.Nd, value); }
		}
		  
		[XmlAttribute("Ls")]
		[Bindable(true)]
		public string Ls 
		{
			get { return GetColumnValue<string>(Columns.Ls); }
			set { SetColumnValue(Columns.Ls, value); }
		}
		  
		[XmlAttribute("Ml")]
		[Bindable(true)]
		public string Ml 
		{
			get { return GetColumnValue<string>(Columns.Ml); }
			set { SetColumnValue(Columns.Ml, value); }
		}
		  
		[XmlAttribute("Cm")]
		[Bindable(true)]
		public string Cm 
		{
			get { return GetColumnValue<string>(Columns.Cm); }
			set { SetColumnValue(Columns.Cm, value); }
		}
		  
		[XmlAttribute("NEW1")]
		[Bindable(true)]
		public string NEW1 
		{
			get { return GetColumnValue<string>(Columns.NEW1); }
			set { SetColumnValue(Columns.NEW1, value); }
		}
		  
		[XmlAttribute("Mc")]
		[Bindable(true)]
		public string Mc 
		{
			get { return GetColumnValue<string>(Columns.Mc); }
			set { SetColumnValue(Columns.Mc, value); }
		}
		  
		[XmlAttribute("Jldw")]
		[Bindable(true)]
		public string Jldw 
		{
			get { return GetColumnValue<string>(Columns.Jldw); }
			set { SetColumnValue(Columns.Jldw, value); }
		}
		  
		[XmlAttribute("Wphsjg")]
		[Bindable(true)]
		public decimal? Wphsjg 
		{
			get { return GetColumnValue<decimal?>(Columns.Wphsjg); }
			set { SetColumnValue(Columns.Wphsjg, value); }
		}
		  
		[XmlAttribute("Wpxsdj")]
		[Bindable(true)]
		public decimal? Wpxsdj 
		{
			get { return GetColumnValue<decimal?>(Columns.Wpxsdj); }
			set { SetColumnValue(Columns.Wpxsdj, value); }
		}
		  
		[XmlAttribute("Sl")]
		[Bindable(true)]
		public decimal? Sl 
		{
			get { return GetColumnValue<decimal?>(Columns.Sl); }
			set { SetColumnValue(Columns.Sl, value); }
		}
		  
		[XmlAttribute("Kcckdm")]
		[Bindable(true)]
		public string Kcckdm 
		{
			get { return GetColumnValue<string>(Columns.Kcckdm); }
			set { SetColumnValue(Columns.Kcckdm, value); }
		}
		  
		[XmlAttribute("Sn")]
		[Bindable(true)]
		public decimal Sn 
		{
			get { return GetColumnValue<decimal>(Columns.Sn); }
			set { SetColumnValue(Columns.Sn, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varOld,string varPp,string varDl,string varNd,string varLs,string varMl,string varCm,string varNEW1,string varMc,string varJldw,decimal? varWphsjg,decimal? varWpxsdj,decimal? varSl,string varKcckdm,decimal varSn)
		{
			XTM125 item = new XTM125();
			
			item.Old = varOld;
			
			item.Pp = varPp;
			
			item.Dl = varDl;
			
			item.Nd = varNd;
			
			item.Ls = varLs;
			
			item.Ml = varMl;
			
			item.Cm = varCm;
			
			item.NEW1 = varNEW1;
			
			item.Mc = varMc;
			
			item.Jldw = varJldw;
			
			item.Wphsjg = varWphsjg;
			
			item.Wpxsdj = varWpxsdj;
			
			item.Sl = varSl;
			
			item.Kcckdm = varKcckdm;
			
			item.Sn = varSn;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(string varOld,string varPp,string varDl,string varNd,string varLs,string varMl,string varCm,string varNEW1,string varMc,string varJldw,decimal? varWphsjg,decimal? varWpxsdj,decimal? varSl,string varKcckdm,decimal varSn)
		{
			XTM125 item = new XTM125();
			
				item.Old = varOld;
			
				item.Pp = varPp;
			
				item.Dl = varDl;
			
				item.Nd = varNd;
			
				item.Ls = varLs;
			
				item.Ml = varMl;
			
				item.Cm = varCm;
			
				item.NEW1 = varNEW1;
			
				item.Mc = varMc;
			
				item.Jldw = varJldw;
			
				item.Wphsjg = varWphsjg;
			
				item.Wpxsdj = varWpxsdj;
			
				item.Sl = varSl;
			
				item.Kcckdm = varKcckdm;
			
				item.Sn = varSn;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn OldColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn PpColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn DlColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn NdColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn LsColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn MlColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn CmColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn NEW1Column
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn McColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn JldwColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn WphsjgColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn WpxsdjColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn SlColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        public static TableSchema.TableColumn KcckdmColumn
        {
            get { return Schema.Columns[13]; }
        }
        
        
        
        public static TableSchema.TableColumn SnColumn
        {
            get { return Schema.Columns[14]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Old = @"OLD";
			 public static string Pp = @"PP";
			 public static string Dl = @"DL";
			 public static string Nd = @"ND";
			 public static string Ls = @"LS";
			 public static string Ml = @"ML";
			 public static string Cm = @"CM";
			 public static string NEW1 = @"NEW1";
			 public static string Mc = @"MC";
			 public static string Jldw = @"JLDW";
			 public static string Wphsjg = @"WPHSJG";
			 public static string Wpxsdj = @"WPXSDJ";
			 public static string Sl = @"SL";
			 public static string Kcckdm = @"KCCKDM";
			 public static string Sn = @"SN";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}

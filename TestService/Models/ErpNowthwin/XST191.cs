using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace OracleDataDomain
{
	/// <summary>
	/// Strongly-typed collection for the XST191 class.
	/// </summary>
    [Serializable]
	public partial class XST191Collection : ActiveList<XST191, XST191Collection>
	{	   
		public XST191Collection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>XST191Collection</returns>
		public XST191Collection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                XST191 o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the XST191 table.
	/// </summary>
	[Serializable]
	public partial class XST191 : ActiveRecord<XST191>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public XST191()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public XST191(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public XST191(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public XST191(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("XST191", TableType.Table, DataService.GetInstance("ErpNowthwin"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"FYERP";
				//columns
				
				TableSchema.TableColumn colvarKcczxh = new TableSchema.TableColumn(schema);
				colvarKcczxh.ColumnName = "KCCZXH";
				colvarKcczxh.DataType = DbType.Decimal;
				colvarKcczxh.MaxLength = 0;
				colvarKcczxh.AutoIncrement = false;
				colvarKcczxh.IsNullable = false;
				colvarKcczxh.IsPrimaryKey = true;
				colvarKcczxh.IsForeignKey = false;
				colvarKcczxh.IsReadOnly = false;
				colvarKcczxh.DefaultSetting = @"";
				colvarKcczxh.ForeignKeyTableName = "";
				schema.Columns.Add(colvarKcczxh);
				
				TableSchema.TableColumn colvarKckjyf = new TableSchema.TableColumn(schema);
				colvarKckjyf.ColumnName = "KCKJYF";
				colvarKckjyf.DataType = DbType.Decimal;
				colvarKckjyf.MaxLength = 0;
				colvarKckjyf.AutoIncrement = false;
				colvarKckjyf.IsNullable = false;
				colvarKckjyf.IsPrimaryKey = true;
				colvarKckjyf.IsForeignKey = false;
				colvarKckjyf.IsReadOnly = false;
				colvarKckjyf.DefaultSetting = @"";
				colvarKckjyf.ForeignKeyTableName = "";
				schema.Columns.Add(colvarKckjyf);
				
				TableSchema.TableColumn colvarKckjnd = new TableSchema.TableColumn(schema);
				colvarKckjnd.ColumnName = "KCKJND";
				colvarKckjnd.DataType = DbType.Decimal;
				colvarKckjnd.MaxLength = 0;
				colvarKckjnd.AutoIncrement = false;
				colvarKckjnd.IsNullable = false;
				colvarKckjnd.IsPrimaryKey = true;
				colvarKckjnd.IsForeignKey = false;
				colvarKckjnd.IsReadOnly = false;
				colvarKckjnd.DefaultSetting = @"";
				colvarKckjnd.ForeignKeyTableName = "";
				schema.Columns.Add(colvarKckjnd);
				
				TableSchema.TableColumn colvarKcczhh = new TableSchema.TableColumn(schema);
				colvarKcczhh.ColumnName = "KCCZHH";
				colvarKcczhh.DataType = DbType.Decimal;
				colvarKcczhh.MaxLength = 0;
				colvarKcczhh.AutoIncrement = false;
				colvarKcczhh.IsNullable = false;
				colvarKcczhh.IsPrimaryKey = true;
				colvarKcczhh.IsForeignKey = false;
				colvarKcczhh.IsReadOnly = false;
				colvarKcczhh.DefaultSetting = @"";
				colvarKcczhh.ForeignKeyTableName = "";
				schema.Columns.Add(colvarKcczhh);
				
				TableSchema.TableColumn colvarKcrkdh = new TableSchema.TableColumn(schema);
				colvarKcrkdh.ColumnName = "KCRKDH";
				colvarKcrkdh.DataType = DbType.String;
				colvarKcrkdh.MaxLength = 12;
				colvarKcrkdh.AutoIncrement = false;
				colvarKcrkdh.IsNullable = true;
				colvarKcrkdh.IsPrimaryKey = false;
				colvarKcrkdh.IsForeignKey = false;
				colvarKcrkdh.IsReadOnly = false;
				colvarKcrkdh.DefaultSetting = @"";
				colvarKcrkdh.ForeignKeyTableName = "";
				schema.Columns.Add(colvarKcrkdh);
				
				TableSchema.TableColumn colvarKcrkhh = new TableSchema.TableColumn(schema);
				colvarKcrkhh.ColumnName = "KCRKHH";
				colvarKcrkhh.DataType = DbType.Decimal;
				colvarKcrkhh.MaxLength = 0;
				colvarKcrkhh.AutoIncrement = false;
				colvarKcrkhh.IsNullable = true;
				colvarKcrkhh.IsPrimaryKey = false;
				colvarKcrkhh.IsForeignKey = false;
				colvarKcrkhh.IsReadOnly = false;
				colvarKcrkhh.DefaultSetting = @"";
				colvarKcrkhh.ForeignKeyTableName = "";
				schema.Columns.Add(colvarKcrkhh);
				
				TableSchema.TableColumn colvarXsshrq = new TableSchema.TableColumn(schema);
				colvarXsshrq.ColumnName = "XSSHRQ";
				colvarXsshrq.DataType = DbType.DateTime;
				colvarXsshrq.MaxLength = 0;
				colvarXsshrq.AutoIncrement = false;
				colvarXsshrq.IsNullable = true;
				colvarXsshrq.IsPrimaryKey = false;
				colvarXsshrq.IsForeignKey = false;
				colvarXsshrq.IsReadOnly = false;
				colvarXsshrq.DefaultSetting = @"";
				colvarXsshrq.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXsshrq);
				
				TableSchema.TableColumn colvarXssssl = new TableSchema.TableColumn(schema);
				colvarXssssl.ColumnName = "XSSSSL";
				colvarXssssl.DataType = DbType.Decimal;
				colvarXssssl.MaxLength = 0;
				colvarXssssl.AutoIncrement = false;
				colvarXssssl.IsNullable = true;
				colvarXssssl.IsPrimaryKey = false;
				colvarXssssl.IsForeignKey = false;
				colvarXssssl.IsReadOnly = false;
				colvarXssssl.DefaultSetting = @"";
				colvarXssssl.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXssssl);
				
				TableSchema.TableColumn colvarKcshck = new TableSchema.TableColumn(schema);
				colvarKcshck.ColumnName = "KCSHCK";
				colvarKcshck.DataType = DbType.String;
				colvarKcshck.MaxLength = 8;
				colvarKcshck.AutoIncrement = false;
				colvarKcshck.IsNullable = true;
				colvarKcshck.IsPrimaryKey = false;
				colvarKcshck.IsForeignKey = false;
				colvarKcshck.IsReadOnly = false;
				colvarKcshck.DefaultSetting = @"";
				colvarKcshck.ForeignKeyTableName = "";
				schema.Columns.Add(colvarKcshck);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ErpNowthwin"].AddSchema("XST191",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Kcczxh")]
		[Bindable(true)]
		public decimal Kcczxh 
		{
			get { return GetColumnValue<decimal>(Columns.Kcczxh); }
			set { SetColumnValue(Columns.Kcczxh, value); }
		}
		  
		[XmlAttribute("Kckjyf")]
		[Bindable(true)]
		public decimal Kckjyf 
		{
			get { return GetColumnValue<decimal>(Columns.Kckjyf); }
			set { SetColumnValue(Columns.Kckjyf, value); }
		}
		  
		[XmlAttribute("Kckjnd")]
		[Bindable(true)]
		public decimal Kckjnd 
		{
			get { return GetColumnValue<decimal>(Columns.Kckjnd); }
			set { SetColumnValue(Columns.Kckjnd, value); }
		}
		  
		[XmlAttribute("Kcczhh")]
		[Bindable(true)]
		public decimal Kcczhh 
		{
			get { return GetColumnValue<decimal>(Columns.Kcczhh); }
			set { SetColumnValue(Columns.Kcczhh, value); }
		}
		  
		[XmlAttribute("Kcrkdh")]
		[Bindable(true)]
		public string Kcrkdh 
		{
			get { return GetColumnValue<string>(Columns.Kcrkdh); }
			set { SetColumnValue(Columns.Kcrkdh, value); }
		}
		  
		[XmlAttribute("Kcrkhh")]
		[Bindable(true)]
		public decimal? Kcrkhh 
		{
			get { return GetColumnValue<decimal?>(Columns.Kcrkhh); }
			set { SetColumnValue(Columns.Kcrkhh, value); }
		}
		  
		[XmlAttribute("Xsshrq")]
		[Bindable(true)]
		public DateTime? Xsshrq 
		{
			get { return GetColumnValue<DateTime?>(Columns.Xsshrq); }
			set { SetColumnValue(Columns.Xsshrq, value); }
		}
		  
		[XmlAttribute("Xssssl")]
		[Bindable(true)]
		public decimal? Xssssl 
		{
			get { return GetColumnValue<decimal?>(Columns.Xssssl); }
			set { SetColumnValue(Columns.Xssssl, value); }
		}
		  
		[XmlAttribute("Kcshck")]
		[Bindable(true)]
		public string Kcshck 
		{
			get { return GetColumnValue<string>(Columns.Kcshck); }
			set { SetColumnValue(Columns.Kcshck, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(decimal varKcczxh,decimal varKckjyf,decimal varKckjnd,decimal varKcczhh,string varKcrkdh,decimal? varKcrkhh,DateTime? varXsshrq,decimal? varXssssl,string varKcshck)
		{
			XST191 item = new XST191();
			
			item.Kcczxh = varKcczxh;
			
			item.Kckjyf = varKckjyf;
			
			item.Kckjnd = varKckjnd;
			
			item.Kcczhh = varKcczhh;
			
			item.Kcrkdh = varKcrkdh;
			
			item.Kcrkhh = varKcrkhh;
			
			item.Xsshrq = varXsshrq;
			
			item.Xssssl = varXssssl;
			
			item.Kcshck = varKcshck;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(decimal varKcczxh,decimal varKckjyf,decimal varKckjnd,decimal varKcczhh,string varKcrkdh,decimal? varKcrkhh,DateTime? varXsshrq,decimal? varXssssl,string varKcshck)
		{
			XST191 item = new XST191();
			
				item.Kcczxh = varKcczxh;
			
				item.Kckjyf = varKckjyf;
			
				item.Kckjnd = varKckjnd;
			
				item.Kcczhh = varKcczhh;
			
				item.Kcrkdh = varKcrkdh;
			
				item.Kcrkhh = varKcrkhh;
			
				item.Xsshrq = varXsshrq;
			
				item.Xssssl = varXssssl;
			
				item.Kcshck = varKcshck;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn KcczxhColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn KckjyfColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn KckjndColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn KcczhhColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn KcrkdhColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn KcrkhhColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn XsshrqColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn XsssslColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn KcshckColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Kcczxh = @"KCCZXH";
			 public static string Kckjyf = @"KCKJYF";
			 public static string Kckjnd = @"KCKJND";
			 public static string Kcczhh = @"KCCZHH";
			 public static string Kcrkdh = @"KCRKDH";
			 public static string Kcrkhh = @"KCRKHH";
			 public static string Xsshrq = @"XSSHRQ";
			 public static string Xssssl = @"XSSSSL";
			 public static string Kcshck = @"KCSHCK";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}

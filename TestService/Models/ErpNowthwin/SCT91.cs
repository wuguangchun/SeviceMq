using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace OracleDataDomain
{
	/// <summary>
	/// Strongly-typed collection for the SCT91 class.
	/// </summary>
    [Serializable]
	public partial class SCT91Collection : ActiveList<SCT91, SCT91Collection>
	{	   
		public SCT91Collection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>SCT91Collection</returns>
		public SCT91Collection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                SCT91 o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the SCT91 table.
	/// </summary>
	[Serializable]
	public partial class SCT91 : ActiveRecord<SCT91>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public SCT91()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public SCT91(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public SCT91(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public SCT91(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("SCT91", TableType.Table, DataService.GetInstance("ErpNowthwin"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"FYERP";
				//columns
				
				TableSchema.TableColumn colvarSczsbh = new TableSchema.TableColumn(schema);
				colvarSczsbh.ColumnName = "SCZSBH";
				colvarSczsbh.DataType = DbType.String;
				colvarSczsbh.MaxLength = 12;
				colvarSczsbh.AutoIncrement = false;
				colvarSczsbh.IsNullable = false;
				colvarSczsbh.IsPrimaryKey = true;
				colvarSczsbh.IsForeignKey = false;
				colvarSczsbh.IsReadOnly = false;
				colvarSczsbh.DefaultSetting = @"";
				colvarSczsbh.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSczsbh);
				
				TableSchema.TableColumn colvarSczsxh = new TableSchema.TableColumn(schema);
				colvarSczsxh.ColumnName = "SCZSXH";
				colvarSczsxh.DataType = DbType.Decimal;
				colvarSczsxh.MaxLength = 0;
				colvarSczsxh.AutoIncrement = false;
				colvarSczsxh.IsNullable = false;
				colvarSczsxh.IsPrimaryKey = true;
				colvarSczsxh.IsForeignKey = false;
				colvarSczsxh.IsReadOnly = false;
				colvarSczsxh.DefaultSetting = @"";
				colvarSczsxh.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSczsxh);
				
				TableSchema.TableColumn colvarXttxhm = new TableSchema.TableColumn(schema);
				colvarXttxhm.ColumnName = "XTTXHM";
				colvarXttxhm.DataType = DbType.String;
				colvarXttxhm.MaxLength = 20;
				colvarXttxhm.AutoIncrement = false;
				colvarXttxhm.IsNullable = true;
				colvarXttxhm.IsPrimaryKey = false;
				colvarXttxhm.IsForeignKey = false;
				colvarXttxhm.IsReadOnly = false;
				colvarXttxhm.DefaultSetting = @"";
				colvarXttxhm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXttxhm);
				
				TableSchema.TableColumn colvarSczssl = new TableSchema.TableColumn(schema);
				colvarSczssl.ColumnName = "SCZSSL";
				colvarSczssl.DataType = DbType.Decimal;
				colvarSczssl.MaxLength = 0;
				colvarSczssl.AutoIncrement = false;
				colvarSczssl.IsNullable = true;
				colvarSczssl.IsPrimaryKey = false;
				colvarSczssl.IsForeignKey = false;
				colvarSczssl.IsReadOnly = false;
				colvarSczssl.DefaultSetting = @"";
				colvarSczssl.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSczssl);
				
				TableSchema.TableColumn colvarScjgdj = new TableSchema.TableColumn(schema);
				colvarScjgdj.ColumnName = "SCJGDJ";
				colvarScjgdj.DataType = DbType.Decimal;
				colvarScjgdj.MaxLength = 0;
				colvarScjgdj.AutoIncrement = false;
				colvarScjgdj.IsNullable = true;
				colvarScjgdj.IsPrimaryKey = false;
				colvarScjgdj.IsForeignKey = false;
				colvarScjgdj.IsReadOnly = false;
				colvarScjgdj.DefaultSetting = @"";
				colvarScjgdj.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScjgdj);
				
				TableSchema.TableColumn colvarScsuil = new TableSchema.TableColumn(schema);
				colvarScsuil.ColumnName = "SCSUIL";
				colvarScsuil.DataType = DbType.Decimal;
				colvarScsuil.MaxLength = 0;
				colvarScsuil.AutoIncrement = false;
				colvarScsuil.IsNullable = true;
				colvarScsuil.IsPrimaryKey = false;
				colvarScsuil.IsForeignKey = false;
				colvarScsuil.IsReadOnly = false;
				colvarScsuil.DefaultSetting = @"";
				colvarScsuil.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScsuil);
				
				TableSchema.TableColumn colvarScxqrq = new TableSchema.TableColumn(schema);
				colvarScxqrq.ColumnName = "SCXQRQ";
				colvarScxqrq.DataType = DbType.DateTime;
				colvarScxqrq.MaxLength = 0;
				colvarScxqrq.AutoIncrement = false;
				colvarScxqrq.IsNullable = true;
				colvarScxqrq.IsPrimaryKey = false;
				colvarScxqrq.IsForeignKey = false;
				colvarScxqrq.IsReadOnly = false;
				colvarScxqrq.DefaultSetting = @"";
				colvarScxqrq.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScxqrq);
				
				TableSchema.TableColumn colvarScdjbz = new TableSchema.TableColumn(schema);
				colvarScdjbz.ColumnName = "SCDJBZ";
				colvarScdjbz.DataType = DbType.String;
				colvarScdjbz.MaxLength = 255;
				colvarScdjbz.AutoIncrement = false;
				colvarScdjbz.IsNullable = true;
				colvarScdjbz.IsPrimaryKey = false;
				colvarScdjbz.IsForeignKey = false;
				colvarScdjbz.IsReadOnly = false;
				colvarScdjbz.DefaultSetting = @"";
				colvarScdjbz.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScdjbz);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ErpNowthwin"].AddSchema("SCT91",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Sczsbh")]
		[Bindable(true)]
		public string Sczsbh 
		{
			get { return GetColumnValue<string>(Columns.Sczsbh); }
			set { SetColumnValue(Columns.Sczsbh, value); }
		}
		  
		[XmlAttribute("Sczsxh")]
		[Bindable(true)]
		public decimal Sczsxh 
		{
			get { return GetColumnValue<decimal>(Columns.Sczsxh); }
			set { SetColumnValue(Columns.Sczsxh, value); }
		}
		  
		[XmlAttribute("Xttxhm")]
		[Bindable(true)]
		public string Xttxhm 
		{
			get { return GetColumnValue<string>(Columns.Xttxhm); }
			set { SetColumnValue(Columns.Xttxhm, value); }
		}
		  
		[XmlAttribute("Sczssl")]
		[Bindable(true)]
		public decimal? Sczssl 
		{
			get { return GetColumnValue<decimal?>(Columns.Sczssl); }
			set { SetColumnValue(Columns.Sczssl, value); }
		}
		  
		[XmlAttribute("Scjgdj")]
		[Bindable(true)]
		public decimal? Scjgdj 
		{
			get { return GetColumnValue<decimal?>(Columns.Scjgdj); }
			set { SetColumnValue(Columns.Scjgdj, value); }
		}
		  
		[XmlAttribute("Scsuil")]
		[Bindable(true)]
		public decimal? Scsuil 
		{
			get { return GetColumnValue<decimal?>(Columns.Scsuil); }
			set { SetColumnValue(Columns.Scsuil, value); }
		}
		  
		[XmlAttribute("Scxqrq")]
		[Bindable(true)]
		public DateTime? Scxqrq 
		{
			get { return GetColumnValue<DateTime?>(Columns.Scxqrq); }
			set { SetColumnValue(Columns.Scxqrq, value); }
		}
		  
		[XmlAttribute("Scdjbz")]
		[Bindable(true)]
		public string Scdjbz 
		{
			get { return GetColumnValue<string>(Columns.Scdjbz); }
			set { SetColumnValue(Columns.Scdjbz, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varSczsbh,decimal varSczsxh,string varXttxhm,decimal? varSczssl,decimal? varScjgdj,decimal? varScsuil,DateTime? varScxqrq,string varScdjbz)
		{
			SCT91 item = new SCT91();
			
			item.Sczsbh = varSczsbh;
			
			item.Sczsxh = varSczsxh;
			
			item.Xttxhm = varXttxhm;
			
			item.Sczssl = varSczssl;
			
			item.Scjgdj = varScjgdj;
			
			item.Scsuil = varScsuil;
			
			item.Scxqrq = varScxqrq;
			
			item.Scdjbz = varScdjbz;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(string varSczsbh,decimal varSczsxh,string varXttxhm,decimal? varSczssl,decimal? varScjgdj,decimal? varScsuil,DateTime? varScxqrq,string varScdjbz)
		{
			SCT91 item = new SCT91();
			
				item.Sczsbh = varSczsbh;
			
				item.Sczsxh = varSczsxh;
			
				item.Xttxhm = varXttxhm;
			
				item.Sczssl = varSczssl;
			
				item.Scjgdj = varScjgdj;
			
				item.Scsuil = varScsuil;
			
				item.Scxqrq = varScxqrq;
			
				item.Scdjbz = varScdjbz;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn SczsbhColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn SczsxhColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn XttxhmColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn SczsslColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn ScjgdjColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn ScsuilColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn ScxqrqColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn ScdjbzColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Sczsbh = @"SCZSBH";
			 public static string Sczsxh = @"SCZSXH";
			 public static string Xttxhm = @"XTTXHM";
			 public static string Sczssl = @"SCZSSL";
			 public static string Scjgdj = @"SCJGDJ";
			 public static string Scsuil = @"SCSUIL";
			 public static string Scxqrq = @"SCXQRQ";
			 public static string Scdjbz = @"SCDJBZ";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}

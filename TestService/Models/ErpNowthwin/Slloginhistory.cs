using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace OracleDataDomain
{
	/// <summary>
	/// Strongly-typed collection for the Slloginhistory class.
	/// </summary>
    [Serializable]
	public partial class SlloginhistoryCollection : ActiveList<Slloginhistory, SlloginhistoryCollection>
	{	   
		public SlloginhistoryCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>SlloginhistoryCollection</returns>
		public SlloginhistoryCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                Slloginhistory o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the SLLOGINHISTORY table.
	/// </summary>
	[Serializable]
	public partial class Slloginhistory : ActiveRecord<Slloginhistory>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public Slloginhistory()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public Slloginhistory(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public Slloginhistory(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public Slloginhistory(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("SLLOGINHISTORY", TableType.Table, DataService.GetInstance("ErpNowthwin"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"FYERP";
				//columns
				
				TableSchema.TableColumn colvarUserid = new TableSchema.TableColumn(schema);
				colvarUserid.ColumnName = "USERID";
				colvarUserid.DataType = DbType.String;
				colvarUserid.MaxLength = 50;
				colvarUserid.AutoIncrement = false;
				colvarUserid.IsNullable = true;
				colvarUserid.IsPrimaryKey = false;
				colvarUserid.IsForeignKey = false;
				colvarUserid.IsReadOnly = false;
				colvarUserid.DefaultSetting = @"";
				colvarUserid.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUserid);
				
				TableSchema.TableColumn colvarHostname = new TableSchema.TableColumn(schema);
				colvarHostname.ColumnName = "HOSTNAME";
				colvarHostname.DataType = DbType.String;
				colvarHostname.MaxLength = 50;
				colvarHostname.AutoIncrement = false;
				colvarHostname.IsNullable = true;
				colvarHostname.IsPrimaryKey = false;
				colvarHostname.IsForeignKey = false;
				colvarHostname.IsReadOnly = false;
				colvarHostname.DefaultSetting = @"";
				colvarHostname.ForeignKeyTableName = "";
				schema.Columns.Add(colvarHostname);
				
				TableSchema.TableColumn colvarHostip = new TableSchema.TableColumn(schema);
				colvarHostip.ColumnName = "HOSTIP";
				colvarHostip.DataType = DbType.String;
				colvarHostip.MaxLength = 50;
				colvarHostip.AutoIncrement = false;
				colvarHostip.IsNullable = true;
				colvarHostip.IsPrimaryKey = false;
				colvarHostip.IsForeignKey = false;
				colvarHostip.IsReadOnly = false;
				colvarHostip.DefaultSetting = @"";
				colvarHostip.ForeignKeyTableName = "";
				schema.Columns.Add(colvarHostip);
				
				TableSchema.TableColumn colvarCreatedate = new TableSchema.TableColumn(schema);
				colvarCreatedate.ColumnName = "CREATEDATE";
				colvarCreatedate.DataType = DbType.DateTime;
				colvarCreatedate.MaxLength = 0;
				colvarCreatedate.AutoIncrement = false;
				colvarCreatedate.IsNullable = true;
				colvarCreatedate.IsPrimaryKey = false;
				colvarCreatedate.IsForeignKey = false;
				colvarCreatedate.IsReadOnly = false;
				colvarCreatedate.DefaultSetting = @"";
				colvarCreatedate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedate);
				
				TableSchema.TableColumn colvarUpdatedate = new TableSchema.TableColumn(schema);
				colvarUpdatedate.ColumnName = "UPDATEDATE";
				colvarUpdatedate.DataType = DbType.DateTime;
				colvarUpdatedate.MaxLength = 0;
				colvarUpdatedate.AutoIncrement = false;
				colvarUpdatedate.IsNullable = true;
				colvarUpdatedate.IsPrimaryKey = false;
				colvarUpdatedate.IsForeignKey = false;
				colvarUpdatedate.IsReadOnly = false;
				colvarUpdatedate.DefaultSetting = @"";
				colvarUpdatedate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUpdatedate);
				
				TableSchema.TableColumn colvarMac = new TableSchema.TableColumn(schema);
				colvarMac.ColumnName = "MAC";
				colvarMac.DataType = DbType.String;
				colvarMac.MaxLength = 50;
				colvarMac.AutoIncrement = false;
				colvarMac.IsNullable = true;
				colvarMac.IsPrimaryKey = false;
				colvarMac.IsForeignKey = false;
				colvarMac.IsReadOnly = false;
				colvarMac.DefaultSetting = @"";
				colvarMac.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMac);
				
				TableSchema.TableColumn colvarInstid = new TableSchema.TableColumn(schema);
				colvarInstid.ColumnName = "INSTID";
				colvarInstid.DataType = DbType.String;
				colvarInstid.MaxLength = 50;
				colvarInstid.AutoIncrement = false;
				colvarInstid.IsNullable = false;
				colvarInstid.IsPrimaryKey = true;
				colvarInstid.IsForeignKey = false;
				colvarInstid.IsReadOnly = false;
				colvarInstid.DefaultSetting = @"";
				colvarInstid.ForeignKeyTableName = "";
				schema.Columns.Add(colvarInstid);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ErpNowthwin"].AddSchema("SLLOGINHISTORY",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Userid")]
		[Bindable(true)]
		public string Userid 
		{
			get { return GetColumnValue<string>(Columns.Userid); }
			set { SetColumnValue(Columns.Userid, value); }
		}
		  
		[XmlAttribute("Hostname")]
		[Bindable(true)]
		public string Hostname 
		{
			get { return GetColumnValue<string>(Columns.Hostname); }
			set { SetColumnValue(Columns.Hostname, value); }
		}
		  
		[XmlAttribute("Hostip")]
		[Bindable(true)]
		public string Hostip 
		{
			get { return GetColumnValue<string>(Columns.Hostip); }
			set { SetColumnValue(Columns.Hostip, value); }
		}
		  
		[XmlAttribute("Createdate")]
		[Bindable(true)]
		public DateTime? Createdate 
		{
			get { return GetColumnValue<DateTime?>(Columns.Createdate); }
			set { SetColumnValue(Columns.Createdate, value); }
		}
		  
		[XmlAttribute("Updatedate")]
		[Bindable(true)]
		public DateTime? Updatedate 
		{
			get { return GetColumnValue<DateTime?>(Columns.Updatedate); }
			set { SetColumnValue(Columns.Updatedate, value); }
		}
		  
		[XmlAttribute("Mac")]
		[Bindable(true)]
		public string Mac 
		{
			get { return GetColumnValue<string>(Columns.Mac); }
			set { SetColumnValue(Columns.Mac, value); }
		}
		  
		[XmlAttribute("Instid")]
		[Bindable(true)]
		public string Instid 
		{
			get { return GetColumnValue<string>(Columns.Instid); }
			set { SetColumnValue(Columns.Instid, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varUserid,string varHostname,string varHostip,DateTime? varCreatedate,DateTime? varUpdatedate,string varMac,string varInstid)
		{
			Slloginhistory item = new Slloginhistory();
			
			item.Userid = varUserid;
			
			item.Hostname = varHostname;
			
			item.Hostip = varHostip;
			
			item.Createdate = varCreatedate;
			
			item.Updatedate = varUpdatedate;
			
			item.Mac = varMac;
			
			item.Instid = varInstid;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(string varUserid,string varHostname,string varHostip,DateTime? varCreatedate,DateTime? varUpdatedate,string varMac,string varInstid)
		{
			Slloginhistory item = new Slloginhistory();
			
				item.Userid = varUserid;
			
				item.Hostname = varHostname;
			
				item.Hostip = varHostip;
			
				item.Createdate = varCreatedate;
			
				item.Updatedate = varUpdatedate;
			
				item.Mac = varMac;
			
				item.Instid = varInstid;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn UseridColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn HostnameColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn HostipColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn CreatedateColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn UpdatedateColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn MacColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn InstidColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Userid = @"USERID";
			 public static string Hostname = @"HOSTNAME";
			 public static string Hostip = @"HOSTIP";
			 public static string Createdate = @"CREATEDATE";
			 public static string Updatedate = @"UPDATEDATE";
			 public static string Mac = @"MAC";
			 public static string Instid = @"INSTID";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}

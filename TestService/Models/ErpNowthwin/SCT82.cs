using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace OracleDataDomain
{
	/// <summary>
	/// Strongly-typed collection for the SCT82 class.
	/// </summary>
    [Serializable]
	public partial class SCT82Collection : ActiveList<SCT82, SCT82Collection>
	{	   
		public SCT82Collection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>SCT82Collection</returns>
		public SCT82Collection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                SCT82 o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the SCT82 table.
	/// </summary>
	[Serializable]
	public partial class SCT82 : ActiveRecord<SCT82>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public SCT82()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public SCT82(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public SCT82(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public SCT82(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("SCT82", TableType.Table, DataService.GetInstance("ErpNowthwin"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"FYERP";
				//columns
				
				TableSchema.TableColumn colvarScsfbh = new TableSchema.TableColumn(schema);
				colvarScsfbh.ColumnName = "SCSFBH";
				colvarScsfbh.DataType = DbType.String;
				colvarScsfbh.MaxLength = 12;
				colvarScsfbh.AutoIncrement = false;
				colvarScsfbh.IsNullable = false;
				colvarScsfbh.IsPrimaryKey = true;
				colvarScsfbh.IsForeignKey = false;
				colvarScsfbh.IsReadOnly = false;
				colvarScsfbh.DefaultSetting = @"";
				colvarScsfbh.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScsfbh);
				
				TableSchema.TableColumn colvarScsfxh = new TableSchema.TableColumn(schema);
				colvarScsfxh.ColumnName = "SCSFXH";
				colvarScsfxh.DataType = DbType.Decimal;
				colvarScsfxh.MaxLength = 0;
				colvarScsfxh.AutoIncrement = false;
				colvarScsfxh.IsNullable = false;
				colvarScsfxh.IsPrimaryKey = true;
				colvarScsfxh.IsForeignKey = false;
				colvarScsfxh.IsReadOnly = false;
				colvarScsfxh.DefaultSetting = @"";
				colvarScsfxh.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScsfxh);
				
				TableSchema.TableColumn colvarXtwpdm = new TableSchema.TableColumn(schema);
				colvarXtwpdm.ColumnName = "XTWPDM";
				colvarXtwpdm.DataType = DbType.String;
				colvarXtwpdm.MaxLength = 20;
				colvarXtwpdm.AutoIncrement = false;
				colvarXtwpdm.IsNullable = false;
				colvarXtwpdm.IsPrimaryKey = true;
				colvarXtwpdm.IsForeignKey = false;
				colvarXtwpdm.IsReadOnly = false;
				colvarXtwpdm.DefaultSetting = @"";
				colvarXtwpdm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXtwpdm);
				
				TableSchema.TableColumn colvarScsfsl = new TableSchema.TableColumn(schema);
				colvarScsfsl.ColumnName = "SCSFSL";
				colvarScsfsl.DataType = DbType.Decimal;
				colvarScsfsl.MaxLength = 0;
				colvarScsfsl.AutoIncrement = false;
				colvarScsfsl.IsNullable = true;
				colvarScsfsl.IsPrimaryKey = false;
				colvarScsfsl.IsForeignKey = false;
				colvarScsfsl.IsReadOnly = false;
				colvarScsfsl.DefaultSetting = @"";
				colvarScsfsl.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScsfsl);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ErpNowthwin"].AddSchema("SCT82",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Scsfbh")]
		[Bindable(true)]
		public string Scsfbh 
		{
			get { return GetColumnValue<string>(Columns.Scsfbh); }
			set { SetColumnValue(Columns.Scsfbh, value); }
		}
		  
		[XmlAttribute("Scsfxh")]
		[Bindable(true)]
		public decimal Scsfxh 
		{
			get { return GetColumnValue<decimal>(Columns.Scsfxh); }
			set { SetColumnValue(Columns.Scsfxh, value); }
		}
		  
		[XmlAttribute("Xtwpdm")]
		[Bindable(true)]
		public string Xtwpdm 
		{
			get { return GetColumnValue<string>(Columns.Xtwpdm); }
			set { SetColumnValue(Columns.Xtwpdm, value); }
		}
		  
		[XmlAttribute("Scsfsl")]
		[Bindable(true)]
		public decimal? Scsfsl 
		{
			get { return GetColumnValue<decimal?>(Columns.Scsfsl); }
			set { SetColumnValue(Columns.Scsfsl, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varScsfbh,decimal varScsfxh,string varXtwpdm,decimal? varScsfsl)
		{
			SCT82 item = new SCT82();
			
			item.Scsfbh = varScsfbh;
			
			item.Scsfxh = varScsfxh;
			
			item.Xtwpdm = varXtwpdm;
			
			item.Scsfsl = varScsfsl;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(string varScsfbh,decimal varScsfxh,string varXtwpdm,decimal? varScsfsl)
		{
			SCT82 item = new SCT82();
			
				item.Scsfbh = varScsfbh;
			
				item.Scsfxh = varScsfxh;
			
				item.Xtwpdm = varXtwpdm;
			
				item.Scsfsl = varScsfsl;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn ScsfbhColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn ScsfxhColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn XtwpdmColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn ScsfslColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Scsfbh = @"SCSFBH";
			 public static string Scsfxh = @"SCSFXH";
			 public static string Xtwpdm = @"XTWPDM";
			 public static string Scsfsl = @"SCSFSL";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}

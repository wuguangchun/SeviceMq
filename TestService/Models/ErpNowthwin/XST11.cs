using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace OracleDataDomain
{
	/// <summary>
	/// Strongly-typed collection for the XST11 class.
	/// </summary>
    [Serializable]
	public partial class XST11Collection : ActiveList<XST11, XST11Collection>
	{	   
		public XST11Collection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>XST11Collection</returns>
		public XST11Collection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                XST11 o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the XST11 table.
	/// </summary>
	[Serializable]
	public partial class XST11 : ActiveRecord<XST11>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public XST11()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public XST11(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public XST11(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public XST11(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("XST11", TableType.Table, DataService.GetInstance("ErpNowthwin"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"FYERP";
				//columns
				
				TableSchema.TableColumn colvarXsfyhm = new TableSchema.TableColumn(schema);
				colvarXsfyhm.ColumnName = "XSFYHM";
				colvarXsfyhm.DataType = DbType.String;
				colvarXsfyhm.MaxLength = 12;
				colvarXsfyhm.AutoIncrement = false;
				colvarXsfyhm.IsNullable = false;
				colvarXsfyhm.IsPrimaryKey = true;
				colvarXsfyhm.IsForeignKey = false;
				colvarXsfyhm.IsReadOnly = false;
				colvarXsfyhm.DefaultSetting = @"";
				colvarXsfyhm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXsfyhm);
				
				TableSchema.TableColumn colvarXtjsfs = new TableSchema.TableColumn(schema);
				colvarXtjsfs.ColumnName = "XTJSFS";
				colvarXtjsfs.DataType = DbType.String;
				colvarXtjsfs.MaxLength = 4;
				colvarXtjsfs.AutoIncrement = false;
				colvarXtjsfs.IsNullable = true;
				colvarXtjsfs.IsPrimaryKey = false;
				colvarXtjsfs.IsForeignKey = false;
				colvarXtjsfs.IsReadOnly = false;
				colvarXtjsfs.DefaultSetting = @"";
				colvarXtjsfs.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXtjsfs);
				
				TableSchema.TableColumn colvarXtwldm = new TableSchema.TableColumn(schema);
				colvarXtwldm.ColumnName = "XTWLDM";
				colvarXtwldm.DataType = DbType.String;
				colvarXtwldm.MaxLength = 8;
				colvarXtwldm.AutoIncrement = false;
				colvarXtwldm.IsNullable = true;
				colvarXtwldm.IsPrimaryKey = false;
				colvarXtwldm.IsForeignKey = false;
				colvarXtwldm.IsReadOnly = false;
				colvarXtwldm.DefaultSetting = @"";
				colvarXtwldm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXtwldm);
				
				TableSchema.TableColumn colvarXtbmdm = new TableSchema.TableColumn(schema);
				colvarXtbmdm.ColumnName = "XTBMDM";
				colvarXtbmdm.DataType = DbType.String;
				colvarXtbmdm.MaxLength = 8;
				colvarXtbmdm.AutoIncrement = false;
				colvarXtbmdm.IsNullable = true;
				colvarXtbmdm.IsPrimaryKey = false;
				colvarXtbmdm.IsForeignKey = false;
				colvarXtbmdm.IsReadOnly = false;
				colvarXtbmdm.DefaultSetting = @"";
				colvarXtbmdm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXtbmdm);
				
				TableSchema.TableColumn colvarXsfyje = new TableSchema.TableColumn(schema);
				colvarXsfyje.ColumnName = "XSFYJE";
				colvarXsfyje.DataType = DbType.Decimal;
				colvarXsfyje.MaxLength = 0;
				colvarXsfyje.AutoIncrement = false;
				colvarXsfyje.IsNullable = true;
				colvarXsfyje.IsPrimaryKey = false;
				colvarXsfyje.IsForeignKey = false;
				colvarXsfyje.IsReadOnly = false;
				colvarXsfyje.DefaultSetting = @"";
				colvarXsfyje.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXsfyje);
				
				TableSchema.TableColumn colvarXsfyrq = new TableSchema.TableColumn(schema);
				colvarXsfyrq.ColumnName = "XSFYRQ";
				colvarXsfyrq.DataType = DbType.DateTime;
				colvarXsfyrq.MaxLength = 0;
				colvarXsfyrq.AutoIncrement = false;
				colvarXsfyrq.IsNullable = true;
				colvarXsfyrq.IsPrimaryKey = false;
				colvarXsfyrq.IsForeignKey = false;
				colvarXsfyrq.IsReadOnly = false;
				colvarXsfyrq.DefaultSetting = @"";
				colvarXsfyrq.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXsfyrq);
				
				TableSchema.TableColumn colvarXskjnd = new TableSchema.TableColumn(schema);
				colvarXskjnd.ColumnName = "XSKJND";
				colvarXskjnd.DataType = DbType.Decimal;
				colvarXskjnd.MaxLength = 0;
				colvarXskjnd.AutoIncrement = false;
				colvarXskjnd.IsNullable = true;
				colvarXskjnd.IsPrimaryKey = false;
				colvarXskjnd.IsForeignKey = false;
				colvarXskjnd.IsReadOnly = false;
				colvarXskjnd.DefaultSetting = @"";
				colvarXskjnd.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXskjnd);
				
				TableSchema.TableColumn colvarXskjyf = new TableSchema.TableColumn(schema);
				colvarXskjyf.ColumnName = "XSKJYF";
				colvarXskjyf.DataType = DbType.Decimal;
				colvarXskjyf.MaxLength = 0;
				colvarXskjyf.AutoIncrement = false;
				colvarXskjyf.IsNullable = true;
				colvarXskjyf.IsPrimaryKey = false;
				colvarXskjyf.IsForeignKey = false;
				colvarXskjyf.IsReadOnly = false;
				colvarXskjyf.DefaultSetting = @"";
				colvarXskjyf.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXskjyf);
				
				TableSchema.TableColumn colvarXszphm = new TableSchema.TableColumn(schema);
				colvarXszphm.ColumnName = "XSZPHM";
				colvarXszphm.DataType = DbType.String;
				colvarXszphm.MaxLength = 12;
				colvarXszphm.AutoIncrement = false;
				colvarXszphm.IsNullable = true;
				colvarXszphm.IsPrimaryKey = false;
				colvarXszphm.IsForeignKey = false;
				colvarXszphm.IsReadOnly = false;
				colvarXszphm.DefaultSetting = @"";
				colvarXszphm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXszphm);
				
				TableSchema.TableColumn colvarXsfylx = new TableSchema.TableColumn(schema);
				colvarXsfylx.ColumnName = "XSFYLX";
				colvarXsfylx.DataType = DbType.String;
				colvarXsfylx.MaxLength = 3;
				colvarXsfylx.AutoIncrement = false;
				colvarXsfylx.IsNullable = true;
				colvarXsfylx.IsPrimaryKey = false;
				colvarXsfylx.IsForeignKey = false;
				colvarXsfylx.IsReadOnly = false;
				colvarXsfylx.DefaultSetting = @"";
				colvarXsfylx.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXsfylx);
				
				TableSchema.TableColumn colvarXsfyzt = new TableSchema.TableColumn(schema);
				colvarXsfyzt.ColumnName = "XSFYZT";
				colvarXsfyzt.DataType = DbType.String;
				colvarXsfyzt.MaxLength = 1;
				colvarXsfyzt.AutoIncrement = false;
				colvarXsfyzt.IsNullable = true;
				colvarXsfyzt.IsPrimaryKey = false;
				colvarXsfyzt.IsForeignKey = false;
				colvarXsfyzt.IsReadOnly = false;
				colvarXsfyzt.DefaultSetting = @"";
				colvarXsfyzt.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXsfyzt);
				
				TableSchema.TableColumn colvarXslrry = new TableSchema.TableColumn(schema);
				colvarXslrry.ColumnName = "XSLRRY";
				colvarXslrry.DataType = DbType.String;
				colvarXslrry.MaxLength = 8;
				colvarXslrry.AutoIncrement = false;
				colvarXslrry.IsNullable = true;
				colvarXslrry.IsPrimaryKey = false;
				colvarXslrry.IsForeignKey = false;
				colvarXslrry.IsReadOnly = false;
				colvarXslrry.DefaultSetting = @"";
				colvarXslrry.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXslrry);
				
				TableSchema.TableColumn colvarXslrrq = new TableSchema.TableColumn(schema);
				colvarXslrrq.ColumnName = "XSLRRQ";
				colvarXslrrq.DataType = DbType.DateTime;
				colvarXslrrq.MaxLength = 0;
				colvarXslrrq.AutoIncrement = false;
				colvarXslrrq.IsNullable = true;
				colvarXslrrq.IsPrimaryKey = false;
				colvarXslrrq.IsForeignKey = false;
				colvarXslrrq.IsReadOnly = false;
				colvarXslrrq.DefaultSetting = @"";
				colvarXslrrq.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXslrrq);
				
				TableSchema.TableColumn colvarXsshry = new TableSchema.TableColumn(schema);
				colvarXsshry.ColumnName = "XSSHRY";
				colvarXsshry.DataType = DbType.String;
				colvarXsshry.MaxLength = 8;
				colvarXsshry.AutoIncrement = false;
				colvarXsshry.IsNullable = true;
				colvarXsshry.IsPrimaryKey = false;
				colvarXsshry.IsForeignKey = false;
				colvarXsshry.IsReadOnly = false;
				colvarXsshry.DefaultSetting = @"";
				colvarXsshry.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXsshry);
				
				TableSchema.TableColumn colvarXsshrq = new TableSchema.TableColumn(schema);
				colvarXsshrq.ColumnName = "XSSHRQ";
				colvarXsshrq.DataType = DbType.DateTime;
				colvarXsshrq.MaxLength = 0;
				colvarXsshrq.AutoIncrement = false;
				colvarXsshrq.IsNullable = true;
				colvarXsshrq.IsPrimaryKey = false;
				colvarXsshrq.IsForeignKey = false;
				colvarXsshrq.IsReadOnly = false;
				colvarXsshrq.DefaultSetting = @"";
				colvarXsshrq.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXsshrq);
				
				TableSchema.TableColumn colvarXsfybz = new TableSchema.TableColumn(schema);
				colvarXsfybz.ColumnName = "XSFYBZ";
				colvarXsfybz.DataType = DbType.String;
				colvarXsfybz.MaxLength = 255;
				colvarXsfybz.AutoIncrement = false;
				colvarXsfybz.IsNullable = true;
				colvarXsfybz.IsPrimaryKey = false;
				colvarXsfybz.IsForeignKey = false;
				colvarXsfybz.IsReadOnly = false;
				colvarXsfybz.DefaultSetting = @"";
				colvarXsfybz.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXsfybz);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ErpNowthwin"].AddSchema("XST11",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Xsfyhm")]
		[Bindable(true)]
		public string Xsfyhm 
		{
			get { return GetColumnValue<string>(Columns.Xsfyhm); }
			set { SetColumnValue(Columns.Xsfyhm, value); }
		}
		  
		[XmlAttribute("Xtjsfs")]
		[Bindable(true)]
		public string Xtjsfs 
		{
			get { return GetColumnValue<string>(Columns.Xtjsfs); }
			set { SetColumnValue(Columns.Xtjsfs, value); }
		}
		  
		[XmlAttribute("Xtwldm")]
		[Bindable(true)]
		public string Xtwldm 
		{
			get { return GetColumnValue<string>(Columns.Xtwldm); }
			set { SetColumnValue(Columns.Xtwldm, value); }
		}
		  
		[XmlAttribute("Xtbmdm")]
		[Bindable(true)]
		public string Xtbmdm 
		{
			get { return GetColumnValue<string>(Columns.Xtbmdm); }
			set { SetColumnValue(Columns.Xtbmdm, value); }
		}
		  
		[XmlAttribute("Xsfyje")]
		[Bindable(true)]
		public decimal? Xsfyje 
		{
			get { return GetColumnValue<decimal?>(Columns.Xsfyje); }
			set { SetColumnValue(Columns.Xsfyje, value); }
		}
		  
		[XmlAttribute("Xsfyrq")]
		[Bindable(true)]
		public DateTime? Xsfyrq 
		{
			get { return GetColumnValue<DateTime?>(Columns.Xsfyrq); }
			set { SetColumnValue(Columns.Xsfyrq, value); }
		}
		  
		[XmlAttribute("Xskjnd")]
		[Bindable(true)]
		public decimal? Xskjnd 
		{
			get { return GetColumnValue<decimal?>(Columns.Xskjnd); }
			set { SetColumnValue(Columns.Xskjnd, value); }
		}
		  
		[XmlAttribute("Xskjyf")]
		[Bindable(true)]
		public decimal? Xskjyf 
		{
			get { return GetColumnValue<decimal?>(Columns.Xskjyf); }
			set { SetColumnValue(Columns.Xskjyf, value); }
		}
		  
		[XmlAttribute("Xszphm")]
		[Bindable(true)]
		public string Xszphm 
		{
			get { return GetColumnValue<string>(Columns.Xszphm); }
			set { SetColumnValue(Columns.Xszphm, value); }
		}
		  
		[XmlAttribute("Xsfylx")]
		[Bindable(true)]
		public string Xsfylx 
		{
			get { return GetColumnValue<string>(Columns.Xsfylx); }
			set { SetColumnValue(Columns.Xsfylx, value); }
		}
		  
		[XmlAttribute("Xsfyzt")]
		[Bindable(true)]
		public string Xsfyzt 
		{
			get { return GetColumnValue<string>(Columns.Xsfyzt); }
			set { SetColumnValue(Columns.Xsfyzt, value); }
		}
		  
		[XmlAttribute("Xslrry")]
		[Bindable(true)]
		public string Xslrry 
		{
			get { return GetColumnValue<string>(Columns.Xslrry); }
			set { SetColumnValue(Columns.Xslrry, value); }
		}
		  
		[XmlAttribute("Xslrrq")]
		[Bindable(true)]
		public DateTime? Xslrrq 
		{
			get { return GetColumnValue<DateTime?>(Columns.Xslrrq); }
			set { SetColumnValue(Columns.Xslrrq, value); }
		}
		  
		[XmlAttribute("Xsshry")]
		[Bindable(true)]
		public string Xsshry 
		{
			get { return GetColumnValue<string>(Columns.Xsshry); }
			set { SetColumnValue(Columns.Xsshry, value); }
		}
		  
		[XmlAttribute("Xsshrq")]
		[Bindable(true)]
		public DateTime? Xsshrq 
		{
			get { return GetColumnValue<DateTime?>(Columns.Xsshrq); }
			set { SetColumnValue(Columns.Xsshrq, value); }
		}
		  
		[XmlAttribute("Xsfybz")]
		[Bindable(true)]
		public string Xsfybz 
		{
			get { return GetColumnValue<string>(Columns.Xsfybz); }
			set { SetColumnValue(Columns.Xsfybz, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varXsfyhm,string varXtjsfs,string varXtwldm,string varXtbmdm,decimal? varXsfyje,DateTime? varXsfyrq,decimal? varXskjnd,decimal? varXskjyf,string varXszphm,string varXsfylx,string varXsfyzt,string varXslrry,DateTime? varXslrrq,string varXsshry,DateTime? varXsshrq,string varXsfybz)
		{
			XST11 item = new XST11();
			
			item.Xsfyhm = varXsfyhm;
			
			item.Xtjsfs = varXtjsfs;
			
			item.Xtwldm = varXtwldm;
			
			item.Xtbmdm = varXtbmdm;
			
			item.Xsfyje = varXsfyje;
			
			item.Xsfyrq = varXsfyrq;
			
			item.Xskjnd = varXskjnd;
			
			item.Xskjyf = varXskjyf;
			
			item.Xszphm = varXszphm;
			
			item.Xsfylx = varXsfylx;
			
			item.Xsfyzt = varXsfyzt;
			
			item.Xslrry = varXslrry;
			
			item.Xslrrq = varXslrrq;
			
			item.Xsshry = varXsshry;
			
			item.Xsshrq = varXsshrq;
			
			item.Xsfybz = varXsfybz;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(string varXsfyhm,string varXtjsfs,string varXtwldm,string varXtbmdm,decimal? varXsfyje,DateTime? varXsfyrq,decimal? varXskjnd,decimal? varXskjyf,string varXszphm,string varXsfylx,string varXsfyzt,string varXslrry,DateTime? varXslrrq,string varXsshry,DateTime? varXsshrq,string varXsfybz)
		{
			XST11 item = new XST11();
			
				item.Xsfyhm = varXsfyhm;
			
				item.Xtjsfs = varXtjsfs;
			
				item.Xtwldm = varXtwldm;
			
				item.Xtbmdm = varXtbmdm;
			
				item.Xsfyje = varXsfyje;
			
				item.Xsfyrq = varXsfyrq;
			
				item.Xskjnd = varXskjnd;
			
				item.Xskjyf = varXskjyf;
			
				item.Xszphm = varXszphm;
			
				item.Xsfylx = varXsfylx;
			
				item.Xsfyzt = varXsfyzt;
			
				item.Xslrry = varXslrry;
			
				item.Xslrrq = varXslrrq;
			
				item.Xsshry = varXsshry;
			
				item.Xsshrq = varXsshrq;
			
				item.Xsfybz = varXsfybz;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn XsfyhmColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn XtjsfsColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn XtwldmColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn XtbmdmColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn XsfyjeColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn XsfyrqColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn XskjndColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn XskjyfColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn XszphmColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn XsfylxColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn XsfyztColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn XslrryColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn XslrrqColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        public static TableSchema.TableColumn XsshryColumn
        {
            get { return Schema.Columns[13]; }
        }
        
        
        
        public static TableSchema.TableColumn XsshrqColumn
        {
            get { return Schema.Columns[14]; }
        }
        
        
        
        public static TableSchema.TableColumn XsfybzColumn
        {
            get { return Schema.Columns[15]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Xsfyhm = @"XSFYHM";
			 public static string Xtjsfs = @"XTJSFS";
			 public static string Xtwldm = @"XTWLDM";
			 public static string Xtbmdm = @"XTBMDM";
			 public static string Xsfyje = @"XSFYJE";
			 public static string Xsfyrq = @"XSFYRQ";
			 public static string Xskjnd = @"XSKJND";
			 public static string Xskjyf = @"XSKJYF";
			 public static string Xszphm = @"XSZPHM";
			 public static string Xsfylx = @"XSFYLX";
			 public static string Xsfyzt = @"XSFYZT";
			 public static string Xslrry = @"XSLRRY";
			 public static string Xslrrq = @"XSLRRQ";
			 public static string Xsshry = @"XSSHRY";
			 public static string Xsshrq = @"XSSHRQ";
			 public static string Xsfybz = @"XSFYBZ";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}

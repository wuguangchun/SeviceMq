using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace OracleDataDomain
{
	/// <summary>
	/// Strongly-typed collection for the SCT74 class.
	/// </summary>
    [Serializable]
	public partial class SCT74Collection : ActiveList<SCT74, SCT74Collection>
	{	   
		public SCT74Collection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>SCT74Collection</returns>
		public SCT74Collection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                SCT74 o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the SCT74 table.
	/// </summary>
	[Serializable]
	public partial class SCT74 : ActiveRecord<SCT74>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public SCT74()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public SCT74(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public SCT74(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public SCT74(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("SCT74", TableType.Table, DataService.GetInstance("ErpNowthwin"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"FYERP";
				//columns
				
				TableSchema.TableColumn colvarScgyxh = new TableSchema.TableColumn(schema);
				colvarScgyxh.ColumnName = "SCGYXH";
				colvarScgyxh.DataType = DbType.Decimal;
				colvarScgyxh.MaxLength = 0;
				colvarScgyxh.AutoIncrement = false;
				colvarScgyxh.IsNullable = false;
				colvarScgyxh.IsPrimaryKey = true;
				colvarScgyxh.IsForeignKey = false;
				colvarScgyxh.IsReadOnly = false;
				colvarScgyxh.DefaultSetting = @"";
				colvarScgyxh.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScgyxh);
				
				TableSchema.TableColumn colvarScgydm = new TableSchema.TableColumn(schema);
				colvarScgydm.ColumnName = "SCGYDM";
				colvarScgydm.DataType = DbType.String;
				colvarScgydm.MaxLength = 10;
				colvarScgydm.AutoIncrement = false;
				colvarScgydm.IsNullable = true;
				colvarScgydm.IsPrimaryKey = false;
				colvarScgydm.IsForeignKey = false;
				colvarScgydm.IsReadOnly = false;
				colvarScgydm.DefaultSetting = @"";
				colvarScgydm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScgydm);
				
				TableSchema.TableColumn colvarScgymc = new TableSchema.TableColumn(schema);
				colvarScgymc.ColumnName = "SCGYMC";
				colvarScgymc.DataType = DbType.String;
				colvarScgymc.MaxLength = 255;
				colvarScgymc.AutoIncrement = false;
				colvarScgymc.IsNullable = true;
				colvarScgymc.IsPrimaryKey = false;
				colvarScgymc.IsForeignKey = false;
				colvarScgymc.IsReadOnly = false;
				colvarScgymc.DefaultSetting = @"";
				colvarScgymc.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScgymc);
				
				TableSchema.TableColumn colvarScjzdm = new TableSchema.TableColumn(schema);
				colvarScjzdm.ColumnName = "SCJZDM";
				colvarScjzdm.DataType = DbType.String;
				colvarScjzdm.MaxLength = 10;
				colvarScjzdm.AutoIncrement = false;
				colvarScjzdm.IsNullable = true;
				colvarScjzdm.IsPrimaryKey = false;
				colvarScjzdm.IsForeignKey = false;
				colvarScjzdm.IsReadOnly = false;
				colvarScjzdm.DefaultSetting = @"";
				colvarScjzdm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScjzdm);
				
				TableSchema.TableColumn colvarScbzgs = new TableSchema.TableColumn(schema);
				colvarScbzgs.ColumnName = "SCBZGS";
				colvarScbzgs.DataType = DbType.Decimal;
				colvarScbzgs.MaxLength = 0;
				colvarScbzgs.AutoIncrement = false;
				colvarScbzgs.IsNullable = true;
				colvarScbzgs.IsPrimaryKey = false;
				colvarScbzgs.IsForeignKey = false;
				colvarScbzgs.IsReadOnly = false;
				colvarScbzgs.DefaultSetting = @"";
				colvarScbzgs.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScbzgs);
				
				TableSchema.TableColumn colvarScbzdj = new TableSchema.TableColumn(schema);
				colvarScbzdj.ColumnName = "SCBZDJ";
				colvarScbzdj.DataType = DbType.Decimal;
				colvarScbzdj.MaxLength = 0;
				colvarScbzdj.AutoIncrement = false;
				colvarScbzdj.IsNullable = true;
				colvarScbzdj.IsPrimaryKey = false;
				colvarScbzdj.IsForeignKey = false;
				colvarScbzdj.IsReadOnly = false;
				colvarScbzdj.DefaultSetting = @"";
				colvarScbzdj.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScbzdj);
				
				TableSchema.TableColumn colvarScgybz = new TableSchema.TableColumn(schema);
				colvarScgybz.ColumnName = "SCGYBZ";
				colvarScgybz.DataType = DbType.String;
				colvarScgybz.MaxLength = 255;
				colvarScgybz.AutoIncrement = false;
				colvarScgybz.IsNullable = true;
				colvarScgybz.IsPrimaryKey = false;
				colvarScgybz.IsForeignKey = false;
				colvarScgybz.IsReadOnly = false;
				colvarScgybz.DefaultSetting = @"";
				colvarScgybz.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScgybz);
				
				TableSchema.TableColumn colvarSczjbz = new TableSchema.TableColumn(schema);
				colvarSczjbz.ColumnName = "SCZJBZ";
				colvarSczjbz.DataType = DbType.String;
				colvarSczjbz.MaxLength = 1;
				colvarSczjbz.AutoIncrement = false;
				colvarSczjbz.IsNullable = true;
				colvarSczjbz.IsPrimaryKey = false;
				colvarSczjbz.IsForeignKey = false;
				colvarSczjbz.IsReadOnly = false;
				colvarSczjbz.DefaultSetting = @"";
				colvarSczjbz.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSczjbz);
				
				TableSchema.TableColumn colvarScjzjg = new TableSchema.TableColumn(schema);
				colvarScjzjg.ColumnName = "SCJZJG";
				colvarScjzjg.DataType = DbType.String;
				colvarScjzjg.MaxLength = 1;
				colvarScjzjg.AutoIncrement = false;
				colvarScjzjg.IsNullable = true;
				colvarScjzjg.IsPrimaryKey = false;
				colvarScjzjg.IsForeignKey = false;
				colvarScjzjg.IsReadOnly = false;
				colvarScjzjg.DefaultSetting = @"";
				colvarScjzjg.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScjzjg);
				
				TableSchema.TableColumn colvarSczsbh = new TableSchema.TableColumn(schema);
				colvarSczsbh.ColumnName = "SCZSBH";
				colvarSczsbh.DataType = DbType.String;
				colvarSczsbh.MaxLength = 12;
				colvarSczsbh.AutoIncrement = false;
				colvarSczsbh.IsNullable = false;
				colvarSczsbh.IsPrimaryKey = true;
				colvarSczsbh.IsForeignKey = false;
				colvarSczsbh.IsReadOnly = false;
				colvarSczsbh.DefaultSetting = @"";
				colvarSczsbh.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSczsbh);
				
				TableSchema.TableColumn colvarSchtbh = new TableSchema.TableColumn(schema);
				colvarSchtbh.ColumnName = "SCHTBH";
				colvarSchtbh.DataType = DbType.String;
				colvarSchtbh.MaxLength = 12;
				colvarSchtbh.AutoIncrement = false;
				colvarSchtbh.IsNullable = false;
				colvarSchtbh.IsPrimaryKey = true;
				colvarSchtbh.IsForeignKey = false;
				colvarSchtbh.IsReadOnly = false;
				colvarSchtbh.DefaultSetting = @"";
				colvarSchtbh.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSchtbh);
				
				TableSchema.TableColumn colvarSchtxh = new TableSchema.TableColumn(schema);
				colvarSchtxh.ColumnName = "SCHTXH";
				colvarSchtxh.DataType = DbType.Decimal;
				colvarSchtxh.MaxLength = 0;
				colvarSchtxh.AutoIncrement = false;
				colvarSchtxh.IsNullable = false;
				colvarSchtxh.IsPrimaryKey = true;
				colvarSchtxh.IsForeignKey = false;
				colvarSchtxh.IsReadOnly = false;
				colvarSchtxh.DefaultSetting = @"";
				colvarSchtxh.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSchtxh);
				
				TableSchema.TableColumn colvarScfddm = new TableSchema.TableColumn(schema);
				colvarScfddm.ColumnName = "SCFDDM";
				colvarScfddm.DataType = DbType.String;
				colvarScfddm.MaxLength = 10;
				colvarScfddm.AutoIncrement = false;
				colvarScfddm.IsNullable = false;
				colvarScfddm.IsPrimaryKey = true;
				colvarScfddm.IsForeignKey = false;
				colvarScfddm.IsReadOnly = false;
				colvarScfddm.DefaultSetting = @"";
				colvarScfddm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScfddm);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ErpNowthwin"].AddSchema("SCT74",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Scgyxh")]
		[Bindable(true)]
		public decimal Scgyxh 
		{
			get { return GetColumnValue<decimal>(Columns.Scgyxh); }
			set { SetColumnValue(Columns.Scgyxh, value); }
		}
		  
		[XmlAttribute("Scgydm")]
		[Bindable(true)]
		public string Scgydm 
		{
			get { return GetColumnValue<string>(Columns.Scgydm); }
			set { SetColumnValue(Columns.Scgydm, value); }
		}
		  
		[XmlAttribute("Scgymc")]
		[Bindable(true)]
		public string Scgymc 
		{
			get { return GetColumnValue<string>(Columns.Scgymc); }
			set { SetColumnValue(Columns.Scgymc, value); }
		}
		  
		[XmlAttribute("Scjzdm")]
		[Bindable(true)]
		public string Scjzdm 
		{
			get { return GetColumnValue<string>(Columns.Scjzdm); }
			set { SetColumnValue(Columns.Scjzdm, value); }
		}
		  
		[XmlAttribute("Scbzgs")]
		[Bindable(true)]
		public decimal? Scbzgs 
		{
			get { return GetColumnValue<decimal?>(Columns.Scbzgs); }
			set { SetColumnValue(Columns.Scbzgs, value); }
		}
		  
		[XmlAttribute("Scbzdj")]
		[Bindable(true)]
		public decimal? Scbzdj 
		{
			get { return GetColumnValue<decimal?>(Columns.Scbzdj); }
			set { SetColumnValue(Columns.Scbzdj, value); }
		}
		  
		[XmlAttribute("Scgybz")]
		[Bindable(true)]
		public string Scgybz 
		{
			get { return GetColumnValue<string>(Columns.Scgybz); }
			set { SetColumnValue(Columns.Scgybz, value); }
		}
		  
		[XmlAttribute("Sczjbz")]
		[Bindable(true)]
		public string Sczjbz 
		{
			get { return GetColumnValue<string>(Columns.Sczjbz); }
			set { SetColumnValue(Columns.Sczjbz, value); }
		}
		  
		[XmlAttribute("Scjzjg")]
		[Bindable(true)]
		public string Scjzjg 
		{
			get { return GetColumnValue<string>(Columns.Scjzjg); }
			set { SetColumnValue(Columns.Scjzjg, value); }
		}
		  
		[XmlAttribute("Sczsbh")]
		[Bindable(true)]
		public string Sczsbh 
		{
			get { return GetColumnValue<string>(Columns.Sczsbh); }
			set { SetColumnValue(Columns.Sczsbh, value); }
		}
		  
		[XmlAttribute("Schtbh")]
		[Bindable(true)]
		public string Schtbh 
		{
			get { return GetColumnValue<string>(Columns.Schtbh); }
			set { SetColumnValue(Columns.Schtbh, value); }
		}
		  
		[XmlAttribute("Schtxh")]
		[Bindable(true)]
		public decimal Schtxh 
		{
			get { return GetColumnValue<decimal>(Columns.Schtxh); }
			set { SetColumnValue(Columns.Schtxh, value); }
		}
		  
		[XmlAttribute("Scfddm")]
		[Bindable(true)]
		public string Scfddm 
		{
			get { return GetColumnValue<string>(Columns.Scfddm); }
			set { SetColumnValue(Columns.Scfddm, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(decimal varScgyxh,string varScgydm,string varScgymc,string varScjzdm,decimal? varScbzgs,decimal? varScbzdj,string varScgybz,string varSczjbz,string varScjzjg,string varSczsbh,string varSchtbh,decimal varSchtxh,string varScfddm)
		{
			SCT74 item = new SCT74();
			
			item.Scgyxh = varScgyxh;
			
			item.Scgydm = varScgydm;
			
			item.Scgymc = varScgymc;
			
			item.Scjzdm = varScjzdm;
			
			item.Scbzgs = varScbzgs;
			
			item.Scbzdj = varScbzdj;
			
			item.Scgybz = varScgybz;
			
			item.Sczjbz = varSczjbz;
			
			item.Scjzjg = varScjzjg;
			
			item.Sczsbh = varSczsbh;
			
			item.Schtbh = varSchtbh;
			
			item.Schtxh = varSchtxh;
			
			item.Scfddm = varScfddm;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(decimal varScgyxh,string varScgydm,string varScgymc,string varScjzdm,decimal? varScbzgs,decimal? varScbzdj,string varScgybz,string varSczjbz,string varScjzjg,string varSczsbh,string varSchtbh,decimal varSchtxh,string varScfddm)
		{
			SCT74 item = new SCT74();
			
				item.Scgyxh = varScgyxh;
			
				item.Scgydm = varScgydm;
			
				item.Scgymc = varScgymc;
			
				item.Scjzdm = varScjzdm;
			
				item.Scbzgs = varScbzgs;
			
				item.Scbzdj = varScbzdj;
			
				item.Scgybz = varScgybz;
			
				item.Sczjbz = varSczjbz;
			
				item.Scjzjg = varScjzjg;
			
				item.Sczsbh = varSczsbh;
			
				item.Schtbh = varSchtbh;
			
				item.Schtxh = varSchtxh;
			
				item.Scfddm = varScfddm;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn ScgyxhColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn ScgydmColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn ScgymcColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn ScjzdmColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn ScbzgsColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn ScbzdjColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn ScgybzColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn SczjbzColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn ScjzjgColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn SczsbhColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn SchtbhColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn SchtxhColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn ScfddmColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Scgyxh = @"SCGYXH";
			 public static string Scgydm = @"SCGYDM";
			 public static string Scgymc = @"SCGYMC";
			 public static string Scjzdm = @"SCJZDM";
			 public static string Scbzgs = @"SCBZGS";
			 public static string Scbzdj = @"SCBZDJ";
			 public static string Scgybz = @"SCGYBZ";
			 public static string Sczjbz = @"SCZJBZ";
			 public static string Scjzjg = @"SCJZJG";
			 public static string Sczsbh = @"SCZSBH";
			 public static string Schtbh = @"SCHTBH";
			 public static string Schtxh = @"SCHTXH";
			 public static string Scfddm = @"SCFDDM";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}

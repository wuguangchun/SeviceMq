using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace OracleDataDomain
{
	/// <summary>
	/// Strongly-typed collection for the XTM06 class.
	/// </summary>
    [Serializable]
	public partial class XTM06Collection : ActiveList<XTM06, XTM06Collection>
	{	   
		public XTM06Collection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>XTM06Collection</returns>
		public XTM06Collection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                XTM06 o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the XTM06 table.
	/// </summary>
	[Serializable]
	public partial class XTM06 : ActiveRecord<XTM06>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public XTM06()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public XTM06(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public XTM06(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public XTM06(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("XTM06", TableType.Table, DataService.GetInstance("ErpNowthwin"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"FYERP";
				//columns
				
				TableSchema.TableColumn colvarBmscsj = new TableSchema.TableColumn(schema);
				colvarBmscsj.ColumnName = "BMSCSJ";
				colvarBmscsj.DataType = DbType.DateTime;
				colvarBmscsj.MaxLength = 0;
				colvarBmscsj.AutoIncrement = false;
				colvarBmscsj.IsNullable = true;
				colvarBmscsj.IsPrimaryKey = false;
				colvarBmscsj.IsForeignKey = false;
				colvarBmscsj.IsReadOnly = false;
				colvarBmscsj.DefaultSetting = @"";
				colvarBmscsj.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBmscsj);
				
				TableSchema.TableColumn colvarXtcbzx = new TableSchema.TableColumn(schema);
				colvarXtcbzx.ColumnName = "XTCBZX";
				colvarXtcbzx.DataType = DbType.String;
				colvarXtcbzx.MaxLength = 10;
				colvarXtcbzx.AutoIncrement = false;
				colvarXtcbzx.IsNullable = true;
				colvarXtcbzx.IsPrimaryKey = false;
				colvarXtcbzx.IsForeignKey = false;
				colvarXtcbzx.IsReadOnly = false;
				colvarXtcbzx.DefaultSetting = @"";
				colvarXtcbzx.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXtcbzx);
				
				TableSchema.TableColumn colvarXtbmdm = new TableSchema.TableColumn(schema);
				colvarXtbmdm.ColumnName = "XTBMDM";
				colvarXtbmdm.DataType = DbType.String;
				colvarXtbmdm.MaxLength = 8;
				colvarXtbmdm.AutoIncrement = false;
				colvarXtbmdm.IsNullable = false;
				colvarXtbmdm.IsPrimaryKey = true;
				colvarXtbmdm.IsForeignKey = false;
				colvarXtbmdm.IsReadOnly = false;
				colvarXtbmdm.DefaultSetting = @"";
				colvarXtbmdm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXtbmdm);
				
				TableSchema.TableColumn colvarXtbmmc = new TableSchema.TableColumn(schema);
				colvarXtbmmc.ColumnName = "XTBMMC";
				colvarXtbmmc.DataType = DbType.String;
				colvarXtbmmc.MaxLength = 60;
				colvarXtbmmc.AutoIncrement = false;
				colvarXtbmmc.IsNullable = true;
				colvarXtbmmc.IsPrimaryKey = false;
				colvarXtbmmc.IsForeignKey = false;
				colvarXtbmmc.IsReadOnly = false;
				colvarXtbmmc.DefaultSetting = @"";
				colvarXtbmmc.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXtbmmc);
				
				TableSchema.TableColumn colvarXtbmdz = new TableSchema.TableColumn(schema);
				colvarXtbmdz.ColumnName = "XTBMDZ";
				colvarXtbmdz.DataType = DbType.String;
				colvarXtbmdz.MaxLength = 100;
				colvarXtbmdz.AutoIncrement = false;
				colvarXtbmdz.IsNullable = true;
				colvarXtbmdz.IsPrimaryKey = false;
				colvarXtbmdz.IsForeignKey = false;
				colvarXtbmdz.IsReadOnly = false;
				colvarXtbmdz.DefaultSetting = @"";
				colvarXtbmdz.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXtbmdz);
				
				TableSchema.TableColumn colvarXtyzbm = new TableSchema.TableColumn(schema);
				colvarXtyzbm.ColumnName = "XTYZBM";
				colvarXtyzbm.DataType = DbType.String;
				colvarXtyzbm.MaxLength = 20;
				colvarXtyzbm.AutoIncrement = false;
				colvarXtyzbm.IsNullable = true;
				colvarXtyzbm.IsPrimaryKey = false;
				colvarXtyzbm.IsForeignKey = false;
				colvarXtyzbm.IsReadOnly = false;
				colvarXtyzbm.DefaultSetting = @"";
				colvarXtyzbm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXtyzbm);
				
				TableSchema.TableColumn colvarXtdhhm = new TableSchema.TableColumn(schema);
				colvarXtdhhm.ColumnName = "XTDHHM";
				colvarXtdhhm.DataType = DbType.String;
				colvarXtdhhm.MaxLength = 20;
				colvarXtdhhm.AutoIncrement = false;
				colvarXtdhhm.IsNullable = true;
				colvarXtdhhm.IsPrimaryKey = false;
				colvarXtdhhm.IsForeignKey = false;
				colvarXtdhhm.IsReadOnly = false;
				colvarXtdhhm.DefaultSetting = @"";
				colvarXtdhhm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXtdhhm);
				
				TableSchema.TableColumn colvarXtczhm = new TableSchema.TableColumn(schema);
				colvarXtczhm.ColumnName = "XTCZHM";
				colvarXtczhm.DataType = DbType.String;
				colvarXtczhm.MaxLength = 20;
				colvarXtczhm.AutoIncrement = false;
				colvarXtczhm.IsNullable = true;
				colvarXtczhm.IsPrimaryKey = false;
				colvarXtczhm.IsForeignKey = false;
				colvarXtczhm.IsReadOnly = false;
				colvarXtczhm.DefaultSetting = @"";
				colvarXtczhm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXtczhm);
				
				TableSchema.TableColumn colvarXtbmfz = new TableSchema.TableColumn(schema);
				colvarXtbmfz.ColumnName = "XTBMFZ";
				colvarXtbmfz.DataType = DbType.String;
				colvarXtbmfz.MaxLength = 20;
				colvarXtbmfz.AutoIncrement = false;
				colvarXtbmfz.IsNullable = true;
				colvarXtbmfz.IsPrimaryKey = false;
				colvarXtbmfz.IsForeignKey = false;
				colvarXtbmfz.IsReadOnly = false;
				colvarXtbmfz.DefaultSetting = @"";
				colvarXtbmfz.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXtbmfz);
				
				TableSchema.TableColumn colvarXtcwhs = new TableSchema.TableColumn(schema);
				colvarXtcwhs.ColumnName = "XTCWHS";
				colvarXtcwhs.DataType = DbType.String;
				colvarXtcwhs.MaxLength = 1;
				colvarXtcwhs.AutoIncrement = false;
				colvarXtcwhs.IsNullable = true;
				colvarXtcwhs.IsPrimaryKey = false;
				colvarXtcwhs.IsForeignKey = false;
				colvarXtcwhs.IsReadOnly = false;
				colvarXtcwhs.DefaultSetting = @"";
				colvarXtcwhs.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXtcwhs);
				
				TableSchema.TableColumn colvarXtdqdm = new TableSchema.TableColumn(schema);
				colvarXtdqdm.ColumnName = "XTDQDM";
				colvarXtdqdm.DataType = DbType.String;
				colvarXtdqdm.MaxLength = 8;
				colvarXtdqdm.AutoIncrement = false;
				colvarXtdqdm.IsNullable = true;
				colvarXtdqdm.IsPrimaryKey = false;
				colvarXtdqdm.IsForeignKey = false;
				colvarXtdqdm.IsReadOnly = false;
				colvarXtdqdm.DefaultSetting = @"";
				colvarXtdqdm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXtdqdm);
				
				TableSchema.TableColumn colvarXtkhgl = new TableSchema.TableColumn(schema);
				colvarXtkhgl.ColumnName = "XTKHGL";
				colvarXtkhgl.DataType = DbType.String;
				colvarXtkhgl.MaxLength = 1;
				colvarXtkhgl.AutoIncrement = false;
				colvarXtkhgl.IsNullable = true;
				colvarXtkhgl.IsPrimaryKey = false;
				colvarXtkhgl.IsForeignKey = false;
				colvarXtkhgl.IsReadOnly = false;
				colvarXtkhgl.DefaultSetting = @"";
				colvarXtkhgl.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXtkhgl);
				
				TableSchema.TableColumn colvarXtmjbz = new TableSchema.TableColumn(schema);
				colvarXtmjbz.ColumnName = "XTMJBZ";
				colvarXtmjbz.DataType = DbType.String;
				colvarXtmjbz.MaxLength = 1;
				colvarXtmjbz.AutoIncrement = false;
				colvarXtmjbz.IsNullable = true;
				colvarXtmjbz.IsPrimaryKey = false;
				colvarXtmjbz.IsForeignKey = false;
				colvarXtmjbz.IsReadOnly = false;
				colvarXtmjbz.DefaultSetting = @"";
				colvarXtmjbz.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXtmjbz);
				
				TableSchema.TableColumn colvarXtbmzz = new TableSchema.TableColumn(schema);
				colvarXtbmzz.ColumnName = "XTBMZZ";
				colvarXtbmzz.DataType = DbType.String;
				colvarXtbmzz.MaxLength = 1;
				colvarXtbmzz.AutoIncrement = false;
				colvarXtbmzz.IsNullable = true;
				colvarXtbmzz.IsPrimaryKey = false;
				colvarXtbmzz.IsForeignKey = false;
				colvarXtbmzz.IsReadOnly = false;
				colvarXtbmzz.DefaultSetting = @"";
				colvarXtbmzz.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXtbmzz);
				
				TableSchema.TableColumn colvarXtbmkl = new TableSchema.TableColumn(schema);
				colvarXtbmkl.ColumnName = "XTBMKL";
				colvarXtbmkl.DataType = DbType.Decimal;
				colvarXtbmkl.MaxLength = 0;
				colvarXtbmkl.AutoIncrement = false;
				colvarXtbmkl.IsNullable = true;
				colvarXtbmkl.IsPrimaryKey = false;
				colvarXtbmkl.IsForeignKey = false;
				colvarXtbmkl.IsReadOnly = false;
				colvarXtbmkl.DefaultSetting = @"";
				colvarXtbmkl.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXtbmkl);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ErpNowthwin"].AddSchema("XTM06",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Bmscsj")]
		[Bindable(true)]
		public DateTime? Bmscsj 
		{
			get { return GetColumnValue<DateTime?>(Columns.Bmscsj); }
			set { SetColumnValue(Columns.Bmscsj, value); }
		}
		  
		[XmlAttribute("Xtcbzx")]
		[Bindable(true)]
		public string Xtcbzx 
		{
			get { return GetColumnValue<string>(Columns.Xtcbzx); }
			set { SetColumnValue(Columns.Xtcbzx, value); }
		}
		  
		[XmlAttribute("Xtbmdm")]
		[Bindable(true)]
		public string Xtbmdm 
		{
			get { return GetColumnValue<string>(Columns.Xtbmdm); }
			set { SetColumnValue(Columns.Xtbmdm, value); }
		}
		  
		[XmlAttribute("Xtbmmc")]
		[Bindable(true)]
		public string Xtbmmc 
		{
			get { return GetColumnValue<string>(Columns.Xtbmmc); }
			set { SetColumnValue(Columns.Xtbmmc, value); }
		}
		  
		[XmlAttribute("Xtbmdz")]
		[Bindable(true)]
		public string Xtbmdz 
		{
			get { return GetColumnValue<string>(Columns.Xtbmdz); }
			set { SetColumnValue(Columns.Xtbmdz, value); }
		}
		  
		[XmlAttribute("Xtyzbm")]
		[Bindable(true)]
		public string Xtyzbm 
		{
			get { return GetColumnValue<string>(Columns.Xtyzbm); }
			set { SetColumnValue(Columns.Xtyzbm, value); }
		}
		  
		[XmlAttribute("Xtdhhm")]
		[Bindable(true)]
		public string Xtdhhm 
		{
			get { return GetColumnValue<string>(Columns.Xtdhhm); }
			set { SetColumnValue(Columns.Xtdhhm, value); }
		}
		  
		[XmlAttribute("Xtczhm")]
		[Bindable(true)]
		public string Xtczhm 
		{
			get { return GetColumnValue<string>(Columns.Xtczhm); }
			set { SetColumnValue(Columns.Xtczhm, value); }
		}
		  
		[XmlAttribute("Xtbmfz")]
		[Bindable(true)]
		public string Xtbmfz 
		{
			get { return GetColumnValue<string>(Columns.Xtbmfz); }
			set { SetColumnValue(Columns.Xtbmfz, value); }
		}
		  
		[XmlAttribute("Xtcwhs")]
		[Bindable(true)]
		public string Xtcwhs 
		{
			get { return GetColumnValue<string>(Columns.Xtcwhs); }
			set { SetColumnValue(Columns.Xtcwhs, value); }
		}
		  
		[XmlAttribute("Xtdqdm")]
		[Bindable(true)]
		public string Xtdqdm 
		{
			get { return GetColumnValue<string>(Columns.Xtdqdm); }
			set { SetColumnValue(Columns.Xtdqdm, value); }
		}
		  
		[XmlAttribute("Xtkhgl")]
		[Bindable(true)]
		public string Xtkhgl 
		{
			get { return GetColumnValue<string>(Columns.Xtkhgl); }
			set { SetColumnValue(Columns.Xtkhgl, value); }
		}
		  
		[XmlAttribute("Xtmjbz")]
		[Bindable(true)]
		public string Xtmjbz 
		{
			get { return GetColumnValue<string>(Columns.Xtmjbz); }
			set { SetColumnValue(Columns.Xtmjbz, value); }
		}
		  
		[XmlAttribute("Xtbmzz")]
		[Bindable(true)]
		public string Xtbmzz 
		{
			get { return GetColumnValue<string>(Columns.Xtbmzz); }
			set { SetColumnValue(Columns.Xtbmzz, value); }
		}
		  
		[XmlAttribute("Xtbmkl")]
		[Bindable(true)]
		public decimal? Xtbmkl 
		{
			get { return GetColumnValue<decimal?>(Columns.Xtbmkl); }
			set { SetColumnValue(Columns.Xtbmkl, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(DateTime? varBmscsj,string varXtcbzx,string varXtbmdm,string varXtbmmc,string varXtbmdz,string varXtyzbm,string varXtdhhm,string varXtczhm,string varXtbmfz,string varXtcwhs,string varXtdqdm,string varXtkhgl,string varXtmjbz,string varXtbmzz,decimal? varXtbmkl)
		{
			XTM06 item = new XTM06();
			
			item.Bmscsj = varBmscsj;
			
			item.Xtcbzx = varXtcbzx;
			
			item.Xtbmdm = varXtbmdm;
			
			item.Xtbmmc = varXtbmmc;
			
			item.Xtbmdz = varXtbmdz;
			
			item.Xtyzbm = varXtyzbm;
			
			item.Xtdhhm = varXtdhhm;
			
			item.Xtczhm = varXtczhm;
			
			item.Xtbmfz = varXtbmfz;
			
			item.Xtcwhs = varXtcwhs;
			
			item.Xtdqdm = varXtdqdm;
			
			item.Xtkhgl = varXtkhgl;
			
			item.Xtmjbz = varXtmjbz;
			
			item.Xtbmzz = varXtbmzz;
			
			item.Xtbmkl = varXtbmkl;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(DateTime? varBmscsj,string varXtcbzx,string varXtbmdm,string varXtbmmc,string varXtbmdz,string varXtyzbm,string varXtdhhm,string varXtczhm,string varXtbmfz,string varXtcwhs,string varXtdqdm,string varXtkhgl,string varXtmjbz,string varXtbmzz,decimal? varXtbmkl)
		{
			XTM06 item = new XTM06();
			
				item.Bmscsj = varBmscsj;
			
				item.Xtcbzx = varXtcbzx;
			
				item.Xtbmdm = varXtbmdm;
			
				item.Xtbmmc = varXtbmmc;
			
				item.Xtbmdz = varXtbmdz;
			
				item.Xtyzbm = varXtyzbm;
			
				item.Xtdhhm = varXtdhhm;
			
				item.Xtczhm = varXtczhm;
			
				item.Xtbmfz = varXtbmfz;
			
				item.Xtcwhs = varXtcwhs;
			
				item.Xtdqdm = varXtdqdm;
			
				item.Xtkhgl = varXtkhgl;
			
				item.Xtmjbz = varXtmjbz;
			
				item.Xtbmzz = varXtbmzz;
			
				item.Xtbmkl = varXtbmkl;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn BmscsjColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn XtcbzxColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn XtbmdmColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn XtbmmcColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn XtbmdzColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn XtyzbmColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn XtdhhmColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn XtczhmColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn XtbmfzColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn XtcwhsColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn XtdqdmColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn XtkhglColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn XtmjbzColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        public static TableSchema.TableColumn XtbmzzColumn
        {
            get { return Schema.Columns[13]; }
        }
        
        
        
        public static TableSchema.TableColumn XtbmklColumn
        {
            get { return Schema.Columns[14]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Bmscsj = @"BMSCSJ";
			 public static string Xtcbzx = @"XTCBZX";
			 public static string Xtbmdm = @"XTBMDM";
			 public static string Xtbmmc = @"XTBMMC";
			 public static string Xtbmdz = @"XTBMDZ";
			 public static string Xtyzbm = @"XTYZBM";
			 public static string Xtdhhm = @"XTDHHM";
			 public static string Xtczhm = @"XTCZHM";
			 public static string Xtbmfz = @"XTBMFZ";
			 public static string Xtcwhs = @"XTCWHS";
			 public static string Xtdqdm = @"XTDQDM";
			 public static string Xtkhgl = @"XTKHGL";
			 public static string Xtmjbz = @"XTMJBZ";
			 public static string Xtbmzz = @"XTBMZZ";
			 public static string Xtbmkl = @"XTBMKL";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}

using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace OracleDataDomain
{
	/// <summary>
	/// Strongly-typed collection for the SCT83 class.
	/// </summary>
    [Serializable]
	public partial class SCT83Collection : ActiveList<SCT83, SCT83Collection>
	{	   
		public SCT83Collection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>SCT83Collection</returns>
		public SCT83Collection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                SCT83 o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the SCT83 table.
	/// </summary>
	[Serializable]
	public partial class SCT83 : ActiveRecord<SCT83>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public SCT83()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public SCT83(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public SCT83(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public SCT83(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("SCT83", TableType.Table, DataService.GetInstance("ErpNowthwin"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"FYERP";
				//columns
				
				TableSchema.TableColumn colvarSczxdh = new TableSchema.TableColumn(schema);
				colvarSczxdh.ColumnName = "SCZXDH";
				colvarSczxdh.DataType = DbType.String;
				colvarSczxdh.MaxLength = 12;
				colvarSczxdh.AutoIncrement = false;
				colvarSczxdh.IsNullable = false;
				colvarSczxdh.IsPrimaryKey = true;
				colvarSczxdh.IsForeignKey = false;
				colvarSczxdh.IsReadOnly = false;
				colvarSczxdh.DefaultSetting = @"";
				colvarSczxdh.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSczxdh);
				
				TableSchema.TableColumn colvarSclrrq = new TableSchema.TableColumn(schema);
				colvarSclrrq.ColumnName = "SCLRRQ";
				colvarSclrrq.DataType = DbType.DateTime;
				colvarSclrrq.MaxLength = 0;
				colvarSclrrq.AutoIncrement = false;
				colvarSclrrq.IsNullable = true;
				colvarSclrrq.IsPrimaryKey = false;
				colvarSclrrq.IsForeignKey = false;
				colvarSclrrq.IsReadOnly = false;
				colvarSclrrq.DefaultSetting = @"";
				colvarSclrrq.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSclrrq);
				
				TableSchema.TableColumn colvarSclrry = new TableSchema.TableColumn(schema);
				colvarSclrry.ColumnName = "SCLRRY";
				colvarSclrry.DataType = DbType.String;
				colvarSclrry.MaxLength = 10;
				colvarSclrry.AutoIncrement = false;
				colvarSclrry.IsNullable = true;
				colvarSclrry.IsPrimaryKey = false;
				colvarSclrry.IsForeignKey = false;
				colvarSclrry.IsReadOnly = false;
				colvarSclrry.DefaultSetting = @"";
				colvarSclrry.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSclrry);
				
				TableSchema.TableColumn colvarScjhrq = new TableSchema.TableColumn(schema);
				colvarScjhrq.ColumnName = "SCJHRQ";
				colvarScjhrq.DataType = DbType.DateTime;
				colvarScjhrq.MaxLength = 0;
				colvarScjhrq.AutoIncrement = false;
				colvarScjhrq.IsNullable = true;
				colvarScjhrq.IsPrimaryKey = false;
				colvarScjhrq.IsForeignKey = false;
				colvarScjhrq.IsReadOnly = false;
				colvarScjhrq.DefaultSetting = @"";
				colvarScjhrq.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScjhrq);
				
				TableSchema.TableColumn colvarScjhry = new TableSchema.TableColumn(schema);
				colvarScjhry.ColumnName = "SCJHRY";
				colvarScjhry.DataType = DbType.String;
				colvarScjhry.MaxLength = 10;
				colvarScjhry.AutoIncrement = false;
				colvarScjhry.IsNullable = true;
				colvarScjhry.IsPrimaryKey = false;
				colvarScjhry.IsForeignKey = false;
				colvarScjhry.IsReadOnly = false;
				colvarScjhry.DefaultSetting = @"";
				colvarScjhry.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScjhry);
				
				TableSchema.TableColumn colvarScshrq = new TableSchema.TableColumn(schema);
				colvarScshrq.ColumnName = "SCSHRQ";
				colvarScshrq.DataType = DbType.DateTime;
				colvarScshrq.MaxLength = 0;
				colvarScshrq.AutoIncrement = false;
				colvarScshrq.IsNullable = true;
				colvarScshrq.IsPrimaryKey = false;
				colvarScshrq.IsForeignKey = false;
				colvarScshrq.IsReadOnly = false;
				colvarScshrq.DefaultSetting = @"";
				colvarScshrq.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScshrq);
				
				TableSchema.TableColumn colvarScshry = new TableSchema.TableColumn(schema);
				colvarScshry.ColumnName = "SCSHRY";
				colvarScshry.DataType = DbType.String;
				colvarScshry.MaxLength = 10;
				colvarScshry.AutoIncrement = false;
				colvarScshry.IsNullable = true;
				colvarScshry.IsPrimaryKey = false;
				colvarScshry.IsForeignKey = false;
				colvarScshry.IsReadOnly = false;
				colvarScshry.DefaultSetting = @"";
				colvarScshry.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScshry);
				
				TableSchema.TableColumn colvarSczxzt = new TableSchema.TableColumn(schema);
				colvarSczxzt.ColumnName = "SCZXZT";
				colvarSczxzt.DataType = DbType.String;
				colvarSczxzt.MaxLength = 1;
				colvarSczxzt.AutoIncrement = false;
				colvarSczxzt.IsNullable = true;
				colvarSczxzt.IsPrimaryKey = false;
				colvarSczxzt.IsForeignKey = false;
				colvarSczxzt.IsReadOnly = false;
				colvarSczxzt.DefaultSetting = @"";
				colvarSczxzt.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSczxzt);
				
				TableSchema.TableColumn colvarSchtbh = new TableSchema.TableColumn(schema);
				colvarSchtbh.ColumnName = "SCHTBH";
				colvarSchtbh.DataType = DbType.String;
				colvarSchtbh.MaxLength = 12;
				colvarSchtbh.AutoIncrement = false;
				colvarSchtbh.IsNullable = true;
				colvarSchtbh.IsPrimaryKey = false;
				colvarSchtbh.IsForeignKey = false;
				colvarSchtbh.IsReadOnly = false;
				colvarSchtbh.DefaultSetting = @"";
				colvarSchtbh.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSchtbh);
				
				TableSchema.TableColumn colvarSczxbz = new TableSchema.TableColumn(schema);
				colvarSczxbz.ColumnName = "SCZXBZ";
				colvarSczxbz.DataType = DbType.String;
				colvarSczxbz.MaxLength = 255;
				colvarSczxbz.AutoIncrement = false;
				colvarSczxbz.IsNullable = true;
				colvarSczxbz.IsPrimaryKey = false;
				colvarSczxbz.IsForeignKey = false;
				colvarSczxbz.IsReadOnly = false;
				colvarSczxbz.DefaultSetting = @"";
				colvarSczxbz.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSczxbz);
				
				TableSchema.TableColumn colvarScjylb = new TableSchema.TableColumn(schema);
				colvarScjylb.ColumnName = "SCJYLB";
				colvarScjylb.DataType = DbType.String;
				colvarScjylb.MaxLength = 10;
				colvarScjylb.AutoIncrement = false;
				colvarScjylb.IsNullable = true;
				colvarScjylb.IsPrimaryKey = false;
				colvarScjylb.IsForeignKey = false;
				colvarScjylb.IsReadOnly = false;
				colvarScjylb.DefaultSetting = @"";
				colvarScjylb.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScjylb);
				
				TableSchema.TableColumn colvarScthbz = new TableSchema.TableColumn(schema);
				colvarScthbz.ColumnName = "SCTHBZ";
				colvarScthbz.DataType = DbType.String;
				colvarScthbz.MaxLength = 1;
				colvarScthbz.AutoIncrement = false;
				colvarScthbz.IsNullable = true;
				colvarScthbz.IsPrimaryKey = false;
				colvarScthbz.IsForeignKey = false;
				colvarScthbz.IsReadOnly = false;
				colvarScthbz.DefaultSetting = @"";
				colvarScthbz.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScthbz);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ErpNowthwin"].AddSchema("SCT83",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Sczxdh")]
		[Bindable(true)]
		public string Sczxdh 
		{
			get { return GetColumnValue<string>(Columns.Sczxdh); }
			set { SetColumnValue(Columns.Sczxdh, value); }
		}
		  
		[XmlAttribute("Sclrrq")]
		[Bindable(true)]
		public DateTime? Sclrrq 
		{
			get { return GetColumnValue<DateTime?>(Columns.Sclrrq); }
			set { SetColumnValue(Columns.Sclrrq, value); }
		}
		  
		[XmlAttribute("Sclrry")]
		[Bindable(true)]
		public string Sclrry 
		{
			get { return GetColumnValue<string>(Columns.Sclrry); }
			set { SetColumnValue(Columns.Sclrry, value); }
		}
		  
		[XmlAttribute("Scjhrq")]
		[Bindable(true)]
		public DateTime? Scjhrq 
		{
			get { return GetColumnValue<DateTime?>(Columns.Scjhrq); }
			set { SetColumnValue(Columns.Scjhrq, value); }
		}
		  
		[XmlAttribute("Scjhry")]
		[Bindable(true)]
		public string Scjhry 
		{
			get { return GetColumnValue<string>(Columns.Scjhry); }
			set { SetColumnValue(Columns.Scjhry, value); }
		}
		  
		[XmlAttribute("Scshrq")]
		[Bindable(true)]
		public DateTime? Scshrq 
		{
			get { return GetColumnValue<DateTime?>(Columns.Scshrq); }
			set { SetColumnValue(Columns.Scshrq, value); }
		}
		  
		[XmlAttribute("Scshry")]
		[Bindable(true)]
		public string Scshry 
		{
			get { return GetColumnValue<string>(Columns.Scshry); }
			set { SetColumnValue(Columns.Scshry, value); }
		}
		  
		[XmlAttribute("Sczxzt")]
		[Bindable(true)]
		public string Sczxzt 
		{
			get { return GetColumnValue<string>(Columns.Sczxzt); }
			set { SetColumnValue(Columns.Sczxzt, value); }
		}
		  
		[XmlAttribute("Schtbh")]
		[Bindable(true)]
		public string Schtbh 
		{
			get { return GetColumnValue<string>(Columns.Schtbh); }
			set { SetColumnValue(Columns.Schtbh, value); }
		}
		  
		[XmlAttribute("Sczxbz")]
		[Bindable(true)]
		public string Sczxbz 
		{
			get { return GetColumnValue<string>(Columns.Sczxbz); }
			set { SetColumnValue(Columns.Sczxbz, value); }
		}
		  
		[XmlAttribute("Scjylb")]
		[Bindable(true)]
		public string Scjylb 
		{
			get { return GetColumnValue<string>(Columns.Scjylb); }
			set { SetColumnValue(Columns.Scjylb, value); }
		}
		  
		[XmlAttribute("Scthbz")]
		[Bindable(true)]
		public string Scthbz 
		{
			get { return GetColumnValue<string>(Columns.Scthbz); }
			set { SetColumnValue(Columns.Scthbz, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varSczxdh,DateTime? varSclrrq,string varSclrry,DateTime? varScjhrq,string varScjhry,DateTime? varScshrq,string varScshry,string varSczxzt,string varSchtbh,string varSczxbz,string varScjylb,string varScthbz)
		{
			SCT83 item = new SCT83();
			
			item.Sczxdh = varSczxdh;
			
			item.Sclrrq = varSclrrq;
			
			item.Sclrry = varSclrry;
			
			item.Scjhrq = varScjhrq;
			
			item.Scjhry = varScjhry;
			
			item.Scshrq = varScshrq;
			
			item.Scshry = varScshry;
			
			item.Sczxzt = varSczxzt;
			
			item.Schtbh = varSchtbh;
			
			item.Sczxbz = varSczxbz;
			
			item.Scjylb = varScjylb;
			
			item.Scthbz = varScthbz;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(string varSczxdh,DateTime? varSclrrq,string varSclrry,DateTime? varScjhrq,string varScjhry,DateTime? varScshrq,string varScshry,string varSczxzt,string varSchtbh,string varSczxbz,string varScjylb,string varScthbz)
		{
			SCT83 item = new SCT83();
			
				item.Sczxdh = varSczxdh;
			
				item.Sclrrq = varSclrrq;
			
				item.Sclrry = varSclrry;
			
				item.Scjhrq = varScjhrq;
			
				item.Scjhry = varScjhry;
			
				item.Scshrq = varScshrq;
			
				item.Scshry = varScshry;
			
				item.Sczxzt = varSczxzt;
			
				item.Schtbh = varSchtbh;
			
				item.Sczxbz = varSczxbz;
			
				item.Scjylb = varScjylb;
			
				item.Scthbz = varScthbz;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn SczxdhColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn SclrrqColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn SclrryColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn ScjhrqColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn ScjhryColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn ScshrqColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn ScshryColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn SczxztColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn SchtbhColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn SczxbzColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn ScjylbColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn ScthbzColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Sczxdh = @"SCZXDH";
			 public static string Sclrrq = @"SCLRRQ";
			 public static string Sclrry = @"SCLRRY";
			 public static string Scjhrq = @"SCJHRQ";
			 public static string Scjhry = @"SCJHRY";
			 public static string Scshrq = @"SCSHRQ";
			 public static string Scshry = @"SCSHRY";
			 public static string Sczxzt = @"SCZXZT";
			 public static string Schtbh = @"SCHTBH";
			 public static string Sczxbz = @"SCZXBZ";
			 public static string Scjylb = @"SCJYLB";
			 public static string Scthbz = @"SCTHBZ";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}

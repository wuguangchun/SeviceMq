using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace OracleDataDomain
{
	/// <summary>
	/// Strongly-typed collection for the WmsCShouhuoHead class.
	/// </summary>
    [Serializable]
	public partial class WmsCShouhuoHeadCollection : ActiveList<WmsCShouhuoHead, WmsCShouhuoHeadCollection>
	{	   
		public WmsCShouhuoHeadCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>WmsCShouhuoHeadCollection</returns>
		public WmsCShouhuoHeadCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                WmsCShouhuoHead o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the WMS_C_SHOUHUO_HEAD table.
	/// </summary>
	[Serializable]
	public partial class WmsCShouhuoHead : ActiveRecord<WmsCShouhuoHead>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public WmsCShouhuoHead()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public WmsCShouhuoHead(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public WmsCShouhuoHead(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public WmsCShouhuoHead(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("WMS_C_SHOUHUO_HEAD", TableType.Table, DataService.GetInstance("ErpNowthwin"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"FYERP";
				//columns
				
				TableSchema.TableColumn colvarPohdno = new TableSchema.TableColumn(schema);
				colvarPohdno.ColumnName = "POHDNO";
				colvarPohdno.DataType = DbType.String;
				colvarPohdno.MaxLength = 32;
				colvarPohdno.AutoIncrement = false;
				colvarPohdno.IsNullable = false;
				colvarPohdno.IsPrimaryKey = false;
				colvarPohdno.IsForeignKey = false;
				colvarPohdno.IsReadOnly = false;
				colvarPohdno.DefaultSetting = @"";
				colvarPohdno.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPohdno);
				
				TableSchema.TableColumn colvarCspono = new TableSchema.TableColumn(schema);
				colvarCspono.ColumnName = "CSPONO";
				colvarCspono.DataType = DbType.String;
				colvarCspono.MaxLength = 32;
				colvarCspono.AutoIncrement = false;
				colvarCspono.IsNullable = true;
				colvarCspono.IsPrimaryKey = false;
				colvarCspono.IsForeignKey = false;
				colvarCspono.IsReadOnly = false;
				colvarCspono.DefaultSetting = @"";
				colvarCspono.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCspono);
				
				TableSchema.TableColumn colvarCstcde = new TableSchema.TableColumn(schema);
				colvarCstcde.ColumnName = "CSTCDE";
				colvarCstcde.DataType = DbType.String;
				colvarCstcde.MaxLength = 32;
				colvarCstcde.AutoIncrement = false;
				colvarCstcde.IsNullable = true;
				colvarCstcde.IsPrimaryKey = false;
				colvarCstcde.IsForeignKey = false;
				colvarCstcde.IsReadOnly = false;
				colvarCstcde.DefaultSetting = @"";
				colvarCstcde.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCstcde);
				
				TableSchema.TableColumn colvarCstnam = new TableSchema.TableColumn(schema);
				colvarCstnam.ColumnName = "CSTNAM";
				colvarCstnam.DataType = DbType.String;
				colvarCstnam.MaxLength = 200;
				colvarCstnam.AutoIncrement = false;
				colvarCstnam.IsNullable = true;
				colvarCstnam.IsPrimaryKey = false;
				colvarCstnam.IsForeignKey = false;
				colvarCstnam.IsReadOnly = false;
				colvarCstnam.DefaultSetting = @"";
				colvarCstnam.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCstnam);
				
				TableSchema.TableColumn colvarContct = new TableSchema.TableColumn(schema);
				colvarContct.ColumnName = "CONTCT";
				colvarContct.DataType = DbType.String;
				colvarContct.MaxLength = 32;
				colvarContct.AutoIncrement = false;
				colvarContct.IsNullable = true;
				colvarContct.IsPrimaryKey = false;
				colvarContct.IsForeignKey = false;
				colvarContct.IsReadOnly = false;
				colvarContct.DefaultSetting = @"";
				colvarContct.ForeignKeyTableName = "";
				schema.Columns.Add(colvarContct);
				
				TableSchema.TableColumn colvarPhone = new TableSchema.TableColumn(schema);
				colvarPhone.ColumnName = "PHONE";
				colvarPhone.DataType = DbType.String;
				colvarPhone.MaxLength = 32;
				colvarPhone.AutoIncrement = false;
				colvarPhone.IsNullable = true;
				colvarPhone.IsPrimaryKey = false;
				colvarPhone.IsForeignKey = false;
				colvarPhone.IsReadOnly = false;
				colvarPhone.DefaultSetting = @"";
				colvarPhone.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPhone);
				
				TableSchema.TableColumn colvarPoctdt = new TableSchema.TableColumn(schema);
				colvarPoctdt.ColumnName = "POCTDT";
				colvarPoctdt.DataType = DbType.DateTime;
				colvarPoctdt.MaxLength = 0;
				colvarPoctdt.AutoIncrement = false;
				colvarPoctdt.IsNullable = true;
				colvarPoctdt.IsPrimaryKey = false;
				colvarPoctdt.IsForeignKey = false;
				colvarPoctdt.IsReadOnly = false;
				colvarPoctdt.DefaultSetting = @"";
				colvarPoctdt.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPoctdt);
				
				TableSchema.TableColumn colvarPlibdt = new TableSchema.TableColumn(schema);
				colvarPlibdt.ColumnName = "PLIBDT";
				colvarPlibdt.DataType = DbType.DateTime;
				colvarPlibdt.MaxLength = 0;
				colvarPlibdt.AutoIncrement = false;
				colvarPlibdt.IsNullable = true;
				colvarPlibdt.IsPrimaryKey = false;
				colvarPlibdt.IsForeignKey = false;
				colvarPlibdt.IsReadOnly = false;
				colvarPlibdt.DefaultSetting = @"";
				colvarPlibdt.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPlibdt);
				
				TableSchema.TableColumn colvarRemark = new TableSchema.TableColumn(schema);
				colvarRemark.ColumnName = "REMARK";
				colvarRemark.DataType = DbType.String;
				colvarRemark.MaxLength = 64;
				colvarRemark.AutoIncrement = false;
				colvarRemark.IsNullable = true;
				colvarRemark.IsPrimaryKey = false;
				colvarRemark.IsForeignKey = false;
				colvarRemark.IsReadOnly = false;
				colvarRemark.DefaultSetting = @"";
				colvarRemark.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRemark);
				
				TableSchema.TableColumn colvarOprtby = new TableSchema.TableColumn(schema);
				colvarOprtby.ColumnName = "OPRTBY";
				colvarOprtby.DataType = DbType.String;
				colvarOprtby.MaxLength = 255;
				colvarOprtby.AutoIncrement = false;
				colvarOprtby.IsNullable = true;
				colvarOprtby.IsPrimaryKey = false;
				colvarOprtby.IsForeignKey = false;
				colvarOprtby.IsReadOnly = false;
				colvarOprtby.DefaultSetting = @"";
				colvarOprtby.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOprtby);
				
				TableSchema.TableColumn colvarOprttm = new TableSchema.TableColumn(schema);
				colvarOprttm.ColumnName = "OPRTTM";
				colvarOprttm.DataType = DbType.String;
				colvarOprttm.MaxLength = 0;
				colvarOprttm.AutoIncrement = false;
				colvarOprttm.IsNullable = true;
				colvarOprttm.IsPrimaryKey = false;
				colvarOprttm.IsForeignKey = false;
				colvarOprttm.IsReadOnly = false;
				colvarOprttm.DefaultSetting = @"";
				colvarOprttm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOprttm);
				
				TableSchema.TableColumn colvarId = new TableSchema.TableColumn(schema);
				colvarId.ColumnName = "ID";
				colvarId.DataType = DbType.Decimal;
				colvarId.MaxLength = 0;
				colvarId.AutoIncrement = false;
				colvarId.IsNullable = true;
				colvarId.IsPrimaryKey = false;
				colvarId.IsForeignKey = false;
				colvarId.IsReadOnly = false;
				colvarId.DefaultSetting = @"";
				colvarId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarId);
				
				TableSchema.TableColumn colvarCgdh = new TableSchema.TableColumn(schema);
				colvarCgdh.ColumnName = "CGDH";
				colvarCgdh.DataType = DbType.String;
				colvarCgdh.MaxLength = 32;
				colvarCgdh.AutoIncrement = false;
				colvarCgdh.IsNullable = true;
				colvarCgdh.IsPrimaryKey = false;
				colvarCgdh.IsForeignKey = false;
				colvarCgdh.IsReadOnly = false;
				colvarCgdh.DefaultSetting = @"";
				colvarCgdh.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCgdh);
				
				TableSchema.TableColumn colvarShrq = new TableSchema.TableColumn(schema);
				colvarShrq.ColumnName = "SHRQ";
				colvarShrq.DataType = DbType.String;
				colvarShrq.MaxLength = 0;
				colvarShrq.AutoIncrement = false;
				colvarShrq.IsNullable = true;
				colvarShrq.IsPrimaryKey = false;
				colvarShrq.IsForeignKey = false;
				colvarShrq.IsReadOnly = false;
				colvarShrq.DefaultSetting = @"";
				colvarShrq.ForeignKeyTableName = "";
				schema.Columns.Add(colvarShrq);
				
				TableSchema.TableColumn colvarCgry = new TableSchema.TableColumn(schema);
				colvarCgry.ColumnName = "CGRY";
				colvarCgry.DataType = DbType.String;
				colvarCgry.MaxLength = 32;
				colvarCgry.AutoIncrement = false;
				colvarCgry.IsNullable = true;
				colvarCgry.IsPrimaryKey = false;
				colvarCgry.IsForeignKey = false;
				colvarCgry.IsReadOnly = false;
				colvarCgry.DefaultSetting = @"";
				colvarCgry.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCgry);
				
				TableSchema.TableColumn colvarCgbm = new TableSchema.TableColumn(schema);
				colvarCgbm.ColumnName = "CGBM";
				colvarCgbm.DataType = DbType.String;
				colvarCgbm.MaxLength = 32;
				colvarCgbm.AutoIncrement = false;
				colvarCgbm.IsNullable = true;
				colvarCgbm.IsPrimaryKey = false;
				colvarCgbm.IsForeignKey = false;
				colvarCgbm.IsReadOnly = false;
				colvarCgbm.DefaultSetting = @"";
				colvarCgbm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCgbm);
				
				TableSchema.TableColumn colvarPid = new TableSchema.TableColumn(schema);
				colvarPid.ColumnName = "PID";
				colvarPid.DataType = DbType.String;
				colvarPid.MaxLength = 32;
				colvarPid.AutoIncrement = false;
				colvarPid.IsNullable = false;
				colvarPid.IsPrimaryKey = true;
				colvarPid.IsForeignKey = false;
				colvarPid.IsReadOnly = false;
				colvarPid.DefaultSetting = @"";
				colvarPid.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPid);
				
				TableSchema.TableColumn colvarStime = new TableSchema.TableColumn(schema);
				colvarStime.ColumnName = "STIME";
				colvarStime.DataType = DbType.String;
				colvarStime.MaxLength = 0;
				colvarStime.AutoIncrement = false;
				colvarStime.IsNullable = true;
				colvarStime.IsPrimaryKey = false;
				colvarStime.IsForeignKey = false;
				colvarStime.IsReadOnly = false;
				colvarStime.DefaultSetting = @"";
				colvarStime.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStime);
				
				TableSchema.TableColumn colvarSyncd = new TableSchema.TableColumn(schema);
				colvarSyncd.ColumnName = "SYNCD";
				colvarSyncd.DataType = DbType.String;
				colvarSyncd.MaxLength = 32;
				colvarSyncd.AutoIncrement = false;
				colvarSyncd.IsNullable = true;
				colvarSyncd.IsPrimaryKey = false;
				colvarSyncd.IsForeignKey = false;
				colvarSyncd.IsReadOnly = false;
				colvarSyncd.DefaultSetting = @"";
				colvarSyncd.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSyncd);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ErpNowthwin"].AddSchema("WMS_C_SHOUHUO_HEAD",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Pohdno")]
		[Bindable(true)]
		public string Pohdno 
		{
			get { return GetColumnValue<string>(Columns.Pohdno); }
			set { SetColumnValue(Columns.Pohdno, value); }
		}
		  
		[XmlAttribute("Cspono")]
		[Bindable(true)]
		public string Cspono 
		{
			get { return GetColumnValue<string>(Columns.Cspono); }
			set { SetColumnValue(Columns.Cspono, value); }
		}
		  
		[XmlAttribute("Cstcde")]
		[Bindable(true)]
		public string Cstcde 
		{
			get { return GetColumnValue<string>(Columns.Cstcde); }
			set { SetColumnValue(Columns.Cstcde, value); }
		}
		  
		[XmlAttribute("Cstnam")]
		[Bindable(true)]
		public string Cstnam 
		{
			get { return GetColumnValue<string>(Columns.Cstnam); }
			set { SetColumnValue(Columns.Cstnam, value); }
		}
		  
		[XmlAttribute("Contct")]
		[Bindable(true)]
		public string Contct 
		{
			get { return GetColumnValue<string>(Columns.Contct); }
			set { SetColumnValue(Columns.Contct, value); }
		}
		  
		[XmlAttribute("Phone")]
		[Bindable(true)]
		public string Phone 
		{
			get { return GetColumnValue<string>(Columns.Phone); }
			set { SetColumnValue(Columns.Phone, value); }
		}
		  
		[XmlAttribute("Poctdt")]
		[Bindable(true)]
		public DateTime? Poctdt 
		{
			get { return GetColumnValue<DateTime?>(Columns.Poctdt); }
			set { SetColumnValue(Columns.Poctdt, value); }
		}
		  
		[XmlAttribute("Plibdt")]
		[Bindable(true)]
		public DateTime? Plibdt 
		{
			get { return GetColumnValue<DateTime?>(Columns.Plibdt); }
			set { SetColumnValue(Columns.Plibdt, value); }
		}
		  
		[XmlAttribute("Remark")]
		[Bindable(true)]
		public string Remark 
		{
			get { return GetColumnValue<string>(Columns.Remark); }
			set { SetColumnValue(Columns.Remark, value); }
		}
		  
		[XmlAttribute("Oprtby")]
		[Bindable(true)]
		public string Oprtby 
		{
			get { return GetColumnValue<string>(Columns.Oprtby); }
			set { SetColumnValue(Columns.Oprtby, value); }
		}
		  
		[XmlAttribute("Oprttm")]
		[Bindable(true)]
		public string Oprttm 
		{
			get { return GetColumnValue<string>(Columns.Oprttm); }
			set { SetColumnValue(Columns.Oprttm, value); }
		}
		  
		[XmlAttribute("Id")]
		[Bindable(true)]
		public decimal? Id 
		{
			get { return GetColumnValue<decimal?>(Columns.Id); }
			set { SetColumnValue(Columns.Id, value); }
		}
		  
		[XmlAttribute("Cgdh")]
		[Bindable(true)]
		public string Cgdh 
		{
			get { return GetColumnValue<string>(Columns.Cgdh); }
			set { SetColumnValue(Columns.Cgdh, value); }
		}
		  
		[XmlAttribute("Shrq")]
		[Bindable(true)]
		public string Shrq 
		{
			get { return GetColumnValue<string>(Columns.Shrq); }
			set { SetColumnValue(Columns.Shrq, value); }
		}
		  
		[XmlAttribute("Cgry")]
		[Bindable(true)]
		public string Cgry 
		{
			get { return GetColumnValue<string>(Columns.Cgry); }
			set { SetColumnValue(Columns.Cgry, value); }
		}
		  
		[XmlAttribute("Cgbm")]
		[Bindable(true)]
		public string Cgbm 
		{
			get { return GetColumnValue<string>(Columns.Cgbm); }
			set { SetColumnValue(Columns.Cgbm, value); }
		}
		  
		[XmlAttribute("Pid")]
		[Bindable(true)]
		public string Pid 
		{
			get { return GetColumnValue<string>(Columns.Pid); }
			set { SetColumnValue(Columns.Pid, value); }
		}
		  
		[XmlAttribute("Stime")]
		[Bindable(true)]
		public string Stime 
		{
			get { return GetColumnValue<string>(Columns.Stime); }
			set { SetColumnValue(Columns.Stime, value); }
		}
		  
		[XmlAttribute("Syncd")]
		[Bindable(true)]
		public string Syncd 
		{
			get { return GetColumnValue<string>(Columns.Syncd); }
			set { SetColumnValue(Columns.Syncd, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varPohdno,string varCspono,string varCstcde,string varCstnam,string varContct,string varPhone,DateTime? varPoctdt,DateTime? varPlibdt,string varRemark,string varOprtby,string varOprttm,decimal? varId,string varCgdh,string varShrq,string varCgry,string varCgbm,string varPid,string varStime,string varSyncd)
		{
			WmsCShouhuoHead item = new WmsCShouhuoHead();
			
			item.Pohdno = varPohdno;
			
			item.Cspono = varCspono;
			
			item.Cstcde = varCstcde;
			
			item.Cstnam = varCstnam;
			
			item.Contct = varContct;
			
			item.Phone = varPhone;
			
			item.Poctdt = varPoctdt;
			
			item.Plibdt = varPlibdt;
			
			item.Remark = varRemark;
			
			item.Oprtby = varOprtby;
			
			item.Oprttm = varOprttm;
			
			item.Id = varId;
			
			item.Cgdh = varCgdh;
			
			item.Shrq = varShrq;
			
			item.Cgry = varCgry;
			
			item.Cgbm = varCgbm;
			
			item.Pid = varPid;
			
			item.Stime = varStime;
			
			item.Syncd = varSyncd;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(string varPohdno,string varCspono,string varCstcde,string varCstnam,string varContct,string varPhone,DateTime? varPoctdt,DateTime? varPlibdt,string varRemark,string varOprtby,string varOprttm,decimal? varId,string varCgdh,string varShrq,string varCgry,string varCgbm,string varPid,string varStime,string varSyncd)
		{
			WmsCShouhuoHead item = new WmsCShouhuoHead();
			
				item.Pohdno = varPohdno;
			
				item.Cspono = varCspono;
			
				item.Cstcde = varCstcde;
			
				item.Cstnam = varCstnam;
			
				item.Contct = varContct;
			
				item.Phone = varPhone;
			
				item.Poctdt = varPoctdt;
			
				item.Plibdt = varPlibdt;
			
				item.Remark = varRemark;
			
				item.Oprtby = varOprtby;
			
				item.Oprttm = varOprttm;
			
				item.Id = varId;
			
				item.Cgdh = varCgdh;
			
				item.Shrq = varShrq;
			
				item.Cgry = varCgry;
			
				item.Cgbm = varCgbm;
			
				item.Pid = varPid;
			
				item.Stime = varStime;
			
				item.Syncd = varSyncd;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn PohdnoColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn CsponoColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn CstcdeColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn CstnamColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn ContctColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn PhoneColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn PoctdtColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn PlibdtColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn RemarkColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn OprtbyColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn OprttmColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn IdColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn CgdhColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        public static TableSchema.TableColumn ShrqColumn
        {
            get { return Schema.Columns[13]; }
        }
        
        
        
        public static TableSchema.TableColumn CgryColumn
        {
            get { return Schema.Columns[14]; }
        }
        
        
        
        public static TableSchema.TableColumn CgbmColumn
        {
            get { return Schema.Columns[15]; }
        }
        
        
        
        public static TableSchema.TableColumn PidColumn
        {
            get { return Schema.Columns[16]; }
        }
        
        
        
        public static TableSchema.TableColumn StimeColumn
        {
            get { return Schema.Columns[17]; }
        }
        
        
        
        public static TableSchema.TableColumn SyncdColumn
        {
            get { return Schema.Columns[18]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Pohdno = @"POHDNO";
			 public static string Cspono = @"CSPONO";
			 public static string Cstcde = @"CSTCDE";
			 public static string Cstnam = @"CSTNAM";
			 public static string Contct = @"CONTCT";
			 public static string Phone = @"PHONE";
			 public static string Poctdt = @"POCTDT";
			 public static string Plibdt = @"PLIBDT";
			 public static string Remark = @"REMARK";
			 public static string Oprtby = @"OPRTBY";
			 public static string Oprttm = @"OPRTTM";
			 public static string Id = @"ID";
			 public static string Cgdh = @"CGDH";
			 public static string Shrq = @"SHRQ";
			 public static string Cgry = @"CGRY";
			 public static string Cgbm = @"CGBM";
			 public static string Pid = @"PID";
			 public static string Stime = @"STIME";
			 public static string Syncd = @"SYNCD";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}

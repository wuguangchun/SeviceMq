using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace OracleDataDomain
{
	/// <summary>
	/// Strongly-typed collection for the ZLT01 class.
	/// </summary>
    [Serializable]
	public partial class ZLT01Collection : ActiveList<ZLT01, ZLT01Collection>
	{	   
		public ZLT01Collection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>ZLT01Collection</returns>
		public ZLT01Collection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                ZLT01 o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the ZLT01 table.
	/// </summary>
	[Serializable]
	public partial class ZLT01 : ActiveRecord<ZLT01>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public ZLT01()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public ZLT01(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public ZLT01(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public ZLT01(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("ZLT01", TableType.Table, DataService.GetInstance("ErpNowthwin"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"FYERP";
				//columns
				
				TableSchema.TableColumn colvarZljybh = new TableSchema.TableColumn(schema);
				colvarZljybh.ColumnName = "ZLJYBH";
				colvarZljybh.DataType = DbType.String;
				colvarZljybh.MaxLength = 12;
				colvarZljybh.AutoIncrement = false;
				colvarZljybh.IsNullable = false;
				colvarZljybh.IsPrimaryKey = true;
				colvarZljybh.IsForeignKey = false;
				colvarZljybh.IsReadOnly = false;
				colvarZljybh.DefaultSetting = @"";
				colvarZljybh.ForeignKeyTableName = "";
				schema.Columns.Add(colvarZljybh);
				
				TableSchema.TableColumn colvarScgcdm = new TableSchema.TableColumn(schema);
				colvarScgcdm.ColumnName = "SCGCDM";
				colvarScgcdm.DataType = DbType.String;
				colvarScgcdm.MaxLength = 8;
				colvarScgcdm.AutoIncrement = false;
				colvarScgcdm.IsNullable = true;
				colvarScgcdm.IsPrimaryKey = false;
				colvarScgcdm.IsForeignKey = false;
				colvarScgcdm.IsReadOnly = false;
				colvarScgcdm.DefaultSetting = @"";
				colvarScgcdm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScgcdm);
				
				TableSchema.TableColumn colvarSccjdm = new TableSchema.TableColumn(schema);
				colvarSccjdm.ColumnName = "SCCJDM";
				colvarSccjdm.DataType = DbType.String;
				colvarSccjdm.MaxLength = 8;
				colvarSccjdm.AutoIncrement = false;
				colvarSccjdm.IsNullable = true;
				colvarSccjdm.IsPrimaryKey = false;
				colvarSccjdm.IsForeignKey = false;
				colvarSccjdm.IsReadOnly = false;
				colvarSccjdm.DefaultSetting = @"";
				colvarSccjdm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSccjdm);
				
				TableSchema.TableColumn colvarZljyff = new TableSchema.TableColumn(schema);
				colvarZljyff.ColumnName = "ZLJYFF";
				colvarZljyff.DataType = DbType.String;
				colvarZljyff.MaxLength = 1;
				colvarZljyff.AutoIncrement = false;
				colvarZljyff.IsNullable = true;
				colvarZljyff.IsPrimaryKey = false;
				colvarZljyff.IsForeignKey = false;
				colvarZljyff.IsReadOnly = false;
				colvarZljyff.DefaultSetting = @"";
				colvarZljyff.ForeignKeyTableName = "";
				schema.Columns.Add(colvarZljyff);
				
				TableSchema.TableColumn colvarZljyrq = new TableSchema.TableColumn(schema);
				colvarZljyrq.ColumnName = "ZLJYRQ";
				colvarZljyrq.DataType = DbType.DateTime;
				colvarZljyrq.MaxLength = 0;
				colvarZljyrq.AutoIncrement = false;
				colvarZljyrq.IsNullable = true;
				colvarZljyrq.IsPrimaryKey = false;
				colvarZljyrq.IsForeignKey = false;
				colvarZljyrq.IsReadOnly = false;
				colvarZljyrq.DefaultSetting = @"";
				colvarZljyrq.ForeignKeyTableName = "";
				schema.Columns.Add(colvarZljyrq);
				
				TableSchema.TableColumn colvarZljyry = new TableSchema.TableColumn(schema);
				colvarZljyry.ColumnName = "ZLJYRY";
				colvarZljyry.DataType = DbType.String;
				colvarZljyry.MaxLength = 10;
				colvarZljyry.AutoIncrement = false;
				colvarZljyry.IsNullable = true;
				colvarZljyry.IsPrimaryKey = false;
				colvarZljyry.IsForeignKey = false;
				colvarZljyry.IsReadOnly = false;
				colvarZljyry.DefaultSetting = @"";
				colvarZljyry.ForeignKeyTableName = "";
				schema.Columns.Add(colvarZljyry);
				
				TableSchema.TableColumn colvarZllrry = new TableSchema.TableColumn(schema);
				colvarZllrry.ColumnName = "ZLLRRY";
				colvarZllrry.DataType = DbType.String;
				colvarZllrry.MaxLength = 8;
				colvarZllrry.AutoIncrement = false;
				colvarZllrry.IsNullable = true;
				colvarZllrry.IsPrimaryKey = false;
				colvarZllrry.IsForeignKey = false;
				colvarZllrry.IsReadOnly = false;
				colvarZllrry.DefaultSetting = @"";
				colvarZllrry.ForeignKeyTableName = "";
				schema.Columns.Add(colvarZllrry);
				
				TableSchema.TableColumn colvarZllrrq = new TableSchema.TableColumn(schema);
				colvarZllrrq.ColumnName = "ZLLRRQ";
				colvarZllrrq.DataType = DbType.DateTime;
				colvarZllrrq.MaxLength = 0;
				colvarZllrrq.AutoIncrement = false;
				colvarZllrrq.IsNullable = true;
				colvarZllrrq.IsPrimaryKey = false;
				colvarZllrrq.IsForeignKey = false;
				colvarZllrrq.IsReadOnly = false;
				colvarZllrrq.DefaultSetting = @"";
				colvarZllrrq.ForeignKeyTableName = "";
				schema.Columns.Add(colvarZllrrq);
				
				TableSchema.TableColumn colvarZlshry = new TableSchema.TableColumn(schema);
				colvarZlshry.ColumnName = "ZLSHRY";
				colvarZlshry.DataType = DbType.String;
				colvarZlshry.MaxLength = 8;
				colvarZlshry.AutoIncrement = false;
				colvarZlshry.IsNullable = true;
				colvarZlshry.IsPrimaryKey = false;
				colvarZlshry.IsForeignKey = false;
				colvarZlshry.IsReadOnly = false;
				colvarZlshry.DefaultSetting = @"";
				colvarZlshry.ForeignKeyTableName = "";
				schema.Columns.Add(colvarZlshry);
				
				TableSchema.TableColumn colvarZlshrq = new TableSchema.TableColumn(schema);
				colvarZlshrq.ColumnName = "ZLSHRQ";
				colvarZlshrq.DataType = DbType.DateTime;
				colvarZlshrq.MaxLength = 0;
				colvarZlshrq.AutoIncrement = false;
				colvarZlshrq.IsNullable = true;
				colvarZlshrq.IsPrimaryKey = false;
				colvarZlshrq.IsForeignKey = false;
				colvarZlshrq.IsReadOnly = false;
				colvarZlshrq.DefaultSetting = @"";
				colvarZlshrq.ForeignKeyTableName = "";
				schema.Columns.Add(colvarZlshrq);
				
				TableSchema.TableColumn colvarZljyzt = new TableSchema.TableColumn(schema);
				colvarZljyzt.ColumnName = "ZLJYZT";
				colvarZljyzt.DataType = DbType.String;
				colvarZljyzt.MaxLength = 1;
				colvarZljyzt.AutoIncrement = false;
				colvarZljyzt.IsNullable = true;
				colvarZljyzt.IsPrimaryKey = false;
				colvarZljyzt.IsForeignKey = false;
				colvarZljyzt.IsReadOnly = false;
				colvarZljyzt.DefaultSetting = @"";
				colvarZljyzt.ForeignKeyTableName = "";
				schema.Columns.Add(colvarZljyzt);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ErpNowthwin"].AddSchema("ZLT01",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Zljybh")]
		[Bindable(true)]
		public string Zljybh 
		{
			get { return GetColumnValue<string>(Columns.Zljybh); }
			set { SetColumnValue(Columns.Zljybh, value); }
		}
		  
		[XmlAttribute("Scgcdm")]
		[Bindable(true)]
		public string Scgcdm 
		{
			get { return GetColumnValue<string>(Columns.Scgcdm); }
			set { SetColumnValue(Columns.Scgcdm, value); }
		}
		  
		[XmlAttribute("Sccjdm")]
		[Bindable(true)]
		public string Sccjdm 
		{
			get { return GetColumnValue<string>(Columns.Sccjdm); }
			set { SetColumnValue(Columns.Sccjdm, value); }
		}
		  
		[XmlAttribute("Zljyff")]
		[Bindable(true)]
		public string Zljyff 
		{
			get { return GetColumnValue<string>(Columns.Zljyff); }
			set { SetColumnValue(Columns.Zljyff, value); }
		}
		  
		[XmlAttribute("Zljyrq")]
		[Bindable(true)]
		public DateTime? Zljyrq 
		{
			get { return GetColumnValue<DateTime?>(Columns.Zljyrq); }
			set { SetColumnValue(Columns.Zljyrq, value); }
		}
		  
		[XmlAttribute("Zljyry")]
		[Bindable(true)]
		public string Zljyry 
		{
			get { return GetColumnValue<string>(Columns.Zljyry); }
			set { SetColumnValue(Columns.Zljyry, value); }
		}
		  
		[XmlAttribute("Zllrry")]
		[Bindable(true)]
		public string Zllrry 
		{
			get { return GetColumnValue<string>(Columns.Zllrry); }
			set { SetColumnValue(Columns.Zllrry, value); }
		}
		  
		[XmlAttribute("Zllrrq")]
		[Bindable(true)]
		public DateTime? Zllrrq 
		{
			get { return GetColumnValue<DateTime?>(Columns.Zllrrq); }
			set { SetColumnValue(Columns.Zllrrq, value); }
		}
		  
		[XmlAttribute("Zlshry")]
		[Bindable(true)]
		public string Zlshry 
		{
			get { return GetColumnValue<string>(Columns.Zlshry); }
			set { SetColumnValue(Columns.Zlshry, value); }
		}
		  
		[XmlAttribute("Zlshrq")]
		[Bindable(true)]
		public DateTime? Zlshrq 
		{
			get { return GetColumnValue<DateTime?>(Columns.Zlshrq); }
			set { SetColumnValue(Columns.Zlshrq, value); }
		}
		  
		[XmlAttribute("Zljyzt")]
		[Bindable(true)]
		public string Zljyzt 
		{
			get { return GetColumnValue<string>(Columns.Zljyzt); }
			set { SetColumnValue(Columns.Zljyzt, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varZljybh,string varScgcdm,string varSccjdm,string varZljyff,DateTime? varZljyrq,string varZljyry,string varZllrry,DateTime? varZllrrq,string varZlshry,DateTime? varZlshrq,string varZljyzt)
		{
			ZLT01 item = new ZLT01();
			
			item.Zljybh = varZljybh;
			
			item.Scgcdm = varScgcdm;
			
			item.Sccjdm = varSccjdm;
			
			item.Zljyff = varZljyff;
			
			item.Zljyrq = varZljyrq;
			
			item.Zljyry = varZljyry;
			
			item.Zllrry = varZllrry;
			
			item.Zllrrq = varZllrrq;
			
			item.Zlshry = varZlshry;
			
			item.Zlshrq = varZlshrq;
			
			item.Zljyzt = varZljyzt;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(string varZljybh,string varScgcdm,string varSccjdm,string varZljyff,DateTime? varZljyrq,string varZljyry,string varZllrry,DateTime? varZllrrq,string varZlshry,DateTime? varZlshrq,string varZljyzt)
		{
			ZLT01 item = new ZLT01();
			
				item.Zljybh = varZljybh;
			
				item.Scgcdm = varScgcdm;
			
				item.Sccjdm = varSccjdm;
			
				item.Zljyff = varZljyff;
			
				item.Zljyrq = varZljyrq;
			
				item.Zljyry = varZljyry;
			
				item.Zllrry = varZllrry;
			
				item.Zllrrq = varZllrrq;
			
				item.Zlshry = varZlshry;
			
				item.Zlshrq = varZlshrq;
			
				item.Zljyzt = varZljyzt;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn ZljybhColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn ScgcdmColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn SccjdmColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn ZljyffColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn ZljyrqColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn ZljyryColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn ZllrryColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn ZllrrqColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn ZlshryColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn ZlshrqColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn ZljyztColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Zljybh = @"ZLJYBH";
			 public static string Scgcdm = @"SCGCDM";
			 public static string Sccjdm = @"SCCJDM";
			 public static string Zljyff = @"ZLJYFF";
			 public static string Zljyrq = @"ZLJYRQ";
			 public static string Zljyry = @"ZLJYRY";
			 public static string Zllrry = @"ZLLRRY";
			 public static string Zllrrq = @"ZLLRRQ";
			 public static string Zlshry = @"ZLSHRY";
			 public static string Zlshrq = @"ZLSHRQ";
			 public static string Zljyzt = @"ZLJYZT";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}

using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace OracleDataDomain
{
	/// <summary>
	/// Strongly-typed collection for the XSM07 class.
	/// </summary>
    [Serializable]
	public partial class XSM07Collection : ActiveList<XSM07, XSM07Collection>
	{	   
		public XSM07Collection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>XSM07Collection</returns>
		public XSM07Collection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                XSM07 o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the XSM07 table.
	/// </summary>
	[Serializable]
	public partial class XSM07 : ActiveRecord<XSM07>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public XSM07()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public XSM07(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public XSM07(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public XSM07(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("XSM07", TableType.Table, DataService.GetInstance("ErpNowthwin"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"FYERP";
				//columns
				
				TableSchema.TableColumn colvarXtwldm = new TableSchema.TableColumn(schema);
				colvarXtwldm.ColumnName = "XTWLDM";
				colvarXtwldm.DataType = DbType.String;
				colvarXtwldm.MaxLength = 8;
				colvarXtwldm.AutoIncrement = false;
				colvarXtwldm.IsNullable = false;
				colvarXtwldm.IsPrimaryKey = true;
				colvarXtwldm.IsForeignKey = false;
				colvarXtwldm.IsReadOnly = false;
				colvarXtwldm.DefaultSetting = @"";
				colvarXtwldm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXtwldm);
				
				TableSchema.TableColumn colvarXtwpdm = new TableSchema.TableColumn(schema);
				colvarXtwpdm.ColumnName = "XTWPDM";
				colvarXtwpdm.DataType = DbType.String;
				colvarXtwpdm.MaxLength = 20;
				colvarXtwpdm.AutoIncrement = false;
				colvarXtwpdm.IsNullable = false;
				colvarXtwpdm.IsPrimaryKey = true;
				colvarXtwpdm.IsForeignKey = false;
				colvarXtwpdm.IsReadOnly = false;
				colvarXtwpdm.DefaultSetting = @"";
				colvarXtwpdm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXtwpdm);
				
				TableSchema.TableColumn colvarXsqsrq = new TableSchema.TableColumn(schema);
				colvarXsqsrq.ColumnName = "XSQSRQ";
				colvarXsqsrq.DataType = DbType.DateTime;
				colvarXsqsrq.MaxLength = 0;
				colvarXsqsrq.AutoIncrement = false;
				colvarXsqsrq.IsNullable = false;
				colvarXsqsrq.IsPrimaryKey = true;
				colvarXsqsrq.IsForeignKey = false;
				colvarXsqsrq.IsReadOnly = false;
				colvarXsqsrq.DefaultSetting = @"";
				colvarXsqsrq.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXsqsrq);
				
				TableSchema.TableColumn colvarXsjzrq = new TableSchema.TableColumn(schema);
				colvarXsjzrq.ColumnName = "XSJZRQ";
				colvarXsjzrq.DataType = DbType.DateTime;
				colvarXsjzrq.MaxLength = 0;
				colvarXsjzrq.AutoIncrement = false;
				colvarXsjzrq.IsNullable = true;
				colvarXsjzrq.IsPrimaryKey = false;
				colvarXsjzrq.IsForeignKey = false;
				colvarXsjzrq.IsReadOnly = false;
				colvarXsjzrq.DefaultSetting = @"";
				colvarXsjzrq.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXsjzrq);
				
				TableSchema.TableColumn colvarWpxsjg = new TableSchema.TableColumn(schema);
				colvarWpxsjg.ColumnName = "WPXSJG";
				colvarWpxsjg.DataType = DbType.Decimal;
				colvarWpxsjg.MaxLength = 0;
				colvarWpxsjg.AutoIncrement = false;
				colvarWpxsjg.IsNullable = true;
				colvarWpxsjg.IsPrimaryKey = false;
				colvarWpxsjg.IsForeignKey = false;
				colvarWpxsjg.IsReadOnly = false;
				colvarWpxsjg.DefaultSetting = @"";
				colvarWpxsjg.ForeignKeyTableName = "";
				schema.Columns.Add(colvarWpxsjg);
				
				TableSchema.TableColumn colvarXszsyy = new TableSchema.TableColumn(schema);
				colvarXszsyy.ColumnName = "XSZSYY";
				colvarXszsyy.DataType = DbType.String;
				colvarXszsyy.MaxLength = 6;
				colvarXszsyy.AutoIncrement = false;
				colvarXszsyy.IsNullable = true;
				colvarXszsyy.IsPrimaryKey = false;
				colvarXszsyy.IsForeignKey = false;
				colvarXszsyy.IsReadOnly = false;
				colvarXszsyy.DefaultSetting = @"";
				colvarXszsyy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXszsyy);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ErpNowthwin"].AddSchema("XSM07",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Xtwldm")]
		[Bindable(true)]
		public string Xtwldm 
		{
			get { return GetColumnValue<string>(Columns.Xtwldm); }
			set { SetColumnValue(Columns.Xtwldm, value); }
		}
		  
		[XmlAttribute("Xtwpdm")]
		[Bindable(true)]
		public string Xtwpdm 
		{
			get { return GetColumnValue<string>(Columns.Xtwpdm); }
			set { SetColumnValue(Columns.Xtwpdm, value); }
		}
		  
		[XmlAttribute("Xsqsrq")]
		[Bindable(true)]
		public DateTime Xsqsrq 
		{
			get { return GetColumnValue<DateTime>(Columns.Xsqsrq); }
			set { SetColumnValue(Columns.Xsqsrq, value); }
		}
		  
		[XmlAttribute("Xsjzrq")]
		[Bindable(true)]
		public DateTime? Xsjzrq 
		{
			get { return GetColumnValue<DateTime?>(Columns.Xsjzrq); }
			set { SetColumnValue(Columns.Xsjzrq, value); }
		}
		  
		[XmlAttribute("Wpxsjg")]
		[Bindable(true)]
		public decimal? Wpxsjg 
		{
			get { return GetColumnValue<decimal?>(Columns.Wpxsjg); }
			set { SetColumnValue(Columns.Wpxsjg, value); }
		}
		  
		[XmlAttribute("Xszsyy")]
		[Bindable(true)]
		public string Xszsyy 
		{
			get { return GetColumnValue<string>(Columns.Xszsyy); }
			set { SetColumnValue(Columns.Xszsyy, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varXtwldm,string varXtwpdm,DateTime varXsqsrq,DateTime? varXsjzrq,decimal? varWpxsjg,string varXszsyy)
		{
			XSM07 item = new XSM07();
			
			item.Xtwldm = varXtwldm;
			
			item.Xtwpdm = varXtwpdm;
			
			item.Xsqsrq = varXsqsrq;
			
			item.Xsjzrq = varXsjzrq;
			
			item.Wpxsjg = varWpxsjg;
			
			item.Xszsyy = varXszsyy;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(string varXtwldm,string varXtwpdm,DateTime varXsqsrq,DateTime? varXsjzrq,decimal? varWpxsjg,string varXszsyy)
		{
			XSM07 item = new XSM07();
			
				item.Xtwldm = varXtwldm;
			
				item.Xtwpdm = varXtwpdm;
			
				item.Xsqsrq = varXsqsrq;
			
				item.Xsjzrq = varXsjzrq;
			
				item.Wpxsjg = varWpxsjg;
			
				item.Xszsyy = varXszsyy;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn XtwldmColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn XtwpdmColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn XsqsrqColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn XsjzrqColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn WpxsjgColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn XszsyyColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Xtwldm = @"XTWLDM";
			 public static string Xtwpdm = @"XTWPDM";
			 public static string Xsqsrq = @"XSQSRQ";
			 public static string Xsjzrq = @"XSJZRQ";
			 public static string Wpxsjg = @"WPXSJG";
			 public static string Xszsyy = @"XSZSYY";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}

using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace OracleDataDomain
{
	/// <summary>
	/// Strongly-typed collection for the XSM03 class.
	/// </summary>
    [Serializable]
	public partial class XSM03Collection : ActiveList<XSM03, XSM03Collection>
	{	   
		public XSM03Collection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>XSM03Collection</returns>
		public XSM03Collection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                XSM03 o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the XSM03 table.
	/// </summary>
	[Serializable]
	public partial class XSM03 : ActiveRecord<XSM03>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public XSM03()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public XSM03(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public XSM03(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public XSM03(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("XSM03", TableType.Table, DataService.GetInstance("ErpNowthwin"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"FYERP";
				//columns
				
				TableSchema.TableColumn colvarXslxdm = new TableSchema.TableColumn(schema);
				colvarXslxdm.ColumnName = "XSLXDM";
				colvarXslxdm.DataType = DbType.String;
				colvarXslxdm.MaxLength = 8;
				colvarXslxdm.AutoIncrement = false;
				colvarXslxdm.IsNullable = false;
				colvarXslxdm.IsPrimaryKey = true;
				colvarXslxdm.IsForeignKey = false;
				colvarXslxdm.IsReadOnly = false;
				colvarXslxdm.DefaultSetting = @"";
				colvarXslxdm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXslxdm);
				
				TableSchema.TableColumn colvarXslxsm = new TableSchema.TableColumn(schema);
				colvarXslxsm.ColumnName = "XSLXSM";
				colvarXslxsm.DataType = DbType.String;
				colvarXslxsm.MaxLength = 255;
				colvarXslxsm.AutoIncrement = false;
				colvarXslxsm.IsNullable = true;
				colvarXslxsm.IsPrimaryKey = false;
				colvarXslxsm.IsForeignKey = false;
				colvarXslxsm.IsReadOnly = false;
				colvarXslxsm.DefaultSetting = @"";
				colvarXslxsm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXslxsm);
				
				TableSchema.TableColumn colvarXsqsdq = new TableSchema.TableColumn(schema);
				colvarXsqsdq.ColumnName = "XSQSDQ";
				colvarXsqsdq.DataType = DbType.String;
				colvarXsqsdq.MaxLength = 8;
				colvarXsqsdq.AutoIncrement = false;
				colvarXsqsdq.IsNullable = false;
				colvarXsqsdq.IsPrimaryKey = false;
				colvarXsqsdq.IsForeignKey = false;
				colvarXsqsdq.IsReadOnly = false;
				colvarXsqsdq.DefaultSetting = @"";
				colvarXsqsdq.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXsqsdq);
				
				TableSchema.TableColumn colvarXtysfs = new TableSchema.TableColumn(schema);
				colvarXtysfs.ColumnName = "XTYSFS";
				colvarXtysfs.DataType = DbType.String;
				colvarXtysfs.MaxLength = 4;
				colvarXtysfs.AutoIncrement = false;
				colvarXtysfs.IsNullable = false;
				colvarXtysfs.IsPrimaryKey = false;
				colvarXtysfs.IsForeignKey = false;
				colvarXtysfs.IsReadOnly = false;
				colvarXtysfs.DefaultSetting = @"";
				colvarXtysfs.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXtysfs);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ErpNowthwin"].AddSchema("XSM03",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Xslxdm")]
		[Bindable(true)]
		public string Xslxdm 
		{
			get { return GetColumnValue<string>(Columns.Xslxdm); }
			set { SetColumnValue(Columns.Xslxdm, value); }
		}
		  
		[XmlAttribute("Xslxsm")]
		[Bindable(true)]
		public string Xslxsm 
		{
			get { return GetColumnValue<string>(Columns.Xslxsm); }
			set { SetColumnValue(Columns.Xslxsm, value); }
		}
		  
		[XmlAttribute("Xsqsdq")]
		[Bindable(true)]
		public string Xsqsdq 
		{
			get { return GetColumnValue<string>(Columns.Xsqsdq); }
			set { SetColumnValue(Columns.Xsqsdq, value); }
		}
		  
		[XmlAttribute("Xtysfs")]
		[Bindable(true)]
		public string Xtysfs 
		{
			get { return GetColumnValue<string>(Columns.Xtysfs); }
			set { SetColumnValue(Columns.Xtysfs, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varXslxdm,string varXslxsm,string varXsqsdq,string varXtysfs)
		{
			XSM03 item = new XSM03();
			
			item.Xslxdm = varXslxdm;
			
			item.Xslxsm = varXslxsm;
			
			item.Xsqsdq = varXsqsdq;
			
			item.Xtysfs = varXtysfs;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(string varXslxdm,string varXslxsm,string varXsqsdq,string varXtysfs)
		{
			XSM03 item = new XSM03();
			
				item.Xslxdm = varXslxdm;
			
				item.Xslxsm = varXslxsm;
			
				item.Xsqsdq = varXsqsdq;
			
				item.Xtysfs = varXtysfs;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn XslxdmColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn XslxsmColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn XsqsdqColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn XtysfsColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Xslxdm = @"XSLXDM";
			 public static string Xslxsm = @"XSLXSM";
			 public static string Xsqsdq = @"XSQSDQ";
			 public static string Xtysfs = @"XTYSFS";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}

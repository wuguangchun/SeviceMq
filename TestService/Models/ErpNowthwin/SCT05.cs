using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace OracleDataDomain
{
	/// <summary>
	/// Strongly-typed collection for the SCT05 class.
	/// </summary>
    [Serializable]
	public partial class SCT05Collection : ActiveList<SCT05, SCT05Collection>
	{	   
		public SCT05Collection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>SCT05Collection</returns>
		public SCT05Collection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                SCT05 o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the SCT05 table.
	/// </summary>
	[Serializable]
	public partial class SCT05 : ActiveRecord<SCT05>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public SCT05()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public SCT05(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public SCT05(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public SCT05(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("SCT05", TableType.Table, DataService.GetInstance("ErpNowthwin"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"FYERP";
				//columns
				
				TableSchema.TableColumn colvarScfjdm = new TableSchema.TableColumn(schema);
				colvarScfjdm.ColumnName = "SCFJDM";
				colvarScfjdm.DataType = DbType.String;
				colvarScfjdm.MaxLength = 20;
				colvarScfjdm.AutoIncrement = false;
				colvarScfjdm.IsNullable = false;
				colvarScfjdm.IsPrimaryKey = true;
				colvarScfjdm.IsForeignKey = false;
				colvarScfjdm.IsReadOnly = false;
				colvarScfjdm.DefaultSetting = @"";
				colvarScfjdm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScfjdm);
				
				TableSchema.TableColumn colvarScclxh = new TableSchema.TableColumn(schema);
				colvarScclxh.ColumnName = "SCCLXH";
				colvarScclxh.DataType = DbType.Decimal;
				colvarScclxh.MaxLength = 0;
				colvarScclxh.AutoIncrement = false;
				colvarScclxh.IsNullable = false;
				colvarScclxh.IsPrimaryKey = true;
				colvarScclxh.IsForeignKey = false;
				colvarScclxh.IsReadOnly = false;
				colvarScclxh.DefaultSetting = @"";
				colvarScclxh.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScclxh);
				
				TableSchema.TableColumn colvarSczjdm = new TableSchema.TableColumn(schema);
				colvarSczjdm.ColumnName = "SCZJDM";
				colvarSczjdm.DataType = DbType.String;
				colvarSczjdm.MaxLength = 20;
				colvarSczjdm.AutoIncrement = false;
				colvarSczjdm.IsNullable = false;
				colvarSczjdm.IsPrimaryKey = false;
				colvarSczjdm.IsForeignKey = false;
				colvarSczjdm.IsReadOnly = false;
				colvarSczjdm.DefaultSetting = @"";
				colvarSczjdm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSczjdm);
				
				TableSchema.TableColumn colvarScytdm = new TableSchema.TableColumn(schema);
				colvarScytdm.ColumnName = "SCYTDM";
				colvarScytdm.DataType = DbType.String;
				colvarScytdm.MaxLength = 2;
				colvarScytdm.AutoIncrement = false;
				colvarScytdm.IsNullable = true;
				colvarScytdm.IsPrimaryKey = false;
				colvarScytdm.IsForeignKey = false;
				colvarScytdm.IsReadOnly = false;
				colvarScytdm.DefaultSetting = @"";
				colvarScytdm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScytdm);
				
				TableSchema.TableColumn colvarScgxsl = new TableSchema.TableColumn(schema);
				colvarScgxsl.ColumnName = "SCGXSL";
				colvarScgxsl.DataType = DbType.Decimal;
				colvarScgxsl.MaxLength = 0;
				colvarScgxsl.AutoIncrement = false;
				colvarScgxsl.IsNullable = true;
				colvarScgxsl.IsPrimaryKey = false;
				colvarScgxsl.IsForeignKey = false;
				colvarScgxsl.IsReadOnly = false;
				colvarScgxsl.DefaultSetting = @"";
				colvarScgxsl.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScgxsl);
				
				TableSchema.TableColumn colvarScjgbz = new TableSchema.TableColumn(schema);
				colvarScjgbz.ColumnName = "SCJGBZ";
				colvarScjgbz.DataType = DbType.String;
				colvarScjgbz.MaxLength = 255;
				colvarScjgbz.AutoIncrement = false;
				colvarScjgbz.IsNullable = true;
				colvarScjgbz.IsPrimaryKey = false;
				colvarScjgbz.IsForeignKey = false;
				colvarScjgbz.IsReadOnly = false;
				colvarScjgbz.DefaultSetting = @"";
				colvarScjgbz.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScjgbz);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ErpNowthwin"].AddSchema("SCT05",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Scfjdm")]
		[Bindable(true)]
		public string Scfjdm 
		{
			get { return GetColumnValue<string>(Columns.Scfjdm); }
			set { SetColumnValue(Columns.Scfjdm, value); }
		}
		  
		[XmlAttribute("Scclxh")]
		[Bindable(true)]
		public decimal Scclxh 
		{
			get { return GetColumnValue<decimal>(Columns.Scclxh); }
			set { SetColumnValue(Columns.Scclxh, value); }
		}
		  
		[XmlAttribute("Sczjdm")]
		[Bindable(true)]
		public string Sczjdm 
		{
			get { return GetColumnValue<string>(Columns.Sczjdm); }
			set { SetColumnValue(Columns.Sczjdm, value); }
		}
		  
		[XmlAttribute("Scytdm")]
		[Bindable(true)]
		public string Scytdm 
		{
			get { return GetColumnValue<string>(Columns.Scytdm); }
			set { SetColumnValue(Columns.Scytdm, value); }
		}
		  
		[XmlAttribute("Scgxsl")]
		[Bindable(true)]
		public decimal? Scgxsl 
		{
			get { return GetColumnValue<decimal?>(Columns.Scgxsl); }
			set { SetColumnValue(Columns.Scgxsl, value); }
		}
		  
		[XmlAttribute("Scjgbz")]
		[Bindable(true)]
		public string Scjgbz 
		{
			get { return GetColumnValue<string>(Columns.Scjgbz); }
			set { SetColumnValue(Columns.Scjgbz, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varScfjdm,decimal varScclxh,string varSczjdm,string varScytdm,decimal? varScgxsl,string varScjgbz)
		{
			SCT05 item = new SCT05();
			
			item.Scfjdm = varScfjdm;
			
			item.Scclxh = varScclxh;
			
			item.Sczjdm = varSczjdm;
			
			item.Scytdm = varScytdm;
			
			item.Scgxsl = varScgxsl;
			
			item.Scjgbz = varScjgbz;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(string varScfjdm,decimal varScclxh,string varSczjdm,string varScytdm,decimal? varScgxsl,string varScjgbz)
		{
			SCT05 item = new SCT05();
			
				item.Scfjdm = varScfjdm;
			
				item.Scclxh = varScclxh;
			
				item.Sczjdm = varSczjdm;
			
				item.Scytdm = varScytdm;
			
				item.Scgxsl = varScgxsl;
			
				item.Scjgbz = varScjgbz;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn ScfjdmColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn ScclxhColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn SczjdmColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn ScytdmColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn ScgxslColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn ScjgbzColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Scfjdm = @"SCFJDM";
			 public static string Scclxh = @"SCCLXH";
			 public static string Sczjdm = @"SCZJDM";
			 public static string Scytdm = @"SCYTDM";
			 public static string Scgxsl = @"SCGXSL";
			 public static string Scjgbz = @"SCJGBZ";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}

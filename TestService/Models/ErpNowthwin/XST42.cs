using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace OracleDataDomain
{
	/// <summary>
	/// Strongly-typed collection for the XST42 class.
	/// </summary>
    [Serializable]
	public partial class XST42Collection : ActiveList<XST42, XST42Collection>
	{	   
		public XST42Collection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>XST42Collection</returns>
		public XST42Collection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                XST42 o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the XST42 table.
	/// </summary>
	[Serializable]
	public partial class XST42 : ActiveRecord<XST42>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public XST42()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public XST42(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public XST42(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public XST42(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("XST42", TableType.Table, DataService.GetInstance("ErpNowthwin"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"FYERP";
				//columns
				
				TableSchema.TableColumn colvarXtbmdm = new TableSchema.TableColumn(schema);
				colvarXtbmdm.ColumnName = "XTBMDM";
				colvarXtbmdm.DataType = DbType.String;
				colvarXtbmdm.MaxLength = 8;
				colvarXtbmdm.AutoIncrement = false;
				colvarXtbmdm.IsNullable = false;
				colvarXtbmdm.IsPrimaryKey = true;
				colvarXtbmdm.IsForeignKey = false;
				colvarXtbmdm.IsReadOnly = false;
				colvarXtbmdm.DefaultSetting = @"";
				colvarXtbmdm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXtbmdm);
				
				TableSchema.TableColumn colvarXskjnd = new TableSchema.TableColumn(schema);
				colvarXskjnd.ColumnName = "XSKJND";
				colvarXskjnd.DataType = DbType.Decimal;
				colvarXskjnd.MaxLength = 0;
				colvarXskjnd.AutoIncrement = false;
				colvarXskjnd.IsNullable = false;
				colvarXskjnd.IsPrimaryKey = true;
				colvarXskjnd.IsForeignKey = false;
				colvarXskjnd.IsReadOnly = false;
				colvarXskjnd.DefaultSetting = @"";
				colvarXskjnd.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXskjnd);
				
				TableSchema.TableColumn colvarXskjyf = new TableSchema.TableColumn(schema);
				colvarXskjyf.ColumnName = "XSKJYF";
				colvarXskjyf.DataType = DbType.Decimal;
				colvarXskjyf.MaxLength = 0;
				colvarXskjyf.AutoIncrement = false;
				colvarXskjyf.IsNullable = false;
				colvarXskjyf.IsPrimaryKey = true;
				colvarXskjyf.IsForeignKey = false;
				colvarXskjyf.IsReadOnly = false;
				colvarXskjyf.DefaultSetting = @"";
				colvarXskjyf.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXskjyf);
				
				TableSchema.TableColumn colvarXsrwje = new TableSchema.TableColumn(schema);
				colvarXsrwje.ColumnName = "XSRWJE";
				colvarXsrwje.DataType = DbType.Decimal;
				colvarXsrwje.MaxLength = 0;
				colvarXsrwje.AutoIncrement = false;
				colvarXsrwje.IsNullable = true;
				colvarXsrwje.IsPrimaryKey = false;
				colvarXsrwje.IsForeignKey = false;
				colvarXsrwje.IsReadOnly = false;
				colvarXsrwje.DefaultSetting = @"";
				colvarXsrwje.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXsrwje);
				
				TableSchema.TableColumn colvarXtshbz = new TableSchema.TableColumn(schema);
				colvarXtshbz.ColumnName = "XTSHBZ";
				colvarXtshbz.DataType = DbType.String;
				colvarXtshbz.MaxLength = 1;
				colvarXtshbz.AutoIncrement = false;
				colvarXtshbz.IsNullable = true;
				colvarXtshbz.IsPrimaryKey = false;
				colvarXtshbz.IsForeignKey = false;
				colvarXtshbz.IsReadOnly = false;
				colvarXtshbz.DefaultSetting = @"";
				colvarXtshbz.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXtshbz);
				
				TableSchema.TableColumn colvarXshkje = new TableSchema.TableColumn(schema);
				colvarXshkje.ColumnName = "XSHKJE";
				colvarXshkje.DataType = DbType.Decimal;
				colvarXshkje.MaxLength = 0;
				colvarXshkje.AutoIncrement = false;
				colvarXshkje.IsNullable = true;
				colvarXshkje.IsPrimaryKey = false;
				colvarXshkje.IsForeignKey = false;
				colvarXshkje.IsReadOnly = false;
				colvarXshkje.DefaultSetting = @"";
				colvarXshkje.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXshkje);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ErpNowthwin"].AddSchema("XST42",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Xtbmdm")]
		[Bindable(true)]
		public string Xtbmdm 
		{
			get { return GetColumnValue<string>(Columns.Xtbmdm); }
			set { SetColumnValue(Columns.Xtbmdm, value); }
		}
		  
		[XmlAttribute("Xskjnd")]
		[Bindable(true)]
		public decimal Xskjnd 
		{
			get { return GetColumnValue<decimal>(Columns.Xskjnd); }
			set { SetColumnValue(Columns.Xskjnd, value); }
		}
		  
		[XmlAttribute("Xskjyf")]
		[Bindable(true)]
		public decimal Xskjyf 
		{
			get { return GetColumnValue<decimal>(Columns.Xskjyf); }
			set { SetColumnValue(Columns.Xskjyf, value); }
		}
		  
		[XmlAttribute("Xsrwje")]
		[Bindable(true)]
		public decimal? Xsrwje 
		{
			get { return GetColumnValue<decimal?>(Columns.Xsrwje); }
			set { SetColumnValue(Columns.Xsrwje, value); }
		}
		  
		[XmlAttribute("Xtshbz")]
		[Bindable(true)]
		public string Xtshbz 
		{
			get { return GetColumnValue<string>(Columns.Xtshbz); }
			set { SetColumnValue(Columns.Xtshbz, value); }
		}
		  
		[XmlAttribute("Xshkje")]
		[Bindable(true)]
		public decimal? Xshkje 
		{
			get { return GetColumnValue<decimal?>(Columns.Xshkje); }
			set { SetColumnValue(Columns.Xshkje, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varXtbmdm,decimal varXskjnd,decimal varXskjyf,decimal? varXsrwje,string varXtshbz,decimal? varXshkje)
		{
			XST42 item = new XST42();
			
			item.Xtbmdm = varXtbmdm;
			
			item.Xskjnd = varXskjnd;
			
			item.Xskjyf = varXskjyf;
			
			item.Xsrwje = varXsrwje;
			
			item.Xtshbz = varXtshbz;
			
			item.Xshkje = varXshkje;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(string varXtbmdm,decimal varXskjnd,decimal varXskjyf,decimal? varXsrwje,string varXtshbz,decimal? varXshkje)
		{
			XST42 item = new XST42();
			
				item.Xtbmdm = varXtbmdm;
			
				item.Xskjnd = varXskjnd;
			
				item.Xskjyf = varXskjyf;
			
				item.Xsrwje = varXsrwje;
			
				item.Xtshbz = varXtshbz;
			
				item.Xshkje = varXshkje;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn XtbmdmColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn XskjndColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn XskjyfColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn XsrwjeColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn XtshbzColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn XshkjeColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Xtbmdm = @"XTBMDM";
			 public static string Xskjnd = @"XSKJND";
			 public static string Xskjyf = @"XSKJYF";
			 public static string Xsrwje = @"XSRWJE";
			 public static string Xtshbz = @"XTSHBZ";
			 public static string Xshkje = @"XSHKJE";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}

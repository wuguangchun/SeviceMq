using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace OracleDataDomain
{
	/// <summary>
	/// Strongly-typed collection for the SCT79 class.
	/// </summary>
    [Serializable]
	public partial class SCT79Collection : ActiveList<SCT79, SCT79Collection>
	{	   
		public SCT79Collection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>SCT79Collection</returns>
		public SCT79Collection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                SCT79 o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the SCT79 table.
	/// </summary>
	[Serializable]
	public partial class SCT79 : ActiveRecord<SCT79>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public SCT79()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public SCT79(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public SCT79(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public SCT79(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("SCT79", TableType.Table, DataService.GetInstance("ErpNowthwin"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"FYERP";
				//columns
				
				TableSchema.TableColumn colvarSchsnd = new TableSchema.TableColumn(schema);
				colvarSchsnd.ColumnName = "SCHSND";
				colvarSchsnd.DataType = DbType.Decimal;
				colvarSchsnd.MaxLength = 0;
				colvarSchsnd.AutoIncrement = false;
				colvarSchsnd.IsNullable = false;
				colvarSchsnd.IsPrimaryKey = true;
				colvarSchsnd.IsForeignKey = false;
				colvarSchsnd.IsReadOnly = false;
				colvarSchsnd.DefaultSetting = @"";
				colvarSchsnd.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSchsnd);
				
				TableSchema.TableColumn colvarSchsyf = new TableSchema.TableColumn(schema);
				colvarSchsyf.ColumnName = "SCHSYF";
				colvarSchsyf.DataType = DbType.Decimal;
				colvarSchsyf.MaxLength = 0;
				colvarSchsyf.AutoIncrement = false;
				colvarSchsyf.IsNullable = false;
				colvarSchsyf.IsPrimaryKey = true;
				colvarSchsyf.IsForeignKey = false;
				colvarSchsyf.IsReadOnly = false;
				colvarSchsyf.DefaultSetting = @"";
				colvarSchsyf.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSchsyf);
				
				TableSchema.TableColumn colvarXtzgdm = new TableSchema.TableColumn(schema);
				colvarXtzgdm.ColumnName = "XTZGDM";
				colvarXtzgdm.DataType = DbType.String;
				colvarXtzgdm.MaxLength = 8;
				colvarXtzgdm.AutoIncrement = false;
				colvarXtzgdm.IsNullable = false;
				colvarXtzgdm.IsPrimaryKey = true;
				colvarXtzgdm.IsForeignKey = false;
				colvarXtzgdm.IsReadOnly = false;
				colvarXtzgdm.DefaultSetting = @"";
				colvarXtzgdm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXtzgdm);
				
				TableSchema.TableColumn colvarScmbgs = new TableSchema.TableColumn(schema);
				colvarScmbgs.ColumnName = "SCMBGS";
				colvarScmbgs.DataType = DbType.Decimal;
				colvarScmbgs.MaxLength = 0;
				colvarScmbgs.AutoIncrement = false;
				colvarScmbgs.IsNullable = true;
				colvarScmbgs.IsPrimaryKey = false;
				colvarScmbgs.IsForeignKey = false;
				colvarScmbgs.IsReadOnly = false;
				colvarScmbgs.DefaultSetting = @"";
				colvarScmbgs.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScmbgs);
				
				TableSchema.TableColumn colvarScsjgs = new TableSchema.TableColumn(schema);
				colvarScsjgs.ColumnName = "SCSJGS";
				colvarScsjgs.DataType = DbType.Decimal;
				colvarScsjgs.MaxLength = 0;
				colvarScsjgs.AutoIncrement = false;
				colvarScsjgs.IsNullable = true;
				colvarScsjgs.IsPrimaryKey = false;
				colvarScsjgs.IsForeignKey = false;
				colvarScsjgs.IsReadOnly = false;
				colvarScsjgs.DefaultSetting = @"";
				colvarScsjgs.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScsjgs);
				
				TableSchema.TableColumn colvarScgspf = new TableSchema.TableColumn(schema);
				colvarScgspf.ColumnName = "SCGSPF";
				colvarScgspf.DataType = DbType.Decimal;
				colvarScgspf.MaxLength = 0;
				colvarScgspf.AutoIncrement = false;
				colvarScgspf.IsNullable = true;
				colvarScgspf.IsPrimaryKey = false;
				colvarScgspf.IsForeignKey = false;
				colvarScgspf.IsReadOnly = false;
				colvarScgspf.DefaultSetting = @"";
				colvarScgspf.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScgspf);
				
				TableSchema.TableColumn colvarScmbxl = new TableSchema.TableColumn(schema);
				colvarScmbxl.ColumnName = "SCMBXL";
				colvarScmbxl.DataType = DbType.Decimal;
				colvarScmbxl.MaxLength = 0;
				colvarScmbxl.AutoIncrement = false;
				colvarScmbxl.IsNullable = true;
				colvarScmbxl.IsPrimaryKey = false;
				colvarScmbxl.IsForeignKey = false;
				colvarScmbxl.IsReadOnly = false;
				colvarScmbxl.DefaultSetting = @"";
				colvarScmbxl.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScmbxl);
				
				TableSchema.TableColumn colvarScsjxl = new TableSchema.TableColumn(schema);
				colvarScsjxl.ColumnName = "SCSJXL";
				colvarScsjxl.DataType = DbType.Decimal;
				colvarScsjxl.MaxLength = 0;
				colvarScsjxl.AutoIncrement = false;
				colvarScsjxl.IsNullable = true;
				colvarScsjxl.IsPrimaryKey = false;
				colvarScsjxl.IsForeignKey = false;
				colvarScsjxl.IsReadOnly = false;
				colvarScsjxl.DefaultSetting = @"";
				colvarScsjxl.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScsjxl);
				
				TableSchema.TableColumn colvarScxlpf = new TableSchema.TableColumn(schema);
				colvarScxlpf.ColumnName = "SCXLPF";
				colvarScxlpf.DataType = DbType.Decimal;
				colvarScxlpf.MaxLength = 0;
				colvarScxlpf.AutoIncrement = false;
				colvarScxlpf.IsNullable = true;
				colvarScxlpf.IsPrimaryKey = false;
				colvarScxlpf.IsForeignKey = false;
				colvarScxlpf.IsReadOnly = false;
				colvarScxlpf.DefaultSetting = @"";
				colvarScxlpf.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScxlpf);
				
				TableSchema.TableColumn colvarScsjfx = new TableSchema.TableColumn(schema);
				colvarScsjfx.ColumnName = "SCSJFX";
				colvarScsjfx.DataType = DbType.Decimal;
				colvarScsjfx.MaxLength = 0;
				colvarScsjfx.AutoIncrement = false;
				colvarScsjfx.IsNullable = true;
				colvarScsjfx.IsPrimaryKey = false;
				colvarScsjfx.IsForeignKey = false;
				colvarScsjfx.IsReadOnly = false;
				colvarScsjfx.DefaultSetting = @"";
				colvarScsjfx.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScsjfx);
				
				TableSchema.TableColumn colvarScpzpf = new TableSchema.TableColumn(schema);
				colvarScpzpf.ColumnName = "SCPZPF";
				colvarScpzpf.DataType = DbType.Decimal;
				colvarScpzpf.MaxLength = 0;
				colvarScpzpf.AutoIncrement = false;
				colvarScpzpf.IsNullable = true;
				colvarScpzpf.IsPrimaryKey = false;
				colvarScpzpf.IsForeignKey = false;
				colvarScpzpf.IsReadOnly = false;
				colvarScpzpf.DefaultSetting = @"";
				colvarScpzpf.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScpzpf);
				
				TableSchema.TableColumn colvarSczgpf = new TableSchema.TableColumn(schema);
				colvarSczgpf.ColumnName = "SCZGPF";
				colvarSczgpf.DataType = DbType.Decimal;
				colvarSczgpf.MaxLength = 0;
				colvarSczgpf.AutoIncrement = false;
				colvarSczgpf.IsNullable = true;
				colvarSczgpf.IsPrimaryKey = false;
				colvarSczgpf.IsForeignKey = false;
				colvarSczgpf.IsReadOnly = false;
				colvarSczgpf.DefaultSetting = @"";
				colvarSczgpf.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSczgpf);
				
				TableSchema.TableColumn colvarScbxpf = new TableSchema.TableColumn(schema);
				colvarScbxpf.ColumnName = "SCBXPF";
				colvarScbxpf.DataType = DbType.Decimal;
				colvarScbxpf.MaxLength = 0;
				colvarScbxpf.AutoIncrement = false;
				colvarScbxpf.IsNullable = true;
				colvarScbxpf.IsPrimaryKey = false;
				colvarScbxpf.IsForeignKey = false;
				colvarScbxpf.IsReadOnly = false;
				colvarScbxpf.DefaultSetting = @"";
				colvarScbxpf.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScbxpf);
				
				TableSchema.TableColumn colvarScgrpm = new TableSchema.TableColumn(schema);
				colvarScgrpm.ColumnName = "SCGRPM";
				colvarScgrpm.DataType = DbType.Decimal;
				colvarScgrpm.MaxLength = 0;
				colvarScgrpm.AutoIncrement = false;
				colvarScgrpm.IsNullable = true;
				colvarScgrpm.IsPrimaryKey = false;
				colvarScgrpm.IsForeignKey = false;
				colvarScgrpm.IsReadOnly = false;
				colvarScgrpm.DefaultSetting = @"";
				colvarScgrpm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScgrpm);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ErpNowthwin"].AddSchema("SCT79",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Schsnd")]
		[Bindable(true)]
		public decimal Schsnd 
		{
			get { return GetColumnValue<decimal>(Columns.Schsnd); }
			set { SetColumnValue(Columns.Schsnd, value); }
		}
		  
		[XmlAttribute("Schsyf")]
		[Bindable(true)]
		public decimal Schsyf 
		{
			get { return GetColumnValue<decimal>(Columns.Schsyf); }
			set { SetColumnValue(Columns.Schsyf, value); }
		}
		  
		[XmlAttribute("Xtzgdm")]
		[Bindable(true)]
		public string Xtzgdm 
		{
			get { return GetColumnValue<string>(Columns.Xtzgdm); }
			set { SetColumnValue(Columns.Xtzgdm, value); }
		}
		  
		[XmlAttribute("Scmbgs")]
		[Bindable(true)]
		public decimal? Scmbgs 
		{
			get { return GetColumnValue<decimal?>(Columns.Scmbgs); }
			set { SetColumnValue(Columns.Scmbgs, value); }
		}
		  
		[XmlAttribute("Scsjgs")]
		[Bindable(true)]
		public decimal? Scsjgs 
		{
			get { return GetColumnValue<decimal?>(Columns.Scsjgs); }
			set { SetColumnValue(Columns.Scsjgs, value); }
		}
		  
		[XmlAttribute("Scgspf")]
		[Bindable(true)]
		public decimal? Scgspf 
		{
			get { return GetColumnValue<decimal?>(Columns.Scgspf); }
			set { SetColumnValue(Columns.Scgspf, value); }
		}
		  
		[XmlAttribute("Scmbxl")]
		[Bindable(true)]
		public decimal? Scmbxl 
		{
			get { return GetColumnValue<decimal?>(Columns.Scmbxl); }
			set { SetColumnValue(Columns.Scmbxl, value); }
		}
		  
		[XmlAttribute("Scsjxl")]
		[Bindable(true)]
		public decimal? Scsjxl 
		{
			get { return GetColumnValue<decimal?>(Columns.Scsjxl); }
			set { SetColumnValue(Columns.Scsjxl, value); }
		}
		  
		[XmlAttribute("Scxlpf")]
		[Bindable(true)]
		public decimal? Scxlpf 
		{
			get { return GetColumnValue<decimal?>(Columns.Scxlpf); }
			set { SetColumnValue(Columns.Scxlpf, value); }
		}
		  
		[XmlAttribute("Scsjfx")]
		[Bindable(true)]
		public decimal? Scsjfx 
		{
			get { return GetColumnValue<decimal?>(Columns.Scsjfx); }
			set { SetColumnValue(Columns.Scsjfx, value); }
		}
		  
		[XmlAttribute("Scpzpf")]
		[Bindable(true)]
		public decimal? Scpzpf 
		{
			get { return GetColumnValue<decimal?>(Columns.Scpzpf); }
			set { SetColumnValue(Columns.Scpzpf, value); }
		}
		  
		[XmlAttribute("Sczgpf")]
		[Bindable(true)]
		public decimal? Sczgpf 
		{
			get { return GetColumnValue<decimal?>(Columns.Sczgpf); }
			set { SetColumnValue(Columns.Sczgpf, value); }
		}
		  
		[XmlAttribute("Scbxpf")]
		[Bindable(true)]
		public decimal? Scbxpf 
		{
			get { return GetColumnValue<decimal?>(Columns.Scbxpf); }
			set { SetColumnValue(Columns.Scbxpf, value); }
		}
		  
		[XmlAttribute("Scgrpm")]
		[Bindable(true)]
		public decimal? Scgrpm 
		{
			get { return GetColumnValue<decimal?>(Columns.Scgrpm); }
			set { SetColumnValue(Columns.Scgrpm, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(decimal varSchsnd,decimal varSchsyf,string varXtzgdm,decimal? varScmbgs,decimal? varScsjgs,decimal? varScgspf,decimal? varScmbxl,decimal? varScsjxl,decimal? varScxlpf,decimal? varScsjfx,decimal? varScpzpf,decimal? varSczgpf,decimal? varScbxpf,decimal? varScgrpm)
		{
			SCT79 item = new SCT79();
			
			item.Schsnd = varSchsnd;
			
			item.Schsyf = varSchsyf;
			
			item.Xtzgdm = varXtzgdm;
			
			item.Scmbgs = varScmbgs;
			
			item.Scsjgs = varScsjgs;
			
			item.Scgspf = varScgspf;
			
			item.Scmbxl = varScmbxl;
			
			item.Scsjxl = varScsjxl;
			
			item.Scxlpf = varScxlpf;
			
			item.Scsjfx = varScsjfx;
			
			item.Scpzpf = varScpzpf;
			
			item.Sczgpf = varSczgpf;
			
			item.Scbxpf = varScbxpf;
			
			item.Scgrpm = varScgrpm;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(decimal varSchsnd,decimal varSchsyf,string varXtzgdm,decimal? varScmbgs,decimal? varScsjgs,decimal? varScgspf,decimal? varScmbxl,decimal? varScsjxl,decimal? varScxlpf,decimal? varScsjfx,decimal? varScpzpf,decimal? varSczgpf,decimal? varScbxpf,decimal? varScgrpm)
		{
			SCT79 item = new SCT79();
			
				item.Schsnd = varSchsnd;
			
				item.Schsyf = varSchsyf;
			
				item.Xtzgdm = varXtzgdm;
			
				item.Scmbgs = varScmbgs;
			
				item.Scsjgs = varScsjgs;
			
				item.Scgspf = varScgspf;
			
				item.Scmbxl = varScmbxl;
			
				item.Scsjxl = varScsjxl;
			
				item.Scxlpf = varScxlpf;
			
				item.Scsjfx = varScsjfx;
			
				item.Scpzpf = varScpzpf;
			
				item.Sczgpf = varSczgpf;
			
				item.Scbxpf = varScbxpf;
			
				item.Scgrpm = varScgrpm;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn SchsndColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn SchsyfColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn XtzgdmColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn ScmbgsColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn ScsjgsColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn ScgspfColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn ScmbxlColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn ScsjxlColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn ScxlpfColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn ScsjfxColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn ScpzpfColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn SczgpfColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn ScbxpfColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        public static TableSchema.TableColumn ScgrpmColumn
        {
            get { return Schema.Columns[13]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Schsnd = @"SCHSND";
			 public static string Schsyf = @"SCHSYF";
			 public static string Xtzgdm = @"XTZGDM";
			 public static string Scmbgs = @"SCMBGS";
			 public static string Scsjgs = @"SCSJGS";
			 public static string Scgspf = @"SCGSPF";
			 public static string Scmbxl = @"SCMBXL";
			 public static string Scsjxl = @"SCSJXL";
			 public static string Scxlpf = @"SCXLPF";
			 public static string Scsjfx = @"SCSJFX";
			 public static string Scpzpf = @"SCPZPF";
			 public static string Sczgpf = @"SCZGPF";
			 public static string Scbxpf = @"SCBXPF";
			 public static string Scgrpm = @"SCGRPM";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}

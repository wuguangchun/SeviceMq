using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace OracleDataDomain
{
	/// <summary>
	/// Strongly-typed collection for the WmsCXST03 class.
	/// </summary>
    [Serializable]
	public partial class WmsCXST03Collection : ActiveList<WmsCXST03, WmsCXST03Collection>
	{	   
		public WmsCXST03Collection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>WmsCXST03Collection</returns>
		public WmsCXST03Collection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                WmsCXST03 o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the WMS_C_XST03 table.
	/// </summary>
	[Serializable]
	public partial class WmsCXST03 : ActiveRecord<WmsCXST03>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public WmsCXST03()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public WmsCXST03(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public WmsCXST03(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public WmsCXST03(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("WMS_C_XST03", TableType.Table, DataService.GetInstance("ErpNowthwin"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"FYERP";
				//columns
				
				TableSchema.TableColumn colvarXsthdh = new TableSchema.TableColumn(schema);
				colvarXsthdh.ColumnName = "XSTHDH";
				colvarXsthdh.DataType = DbType.String;
				colvarXsthdh.MaxLength = 12;
				colvarXsthdh.AutoIncrement = false;
				colvarXsthdh.IsNullable = false;
				colvarXsthdh.IsPrimaryKey = true;
				colvarXsthdh.IsForeignKey = false;
				colvarXsthdh.IsReadOnly = false;
				colvarXsthdh.DefaultSetting = @"";
				colvarXsthdh.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXsthdh);
				
				TableSchema.TableColumn colvarXtwlmc = new TableSchema.TableColumn(schema);
				colvarXtwlmc.ColumnName = "XTWLMC";
				colvarXtwlmc.DataType = DbType.String;
				colvarXtwlmc.MaxLength = 100;
				colvarXtwlmc.AutoIncrement = false;
				colvarXtwlmc.IsNullable = true;
				colvarXtwlmc.IsPrimaryKey = false;
				colvarXtwlmc.IsForeignKey = false;
				colvarXtwlmc.IsReadOnly = false;
				colvarXtwlmc.DefaultSetting = @"";
				colvarXtwlmc.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXtwlmc);
				
				TableSchema.TableColumn colvarXtbmmc = new TableSchema.TableColumn(schema);
				colvarXtbmmc.ColumnName = "XTBMMC";
				colvarXtbmmc.DataType = DbType.String;
				colvarXtbmmc.MaxLength = 60;
				colvarXtbmmc.AutoIncrement = false;
				colvarXtbmmc.IsNullable = true;
				colvarXtbmmc.IsPrimaryKey = false;
				colvarXtbmmc.IsForeignKey = false;
				colvarXtbmmc.IsReadOnly = false;
				colvarXtbmmc.DefaultSetting = @"";
				colvarXtbmmc.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXtbmmc);
				
				TableSchema.TableColumn colvarXsxsdb = new TableSchema.TableColumn(schema);
				colvarXsxsdb.ColumnName = "XSXSDB";
				colvarXsxsdb.DataType = DbType.String;
				colvarXsxsdb.MaxLength = 20;
				colvarXsxsdb.AutoIncrement = false;
				colvarXsxsdb.IsNullable = true;
				colvarXsxsdb.IsPrimaryKey = false;
				colvarXsxsdb.IsForeignKey = false;
				colvarXsxsdb.IsReadOnly = false;
				colvarXsxsdb.DefaultSetting = @"";
				colvarXsxsdb.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXsxsdb);
				
				TableSchema.TableColumn colvarXsddhm = new TableSchema.TableColumn(schema);
				colvarXsddhm.ColumnName = "XSDDHM";
				colvarXsddhm.DataType = DbType.String;
				colvarXsddhm.MaxLength = 12;
				colvarXsddhm.AutoIncrement = false;
				colvarXsddhm.IsNullable = true;
				colvarXsddhm.IsPrimaryKey = false;
				colvarXsddhm.IsForeignKey = false;
				colvarXsddhm.IsReadOnly = false;
				colvarXsddhm.DefaultSetting = @"";
				colvarXsddhm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXsddhm);
				
				TableSchema.TableColumn colvarKcckdm = new TableSchema.TableColumn(schema);
				colvarKcckdm.ColumnName = "KCCKDM";
				colvarKcckdm.DataType = DbType.String;
				colvarKcckdm.MaxLength = 8;
				colvarKcckdm.AutoIncrement = false;
				colvarKcckdm.IsNullable = true;
				colvarKcckdm.IsPrimaryKey = false;
				colvarKcckdm.IsForeignKey = false;
				colvarKcckdm.IsReadOnly = false;
				colvarKcckdm.DefaultSetting = @"";
				colvarKcckdm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarKcckdm);
				
				TableSchema.TableColumn colvarXsysfs = new TableSchema.TableColumn(schema);
				colvarXsysfs.ColumnName = "XSYSFS";
				colvarXsysfs.DataType = DbType.String;
				colvarXsysfs.MaxLength = 4;
				colvarXsysfs.AutoIncrement = false;
				colvarXsysfs.IsNullable = true;
				colvarXsysfs.IsPrimaryKey = false;
				colvarXsysfs.IsForeignKey = false;
				colvarXsysfs.IsReadOnly = false;
				colvarXsysfs.DefaultSetting = @"";
				colvarXsysfs.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXsysfs);
				
				TableSchema.TableColumn colvarXtjhdd = new TableSchema.TableColumn(schema);
				colvarXtjhdd.ColumnName = "XTJHDD";
				colvarXtjhdd.DataType = DbType.String;
				colvarXtjhdd.MaxLength = 40;
				colvarXtjhdd.AutoIncrement = false;
				colvarXtjhdd.IsNullable = true;
				colvarXtjhdd.IsPrimaryKey = false;
				colvarXtjhdd.IsForeignKey = false;
				colvarXtjhdd.IsReadOnly = false;
				colvarXtjhdd.DefaultSetting = @"";
				colvarXtjhdd.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXtjhdd);
				
				TableSchema.TableColumn colvarXsxqrq = new TableSchema.TableColumn(schema);
				colvarXsxqrq.ColumnName = "XSXQRQ";
				colvarXsxqrq.DataType = DbType.DateTime;
				colvarXsxqrq.MaxLength = 0;
				colvarXsxqrq.AutoIncrement = false;
				colvarXsxqrq.IsNullable = true;
				colvarXsxqrq.IsPrimaryKey = false;
				colvarXsxqrq.IsForeignKey = false;
				colvarXsxqrq.IsReadOnly = false;
				colvarXsxqrq.DefaultSetting = @"";
				colvarXsxqrq.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXsxqrq);
				
				TableSchema.TableColumn colvarXtwldm = new TableSchema.TableColumn(schema);
				colvarXtwldm.ColumnName = "XTWLDM";
				colvarXtwldm.DataType = DbType.String;
				colvarXtwldm.MaxLength = 8;
				colvarXtwldm.AutoIncrement = false;
				colvarXtwldm.IsNullable = false;
				colvarXtwldm.IsPrimaryKey = false;
				colvarXtwldm.IsForeignKey = false;
				colvarXtwldm.IsReadOnly = false;
				colvarXtwldm.DefaultSetting = @"";
				colvarXtwldm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXtwldm);
				
				TableSchema.TableColumn colvarXstdsl = new TableSchema.TableColumn(schema);
				colvarXstdsl.ColumnName = "XSTDSL";
				colvarXstdsl.DataType = DbType.Decimal;
				colvarXstdsl.MaxLength = 0;
				colvarXstdsl.AutoIncrement = false;
				colvarXstdsl.IsNullable = true;
				colvarXstdsl.IsPrimaryKey = false;
				colvarXstdsl.IsForeignKey = false;
				colvarXstdsl.IsReadOnly = false;
				colvarXstdsl.DefaultSetting = @"";
				colvarXstdsl.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXstdsl);
				
				TableSchema.TableColumn colvarXstdje = new TableSchema.TableColumn(schema);
				colvarXstdje.ColumnName = "XSTDJE";
				colvarXstdje.DataType = DbType.Decimal;
				colvarXstdje.MaxLength = 0;
				colvarXstdje.AutoIncrement = false;
				colvarXstdje.IsNullable = true;
				colvarXstdje.IsPrimaryKey = false;
				colvarXstdje.IsForeignKey = false;
				colvarXstdje.IsReadOnly = false;
				colvarXstdje.DefaultSetting = @"";
				colvarXstdje.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXstdje);
				
				TableSchema.TableColumn colvarPid = new TableSchema.TableColumn(schema);
				colvarPid.ColumnName = "PID";
				colvarPid.DataType = DbType.String;
				colvarPid.MaxLength = 32;
				colvarPid.AutoIncrement = false;
				colvarPid.IsNullable = true;
				colvarPid.IsPrimaryKey = false;
				colvarPid.IsForeignKey = false;
				colvarPid.IsReadOnly = false;
				colvarPid.DefaultSetting = @"";
				colvarPid.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPid);
				
				TableSchema.TableColumn colvarStime = new TableSchema.TableColumn(schema);
				colvarStime.ColumnName = "STIME";
				colvarStime.DataType = DbType.String;
				colvarStime.MaxLength = 0;
				colvarStime.AutoIncrement = false;
				colvarStime.IsNullable = true;
				colvarStime.IsPrimaryKey = false;
				colvarStime.IsForeignKey = false;
				colvarStime.IsReadOnly = false;
				colvarStime.DefaultSetting = @"";
				colvarStime.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStime);
				
				TableSchema.TableColumn colvarSyncd = new TableSchema.TableColumn(schema);
				colvarSyncd.ColumnName = "SYNCD";
				colvarSyncd.DataType = DbType.String;
				colvarSyncd.MaxLength = 1;
				colvarSyncd.AutoIncrement = false;
				colvarSyncd.IsNullable = true;
				colvarSyncd.IsPrimaryKey = false;
				colvarSyncd.IsForeignKey = false;
				colvarSyncd.IsReadOnly = false;
				colvarSyncd.DefaultSetting = @"";
				colvarSyncd.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSyncd);
				
				TableSchema.TableColumn colvarFxsyncd = new TableSchema.TableColumn(schema);
				colvarFxsyncd.ColumnName = "FXSYNCD";
				colvarFxsyncd.DataType = DbType.String;
				colvarFxsyncd.MaxLength = 1;
				colvarFxsyncd.AutoIncrement = false;
				colvarFxsyncd.IsNullable = true;
				colvarFxsyncd.IsPrimaryKey = false;
				colvarFxsyncd.IsForeignKey = false;
				colvarFxsyncd.IsReadOnly = false;
				colvarFxsyncd.DefaultSetting = @"";
				colvarFxsyncd.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFxsyncd);
				
				TableSchema.TableColumn colvarXthbdm = new TableSchema.TableColumn(schema);
				colvarXthbdm.ColumnName = "XTHBDM";
				colvarXthbdm.DataType = DbType.String;
				colvarXthbdm.MaxLength = 3;
				colvarXthbdm.AutoIncrement = false;
				colvarXthbdm.IsNullable = true;
				colvarXthbdm.IsPrimaryKey = false;
				colvarXthbdm.IsForeignKey = false;
				colvarXthbdm.IsReadOnly = false;
				colvarXthbdm.DefaultSetting = @"";
				colvarXthbdm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXthbdm);
				
				TableSchema.TableColumn colvarXtdhhl = new TableSchema.TableColumn(schema);
				colvarXtdhhl.ColumnName = "XTDHHL";
				colvarXtdhhl.DataType = DbType.Decimal;
				colvarXtdhhl.MaxLength = 0;
				colvarXtdhhl.AutoIncrement = false;
				colvarXtdhhl.IsNullable = true;
				colvarXtdhhl.IsPrimaryKey = false;
				colvarXtdhhl.IsForeignKey = false;
				colvarXtdhhl.IsReadOnly = false;
				colvarXtdhhl.DefaultSetting = @"";
				colvarXtdhhl.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXtdhhl);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ErpNowthwin"].AddSchema("WMS_C_XST03",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Xsthdh")]
		[Bindable(true)]
		public string Xsthdh 
		{
			get { return GetColumnValue<string>(Columns.Xsthdh); }
			set { SetColumnValue(Columns.Xsthdh, value); }
		}
		  
		[XmlAttribute("Xtwlmc")]
		[Bindable(true)]
		public string Xtwlmc 
		{
			get { return GetColumnValue<string>(Columns.Xtwlmc); }
			set { SetColumnValue(Columns.Xtwlmc, value); }
		}
		  
		[XmlAttribute("Xtbmmc")]
		[Bindable(true)]
		public string Xtbmmc 
		{
			get { return GetColumnValue<string>(Columns.Xtbmmc); }
			set { SetColumnValue(Columns.Xtbmmc, value); }
		}
		  
		[XmlAttribute("Xsxsdb")]
		[Bindable(true)]
		public string Xsxsdb 
		{
			get { return GetColumnValue<string>(Columns.Xsxsdb); }
			set { SetColumnValue(Columns.Xsxsdb, value); }
		}
		  
		[XmlAttribute("Xsddhm")]
		[Bindable(true)]
		public string Xsddhm 
		{
			get { return GetColumnValue<string>(Columns.Xsddhm); }
			set { SetColumnValue(Columns.Xsddhm, value); }
		}
		  
		[XmlAttribute("Kcckdm")]
		[Bindable(true)]
		public string Kcckdm 
		{
			get { return GetColumnValue<string>(Columns.Kcckdm); }
			set { SetColumnValue(Columns.Kcckdm, value); }
		}
		  
		[XmlAttribute("Xsysfs")]
		[Bindable(true)]
		public string Xsysfs 
		{
			get { return GetColumnValue<string>(Columns.Xsysfs); }
			set { SetColumnValue(Columns.Xsysfs, value); }
		}
		  
		[XmlAttribute("Xtjhdd")]
		[Bindable(true)]
		public string Xtjhdd 
		{
			get { return GetColumnValue<string>(Columns.Xtjhdd); }
			set { SetColumnValue(Columns.Xtjhdd, value); }
		}
		  
		[XmlAttribute("Xsxqrq")]
		[Bindable(true)]
		public DateTime? Xsxqrq 
		{
			get { return GetColumnValue<DateTime?>(Columns.Xsxqrq); }
			set { SetColumnValue(Columns.Xsxqrq, value); }
		}
		  
		[XmlAttribute("Xtwldm")]
		[Bindable(true)]
		public string Xtwldm 
		{
			get { return GetColumnValue<string>(Columns.Xtwldm); }
			set { SetColumnValue(Columns.Xtwldm, value); }
		}
		  
		[XmlAttribute("Xstdsl")]
		[Bindable(true)]
		public decimal? Xstdsl 
		{
			get { return GetColumnValue<decimal?>(Columns.Xstdsl); }
			set { SetColumnValue(Columns.Xstdsl, value); }
		}
		  
		[XmlAttribute("Xstdje")]
		[Bindable(true)]
		public decimal? Xstdje 
		{
			get { return GetColumnValue<decimal?>(Columns.Xstdje); }
			set { SetColumnValue(Columns.Xstdje, value); }
		}
		  
		[XmlAttribute("Pid")]
		[Bindable(true)]
		public string Pid 
		{
			get { return GetColumnValue<string>(Columns.Pid); }
			set { SetColumnValue(Columns.Pid, value); }
		}
		  
		[XmlAttribute("Stime")]
		[Bindable(true)]
		public string Stime 
		{
			get { return GetColumnValue<string>(Columns.Stime); }
			set { SetColumnValue(Columns.Stime, value); }
		}
		  
		[XmlAttribute("Syncd")]
		[Bindable(true)]
		public string Syncd 
		{
			get { return GetColumnValue<string>(Columns.Syncd); }
			set { SetColumnValue(Columns.Syncd, value); }
		}
		  
		[XmlAttribute("Fxsyncd")]
		[Bindable(true)]
		public string Fxsyncd 
		{
			get { return GetColumnValue<string>(Columns.Fxsyncd); }
			set { SetColumnValue(Columns.Fxsyncd, value); }
		}
		  
		[XmlAttribute("Xthbdm")]
		[Bindable(true)]
		public string Xthbdm 
		{
			get { return GetColumnValue<string>(Columns.Xthbdm); }
			set { SetColumnValue(Columns.Xthbdm, value); }
		}
		  
		[XmlAttribute("Xtdhhl")]
		[Bindable(true)]
		public decimal? Xtdhhl 
		{
			get { return GetColumnValue<decimal?>(Columns.Xtdhhl); }
			set { SetColumnValue(Columns.Xtdhhl, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varXsthdh,string varXtwlmc,string varXtbmmc,string varXsxsdb,string varXsddhm,string varKcckdm,string varXsysfs,string varXtjhdd,DateTime? varXsxqrq,string varXtwldm,decimal? varXstdsl,decimal? varXstdje,string varPid,string varStime,string varSyncd,string varFxsyncd,string varXthbdm,decimal? varXtdhhl)
		{
			WmsCXST03 item = new WmsCXST03();
			
			item.Xsthdh = varXsthdh;
			
			item.Xtwlmc = varXtwlmc;
			
			item.Xtbmmc = varXtbmmc;
			
			item.Xsxsdb = varXsxsdb;
			
			item.Xsddhm = varXsddhm;
			
			item.Kcckdm = varKcckdm;
			
			item.Xsysfs = varXsysfs;
			
			item.Xtjhdd = varXtjhdd;
			
			item.Xsxqrq = varXsxqrq;
			
			item.Xtwldm = varXtwldm;
			
			item.Xstdsl = varXstdsl;
			
			item.Xstdje = varXstdje;
			
			item.Pid = varPid;
			
			item.Stime = varStime;
			
			item.Syncd = varSyncd;
			
			item.Fxsyncd = varFxsyncd;
			
			item.Xthbdm = varXthbdm;
			
			item.Xtdhhl = varXtdhhl;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(string varXsthdh,string varXtwlmc,string varXtbmmc,string varXsxsdb,string varXsddhm,string varKcckdm,string varXsysfs,string varXtjhdd,DateTime? varXsxqrq,string varXtwldm,decimal? varXstdsl,decimal? varXstdje,string varPid,string varStime,string varSyncd,string varFxsyncd,string varXthbdm,decimal? varXtdhhl)
		{
			WmsCXST03 item = new WmsCXST03();
			
				item.Xsthdh = varXsthdh;
			
				item.Xtwlmc = varXtwlmc;
			
				item.Xtbmmc = varXtbmmc;
			
				item.Xsxsdb = varXsxsdb;
			
				item.Xsddhm = varXsddhm;
			
				item.Kcckdm = varKcckdm;
			
				item.Xsysfs = varXsysfs;
			
				item.Xtjhdd = varXtjhdd;
			
				item.Xsxqrq = varXsxqrq;
			
				item.Xtwldm = varXtwldm;
			
				item.Xstdsl = varXstdsl;
			
				item.Xstdje = varXstdje;
			
				item.Pid = varPid;
			
				item.Stime = varStime;
			
				item.Syncd = varSyncd;
			
				item.Fxsyncd = varFxsyncd;
			
				item.Xthbdm = varXthbdm;
			
				item.Xtdhhl = varXtdhhl;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn XsthdhColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn XtwlmcColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn XtbmmcColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn XsxsdbColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn XsddhmColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn KcckdmColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn XsysfsColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn XtjhddColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn XsxqrqColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn XtwldmColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn XstdslColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn XstdjeColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn PidColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        public static TableSchema.TableColumn StimeColumn
        {
            get { return Schema.Columns[13]; }
        }
        
        
        
        public static TableSchema.TableColumn SyncdColumn
        {
            get { return Schema.Columns[14]; }
        }
        
        
        
        public static TableSchema.TableColumn FxsyncdColumn
        {
            get { return Schema.Columns[15]; }
        }
        
        
        
        public static TableSchema.TableColumn XthbdmColumn
        {
            get { return Schema.Columns[16]; }
        }
        
        
        
        public static TableSchema.TableColumn XtdhhlColumn
        {
            get { return Schema.Columns[17]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Xsthdh = @"XSTHDH";
			 public static string Xtwlmc = @"XTWLMC";
			 public static string Xtbmmc = @"XTBMMC";
			 public static string Xsxsdb = @"XSXSDB";
			 public static string Xsddhm = @"XSDDHM";
			 public static string Kcckdm = @"KCCKDM";
			 public static string Xsysfs = @"XSYSFS";
			 public static string Xtjhdd = @"XTJHDD";
			 public static string Xsxqrq = @"XSXQRQ";
			 public static string Xtwldm = @"XTWLDM";
			 public static string Xstdsl = @"XSTDSL";
			 public static string Xstdje = @"XSTDJE";
			 public static string Pid = @"PID";
			 public static string Stime = @"STIME";
			 public static string Syncd = @"SYNCD";
			 public static string Fxsyncd = @"FXSYNCD";
			 public static string Xthbdm = @"XTHBDM";
			 public static string Xtdhhl = @"XTDHHL";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}

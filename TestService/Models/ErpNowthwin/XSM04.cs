using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace OracleDataDomain
{
	/// <summary>
	/// Strongly-typed collection for the XSM04 class.
	/// </summary>
    [Serializable]
	public partial class XSM04Collection : ActiveList<XSM04, XSM04Collection>
	{	   
		public XSM04Collection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>XSM04Collection</returns>
		public XSM04Collection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                XSM04 o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the XSM04 table.
	/// </summary>
	[Serializable]
	public partial class XSM04 : ActiveRecord<XSM04>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public XSM04()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public XSM04(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public XSM04(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public XSM04(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("XSM04", TableType.Table, DataService.GetInstance("ErpNowthwin"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"FYERP";
				//columns
				
				TableSchema.TableColumn colvarXslxdm = new TableSchema.TableColumn(schema);
				colvarXslxdm.ColumnName = "XSLXDM";
				colvarXslxdm.DataType = DbType.String;
				colvarXslxdm.MaxLength = 8;
				colvarXslxdm.AutoIncrement = false;
				colvarXslxdm.IsNullable = false;
				colvarXslxdm.IsPrimaryKey = true;
				colvarXslxdm.IsForeignKey = false;
				colvarXslxdm.IsReadOnly = false;
				colvarXslxdm.DefaultSetting = @"";
				colvarXslxdm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXslxdm);
				
				TableSchema.TableColumn colvarXtdqdm = new TableSchema.TableColumn(schema);
				colvarXtdqdm.ColumnName = "XTDQDM";
				colvarXtdqdm.DataType = DbType.String;
				colvarXtdqdm.MaxLength = 8;
				colvarXtdqdm.AutoIncrement = false;
				colvarXtdqdm.IsNullable = false;
				colvarXtdqdm.IsPrimaryKey = true;
				colvarXtdqdm.IsForeignKey = false;
				colvarXtdqdm.IsReadOnly = false;
				colvarXtdqdm.DefaultSetting = @"";
				colvarXtdqdm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXtdqdm);
				
				TableSchema.TableColumn colvarXsyssj = new TableSchema.TableColumn(schema);
				colvarXsyssj.ColumnName = "XSYSSJ";
				colvarXsyssj.DataType = DbType.Decimal;
				colvarXsyssj.MaxLength = 0;
				colvarXsyssj.AutoIncrement = false;
				colvarXsyssj.IsNullable = true;
				colvarXsyssj.IsPrimaryKey = false;
				colvarXsyssj.IsForeignKey = false;
				colvarXsyssj.IsReadOnly = false;
				colvarXsyssj.DefaultSetting = @"";
				colvarXsyssj.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXsyssj);
				
				TableSchema.TableColumn colvarXssydq = new TableSchema.TableColumn(schema);
				colvarXssydq.ColumnName = "XSSYDQ";
				colvarXssydq.DataType = DbType.String;
				colvarXssydq.MaxLength = 8;
				colvarXssydq.AutoIncrement = false;
				colvarXssydq.IsNullable = true;
				colvarXssydq.IsPrimaryKey = false;
				colvarXssydq.IsForeignKey = false;
				colvarXssydq.IsReadOnly = false;
				colvarXssydq.DefaultSetting = @"";
				colvarXssydq.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXssydq);
				
				TableSchema.TableColumn colvarXsglsl = new TableSchema.TableColumn(schema);
				colvarXsglsl.ColumnName = "XSGLSL";
				colvarXsglsl.DataType = DbType.Decimal;
				colvarXsglsl.MaxLength = 0;
				colvarXsglsl.AutoIncrement = false;
				colvarXsglsl.IsNullable = true;
				colvarXsglsl.IsPrimaryKey = false;
				colvarXsglsl.IsForeignKey = false;
				colvarXsglsl.IsReadOnly = false;
				colvarXsglsl.DefaultSetting = @"";
				colvarXsglsl.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXsglsl);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ErpNowthwin"].AddSchema("XSM04",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Xslxdm")]
		[Bindable(true)]
		public string Xslxdm 
		{
			get { return GetColumnValue<string>(Columns.Xslxdm); }
			set { SetColumnValue(Columns.Xslxdm, value); }
		}
		  
		[XmlAttribute("Xtdqdm")]
		[Bindable(true)]
		public string Xtdqdm 
		{
			get { return GetColumnValue<string>(Columns.Xtdqdm); }
			set { SetColumnValue(Columns.Xtdqdm, value); }
		}
		  
		[XmlAttribute("Xsyssj")]
		[Bindable(true)]
		public decimal? Xsyssj 
		{
			get { return GetColumnValue<decimal?>(Columns.Xsyssj); }
			set { SetColumnValue(Columns.Xsyssj, value); }
		}
		  
		[XmlAttribute("Xssydq")]
		[Bindable(true)]
		public string Xssydq 
		{
			get { return GetColumnValue<string>(Columns.Xssydq); }
			set { SetColumnValue(Columns.Xssydq, value); }
		}
		  
		[XmlAttribute("Xsglsl")]
		[Bindable(true)]
		public decimal? Xsglsl 
		{
			get { return GetColumnValue<decimal?>(Columns.Xsglsl); }
			set { SetColumnValue(Columns.Xsglsl, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varXslxdm,string varXtdqdm,decimal? varXsyssj,string varXssydq,decimal? varXsglsl)
		{
			XSM04 item = new XSM04();
			
			item.Xslxdm = varXslxdm;
			
			item.Xtdqdm = varXtdqdm;
			
			item.Xsyssj = varXsyssj;
			
			item.Xssydq = varXssydq;
			
			item.Xsglsl = varXsglsl;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(string varXslxdm,string varXtdqdm,decimal? varXsyssj,string varXssydq,decimal? varXsglsl)
		{
			XSM04 item = new XSM04();
			
				item.Xslxdm = varXslxdm;
			
				item.Xtdqdm = varXtdqdm;
			
				item.Xsyssj = varXsyssj;
			
				item.Xssydq = varXssydq;
			
				item.Xsglsl = varXsglsl;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn XslxdmColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn XtdqdmColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn XsyssjColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn XssydqColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn XsglslColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Xslxdm = @"XSLXDM";
			 public static string Xtdqdm = @"XTDQDM";
			 public static string Xsyssj = @"XSYSSJ";
			 public static string Xssydq = @"XSSYDQ";
			 public static string Xsglsl = @"XSGLSL";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}

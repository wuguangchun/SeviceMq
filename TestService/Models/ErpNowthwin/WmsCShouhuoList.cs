using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace OracleDataDomain
{
	/// <summary>
	/// Strongly-typed collection for the WmsCShouhuoList class.
	/// </summary>
    [Serializable]
	public partial class WmsCShouhuoListCollection : ActiveList<WmsCShouhuoList, WmsCShouhuoListCollection>
	{	   
		public WmsCShouhuoListCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>WmsCShouhuoListCollection</returns>
		public WmsCShouhuoListCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                WmsCShouhuoList o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the WMS_C_SHOUHUO_LIST table.
	/// </summary>
	[Serializable]
	public partial class WmsCShouhuoList : ActiveRecord<WmsCShouhuoList>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public WmsCShouhuoList()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public WmsCShouhuoList(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public WmsCShouhuoList(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public WmsCShouhuoList(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("WMS_C_SHOUHUO_LIST", TableType.Table, DataService.GetInstance("ErpNowthwin"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"FYERP";
				//columns
				
				TableSchema.TableColumn colvarPohdno = new TableSchema.TableColumn(schema);
				colvarPohdno.ColumnName = "POHDNO";
				colvarPohdno.DataType = DbType.String;
				colvarPohdno.MaxLength = 32;
				colvarPohdno.AutoIncrement = false;
				colvarPohdno.IsNullable = true;
				colvarPohdno.IsPrimaryKey = false;
				colvarPohdno.IsForeignKey = false;
				colvarPohdno.IsReadOnly = false;
				colvarPohdno.DefaultSetting = @"";
				colvarPohdno.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPohdno);
				
				TableSchema.TableColumn colvarPolnno = new TableSchema.TableColumn(schema);
				colvarPolnno.ColumnName = "POLNNO";
				colvarPolnno.DataType = DbType.Decimal;
				colvarPolnno.MaxLength = 0;
				colvarPolnno.AutoIncrement = false;
				colvarPolnno.IsNullable = true;
				colvarPolnno.IsPrimaryKey = false;
				colvarPolnno.IsForeignKey = false;
				colvarPolnno.IsReadOnly = false;
				colvarPolnno.DefaultSetting = @"";
				colvarPolnno.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPolnno);
				
				TableSchema.TableColumn colvarSkuno = new TableSchema.TableColumn(schema);
				colvarSkuno.ColumnName = "SKUNO";
				colvarSkuno.DataType = DbType.String;
				colvarSkuno.MaxLength = 32;
				colvarSkuno.AutoIncrement = false;
				colvarSkuno.IsNullable = true;
				colvarSkuno.IsPrimaryKey = false;
				colvarSkuno.IsForeignKey = false;
				colvarSkuno.IsReadOnly = false;
				colvarSkuno.DefaultSetting = @"";
				colvarSkuno.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSkuno);
				
				TableSchema.TableColumn colvarSkutyp = new TableSchema.TableColumn(schema);
				colvarSkutyp.ColumnName = "SKUTYP";
				colvarSkutyp.DataType = DbType.String;
				colvarSkutyp.MaxLength = 32;
				colvarSkutyp.AutoIncrement = false;
				colvarSkutyp.IsNullable = true;
				colvarSkutyp.IsPrimaryKey = false;
				colvarSkutyp.IsForeignKey = false;
				colvarSkutyp.IsReadOnly = false;
				colvarSkutyp.DefaultSetting = @"";
				colvarSkutyp.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSkutyp);
				
				TableSchema.TableColumn colvarSkugrp = new TableSchema.TableColumn(schema);
				colvarSkugrp.ColumnName = "SKUGRP";
				colvarSkugrp.DataType = DbType.String;
				colvarSkugrp.MaxLength = 32;
				colvarSkugrp.AutoIncrement = false;
				colvarSkugrp.IsNullable = true;
				colvarSkugrp.IsPrimaryKey = false;
				colvarSkugrp.IsForeignKey = false;
				colvarSkugrp.IsReadOnly = false;
				colvarSkugrp.DefaultSetting = @"";
				colvarSkugrp.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSkugrp);
				
				TableSchema.TableColumn colvarSkudsc = new TableSchema.TableColumn(schema);
				colvarSkudsc.ColumnName = "SKUDSC";
				colvarSkudsc.DataType = DbType.String;
				colvarSkudsc.MaxLength = 64;
				colvarSkudsc.AutoIncrement = false;
				colvarSkudsc.IsNullable = true;
				colvarSkudsc.IsPrimaryKey = false;
				colvarSkudsc.IsForeignKey = false;
				colvarSkudsc.IsReadOnly = false;
				colvarSkudsc.DefaultSetting = @"";
				colvarSkudsc.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSkudsc);
				
				TableSchema.TableColumn colvarPrice = new TableSchema.TableColumn(schema);
				colvarPrice.ColumnName = "PRICE";
				colvarPrice.DataType = DbType.Decimal;
				colvarPrice.MaxLength = 0;
				colvarPrice.AutoIncrement = false;
				colvarPrice.IsNullable = true;
				colvarPrice.IsPrimaryKey = false;
				colvarPrice.IsForeignKey = false;
				colvarPrice.IsReadOnly = false;
				colvarPrice.DefaultSetting = @"";
				colvarPrice.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPrice);
				
				TableSchema.TableColumn colvarOrdqty = new TableSchema.TableColumn(schema);
				colvarOrdqty.ColumnName = "ORDQTY";
				colvarOrdqty.DataType = DbType.Decimal;
				colvarOrdqty.MaxLength = 0;
				colvarOrdqty.AutoIncrement = false;
				colvarOrdqty.IsNullable = true;
				colvarOrdqty.IsPrimaryKey = false;
				colvarOrdqty.IsForeignKey = false;
				colvarOrdqty.IsReadOnly = false;
				colvarOrdqty.DefaultSetting = @"";
				colvarOrdqty.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOrdqty);
				
				TableSchema.TableColumn colvarUnit = new TableSchema.TableColumn(schema);
				colvarUnit.ColumnName = "UNIT";
				colvarUnit.DataType = DbType.String;
				colvarUnit.MaxLength = 32;
				colvarUnit.AutoIncrement = false;
				colvarUnit.IsNullable = true;
				colvarUnit.IsPrimaryKey = false;
				colvarUnit.IsForeignKey = false;
				colvarUnit.IsReadOnly = false;
				colvarUnit.DefaultSetting = @"";
				colvarUnit.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUnit);
				
				TableSchema.TableColumn colvarOprtby = new TableSchema.TableColumn(schema);
				colvarOprtby.ColumnName = "OPRTBY";
				colvarOprtby.DataType = DbType.String;
				colvarOprtby.MaxLength = 255;
				colvarOprtby.AutoIncrement = false;
				colvarOprtby.IsNullable = true;
				colvarOprtby.IsPrimaryKey = false;
				colvarOprtby.IsForeignKey = false;
				colvarOprtby.IsReadOnly = false;
				colvarOprtby.DefaultSetting = @"";
				colvarOprtby.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOprtby);
				
				TableSchema.TableColumn colvarOprttm = new TableSchema.TableColumn(schema);
				colvarOprttm.ColumnName = "OPRTTM";
				colvarOprttm.DataType = DbType.String;
				colvarOprttm.MaxLength = 0;
				colvarOprttm.AutoIncrement = false;
				colvarOprttm.IsNullable = true;
				colvarOprttm.IsPrimaryKey = false;
				colvarOprttm.IsForeignKey = false;
				colvarOprttm.IsReadOnly = false;
				colvarOprttm.DefaultSetting = @"";
				colvarOprttm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOprttm);
				
				TableSchema.TableColumn colvarRemark = new TableSchema.TableColumn(schema);
				colvarRemark.ColumnName = "REMARK";
				colvarRemark.DataType = DbType.String;
				colvarRemark.MaxLength = 255;
				colvarRemark.AutoIncrement = false;
				colvarRemark.IsNullable = true;
				colvarRemark.IsPrimaryKey = false;
				colvarRemark.IsForeignKey = false;
				colvarRemark.IsReadOnly = false;
				colvarRemark.DefaultSetting = @"";
				colvarRemark.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRemark);
				
				TableSchema.TableColumn colvarId = new TableSchema.TableColumn(schema);
				colvarId.ColumnName = "ID";
				colvarId.DataType = DbType.Decimal;
				colvarId.MaxLength = 0;
				colvarId.AutoIncrement = false;
				colvarId.IsNullable = true;
				colvarId.IsPrimaryKey = false;
				colvarId.IsForeignKey = false;
				colvarId.IsReadOnly = false;
				colvarId.DefaultSetting = @"";
				colvarId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarId);
				
				TableSchema.TableColumn colvarPid = new TableSchema.TableColumn(schema);
				colvarPid.ColumnName = "PID";
				colvarPid.DataType = DbType.String;
				colvarPid.MaxLength = 32;
				colvarPid.AutoIncrement = false;
				colvarPid.IsNullable = false;
				colvarPid.IsPrimaryKey = true;
				colvarPid.IsForeignKey = false;
				colvarPid.IsReadOnly = false;
				colvarPid.DefaultSetting = @"";
				colvarPid.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPid);
				
				TableSchema.TableColumn colvarGg = new TableSchema.TableColumn(schema);
				colvarGg.ColumnName = "GG";
				colvarGg.DataType = DbType.String;
				colvarGg.MaxLength = 32;
				colvarGg.AutoIncrement = false;
				colvarGg.IsNullable = true;
				colvarGg.IsPrimaryKey = false;
				colvarGg.IsForeignKey = false;
				colvarGg.IsReadOnly = false;
				colvarGg.DefaultSetting = @"";
				colvarGg.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGg);
				
				TableSchema.TableColumn colvarStime = new TableSchema.TableColumn(schema);
				colvarStime.ColumnName = "STIME";
				colvarStime.DataType = DbType.String;
				colvarStime.MaxLength = 0;
				colvarStime.AutoIncrement = false;
				colvarStime.IsNullable = true;
				colvarStime.IsPrimaryKey = false;
				colvarStime.IsForeignKey = false;
				colvarStime.IsReadOnly = false;
				colvarStime.DefaultSetting = @"";
				colvarStime.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStime);
				
				TableSchema.TableColumn colvarSyncd = new TableSchema.TableColumn(schema);
				colvarSyncd.ColumnName = "SYNCD";
				colvarSyncd.DataType = DbType.String;
				colvarSyncd.MaxLength = 32;
				colvarSyncd.AutoIncrement = false;
				colvarSyncd.IsNullable = true;
				colvarSyncd.IsPrimaryKey = false;
				colvarSyncd.IsForeignKey = false;
				colvarSyncd.IsReadOnly = false;
				colvarSyncd.DefaultSetting = @"";
				colvarSyncd.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSyncd);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ErpNowthwin"].AddSchema("WMS_C_SHOUHUO_LIST",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Pohdno")]
		[Bindable(true)]
		public string Pohdno 
		{
			get { return GetColumnValue<string>(Columns.Pohdno); }
			set { SetColumnValue(Columns.Pohdno, value); }
		}
		  
		[XmlAttribute("Polnno")]
		[Bindable(true)]
		public decimal? Polnno 
		{
			get { return GetColumnValue<decimal?>(Columns.Polnno); }
			set { SetColumnValue(Columns.Polnno, value); }
		}
		  
		[XmlAttribute("Skuno")]
		[Bindable(true)]
		public string Skuno 
		{
			get { return GetColumnValue<string>(Columns.Skuno); }
			set { SetColumnValue(Columns.Skuno, value); }
		}
		  
		[XmlAttribute("Skutyp")]
		[Bindable(true)]
		public string Skutyp 
		{
			get { return GetColumnValue<string>(Columns.Skutyp); }
			set { SetColumnValue(Columns.Skutyp, value); }
		}
		  
		[XmlAttribute("Skugrp")]
		[Bindable(true)]
		public string Skugrp 
		{
			get { return GetColumnValue<string>(Columns.Skugrp); }
			set { SetColumnValue(Columns.Skugrp, value); }
		}
		  
		[XmlAttribute("Skudsc")]
		[Bindable(true)]
		public string Skudsc 
		{
			get { return GetColumnValue<string>(Columns.Skudsc); }
			set { SetColumnValue(Columns.Skudsc, value); }
		}
		  
		[XmlAttribute("Price")]
		[Bindable(true)]
		public decimal? Price 
		{
			get { return GetColumnValue<decimal?>(Columns.Price); }
			set { SetColumnValue(Columns.Price, value); }
		}
		  
		[XmlAttribute("Ordqty")]
		[Bindable(true)]
		public decimal? Ordqty 
		{
			get { return GetColumnValue<decimal?>(Columns.Ordqty); }
			set { SetColumnValue(Columns.Ordqty, value); }
		}
		  
		[XmlAttribute("Unit")]
		[Bindable(true)]
		public string Unit 
		{
			get { return GetColumnValue<string>(Columns.Unit); }
			set { SetColumnValue(Columns.Unit, value); }
		}
		  
		[XmlAttribute("Oprtby")]
		[Bindable(true)]
		public string Oprtby 
		{
			get { return GetColumnValue<string>(Columns.Oprtby); }
			set { SetColumnValue(Columns.Oprtby, value); }
		}
		  
		[XmlAttribute("Oprttm")]
		[Bindable(true)]
		public string Oprttm 
		{
			get { return GetColumnValue<string>(Columns.Oprttm); }
			set { SetColumnValue(Columns.Oprttm, value); }
		}
		  
		[XmlAttribute("Remark")]
		[Bindable(true)]
		public string Remark 
		{
			get { return GetColumnValue<string>(Columns.Remark); }
			set { SetColumnValue(Columns.Remark, value); }
		}
		  
		[XmlAttribute("Id")]
		[Bindable(true)]
		public decimal? Id 
		{
			get { return GetColumnValue<decimal?>(Columns.Id); }
			set { SetColumnValue(Columns.Id, value); }
		}
		  
		[XmlAttribute("Pid")]
		[Bindable(true)]
		public string Pid 
		{
			get { return GetColumnValue<string>(Columns.Pid); }
			set { SetColumnValue(Columns.Pid, value); }
		}
		  
		[XmlAttribute("Gg")]
		[Bindable(true)]
		public string Gg 
		{
			get { return GetColumnValue<string>(Columns.Gg); }
			set { SetColumnValue(Columns.Gg, value); }
		}
		  
		[XmlAttribute("Stime")]
		[Bindable(true)]
		public string Stime 
		{
			get { return GetColumnValue<string>(Columns.Stime); }
			set { SetColumnValue(Columns.Stime, value); }
		}
		  
		[XmlAttribute("Syncd")]
		[Bindable(true)]
		public string Syncd 
		{
			get { return GetColumnValue<string>(Columns.Syncd); }
			set { SetColumnValue(Columns.Syncd, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varPohdno,decimal? varPolnno,string varSkuno,string varSkutyp,string varSkugrp,string varSkudsc,decimal? varPrice,decimal? varOrdqty,string varUnit,string varOprtby,string varOprttm,string varRemark,decimal? varId,string varPid,string varGg,string varStime,string varSyncd)
		{
			WmsCShouhuoList item = new WmsCShouhuoList();
			
			item.Pohdno = varPohdno;
			
			item.Polnno = varPolnno;
			
			item.Skuno = varSkuno;
			
			item.Skutyp = varSkutyp;
			
			item.Skugrp = varSkugrp;
			
			item.Skudsc = varSkudsc;
			
			item.Price = varPrice;
			
			item.Ordqty = varOrdqty;
			
			item.Unit = varUnit;
			
			item.Oprtby = varOprtby;
			
			item.Oprttm = varOprttm;
			
			item.Remark = varRemark;
			
			item.Id = varId;
			
			item.Pid = varPid;
			
			item.Gg = varGg;
			
			item.Stime = varStime;
			
			item.Syncd = varSyncd;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(string varPohdno,decimal? varPolnno,string varSkuno,string varSkutyp,string varSkugrp,string varSkudsc,decimal? varPrice,decimal? varOrdqty,string varUnit,string varOprtby,string varOprttm,string varRemark,decimal? varId,string varPid,string varGg,string varStime,string varSyncd)
		{
			WmsCShouhuoList item = new WmsCShouhuoList();
			
				item.Pohdno = varPohdno;
			
				item.Polnno = varPolnno;
			
				item.Skuno = varSkuno;
			
				item.Skutyp = varSkutyp;
			
				item.Skugrp = varSkugrp;
			
				item.Skudsc = varSkudsc;
			
				item.Price = varPrice;
			
				item.Ordqty = varOrdqty;
			
				item.Unit = varUnit;
			
				item.Oprtby = varOprtby;
			
				item.Oprttm = varOprttm;
			
				item.Remark = varRemark;
			
				item.Id = varId;
			
				item.Pid = varPid;
			
				item.Gg = varGg;
			
				item.Stime = varStime;
			
				item.Syncd = varSyncd;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn PohdnoColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn PolnnoColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn SkunoColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn SkutypColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn SkugrpColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn SkudscColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn PriceColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn OrdqtyColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn UnitColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn OprtbyColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn OprttmColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn RemarkColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn IdColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        public static TableSchema.TableColumn PidColumn
        {
            get { return Schema.Columns[13]; }
        }
        
        
        
        public static TableSchema.TableColumn GgColumn
        {
            get { return Schema.Columns[14]; }
        }
        
        
        
        public static TableSchema.TableColumn StimeColumn
        {
            get { return Schema.Columns[15]; }
        }
        
        
        
        public static TableSchema.TableColumn SyncdColumn
        {
            get { return Schema.Columns[16]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Pohdno = @"POHDNO";
			 public static string Polnno = @"POLNNO";
			 public static string Skuno = @"SKUNO";
			 public static string Skutyp = @"SKUTYP";
			 public static string Skugrp = @"SKUGRP";
			 public static string Skudsc = @"SKUDSC";
			 public static string Price = @"PRICE";
			 public static string Ordqty = @"ORDQTY";
			 public static string Unit = @"UNIT";
			 public static string Oprtby = @"OPRTBY";
			 public static string Oprttm = @"OPRTTM";
			 public static string Remark = @"REMARK";
			 public static string Id = @"ID";
			 public static string Pid = @"PID";
			 public static string Gg = @"GG";
			 public static string Stime = @"STIME";
			 public static string Syncd = @"SYNCD";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}

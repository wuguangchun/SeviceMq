using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace OracleDataDomain
{
	/// <summary>
	/// Strongly-typed collection for the XST04 class.
	/// </summary>
    [Serializable]
	public partial class XST04Collection : ActiveList<XST04, XST04Collection>
	{	   
		public XST04Collection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>XST04Collection</returns>
		public XST04Collection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                XST04 o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the XST04 table.
	/// </summary>
	[Serializable]
	public partial class XST04 : ActiveRecord<XST04>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public XST04()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public XST04(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public XST04(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public XST04(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("XST04", TableType.Table, DataService.GetInstance("ErpNowthwin"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"FYERP";
				//columns
				
				TableSchema.TableColumn colvarScggdh = new TableSchema.TableColumn(schema);
				colvarScggdh.ColumnName = "SCGGDH";
				colvarScggdh.DataType = DbType.String;
				colvarScggdh.MaxLength = 12;
				colvarScggdh.AutoIncrement = false;
				colvarScggdh.IsNullable = true;
				colvarScggdh.IsPrimaryKey = false;
				colvarScggdh.IsForeignKey = false;
				colvarScggdh.IsReadOnly = false;
				colvarScggdh.DefaultSetting = @"";
				colvarScggdh.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScggdh);
				
				TableSchema.TableColumn colvarScggxh = new TableSchema.TableColumn(schema);
				colvarScggxh.ColumnName = "SCGGXH";
				colvarScggxh.DataType = DbType.Decimal;
				colvarScggxh.MaxLength = 0;
				colvarScggxh.AutoIncrement = false;
				colvarScggxh.IsNullable = true;
				colvarScggxh.IsPrimaryKey = false;
				colvarScggxh.IsForeignKey = false;
				colvarScggxh.IsReadOnly = false;
				colvarScggxh.DefaultSetting = @"";
				colvarScggxh.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScggxh);
				
				TableSchema.TableColumn colvarXsthdh = new TableSchema.TableColumn(schema);
				colvarXsthdh.ColumnName = "XSTHDH";
				colvarXsthdh.DataType = DbType.String;
				colvarXsthdh.MaxLength = 20;
				colvarXsthdh.AutoIncrement = false;
				colvarXsthdh.IsNullable = false;
				colvarXsthdh.IsPrimaryKey = true;
				colvarXsthdh.IsForeignKey = false;
				colvarXsthdh.IsReadOnly = false;
				colvarXsthdh.DefaultSetting = @"";
				colvarXsthdh.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXsthdh);
				
				TableSchema.TableColumn colvarXstdhh = new TableSchema.TableColumn(schema);
				colvarXstdhh.ColumnName = "XSTDHH";
				colvarXstdhh.DataType = DbType.Decimal;
				colvarXstdhh.MaxLength = 0;
				colvarXstdhh.AutoIncrement = false;
				colvarXstdhh.IsNullable = false;
				colvarXstdhh.IsPrimaryKey = true;
				colvarXstdhh.IsForeignKey = false;
				colvarXstdhh.IsReadOnly = false;
				colvarXstdhh.DefaultSetting = @"";
				colvarXstdhh.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXstdhh);
				
				TableSchema.TableColumn colvarXsddhm = new TableSchema.TableColumn(schema);
				colvarXsddhm.ColumnName = "XSDDHM";
				colvarXsddhm.DataType = DbType.String;
				colvarXsddhm.MaxLength = 12;
				colvarXsddhm.AutoIncrement = false;
				colvarXsddhm.IsNullable = true;
				colvarXsddhm.IsPrimaryKey = false;
				colvarXsddhm.IsForeignKey = false;
				colvarXsddhm.IsReadOnly = false;
				colvarXsddhm.DefaultSetting = @"";
				colvarXsddhm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXsddhm);
				
				TableSchema.TableColumn colvarXsddhh = new TableSchema.TableColumn(schema);
				colvarXsddhh.ColumnName = "XSDDHH";
				colvarXsddhh.DataType = DbType.Decimal;
				colvarXsddhh.MaxLength = 0;
				colvarXsddhh.AutoIncrement = false;
				colvarXsddhh.IsNullable = true;
				colvarXsddhh.IsPrimaryKey = false;
				colvarXsddhh.IsForeignKey = false;
				colvarXsddhh.IsReadOnly = false;
				colvarXsddhh.DefaultSetting = @"";
				colvarXsddhh.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXsddhh);
				
				TableSchema.TableColumn colvarXtwpdm = new TableSchema.TableColumn(schema);
				colvarXtwpdm.ColumnName = "XTWPDM";
				colvarXtwpdm.DataType = DbType.String;
				colvarXtwpdm.MaxLength = 20;
				colvarXtwpdm.AutoIncrement = false;
				colvarXtwpdm.IsNullable = true;
				colvarXtwpdm.IsPrimaryKey = false;
				colvarXtwpdm.IsForeignKey = false;
				colvarXtwpdm.IsReadOnly = false;
				colvarXtwpdm.DefaultSetting = @"";
				colvarXtwpdm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXtwpdm);
				
				TableSchema.TableColumn colvarXtjldw = new TableSchema.TableColumn(schema);
				colvarXtjldw.ColumnName = "XTJLDW";
				colvarXtjldw.DataType = DbType.String;
				colvarXtjldw.MaxLength = 6;
				colvarXtjldw.AutoIncrement = false;
				colvarXtjldw.IsNullable = true;
				colvarXtjldw.IsPrimaryKey = false;
				colvarXtjldw.IsForeignKey = false;
				colvarXtjldw.IsReadOnly = false;
				colvarXtjldw.DefaultSetting = @"";
				colvarXtjldw.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXtjldw);
				
				TableSchema.TableColumn colvarXstdsl = new TableSchema.TableColumn(schema);
				colvarXstdsl.ColumnName = "XSTDSL";
				colvarXstdsl.DataType = DbType.Decimal;
				colvarXstdsl.MaxLength = 0;
				colvarXstdsl.AutoIncrement = false;
				colvarXstdsl.IsNullable = true;
				colvarXstdsl.IsPrimaryKey = false;
				colvarXstdsl.IsForeignKey = false;
				colvarXstdsl.IsReadOnly = false;
				colvarXstdsl.DefaultSetting = @"";
				colvarXstdsl.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXstdsl);
				
				TableSchema.TableColumn colvarXstddj = new TableSchema.TableColumn(schema);
				colvarXstddj.ColumnName = "XSTDDJ";
				colvarXstddj.DataType = DbType.Decimal;
				colvarXstddj.MaxLength = 0;
				colvarXstddj.AutoIncrement = false;
				colvarXstddj.IsNullable = true;
				colvarXstddj.IsPrimaryKey = false;
				colvarXstddj.IsForeignKey = false;
				colvarXstddj.IsReadOnly = false;
				colvarXstddj.DefaultSetting = @"";
				colvarXstddj.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXstddj);
				
				TableSchema.TableColumn colvarXstdzk = new TableSchema.TableColumn(schema);
				colvarXstdzk.ColumnName = "XSTDZK";
				colvarXstdzk.DataType = DbType.Decimal;
				colvarXstdzk.MaxLength = 0;
				colvarXstdzk.AutoIncrement = false;
				colvarXstdzk.IsNullable = true;
				colvarXstdzk.IsPrimaryKey = false;
				colvarXstdzk.IsForeignKey = false;
				colvarXstdzk.IsReadOnly = false;
				colvarXstdzk.DefaultSetting = @"";
				colvarXstdzk.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXstdzk);
				
				TableSchema.TableColumn colvarXstdje = new TableSchema.TableColumn(schema);
				colvarXstdje.ColumnName = "XSTDJE";
				colvarXstdje.DataType = DbType.Decimal;
				colvarXstdje.MaxLength = 0;
				colvarXstdje.AutoIncrement = false;
				colvarXstdje.IsNullable = true;
				colvarXstdje.IsPrimaryKey = false;
				colvarXstdje.IsForeignKey = false;
				colvarXstdje.IsReadOnly = false;
				colvarXstdje.DefaultSetting = @"";
				colvarXstdje.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXstdje);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ErpNowthwin"].AddSchema("XST04",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Scggdh")]
		[Bindable(true)]
		public string Scggdh 
		{
			get { return GetColumnValue<string>(Columns.Scggdh); }
			set { SetColumnValue(Columns.Scggdh, value); }
		}
		  
		[XmlAttribute("Scggxh")]
		[Bindable(true)]
		public decimal? Scggxh 
		{
			get { return GetColumnValue<decimal?>(Columns.Scggxh); }
			set { SetColumnValue(Columns.Scggxh, value); }
		}
		  
		[XmlAttribute("Xsthdh")]
		[Bindable(true)]
		public string Xsthdh 
		{
			get { return GetColumnValue<string>(Columns.Xsthdh); }
			set { SetColumnValue(Columns.Xsthdh, value); }
		}
		  
		[XmlAttribute("Xstdhh")]
		[Bindable(true)]
		public decimal Xstdhh 
		{
			get { return GetColumnValue<decimal>(Columns.Xstdhh); }
			set { SetColumnValue(Columns.Xstdhh, value); }
		}
		  
		[XmlAttribute("Xsddhm")]
		[Bindable(true)]
		public string Xsddhm 
		{
			get { return GetColumnValue<string>(Columns.Xsddhm); }
			set { SetColumnValue(Columns.Xsddhm, value); }
		}
		  
		[XmlAttribute("Xsddhh")]
		[Bindable(true)]
		public decimal? Xsddhh 
		{
			get { return GetColumnValue<decimal?>(Columns.Xsddhh); }
			set { SetColumnValue(Columns.Xsddhh, value); }
		}
		  
		[XmlAttribute("Xtwpdm")]
		[Bindable(true)]
		public string Xtwpdm 
		{
			get { return GetColumnValue<string>(Columns.Xtwpdm); }
			set { SetColumnValue(Columns.Xtwpdm, value); }
		}
		  
		[XmlAttribute("Xtjldw")]
		[Bindable(true)]
		public string Xtjldw 
		{
			get { return GetColumnValue<string>(Columns.Xtjldw); }
			set { SetColumnValue(Columns.Xtjldw, value); }
		}
		  
		[XmlAttribute("Xstdsl")]
		[Bindable(true)]
		public decimal? Xstdsl 
		{
			get { return GetColumnValue<decimal?>(Columns.Xstdsl); }
			set { SetColumnValue(Columns.Xstdsl, value); }
		}
		  
		[XmlAttribute("Xstddj")]
		[Bindable(true)]
		public decimal? Xstddj 
		{
			get { return GetColumnValue<decimal?>(Columns.Xstddj); }
			set { SetColumnValue(Columns.Xstddj, value); }
		}
		  
		[XmlAttribute("Xstdzk")]
		[Bindable(true)]
		public decimal? Xstdzk 
		{
			get { return GetColumnValue<decimal?>(Columns.Xstdzk); }
			set { SetColumnValue(Columns.Xstdzk, value); }
		}
		  
		[XmlAttribute("Xstdje")]
		[Bindable(true)]
		public decimal? Xstdje 
		{
			get { return GetColumnValue<decimal?>(Columns.Xstdje); }
			set { SetColumnValue(Columns.Xstdje, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varScggdh,decimal? varScggxh,string varXsthdh,decimal varXstdhh,string varXsddhm,decimal? varXsddhh,string varXtwpdm,string varXtjldw,decimal? varXstdsl,decimal? varXstddj,decimal? varXstdzk,decimal? varXstdje)
		{
			XST04 item = new XST04();
			
			item.Scggdh = varScggdh;
			
			item.Scggxh = varScggxh;
			
			item.Xsthdh = varXsthdh;
			
			item.Xstdhh = varXstdhh;
			
			item.Xsddhm = varXsddhm;
			
			item.Xsddhh = varXsddhh;
			
			item.Xtwpdm = varXtwpdm;
			
			item.Xtjldw = varXtjldw;
			
			item.Xstdsl = varXstdsl;
			
			item.Xstddj = varXstddj;
			
			item.Xstdzk = varXstdzk;
			
			item.Xstdje = varXstdje;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(string varScggdh,decimal? varScggxh,string varXsthdh,decimal varXstdhh,string varXsddhm,decimal? varXsddhh,string varXtwpdm,string varXtjldw,decimal? varXstdsl,decimal? varXstddj,decimal? varXstdzk,decimal? varXstdje)
		{
			XST04 item = new XST04();
			
				item.Scggdh = varScggdh;
			
				item.Scggxh = varScggxh;
			
				item.Xsthdh = varXsthdh;
			
				item.Xstdhh = varXstdhh;
			
				item.Xsddhm = varXsddhm;
			
				item.Xsddhh = varXsddhh;
			
				item.Xtwpdm = varXtwpdm;
			
				item.Xtjldw = varXtjldw;
			
				item.Xstdsl = varXstdsl;
			
				item.Xstddj = varXstddj;
			
				item.Xstdzk = varXstdzk;
			
				item.Xstdje = varXstdje;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn ScggdhColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn ScggxhColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn XsthdhColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn XstdhhColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn XsddhmColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn XsddhhColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn XtwpdmColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn XtjldwColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn XstdslColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn XstddjColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn XstdzkColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn XstdjeColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Scggdh = @"SCGGDH";
			 public static string Scggxh = @"SCGGXH";
			 public static string Xsthdh = @"XSTHDH";
			 public static string Xstdhh = @"XSTDHH";
			 public static string Xsddhm = @"XSDDHM";
			 public static string Xsddhh = @"XSDDHH";
			 public static string Xtwpdm = @"XTWPDM";
			 public static string Xtjldw = @"XTJLDW";
			 public static string Xstdsl = @"XSTDSL";
			 public static string Xstddj = @"XSTDDJ";
			 public static string Xstdzk = @"XSTDZK";
			 public static string Xstdje = @"XSTDJE";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}

using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace OracleDataDomain{
    /// <summary>
    /// Strongly-typed collection for the VHandworkorderdetail class.
    /// </summary>
    [Serializable]
    public partial class VHandworkorderdetailCollection : ReadOnlyList<VHandworkorderdetail, VHandworkorderdetailCollection>
    {        
        public VHandworkorderdetailCollection() {}
    }
    /// <summary>
    /// This is  Read-only wrapper class for the V_HANDWORKORDERDETAILS view.
    /// </summary>
    [Serializable]
    public partial class VHandworkorderdetail : ReadOnlyRecord<VHandworkorderdetail>, IReadOnlyRecord
    {
    
	    #region Default Settings
	    protected static void SetSQLProps() 
	    {
		    GetTableSchema();
	    }
	    #endregion
        #region Schema Accessor
	    public static TableSchema.Table Schema
        {
            get
            {
                if (BaseSchema == null)
                {
                    SetSQLProps();
                }
                return BaseSchema;
            }
        }
    	
        private static void GetTableSchema() 
        {
            if(!IsSchemaInitialized)
            {
                //Schema declaration
                TableSchema.Table schema = new TableSchema.Table("V_HANDWORKORDERDETAILS", TableType.View, DataService.GetInstance("ErpNowthwin"));
                schema.Columns = new TableSchema.TableColumnCollection();
                schema.SchemaName = @"FYERP";
                //columns
                
                TableSchema.TableColumn colvarScggdh = new TableSchema.TableColumn(schema);
                colvarScggdh.ColumnName = "SCGGDH";
                colvarScggdh.DataType = DbType.String;
                colvarScggdh.MaxLength = 12;
                colvarScggdh.AutoIncrement = false;
                colvarScggdh.IsNullable = false;
                colvarScggdh.IsPrimaryKey = false;
                colvarScggdh.IsForeignKey = false;
                colvarScggdh.IsReadOnly = false;
                
                schema.Columns.Add(colvarScggdh);
                
                TableSchema.TableColumn colvarSckhxm = new TableSchema.TableColumn(schema);
                colvarSckhxm.ColumnName = "SCKHXM";
                colvarSckhxm.DataType = DbType.String;
                colvarSckhxm.MaxLength = 100;
                colvarSckhxm.AutoIncrement = false;
                colvarSckhxm.IsNullable = true;
                colvarSckhxm.IsPrimaryKey = false;
                colvarSckhxm.IsForeignKey = false;
                colvarSckhxm.IsReadOnly = false;
                
                schema.Columns.Add(colvarSckhxm);
                
                TableSchema.TableColumn colvarSort = new TableSchema.TableColumn(schema);
                colvarSort.ColumnName = "SORT";
                colvarSort.DataType = DbType.String;
                colvarSort.MaxLength = 21;
                colvarSort.AutoIncrement = false;
                colvarSort.IsNullable = true;
                colvarSort.IsPrimaryKey = false;
                colvarSort.IsForeignKey = false;
                colvarSort.IsReadOnly = false;
                
                schema.Columns.Add(colvarSort);
                
                TableSchema.TableColumn colvarSczssl = new TableSchema.TableColumn(schema);
                colvarSczssl.ColumnName = "SCZSSL";
                colvarSczssl.DataType = DbType.Decimal;
                colvarSczssl.MaxLength = 0;
                colvarSczssl.AutoIncrement = false;
                colvarSczssl.IsNullable = true;
                colvarSczssl.IsPrimaryKey = false;
                colvarSczssl.IsForeignKey = false;
                colvarSczssl.IsReadOnly = false;
                
                schema.Columns.Add(colvarSczssl);
                
                TableSchema.TableColumn colvarXtwpks = new TableSchema.TableColumn(schema);
                colvarXtwpks.ColumnName = "XTWPKS";
                colvarXtwpks.DataType = DbType.String;
                colvarXtwpks.MaxLength = 20;
                colvarXtwpks.AutoIncrement = false;
                colvarXtwpks.IsNullable = false;
                colvarXtwpks.IsPrimaryKey = false;
                colvarXtwpks.IsForeignKey = false;
                colvarXtwpks.IsReadOnly = false;
                
                schema.Columns.Add(colvarXtwpks);
                
                TableSchema.TableColumn colvarXtwpys = new TableSchema.TableColumn(schema);
                colvarXtwpys.ColumnName = "XTWPYS";
                colvarXtwpys.DataType = DbType.String;
                colvarXtwpys.MaxLength = 20;
                colvarXtwpys.AutoIncrement = false;
                colvarXtwpys.IsNullable = false;
                colvarXtwpys.IsPrimaryKey = false;
                colvarXtwpys.IsForeignKey = false;
                colvarXtwpys.IsReadOnly = false;
                
                schema.Columns.Add(colvarXtwpys);
                
                TableSchema.TableColumn colvarXtxmdm = new TableSchema.TableColumn(schema);
                colvarXtxmdm.ColumnName = "XTXMDM";
                colvarXtxmdm.DataType = DbType.String;
                colvarXtxmdm.MaxLength = 10;
                colvarXtxmdm.AutoIncrement = false;
                colvarXtxmdm.IsNullable = false;
                colvarXtxmdm.IsPrimaryKey = false;
                colvarXtxmdm.IsForeignKey = false;
                colvarXtxmdm.IsReadOnly = false;
                
                schema.Columns.Add(colvarXtxmdm);
                
                
                BaseSchema = schema;
                //add this schema to the provider
                //so we can query it later
                DataService.Providers["ErpNowthwin"].AddSchema("V_HANDWORKORDERDETAILS",schema);
            }
        }
        #endregion
        
        #region Query Accessor
	    public static Query CreateQuery()
	    {
		    return new Query(Schema);
	    }
	    #endregion
	    
	    #region .ctors
	    public VHandworkorderdetail()
	    {
            SetSQLProps();
            SetDefaults();
            MarkNew();
        }
        public VHandworkorderdetail(bool useDatabaseDefaults)
	    {
		    SetSQLProps();
		    if(useDatabaseDefaults)
		    {
				ForceDefaults();
			}
			MarkNew();
	    }
	    
	    public VHandworkorderdetail(object keyID)
	    {
		    SetSQLProps();
		    LoadByKey(keyID);
	    }
    	 
	    public VHandworkorderdetail(string columnName, object columnValue)
        {
            SetSQLProps();
            LoadByParam(columnName,columnValue);
        }
        
	    #endregion
	    
	    #region Props
	    
          
        [XmlAttribute("Scggdh")]
        [Bindable(true)]
        public string Scggdh 
	    {
		    get
		    {
			    return GetColumnValue<string>("SCGGDH");
		    }
            set 
		    {
			    SetColumnValue("SCGGDH", value);
            }
        }
	      
        [XmlAttribute("Sckhxm")]
        [Bindable(true)]
        public string Sckhxm 
	    {
		    get
		    {
			    return GetColumnValue<string>("SCKHXM");
		    }
            set 
		    {
			    SetColumnValue("SCKHXM", value);
            }
        }
	      
        [XmlAttribute("Sort")]
        [Bindable(true)]
        public string Sort 
	    {
		    get
		    {
			    return GetColumnValue<string>("SORT");
		    }
            set 
		    {
			    SetColumnValue("SORT", value);
            }
        }
	      
        [XmlAttribute("Sczssl")]
        [Bindable(true)]
        public decimal? Sczssl 
	    {
		    get
		    {
			    return GetColumnValue<decimal?>("SCZSSL");
		    }
            set 
		    {
			    SetColumnValue("SCZSSL", value);
            }
        }
	      
        [XmlAttribute("Xtwpks")]
        [Bindable(true)]
        public string Xtwpks 
	    {
		    get
		    {
			    return GetColumnValue<string>("XTWPKS");
		    }
            set 
		    {
			    SetColumnValue("XTWPKS", value);
            }
        }
	      
        [XmlAttribute("Xtwpys")]
        [Bindable(true)]
        public string Xtwpys 
	    {
		    get
		    {
			    return GetColumnValue<string>("XTWPYS");
		    }
            set 
		    {
			    SetColumnValue("XTWPYS", value);
            }
        }
	      
        [XmlAttribute("Xtxmdm")]
        [Bindable(true)]
        public string Xtxmdm 
	    {
		    get
		    {
			    return GetColumnValue<string>("XTXMDM");
		    }
            set 
		    {
			    SetColumnValue("XTXMDM", value);
            }
        }
	    
	    #endregion
    
	    #region Columns Struct
	    public struct Columns
	    {
		    
		    
            public static string Scggdh = @"SCGGDH";
            
            public static string Sckhxm = @"SCKHXM";
            
            public static string Sort = @"SORT";
            
            public static string Sczssl = @"SCZSSL";
            
            public static string Xtwpks = @"XTWPKS";
            
            public static string Xtwpys = @"XTWPYS";
            
            public static string Xtxmdm = @"XTXMDM";
            
	    }
	    #endregion
	    
	    
	    #region IAbstractRecord Members
        public new CT GetColumnValue<CT>(string columnName) {
            return base.GetColumnValue<CT>(columnName);
        }
        public object GetColumnValue(string columnName) {
            return base.GetColumnValue<object>(columnName);
        }
        #endregion
	    
    }
}

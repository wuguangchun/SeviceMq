using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace OracleDataDomain
{
	/// <summary>
	/// Strongly-typed collection for the SCT84 class.
	/// </summary>
    [Serializable]
	public partial class SCT84Collection : ActiveList<SCT84, SCT84Collection>
	{	   
		public SCT84Collection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>SCT84Collection</returns>
		public SCT84Collection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                SCT84 o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the SCT84 table.
	/// </summary>
	[Serializable]
	public partial class SCT84 : ActiveRecord<SCT84>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public SCT84()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public SCT84(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public SCT84(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public SCT84(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("SCT84", TableType.Table, DataService.GetInstance("ErpNowthwin"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"FYERP";
				//columns
				
				TableSchema.TableColumn colvarSczxdh = new TableSchema.TableColumn(schema);
				colvarSczxdh.ColumnName = "SCZXDH";
				colvarSczxdh.DataType = DbType.String;
				colvarSczxdh.MaxLength = 12;
				colvarSczxdh.AutoIncrement = false;
				colvarSczxdh.IsNullable = false;
				colvarSczxdh.IsPrimaryKey = true;
				colvarSczxdh.IsForeignKey = false;
				colvarSczxdh.IsReadOnly = false;
				colvarSczxdh.DefaultSetting = @"";
				colvarSczxdh.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSczxdh);
				
				TableSchema.TableColumn colvarSczxxh = new TableSchema.TableColumn(schema);
				colvarSczxxh.ColumnName = "SCZXXH";
				colvarSczxxh.DataType = DbType.Decimal;
				colvarSczxxh.MaxLength = 0;
				colvarSczxxh.AutoIncrement = false;
				colvarSczxxh.IsNullable = false;
				colvarSczxxh.IsPrimaryKey = true;
				colvarSczxxh.IsForeignKey = false;
				colvarSczxxh.IsReadOnly = false;
				colvarSczxxh.DefaultSetting = @"";
				colvarSczxxh.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSczxxh);
				
				TableSchema.TableColumn colvarXtwpdm = new TableSchema.TableColumn(schema);
				colvarXtwpdm.ColumnName = "XTWPDM";
				colvarXtwpdm.DataType = DbType.String;
				colvarXtwpdm.MaxLength = 20;
				colvarXtwpdm.AutoIncrement = false;
				colvarXtwpdm.IsNullable = false;
				colvarXtwpdm.IsPrimaryKey = true;
				colvarXtwpdm.IsForeignKey = false;
				colvarXtwpdm.IsReadOnly = false;
				colvarXtwpdm.DefaultSetting = @"";
				colvarXtwpdm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXtwpdm);
				
				TableSchema.TableColumn colvarSczxsl = new TableSchema.TableColumn(schema);
				colvarSczxsl.ColumnName = "SCZXSL";
				colvarSczxsl.DataType = DbType.Decimal;
				colvarSczxsl.MaxLength = 0;
				colvarSczxsl.AutoIncrement = false;
				colvarSczxsl.IsNullable = true;
				colvarSczxsl.IsPrimaryKey = false;
				colvarSczxsl.IsForeignKey = false;
				colvarSczxsl.IsReadOnly = false;
				colvarSczxsl.DefaultSetting = @"";
				colvarSczxsl.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSczxsl);
				
				TableSchema.TableColumn colvarSczsbh = new TableSchema.TableColumn(schema);
				colvarSczsbh.ColumnName = "SCZSBH";
				colvarSczsbh.DataType = DbType.String;
				colvarSczsbh.MaxLength = 12;
				colvarSczsbh.AutoIncrement = false;
				colvarSczsbh.IsNullable = true;
				colvarSczsbh.IsPrimaryKey = false;
				colvarSczsbh.IsForeignKey = false;
				colvarSczsbh.IsReadOnly = false;
				colvarSczsbh.DefaultSetting = @"";
				colvarSczsbh.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSczsbh);
				
				TableSchema.TableColumn colvarSczxbz = new TableSchema.TableColumn(schema);
				colvarSczxbz.ColumnName = "SCZXBZ";
				colvarSczxbz.DataType = DbType.String;
				colvarSczxbz.MaxLength = 255;
				colvarSczxbz.AutoIncrement = false;
				colvarSczxbz.IsNullable = true;
				colvarSczxbz.IsPrimaryKey = false;
				colvarSczxbz.IsForeignKey = false;
				colvarSczxbz.IsReadOnly = false;
				colvarSczxbz.DefaultSetting = @"";
				colvarSczxbz.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSczxbz);
				
				TableSchema.TableColumn colvarScjylb = new TableSchema.TableColumn(schema);
				colvarScjylb.ColumnName = "SCJYLB";
				colvarScjylb.DataType = DbType.String;
				colvarScjylb.MaxLength = 10;
				colvarScjylb.AutoIncrement = false;
				colvarScjylb.IsNullable = true;
				colvarScjylb.IsPrimaryKey = false;
				colvarScjylb.IsForeignKey = false;
				colvarScjylb.IsReadOnly = false;
				colvarScjylb.DefaultSetting = @"";
				colvarScjylb.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScjylb);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ErpNowthwin"].AddSchema("SCT84",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Sczxdh")]
		[Bindable(true)]
		public string Sczxdh 
		{
			get { return GetColumnValue<string>(Columns.Sczxdh); }
			set { SetColumnValue(Columns.Sczxdh, value); }
		}
		  
		[XmlAttribute("Sczxxh")]
		[Bindable(true)]
		public decimal Sczxxh 
		{
			get { return GetColumnValue<decimal>(Columns.Sczxxh); }
			set { SetColumnValue(Columns.Sczxxh, value); }
		}
		  
		[XmlAttribute("Xtwpdm")]
		[Bindable(true)]
		public string Xtwpdm 
		{
			get { return GetColumnValue<string>(Columns.Xtwpdm); }
			set { SetColumnValue(Columns.Xtwpdm, value); }
		}
		  
		[XmlAttribute("Sczxsl")]
		[Bindable(true)]
		public decimal? Sczxsl 
		{
			get { return GetColumnValue<decimal?>(Columns.Sczxsl); }
			set { SetColumnValue(Columns.Sczxsl, value); }
		}
		  
		[XmlAttribute("Sczsbh")]
		[Bindable(true)]
		public string Sczsbh 
		{
			get { return GetColumnValue<string>(Columns.Sczsbh); }
			set { SetColumnValue(Columns.Sczsbh, value); }
		}
		  
		[XmlAttribute("Sczxbz")]
		[Bindable(true)]
		public string Sczxbz 
		{
			get { return GetColumnValue<string>(Columns.Sczxbz); }
			set { SetColumnValue(Columns.Sczxbz, value); }
		}
		  
		[XmlAttribute("Scjylb")]
		[Bindable(true)]
		public string Scjylb 
		{
			get { return GetColumnValue<string>(Columns.Scjylb); }
			set { SetColumnValue(Columns.Scjylb, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varSczxdh,decimal varSczxxh,string varXtwpdm,decimal? varSczxsl,string varSczsbh,string varSczxbz,string varScjylb)
		{
			SCT84 item = new SCT84();
			
			item.Sczxdh = varSczxdh;
			
			item.Sczxxh = varSczxxh;
			
			item.Xtwpdm = varXtwpdm;
			
			item.Sczxsl = varSczxsl;
			
			item.Sczsbh = varSczsbh;
			
			item.Sczxbz = varSczxbz;
			
			item.Scjylb = varScjylb;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(string varSczxdh,decimal varSczxxh,string varXtwpdm,decimal? varSczxsl,string varSczsbh,string varSczxbz,string varScjylb)
		{
			SCT84 item = new SCT84();
			
				item.Sczxdh = varSczxdh;
			
				item.Sczxxh = varSczxxh;
			
				item.Xtwpdm = varXtwpdm;
			
				item.Sczxsl = varSczxsl;
			
				item.Sczsbh = varSczsbh;
			
				item.Sczxbz = varSczxbz;
			
				item.Scjylb = varScjylb;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn SczxdhColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn SczxxhColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn XtwpdmColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn SczxslColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn SczsbhColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn SczxbzColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn ScjylbColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Sczxdh = @"SCZXDH";
			 public static string Sczxxh = @"SCZXXH";
			 public static string Xtwpdm = @"XTWPDM";
			 public static string Sczxsl = @"SCZXSL";
			 public static string Sczsbh = @"SCZSBH";
			 public static string Sczxbz = @"SCZXBZ";
			 public static string Scjylb = @"SCJYLB";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}

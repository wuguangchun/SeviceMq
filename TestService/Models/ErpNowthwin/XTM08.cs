using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace OracleDataDomain
{
	/// <summary>
	/// Strongly-typed collection for the XTM08 class.
	/// </summary>
    [Serializable]
	public partial class XTM08Collection : ActiveList<XTM08, XTM08Collection>
	{	   
		public XTM08Collection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>XTM08Collection</returns>
		public XTM08Collection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                XTM08 o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the XTM08 table.
	/// </summary>
	[Serializable]
	public partial class XTM08 : ActiveRecord<XTM08>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public XTM08()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public XTM08(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public XTM08(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public XTM08(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("XTM08", TableType.Table, DataService.GetInstance("ErpNowthwin"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"FYERP";
				//columns
				
				TableSchema.TableColumn colvarXttybz = new TableSchema.TableColumn(schema);
				colvarXttybz.ColumnName = "XTTYBZ";
				colvarXttybz.DataType = DbType.String;
				colvarXttybz.MaxLength = 1;
				colvarXttybz.AutoIncrement = false;
				colvarXttybz.IsNullable = true;
				colvarXttybz.IsPrimaryKey = false;
				colvarXttybz.IsForeignKey = false;
				colvarXttybz.IsReadOnly = false;
				colvarXttybz.DefaultSetting = @"";
				colvarXttybz.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXttybz);
				
				TableSchema.TableColumn colvarBmscsj = new TableSchema.TableColumn(schema);
				colvarBmscsj.ColumnName = "BMSCSJ";
				colvarBmscsj.DataType = DbType.DateTime;
				colvarBmscsj.MaxLength = 0;
				colvarBmscsj.AutoIncrement = false;
				colvarBmscsj.IsNullable = true;
				colvarBmscsj.IsPrimaryKey = false;
				colvarBmscsj.IsForeignKey = false;
				colvarBmscsj.IsReadOnly = false;
				colvarBmscsj.DefaultSetting = @"";
				colvarBmscsj.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBmscsj);
				
				TableSchema.TableColumn colvarWlzybz = new TableSchema.TableColumn(schema);
				colvarWlzybz.ColumnName = "WLZYBZ";
				colvarWlzybz.DataType = DbType.String;
				colvarWlzybz.MaxLength = 1;
				colvarWlzybz.AutoIncrement = false;
				colvarWlzybz.IsNullable = true;
				colvarWlzybz.IsPrimaryKey = false;
				colvarWlzybz.IsForeignKey = false;
				colvarWlzybz.IsReadOnly = false;
				colvarWlzybz.DefaultSetting = @"";
				colvarWlzybz.ForeignKeyTableName = "";
				schema.Columns.Add(colvarWlzybz);
				
				TableSchema.TableColumn colvarXtyhdm = new TableSchema.TableColumn(schema);
				colvarXtyhdm.ColumnName = "XTYHDM";
				colvarXtyhdm.DataType = DbType.String;
				colvarXtyhdm.MaxLength = 8;
				colvarXtyhdm.AutoIncrement = false;
				colvarXtyhdm.IsNullable = false;
				colvarXtyhdm.IsPrimaryKey = true;
				colvarXtyhdm.IsForeignKey = false;
				colvarXtyhdm.IsReadOnly = false;
				colvarXtyhdm.DefaultSetting = @"";
				colvarXtyhdm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXtyhdm);
				
				TableSchema.TableColumn colvarXtyhxm = new TableSchema.TableColumn(schema);
				colvarXtyhxm.ColumnName = "XTYHXM";
				colvarXtyhxm.DataType = DbType.String;
				colvarXtyhxm.MaxLength = 20;
				colvarXtyhxm.AutoIncrement = false;
				colvarXtyhxm.IsNullable = true;
				colvarXtyhxm.IsPrimaryKey = false;
				colvarXtyhxm.IsForeignKey = false;
				colvarXtyhxm.IsReadOnly = false;
				colvarXtyhxm.DefaultSetting = @"";
				colvarXtyhxm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXtyhxm);
				
				TableSchema.TableColumn colvarXtzgdm = new TableSchema.TableColumn(schema);
				colvarXtzgdm.ColumnName = "XTZGDM";
				colvarXtzgdm.DataType = DbType.String;
				colvarXtzgdm.MaxLength = 8;
				colvarXtzgdm.AutoIncrement = false;
				colvarXtzgdm.IsNullable = true;
				colvarXtzgdm.IsPrimaryKey = false;
				colvarXtzgdm.IsForeignKey = false;
				colvarXtzgdm.IsReadOnly = false;
				colvarXtzgdm.DefaultSetting = @"";
				colvarXtzgdm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXtzgdm);
				
				TableSchema.TableColumn colvarXtyhmm = new TableSchema.TableColumn(schema);
				colvarXtyhmm.ColumnName = "XTYHMM";
				colvarXtyhmm.DataType = DbType.String;
				colvarXtyhmm.MaxLength = 8;
				colvarXtyhmm.AutoIncrement = false;
				colvarXtyhmm.IsNullable = true;
				colvarXtyhmm.IsPrimaryKey = false;
				colvarXtyhmm.IsForeignKey = false;
				colvarXtyhmm.IsReadOnly = false;
				colvarXtyhmm.DefaultSetting = @"";
				colvarXtyhmm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXtyhmm);
				
				TableSchema.TableColumn colvarXtcjbz = new TableSchema.TableColumn(schema);
				colvarXtcjbz.ColumnName = "XTCJBZ";
				colvarXtcjbz.DataType = DbType.String;
				colvarXtcjbz.MaxLength = 1;
				colvarXtcjbz.AutoIncrement = false;
				colvarXtcjbz.IsNullable = true;
				colvarXtcjbz.IsPrimaryKey = false;
				colvarXtcjbz.IsForeignKey = false;
				colvarXtcjbz.IsReadOnly = false;
				colvarXtcjbz.DefaultSetting = @"";
				colvarXtcjbz.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXtcjbz);
				
				TableSchema.TableColumn colvarXtcbqx = new TableSchema.TableColumn(schema);
				colvarXtcbqx.ColumnName = "XTCBQX";
				colvarXtcbqx.DataType = DbType.String;
				colvarXtcbqx.MaxLength = 1;
				colvarXtcbqx.AutoIncrement = false;
				colvarXtcbqx.IsNullable = true;
				colvarXtcbqx.IsPrimaryKey = false;
				colvarXtcbqx.IsForeignKey = false;
				colvarXtcbqx.IsReadOnly = false;
				colvarXtcbqx.DefaultSetting = @"";
				colvarXtcbqx.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXtcbqx);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ErpNowthwin"].AddSchema("XTM08",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Xttybz")]
		[Bindable(true)]
		public string Xttybz 
		{
			get { return GetColumnValue<string>(Columns.Xttybz); }
			set { SetColumnValue(Columns.Xttybz, value); }
		}
		  
		[XmlAttribute("Bmscsj")]
		[Bindable(true)]
		public DateTime? Bmscsj 
		{
			get { return GetColumnValue<DateTime?>(Columns.Bmscsj); }
			set { SetColumnValue(Columns.Bmscsj, value); }
		}
		  
		[XmlAttribute("Wlzybz")]
		[Bindable(true)]
		public string Wlzybz 
		{
			get { return GetColumnValue<string>(Columns.Wlzybz); }
			set { SetColumnValue(Columns.Wlzybz, value); }
		}
		  
		[XmlAttribute("Xtyhdm")]
		[Bindable(true)]
		public string Xtyhdm 
		{
			get { return GetColumnValue<string>(Columns.Xtyhdm); }
			set { SetColumnValue(Columns.Xtyhdm, value); }
		}
		  
		[XmlAttribute("Xtyhxm")]
		[Bindable(true)]
		public string Xtyhxm 
		{
			get { return GetColumnValue<string>(Columns.Xtyhxm); }
			set { SetColumnValue(Columns.Xtyhxm, value); }
		}
		  
		[XmlAttribute("Xtzgdm")]
		[Bindable(true)]
		public string Xtzgdm 
		{
			get { return GetColumnValue<string>(Columns.Xtzgdm); }
			set { SetColumnValue(Columns.Xtzgdm, value); }
		}
		  
		[XmlAttribute("Xtyhmm")]
		[Bindable(true)]
		public string Xtyhmm 
		{
			get { return GetColumnValue<string>(Columns.Xtyhmm); }
			set { SetColumnValue(Columns.Xtyhmm, value); }
		}
		  
		[XmlAttribute("Xtcjbz")]
		[Bindable(true)]
		public string Xtcjbz 
		{
			get { return GetColumnValue<string>(Columns.Xtcjbz); }
			set { SetColumnValue(Columns.Xtcjbz, value); }
		}
		  
		[XmlAttribute("Xtcbqx")]
		[Bindable(true)]
		public string Xtcbqx 
		{
			get { return GetColumnValue<string>(Columns.Xtcbqx); }
			set { SetColumnValue(Columns.Xtcbqx, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varXttybz,DateTime? varBmscsj,string varWlzybz,string varXtyhdm,string varXtyhxm,string varXtzgdm,string varXtyhmm,string varXtcjbz,string varXtcbqx)
		{
			XTM08 item = new XTM08();
			
			item.Xttybz = varXttybz;
			
			item.Bmscsj = varBmscsj;
			
			item.Wlzybz = varWlzybz;
			
			item.Xtyhdm = varXtyhdm;
			
			item.Xtyhxm = varXtyhxm;
			
			item.Xtzgdm = varXtzgdm;
			
			item.Xtyhmm = varXtyhmm;
			
			item.Xtcjbz = varXtcjbz;
			
			item.Xtcbqx = varXtcbqx;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(string varXttybz,DateTime? varBmscsj,string varWlzybz,string varXtyhdm,string varXtyhxm,string varXtzgdm,string varXtyhmm,string varXtcjbz,string varXtcbqx)
		{
			XTM08 item = new XTM08();
			
				item.Xttybz = varXttybz;
			
				item.Bmscsj = varBmscsj;
			
				item.Wlzybz = varWlzybz;
			
				item.Xtyhdm = varXtyhdm;
			
				item.Xtyhxm = varXtyhxm;
			
				item.Xtzgdm = varXtzgdm;
			
				item.Xtyhmm = varXtyhmm;
			
				item.Xtcjbz = varXtcjbz;
			
				item.Xtcbqx = varXtcbqx;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn XttybzColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn BmscsjColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn WlzybzColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn XtyhdmColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn XtyhxmColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn XtzgdmColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn XtyhmmColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn XtcjbzColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn XtcbqxColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Xttybz = @"XTTYBZ";
			 public static string Bmscsj = @"BMSCSJ";
			 public static string Wlzybz = @"WLZYBZ";
			 public static string Xtyhdm = @"XTYHDM";
			 public static string Xtyhxm = @"XTYHXM";
			 public static string Xtzgdm = @"XTZGDM";
			 public static string Xtyhmm = @"XTYHMM";
			 public static string Xtcjbz = @"XTCJBZ";
			 public static string Xtcbqx = @"XTCBQX";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}

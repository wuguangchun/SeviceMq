using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace OracleDataDomain
{
	/// <summary>
	/// Strongly-typed collection for the SCT270 class.
	/// </summary>
    [Serializable]
	public partial class SCT270Collection : ActiveList<SCT270, SCT270Collection>
	{	   
		public SCT270Collection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>SCT270Collection</returns>
		public SCT270Collection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                SCT270 o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the SCT270 table.
	/// </summary>
	[Serializable]
	public partial class SCT270 : ActiveRecord<SCT270>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public SCT270()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public SCT270(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public SCT270(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public SCT270(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("SCT270", TableType.Table, DataService.GetInstance("ErpNowthwin"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"FYERP";
				//columns
				
				TableSchema.TableColumn colvarSczsbh = new TableSchema.TableColumn(schema);
				colvarSczsbh.ColumnName = "SCZSBH";
				colvarSczsbh.DataType = DbType.String;
				colvarSczsbh.MaxLength = 12;
				colvarSczsbh.AutoIncrement = false;
				colvarSczsbh.IsNullable = false;
				colvarSczsbh.IsPrimaryKey = true;
				colvarSczsbh.IsForeignKey = false;
				colvarSczsbh.IsReadOnly = false;
				colvarSczsbh.DefaultSetting = @"";
				colvarSczsbh.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSczsbh);
				
				TableSchema.TableColumn colvarSchtbh = new TableSchema.TableColumn(schema);
				colvarSchtbh.ColumnName = "SCHTBH";
				colvarSchtbh.DataType = DbType.String;
				colvarSchtbh.MaxLength = 12;
				colvarSchtbh.AutoIncrement = false;
				colvarSchtbh.IsNullable = false;
				colvarSchtbh.IsPrimaryKey = true;
				colvarSchtbh.IsForeignKey = false;
				colvarSchtbh.IsReadOnly = false;
				colvarSchtbh.DefaultSetting = @"";
				colvarSchtbh.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSchtbh);
				
				TableSchema.TableColumn colvarSchtxh = new TableSchema.TableColumn(schema);
				colvarSchtxh.ColumnName = "SCHTXH";
				colvarSchtxh.DataType = DbType.Decimal;
				colvarSchtxh.MaxLength = 0;
				colvarSchtxh.AutoIncrement = false;
				colvarSchtxh.IsNullable = false;
				colvarSchtxh.IsPrimaryKey = true;
				colvarSchtxh.IsForeignKey = false;
				colvarSchtxh.IsReadOnly = false;
				colvarSchtxh.DefaultSetting = @"";
				colvarSchtxh.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSchtxh);
				
				TableSchema.TableColumn colvarSccjsm = new TableSchema.TableColumn(schema);
				colvarSccjsm.ColumnName = "SCCJSM";
				colvarSccjsm.DataType = DbType.String;
				colvarSccjsm.MaxLength = 255;
				colvarSccjsm.AutoIncrement = false;
				colvarSccjsm.IsNullable = true;
				colvarSccjsm.IsPrimaryKey = false;
				colvarSccjsm.IsForeignKey = false;
				colvarSccjsm.IsReadOnly = false;
				colvarSccjsm.DefaultSetting = @"";
				colvarSccjsm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSccjsm);
				
				TableSchema.TableColumn colvarScfzsm = new TableSchema.TableColumn(schema);
				colvarScfzsm.ColumnName = "SCFZSM";
				colvarScfzsm.DataType = DbType.String;
				colvarScfzsm.MaxLength = 255;
				colvarScfzsm.AutoIncrement = false;
				colvarScfzsm.IsNullable = true;
				colvarScfzsm.IsPrimaryKey = false;
				colvarScfzsm.IsForeignKey = false;
				colvarScfzsm.IsReadOnly = false;
				colvarScfzsm.DefaultSetting = @"";
				colvarScfzsm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScfzsm);
				
				TableSchema.TableColumn colvarScztsm = new TableSchema.TableColumn(schema);
				colvarScztsm.ColumnName = "SCZTSM";
				colvarScztsm.DataType = DbType.String;
				colvarScztsm.MaxLength = 255;
				colvarScztsm.AutoIncrement = false;
				colvarScztsm.IsNullable = true;
				colvarScztsm.IsPrimaryKey = false;
				colvarScztsm.IsForeignKey = false;
				colvarScztsm.IsReadOnly = false;
				colvarScztsm.DefaultSetting = @"";
				colvarScztsm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScztsm);
				
				TableSchema.TableColumn colvarScbzsm = new TableSchema.TableColumn(schema);
				colvarScbzsm.ColumnName = "SCBZSM";
				colvarScbzsm.DataType = DbType.String;
				colvarScbzsm.MaxLength = 255;
				colvarScbzsm.AutoIncrement = false;
				colvarScbzsm.IsNullable = true;
				colvarScbzsm.IsPrimaryKey = false;
				colvarScbzsm.IsForeignKey = false;
				colvarScbzsm.IsReadOnly = false;
				colvarScbzsm.DefaultSetting = @"";
				colvarScbzsm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScbzsm);
				
				TableSchema.TableColumn colvarScqtsm = new TableSchema.TableColumn(schema);
				colvarScqtsm.ColumnName = "SCQTSM";
				colvarScqtsm.DataType = DbType.String;
				colvarScqtsm.MaxLength = 255;
				colvarScqtsm.AutoIncrement = false;
				colvarScqtsm.IsNullable = true;
				colvarScqtsm.IsPrimaryKey = false;
				colvarScqtsm.IsForeignKey = false;
				colvarScqtsm.IsReadOnly = false;
				colvarScqtsm.DefaultSetting = @"";
				colvarScqtsm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScqtsm);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ErpNowthwin"].AddSchema("SCT270",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Sczsbh")]
		[Bindable(true)]
		public string Sczsbh 
		{
			get { return GetColumnValue<string>(Columns.Sczsbh); }
			set { SetColumnValue(Columns.Sczsbh, value); }
		}
		  
		[XmlAttribute("Schtbh")]
		[Bindable(true)]
		public string Schtbh 
		{
			get { return GetColumnValue<string>(Columns.Schtbh); }
			set { SetColumnValue(Columns.Schtbh, value); }
		}
		  
		[XmlAttribute("Schtxh")]
		[Bindable(true)]
		public decimal Schtxh 
		{
			get { return GetColumnValue<decimal>(Columns.Schtxh); }
			set { SetColumnValue(Columns.Schtxh, value); }
		}
		  
		[XmlAttribute("Sccjsm")]
		[Bindable(true)]
		public string Sccjsm 
		{
			get { return GetColumnValue<string>(Columns.Sccjsm); }
			set { SetColumnValue(Columns.Sccjsm, value); }
		}
		  
		[XmlAttribute("Scfzsm")]
		[Bindable(true)]
		public string Scfzsm 
		{
			get { return GetColumnValue<string>(Columns.Scfzsm); }
			set { SetColumnValue(Columns.Scfzsm, value); }
		}
		  
		[XmlAttribute("Scztsm")]
		[Bindable(true)]
		public string Scztsm 
		{
			get { return GetColumnValue<string>(Columns.Scztsm); }
			set { SetColumnValue(Columns.Scztsm, value); }
		}
		  
		[XmlAttribute("Scbzsm")]
		[Bindable(true)]
		public string Scbzsm 
		{
			get { return GetColumnValue<string>(Columns.Scbzsm); }
			set { SetColumnValue(Columns.Scbzsm, value); }
		}
		  
		[XmlAttribute("Scqtsm")]
		[Bindable(true)]
		public string Scqtsm 
		{
			get { return GetColumnValue<string>(Columns.Scqtsm); }
			set { SetColumnValue(Columns.Scqtsm, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varSczsbh,string varSchtbh,decimal varSchtxh,string varSccjsm,string varScfzsm,string varScztsm,string varScbzsm,string varScqtsm)
		{
			SCT270 item = new SCT270();
			
			item.Sczsbh = varSczsbh;
			
			item.Schtbh = varSchtbh;
			
			item.Schtxh = varSchtxh;
			
			item.Sccjsm = varSccjsm;
			
			item.Scfzsm = varScfzsm;
			
			item.Scztsm = varScztsm;
			
			item.Scbzsm = varScbzsm;
			
			item.Scqtsm = varScqtsm;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(string varSczsbh,string varSchtbh,decimal varSchtxh,string varSccjsm,string varScfzsm,string varScztsm,string varScbzsm,string varScqtsm)
		{
			SCT270 item = new SCT270();
			
				item.Sczsbh = varSczsbh;
			
				item.Schtbh = varSchtbh;
			
				item.Schtxh = varSchtxh;
			
				item.Sccjsm = varSccjsm;
			
				item.Scfzsm = varScfzsm;
			
				item.Scztsm = varScztsm;
			
				item.Scbzsm = varScbzsm;
			
				item.Scqtsm = varScqtsm;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn SczsbhColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn SchtbhColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn SchtxhColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn SccjsmColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn ScfzsmColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn ScztsmColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn ScbzsmColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn ScqtsmColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Sczsbh = @"SCZSBH";
			 public static string Schtbh = @"SCHTBH";
			 public static string Schtxh = @"SCHTXH";
			 public static string Sccjsm = @"SCCJSM";
			 public static string Scfzsm = @"SCFZSM";
			 public static string Scztsm = @"SCZTSM";
			 public static string Scbzsm = @"SCBZSM";
			 public static string Scqtsm = @"SCQTSM";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}

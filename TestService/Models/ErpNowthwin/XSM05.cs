using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace OracleDataDomain
{
	/// <summary>
	/// Strongly-typed collection for the XSM05 class.
	/// </summary>
    [Serializable]
	public partial class XSM05Collection : ActiveList<XSM05, XSM05Collection>
	{	   
		public XSM05Collection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>XSM05Collection</returns>
		public XSM05Collection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                XSM05 o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the XSM05 table.
	/// </summary>
	[Serializable]
	public partial class XSM05 : ActiveRecord<XSM05>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public XSM05()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public XSM05(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public XSM05(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public XSM05(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("XSM05", TableType.Table, DataService.GetInstance("ErpNowthwin"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"FYERP";
				//columns
				
				TableSchema.TableColumn colvarXsjpdm = new TableSchema.TableColumn(schema);
				colvarXsjpdm.ColumnName = "XSJPDM";
				colvarXsjpdm.DataType = DbType.String;
				colvarXsjpdm.MaxLength = 4;
				colvarXsjpdm.AutoIncrement = false;
				colvarXsjpdm.IsNullable = false;
				colvarXsjpdm.IsPrimaryKey = true;
				colvarXsjpdm.IsForeignKey = false;
				colvarXsjpdm.IsReadOnly = false;
				colvarXsjpdm.DefaultSetting = @"";
				colvarXsjpdm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXsjpdm);
				
				TableSchema.TableColumn colvarXsjpmc = new TableSchema.TableColumn(schema);
				colvarXsjpmc.ColumnName = "XSJPMC";
				colvarXsjpmc.DataType = DbType.String;
				colvarXsjpmc.MaxLength = 40;
				colvarXsjpmc.AutoIncrement = false;
				colvarXsjpmc.IsNullable = true;
				colvarXsjpmc.IsPrimaryKey = false;
				colvarXsjpmc.IsForeignKey = false;
				colvarXsjpmc.IsReadOnly = false;
				colvarXsjpmc.DefaultSetting = @"";
				colvarXsjpmc.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXsjpmc);
				
				TableSchema.TableColumn colvarXsgsmc = new TableSchema.TableColumn(schema);
				colvarXsgsmc.ColumnName = "XSGSMC";
				colvarXsgsmc.DataType = DbType.String;
				colvarXsgsmc.MaxLength = 100;
				colvarXsgsmc.AutoIncrement = false;
				colvarXsgsmc.IsNullable = true;
				colvarXsgsmc.IsPrimaryKey = false;
				colvarXsgsmc.IsForeignKey = false;
				colvarXsgsmc.IsReadOnly = false;
				colvarXsgsmc.DefaultSetting = @"";
				colvarXsgsmc.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXsgsmc);
				
				TableSchema.TableColumn colvarXsgsdd = new TableSchema.TableColumn(schema);
				colvarXsgsdd.ColumnName = "XSGSDD";
				colvarXsgsdd.DataType = DbType.String;
				colvarXsgsdd.MaxLength = 100;
				colvarXsgsdd.AutoIncrement = false;
				colvarXsgsdd.IsNullable = true;
				colvarXsgsdd.IsPrimaryKey = false;
				colvarXsgsdd.IsForeignKey = false;
				colvarXsgsdd.IsReadOnly = false;
				colvarXsgsdd.DefaultSetting = @"";
				colvarXsgsdd.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXsgsdd);
				
				TableSchema.TableColumn colvarXsgsdh = new TableSchema.TableColumn(schema);
				colvarXsgsdh.ColumnName = "XSGSDH";
				colvarXsgsdh.DataType = DbType.String;
				colvarXsgsdh.MaxLength = 20;
				colvarXsgsdh.AutoIncrement = false;
				colvarXsgsdh.IsNullable = true;
				colvarXsgsdh.IsPrimaryKey = false;
				colvarXsgsdh.IsForeignKey = false;
				colvarXsgsdh.IsReadOnly = false;
				colvarXsgsdh.DefaultSetting = @"";
				colvarXsgsdh.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXsgsdh);
				
				TableSchema.TableColumn colvarXsgscz = new TableSchema.TableColumn(schema);
				colvarXsgscz.ColumnName = "XSGSCZ";
				colvarXsgscz.DataType = DbType.String;
				colvarXsgscz.MaxLength = 20;
				colvarXsgscz.AutoIncrement = false;
				colvarXsgscz.IsNullable = true;
				colvarXsgscz.IsPrimaryKey = false;
				colvarXsgscz.IsForeignKey = false;
				colvarXsgscz.IsReadOnly = false;
				colvarXsgscz.DefaultSetting = @"";
				colvarXsgscz.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXsgscz);
				
				TableSchema.TableColumn colvarXsgsfz = new TableSchema.TableColumn(schema);
				colvarXsgsfz.ColumnName = "XSGSFZ";
				colvarXsgsfz.DataType = DbType.String;
				colvarXsgsfz.MaxLength = 20;
				colvarXsgsfz.AutoIncrement = false;
				colvarXsgsfz.IsNullable = true;
				colvarXsgsfz.IsPrimaryKey = false;
				colvarXsgsfz.IsForeignKey = false;
				colvarXsgsfz.IsReadOnly = false;
				colvarXsgsfz.DefaultSetting = @"";
				colvarXsgsfz.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXsgsfz);
				
				TableSchema.TableColumn colvarXsgswz = new TableSchema.TableColumn(schema);
				colvarXsgswz.ColumnName = "XSGSWZ";
				colvarXsgswz.DataType = DbType.String;
				colvarXsgswz.MaxLength = 30;
				colvarXsgswz.AutoIncrement = false;
				colvarXsgswz.IsNullable = true;
				colvarXsgswz.IsPrimaryKey = false;
				colvarXsgswz.IsForeignKey = false;
				colvarXsgswz.IsReadOnly = false;
				colvarXsgswz.DefaultSetting = @"";
				colvarXsgswz.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXsgswz);
				
				TableSchema.TableColumn colvarXsgsem = new TableSchema.TableColumn(schema);
				colvarXsgsem.ColumnName = "XSGSEM";
				colvarXsgsem.DataType = DbType.String;
				colvarXsgsem.MaxLength = 30;
				colvarXsgsem.AutoIncrement = false;
				colvarXsgsem.IsNullable = true;
				colvarXsgsem.IsPrimaryKey = false;
				colvarXsgsem.IsForeignKey = false;
				colvarXsgsem.IsReadOnly = false;
				colvarXsgsem.DefaultSetting = @"";
				colvarXsgsem.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXsgsem);
				
				TableSchema.TableColumn colvarXsjyfs = new TableSchema.TableColumn(schema);
				colvarXsjyfs.ColumnName = "XSJYFS";
				colvarXsjyfs.DataType = DbType.String;
				colvarXsjyfs.MaxLength = 100;
				colvarXsjyfs.AutoIncrement = false;
				colvarXsjyfs.IsNullable = true;
				colvarXsjyfs.IsPrimaryKey = false;
				colvarXsjyfs.IsForeignKey = false;
				colvarXsjyfs.IsReadOnly = false;
				colvarXsjyfs.DefaultSetting = @"";
				colvarXsjyfs.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXsjyfs);
				
				TableSchema.TableColumn colvarXszysc = new TableSchema.TableColumn(schema);
				colvarXszysc.ColumnName = "XSZYSC";
				colvarXszysc.DataType = DbType.String;
				colvarXszysc.MaxLength = 100;
				colvarXszysc.AutoIncrement = false;
				colvarXszysc.IsNullable = true;
				colvarXszysc.IsPrimaryKey = false;
				colvarXszysc.IsForeignKey = false;
				colvarXszysc.IsReadOnly = false;
				colvarXszysc.DefaultSetting = @"";
				colvarXszysc.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXszysc);
				
				TableSchema.TableColumn colvarXscpjw = new TableSchema.TableColumn(schema);
				colvarXscpjw.ColumnName = "XSCPJW";
				colvarXscpjw.DataType = DbType.String;
				colvarXscpjw.MaxLength = 100;
				colvarXscpjw.AutoIncrement = false;
				colvarXscpjw.IsNullable = true;
				colvarXscpjw.IsPrimaryKey = false;
				colvarXscpjw.IsForeignKey = false;
				colvarXscpjw.IsReadOnly = false;
				colvarXscpjw.DefaultSetting = @"";
				colvarXscpjw.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXscpjw);
				
				TableSchema.TableColumn colvarXsscdw = new TableSchema.TableColumn(schema);
				colvarXsscdw.ColumnName = "XSSCDW";
				colvarXsscdw.DataType = DbType.String;
				colvarXsscdw.MaxLength = 100;
				colvarXsscdw.AutoIncrement = false;
				colvarXsscdw.IsNullable = true;
				colvarXsscdw.IsPrimaryKey = false;
				colvarXsscdw.IsForeignKey = false;
				colvarXsscdw.IsReadOnly = false;
				colvarXsscdw.DefaultSetting = @"";
				colvarXsscdw.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXsscdw);
				
				TableSchema.TableColumn colvarXsppts = new TableSchema.TableColumn(schema);
				colvarXsppts.ColumnName = "XSPPTS";
				colvarXsppts.DataType = DbType.String;
				colvarXsppts.MaxLength = 255;
				colvarXsppts.AutoIncrement = false;
				colvarXsppts.IsNullable = true;
				colvarXsppts.IsPrimaryKey = false;
				colvarXsppts.IsForeignKey = false;
				colvarXsppts.IsReadOnly = false;
				colvarXsppts.DefaultSetting = @"";
				colvarXsppts.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXsppts);
				
				TableSchema.TableColumn colvarXsnxse = new TableSchema.TableColumn(schema);
				colvarXsnxse.ColumnName = "XSNXSE";
				colvarXsnxse.DataType = DbType.String;
				colvarXsnxse.MaxLength = 50;
				colvarXsnxse.AutoIncrement = false;
				colvarXsnxse.IsNullable = true;
				colvarXsnxse.IsPrimaryKey = false;
				colvarXsnxse.IsForeignKey = false;
				colvarXsnxse.IsReadOnly = false;
				colvarXsnxse.DefaultSetting = @"";
				colvarXsnxse.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXsnxse);
				
				TableSchema.TableColumn colvarXsjzys = new TableSchema.TableColumn(schema);
				colvarXsjzys.ColumnName = "XSJZYS";
				colvarXsjzys.DataType = DbType.String;
				colvarXsjzys.MaxLength = 255;
				colvarXsjzys.AutoIncrement = false;
				colvarXsjzys.IsNullable = true;
				colvarXsjzys.IsPrimaryKey = false;
				colvarXsjzys.IsForeignKey = false;
				colvarXsjzys.IsReadOnly = false;
				colvarXsjzys.DefaultSetting = @"";
				colvarXsjzys.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXsjzys);
				
				TableSchema.TableColumn colvarXsjzls = new TableSchema.TableColumn(schema);
				colvarXsjzls.ColumnName = "XSJZLS";
				colvarXsjzls.DataType = DbType.String;
				colvarXsjzls.MaxLength = 255;
				colvarXsjzls.AutoIncrement = false;
				colvarXsjzls.IsNullable = true;
				colvarXsjzls.IsPrimaryKey = false;
				colvarXsjzls.IsForeignKey = false;
				colvarXsjzls.IsReadOnly = false;
				colvarXsjzls.DefaultSetting = @"";
				colvarXsjzls.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXsjzls);
				
				TableSchema.TableColumn colvarXsxxzg = new TableSchema.TableColumn(schema);
				colvarXsxxzg.ColumnName = "XSXXZG";
				colvarXsxxzg.DataType = DbType.String;
				colvarXsxxzg.MaxLength = 255;
				colvarXsxxzg.AutoIncrement = false;
				colvarXsxxzg.IsNullable = true;
				colvarXsxxzg.IsPrimaryKey = false;
				colvarXsxxzg.IsForeignKey = false;
				colvarXsxxzg.IsReadOnly = false;
				colvarXsxxzg.DefaultSetting = @"";
				colvarXsxxzg.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXsxxzg);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ErpNowthwin"].AddSchema("XSM05",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Xsjpdm")]
		[Bindable(true)]
		public string Xsjpdm 
		{
			get { return GetColumnValue<string>(Columns.Xsjpdm); }
			set { SetColumnValue(Columns.Xsjpdm, value); }
		}
		  
		[XmlAttribute("Xsjpmc")]
		[Bindable(true)]
		public string Xsjpmc 
		{
			get { return GetColumnValue<string>(Columns.Xsjpmc); }
			set { SetColumnValue(Columns.Xsjpmc, value); }
		}
		  
		[XmlAttribute("Xsgsmc")]
		[Bindable(true)]
		public string Xsgsmc 
		{
			get { return GetColumnValue<string>(Columns.Xsgsmc); }
			set { SetColumnValue(Columns.Xsgsmc, value); }
		}
		  
		[XmlAttribute("Xsgsdd")]
		[Bindable(true)]
		public string Xsgsdd 
		{
			get { return GetColumnValue<string>(Columns.Xsgsdd); }
			set { SetColumnValue(Columns.Xsgsdd, value); }
		}
		  
		[XmlAttribute("Xsgsdh")]
		[Bindable(true)]
		public string Xsgsdh 
		{
			get { return GetColumnValue<string>(Columns.Xsgsdh); }
			set { SetColumnValue(Columns.Xsgsdh, value); }
		}
		  
		[XmlAttribute("Xsgscz")]
		[Bindable(true)]
		public string Xsgscz 
		{
			get { return GetColumnValue<string>(Columns.Xsgscz); }
			set { SetColumnValue(Columns.Xsgscz, value); }
		}
		  
		[XmlAttribute("Xsgsfz")]
		[Bindable(true)]
		public string Xsgsfz 
		{
			get { return GetColumnValue<string>(Columns.Xsgsfz); }
			set { SetColumnValue(Columns.Xsgsfz, value); }
		}
		  
		[XmlAttribute("Xsgswz")]
		[Bindable(true)]
		public string Xsgswz 
		{
			get { return GetColumnValue<string>(Columns.Xsgswz); }
			set { SetColumnValue(Columns.Xsgswz, value); }
		}
		  
		[XmlAttribute("Xsgsem")]
		[Bindable(true)]
		public string Xsgsem 
		{
			get { return GetColumnValue<string>(Columns.Xsgsem); }
			set { SetColumnValue(Columns.Xsgsem, value); }
		}
		  
		[XmlAttribute("Xsjyfs")]
		[Bindable(true)]
		public string Xsjyfs 
		{
			get { return GetColumnValue<string>(Columns.Xsjyfs); }
			set { SetColumnValue(Columns.Xsjyfs, value); }
		}
		  
		[XmlAttribute("Xszysc")]
		[Bindable(true)]
		public string Xszysc 
		{
			get { return GetColumnValue<string>(Columns.Xszysc); }
			set { SetColumnValue(Columns.Xszysc, value); }
		}
		  
		[XmlAttribute("Xscpjw")]
		[Bindable(true)]
		public string Xscpjw 
		{
			get { return GetColumnValue<string>(Columns.Xscpjw); }
			set { SetColumnValue(Columns.Xscpjw, value); }
		}
		  
		[XmlAttribute("Xsscdw")]
		[Bindable(true)]
		public string Xsscdw 
		{
			get { return GetColumnValue<string>(Columns.Xsscdw); }
			set { SetColumnValue(Columns.Xsscdw, value); }
		}
		  
		[XmlAttribute("Xsppts")]
		[Bindable(true)]
		public string Xsppts 
		{
			get { return GetColumnValue<string>(Columns.Xsppts); }
			set { SetColumnValue(Columns.Xsppts, value); }
		}
		  
		[XmlAttribute("Xsnxse")]
		[Bindable(true)]
		public string Xsnxse 
		{
			get { return GetColumnValue<string>(Columns.Xsnxse); }
			set { SetColumnValue(Columns.Xsnxse, value); }
		}
		  
		[XmlAttribute("Xsjzys")]
		[Bindable(true)]
		public string Xsjzys 
		{
			get { return GetColumnValue<string>(Columns.Xsjzys); }
			set { SetColumnValue(Columns.Xsjzys, value); }
		}
		  
		[XmlAttribute("Xsjzls")]
		[Bindable(true)]
		public string Xsjzls 
		{
			get { return GetColumnValue<string>(Columns.Xsjzls); }
			set { SetColumnValue(Columns.Xsjzls, value); }
		}
		  
		[XmlAttribute("Xsxxzg")]
		[Bindable(true)]
		public string Xsxxzg 
		{
			get { return GetColumnValue<string>(Columns.Xsxxzg); }
			set { SetColumnValue(Columns.Xsxxzg, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varXsjpdm,string varXsjpmc,string varXsgsmc,string varXsgsdd,string varXsgsdh,string varXsgscz,string varXsgsfz,string varXsgswz,string varXsgsem,string varXsjyfs,string varXszysc,string varXscpjw,string varXsscdw,string varXsppts,string varXsnxse,string varXsjzys,string varXsjzls,string varXsxxzg)
		{
			XSM05 item = new XSM05();
			
			item.Xsjpdm = varXsjpdm;
			
			item.Xsjpmc = varXsjpmc;
			
			item.Xsgsmc = varXsgsmc;
			
			item.Xsgsdd = varXsgsdd;
			
			item.Xsgsdh = varXsgsdh;
			
			item.Xsgscz = varXsgscz;
			
			item.Xsgsfz = varXsgsfz;
			
			item.Xsgswz = varXsgswz;
			
			item.Xsgsem = varXsgsem;
			
			item.Xsjyfs = varXsjyfs;
			
			item.Xszysc = varXszysc;
			
			item.Xscpjw = varXscpjw;
			
			item.Xsscdw = varXsscdw;
			
			item.Xsppts = varXsppts;
			
			item.Xsnxse = varXsnxse;
			
			item.Xsjzys = varXsjzys;
			
			item.Xsjzls = varXsjzls;
			
			item.Xsxxzg = varXsxxzg;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(string varXsjpdm,string varXsjpmc,string varXsgsmc,string varXsgsdd,string varXsgsdh,string varXsgscz,string varXsgsfz,string varXsgswz,string varXsgsem,string varXsjyfs,string varXszysc,string varXscpjw,string varXsscdw,string varXsppts,string varXsnxse,string varXsjzys,string varXsjzls,string varXsxxzg)
		{
			XSM05 item = new XSM05();
			
				item.Xsjpdm = varXsjpdm;
			
				item.Xsjpmc = varXsjpmc;
			
				item.Xsgsmc = varXsgsmc;
			
				item.Xsgsdd = varXsgsdd;
			
				item.Xsgsdh = varXsgsdh;
			
				item.Xsgscz = varXsgscz;
			
				item.Xsgsfz = varXsgsfz;
			
				item.Xsgswz = varXsgswz;
			
				item.Xsgsem = varXsgsem;
			
				item.Xsjyfs = varXsjyfs;
			
				item.Xszysc = varXszysc;
			
				item.Xscpjw = varXscpjw;
			
				item.Xsscdw = varXsscdw;
			
				item.Xsppts = varXsppts;
			
				item.Xsnxse = varXsnxse;
			
				item.Xsjzys = varXsjzys;
			
				item.Xsjzls = varXsjzls;
			
				item.Xsxxzg = varXsxxzg;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn XsjpdmColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn XsjpmcColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn XsgsmcColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn XsgsddColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn XsgsdhColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn XsgsczColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn XsgsfzColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn XsgswzColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn XsgsemColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn XsjyfsColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn XszyscColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn XscpjwColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn XsscdwColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        public static TableSchema.TableColumn XspptsColumn
        {
            get { return Schema.Columns[13]; }
        }
        
        
        
        public static TableSchema.TableColumn XsnxseColumn
        {
            get { return Schema.Columns[14]; }
        }
        
        
        
        public static TableSchema.TableColumn XsjzysColumn
        {
            get { return Schema.Columns[15]; }
        }
        
        
        
        public static TableSchema.TableColumn XsjzlsColumn
        {
            get { return Schema.Columns[16]; }
        }
        
        
        
        public static TableSchema.TableColumn XsxxzgColumn
        {
            get { return Schema.Columns[17]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Xsjpdm = @"XSJPDM";
			 public static string Xsjpmc = @"XSJPMC";
			 public static string Xsgsmc = @"XSGSMC";
			 public static string Xsgsdd = @"XSGSDD";
			 public static string Xsgsdh = @"XSGSDH";
			 public static string Xsgscz = @"XSGSCZ";
			 public static string Xsgsfz = @"XSGSFZ";
			 public static string Xsgswz = @"XSGSWZ";
			 public static string Xsgsem = @"XSGSEM";
			 public static string Xsjyfs = @"XSJYFS";
			 public static string Xszysc = @"XSZYSC";
			 public static string Xscpjw = @"XSCPJW";
			 public static string Xsscdw = @"XSSCDW";
			 public static string Xsppts = @"XSPPTS";
			 public static string Xsnxse = @"XSNXSE";
			 public static string Xsjzys = @"XSJZYS";
			 public static string Xsjzls = @"XSJZLS";
			 public static string Xsxxzg = @"XSXXZG";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}

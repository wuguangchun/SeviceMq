using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace OracleDataDomain
{
	/// <summary>
	/// Strongly-typed collection for the SCT31 class.
	/// </summary>
    [Serializable]
	public partial class SCT31Collection : ActiveList<SCT31, SCT31Collection>
	{	   
		public SCT31Collection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>SCT31Collection</returns>
		public SCT31Collection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                SCT31 o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the SCT31 table.
	/// </summary>
	[Serializable]
	public partial class SCT31 : ActiveRecord<SCT31>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public SCT31()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public SCT31(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public SCT31(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public SCT31(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("SCT31", TableType.Table, DataService.GetInstance("ErpNowthwin"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"FYERP";
				//columns
				
				TableSchema.TableColumn colvarXtxsdm = new TableSchema.TableColumn(schema);
				colvarXtxsdm.ColumnName = "XTXSDM";
				colvarXtxsdm.DataType = DbType.String;
				colvarXtxsdm.MaxLength = 4;
				colvarXtxsdm.AutoIncrement = false;
				colvarXtxsdm.IsNullable = true;
				colvarXtxsdm.IsPrimaryKey = false;
				colvarXtxsdm.IsForeignKey = false;
				colvarXtxsdm.IsReadOnly = false;
				colvarXtxsdm.DefaultSetting = @"";
				colvarXtxsdm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXtxsdm);
				
				TableSchema.TableColumn colvarXthbdm = new TableSchema.TableColumn(schema);
				colvarXthbdm.ColumnName = "XTHBDM";
				colvarXthbdm.DataType = DbType.String;
				colvarXthbdm.MaxLength = 3;
				colvarXthbdm.AutoIncrement = false;
				colvarXthbdm.IsNullable = true;
				colvarXthbdm.IsPrimaryKey = false;
				colvarXthbdm.IsForeignKey = false;
				colvarXthbdm.IsReadOnly = false;
				colvarXthbdm.DefaultSetting = @"";
				colvarXthbdm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXthbdm);
				
				TableSchema.TableColumn colvarXtdhhl = new TableSchema.TableColumn(schema);
				colvarXtdhhl.ColumnName = "XTDHHL";
				colvarXtdhhl.DataType = DbType.Decimal;
				colvarXtdhhl.MaxLength = 0;
				colvarXtdhhl.AutoIncrement = false;
				colvarXtdhhl.IsNullable = true;
				colvarXtdhhl.IsPrimaryKey = false;
				colvarXtdhhl.IsForeignKey = false;
				colvarXtdhhl.IsReadOnly = false;
				colvarXtdhhl.DefaultSetting = @"";
				colvarXtdhhl.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXtdhhl);
				
				TableSchema.TableColumn colvarSchtbh = new TableSchema.TableColumn(schema);
				colvarSchtbh.ColumnName = "SCHTBH";
				colvarSchtbh.DataType = DbType.String;
				colvarSchtbh.MaxLength = 12;
				colvarSchtbh.AutoIncrement = false;
				colvarSchtbh.IsNullable = false;
				colvarSchtbh.IsPrimaryKey = true;
				colvarSchtbh.IsForeignKey = false;
				colvarSchtbh.IsReadOnly = false;
				colvarSchtbh.DefaultSetting = @"";
				colvarSchtbh.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSchtbh);
				
				TableSchema.TableColumn colvarXtwldm = new TableSchema.TableColumn(schema);
				colvarXtwldm.ColumnName = "XTWLDM";
				colvarXtwldm.DataType = DbType.String;
				colvarXtwldm.MaxLength = 8;
				colvarXtwldm.AutoIncrement = false;
				colvarXtwldm.IsNullable = true;
				colvarXtwldm.IsPrimaryKey = false;
				colvarXtwldm.IsForeignKey = false;
				colvarXtwldm.IsReadOnly = false;
				colvarXtwldm.DefaultSetting = @"";
				colvarXtwldm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXtwldm);
				
				TableSchema.TableColumn colvarHtlrry = new TableSchema.TableColumn(schema);
				colvarHtlrry.ColumnName = "HTLRRY";
				colvarHtlrry.DataType = DbType.String;
				colvarHtlrry.MaxLength = 10;
				colvarHtlrry.AutoIncrement = false;
				colvarHtlrry.IsNullable = true;
				colvarHtlrry.IsPrimaryKey = false;
				colvarHtlrry.IsForeignKey = false;
				colvarHtlrry.IsReadOnly = false;
				colvarHtlrry.DefaultSetting = @"";
				colvarHtlrry.ForeignKeyTableName = "";
				schema.Columns.Add(colvarHtlrry);
				
				TableSchema.TableColumn colvarHtlrrq = new TableSchema.TableColumn(schema);
				colvarHtlrrq.ColumnName = "HTLRRQ";
				colvarHtlrrq.DataType = DbType.DateTime;
				colvarHtlrrq.MaxLength = 0;
				colvarHtlrrq.AutoIncrement = false;
				colvarHtlrrq.IsNullable = true;
				colvarHtlrrq.IsPrimaryKey = false;
				colvarHtlrrq.IsForeignKey = false;
				colvarHtlrrq.IsReadOnly = false;
				colvarHtlrrq.DefaultSetting = @"";
				colvarHtlrrq.ForeignKeyTableName = "";
				schema.Columns.Add(colvarHtlrrq);
				
				TableSchema.TableColumn colvarHtssrq = new TableSchema.TableColumn(schema);
				colvarHtssrq.ColumnName = "HTSSRQ";
				colvarHtssrq.DataType = DbType.DateTime;
				colvarHtssrq.MaxLength = 0;
				colvarHtssrq.AutoIncrement = false;
				colvarHtssrq.IsNullable = true;
				colvarHtssrq.IsPrimaryKey = false;
				colvarHtssrq.IsForeignKey = false;
				colvarHtssrq.IsReadOnly = false;
				colvarHtssrq.DefaultSetting = @"";
				colvarHtssrq.ForeignKeyTableName = "";
				schema.Columns.Add(colvarHtssrq);
				
				TableSchema.TableColumn colvarSchtzt = new TableSchema.TableColumn(schema);
				colvarSchtzt.ColumnName = "SCHTZT";
				colvarSchtzt.DataType = DbType.String;
				colvarSchtzt.MaxLength = 1;
				colvarSchtzt.AutoIncrement = false;
				colvarSchtzt.IsNullable = true;
				colvarSchtzt.IsPrimaryKey = false;
				colvarSchtzt.IsForeignKey = false;
				colvarSchtzt.IsReadOnly = false;
				colvarSchtzt.DefaultSetting = @"";
				colvarSchtzt.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSchtzt);
				
				TableSchema.TableColumn colvarScywry = new TableSchema.TableColumn(schema);
				colvarScywry.ColumnName = "SCYWRY";
				colvarScywry.DataType = DbType.String;
				colvarScywry.MaxLength = 8;
				colvarScywry.AutoIncrement = false;
				colvarScywry.IsNullable = true;
				colvarScywry.IsPrimaryKey = false;
				colvarScywry.IsForeignKey = false;
				colvarScywry.IsReadOnly = false;
				colvarScywry.DefaultSetting = @"";
				colvarScywry.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScywry);
				
				TableSchema.TableColumn colvarScqdrq = new TableSchema.TableColumn(schema);
				colvarScqdrq.ColumnName = "SCQDRQ";
				colvarScqdrq.DataType = DbType.DateTime;
				colvarScqdrq.MaxLength = 0;
				colvarScqdrq.AutoIncrement = false;
				colvarScqdrq.IsNullable = true;
				colvarScqdrq.IsPrimaryKey = false;
				colvarScqdrq.IsForeignKey = false;
				colvarScqdrq.IsReadOnly = false;
				colvarScqdrq.DefaultSetting = @"";
				colvarScqdrq.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScqdrq);
				
				TableSchema.TableColumn colvarXtbmdm = new TableSchema.TableColumn(schema);
				colvarXtbmdm.ColumnName = "XTBMDM";
				colvarXtbmdm.DataType = DbType.String;
				colvarXtbmdm.MaxLength = 8;
				colvarXtbmdm.AutoIncrement = false;
				colvarXtbmdm.IsNullable = true;
				colvarXtbmdm.IsPrimaryKey = false;
				colvarXtbmdm.IsForeignKey = false;
				colvarXtbmdm.IsReadOnly = false;
				colvarXtbmdm.DefaultSetting = @"";
				colvarXtbmdm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXtbmdm);
				
				TableSchema.TableColumn colvarKhddhm = new TableSchema.TableColumn(schema);
				colvarKhddhm.ColumnName = "KHDDHM";
				colvarKhddhm.DataType = DbType.String;
				colvarKhddhm.MaxLength = 12;
				colvarKhddhm.AutoIncrement = false;
				colvarKhddhm.IsNullable = true;
				colvarKhddhm.IsPrimaryKey = false;
				colvarKhddhm.IsForeignKey = false;
				colvarKhddhm.IsReadOnly = false;
				colvarKhddhm.DefaultSetting = @"";
				colvarKhddhm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarKhddhm);
				
				TableSchema.TableColumn colvarScglbz = new TableSchema.TableColumn(schema);
				colvarScglbz.ColumnName = "SCGLBZ";
				colvarScglbz.DataType = DbType.String;
				colvarScglbz.MaxLength = 1;
				colvarScglbz.AutoIncrement = false;
				colvarScglbz.IsNullable = true;
				colvarScglbz.IsPrimaryKey = false;
				colvarScglbz.IsForeignKey = false;
				colvarScglbz.IsReadOnly = false;
				colvarScglbz.DefaultSetting = @"";
				colvarScglbz.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScglbz);
				
				TableSchema.TableColumn colvarScdzbz = new TableSchema.TableColumn(schema);
				colvarScdzbz.ColumnName = "SCDZBZ";
				colvarScdzbz.DataType = DbType.String;
				colvarScdzbz.MaxLength = 1;
				colvarScdzbz.AutoIncrement = false;
				colvarScdzbz.IsNullable = true;
				colvarScdzbz.IsPrimaryKey = false;
				colvarScdzbz.IsForeignKey = false;
				colvarScdzbz.IsReadOnly = false;
				colvarScdzbz.DefaultSetting = @"";
				colvarScdzbz.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScdzbz);
				
				TableSchema.TableColumn colvarSctgbz = new TableSchema.TableColumn(schema);
				colvarSctgbz.ColumnName = "SCTGBZ";
				colvarSctgbz.DataType = DbType.String;
				colvarSctgbz.MaxLength = 1;
				colvarSctgbz.AutoIncrement = false;
				colvarSctgbz.IsNullable = true;
				colvarSctgbz.IsPrimaryKey = false;
				colvarSctgbz.IsForeignKey = false;
				colvarSctgbz.IsReadOnly = false;
				colvarSctgbz.DefaultSetting = @"";
				colvarSctgbz.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSctgbz);
				
				TableSchema.TableColumn colvarSchtbz = new TableSchema.TableColumn(schema);
				colvarSchtbz.ColumnName = "SCHTBZ";
				colvarSchtbz.DataType = DbType.String;
				colvarSchtbz.MaxLength = 0;
				colvarSchtbz.AutoIncrement = false;
				colvarSchtbz.IsNullable = true;
				colvarSchtbz.IsPrimaryKey = false;
				colvarSchtbz.IsForeignKey = false;
				colvarSchtbz.IsReadOnly = false;
				colvarSchtbz.DefaultSetting = @"";
				colvarSchtbz.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSchtbz);
				
				TableSchema.TableColumn colvarHtshry = new TableSchema.TableColumn(schema);
				colvarHtshry.ColumnName = "HTSHRY";
				colvarHtshry.DataType = DbType.String;
				colvarHtshry.MaxLength = 10;
				colvarHtshry.AutoIncrement = false;
				colvarHtshry.IsNullable = true;
				colvarHtshry.IsPrimaryKey = false;
				colvarHtshry.IsForeignKey = false;
				colvarHtshry.IsReadOnly = false;
				colvarHtshry.DefaultSetting = @"";
				colvarHtshry.ForeignKeyTableName = "";
				schema.Columns.Add(colvarHtshry);
				
				TableSchema.TableColumn colvarHtshrq = new TableSchema.TableColumn(schema);
				colvarHtshrq.ColumnName = "HTSHRQ";
				colvarHtshrq.DataType = DbType.DateTime;
				colvarHtshrq.MaxLength = 0;
				colvarHtshrq.AutoIncrement = false;
				colvarHtshrq.IsNullable = true;
				colvarHtshrq.IsPrimaryKey = false;
				colvarHtshrq.IsForeignKey = false;
				colvarHtshrq.IsReadOnly = false;
				colvarHtshrq.DefaultSetting = @"";
				colvarHtshrq.ForeignKeyTableName = "";
				schema.Columns.Add(colvarHtshrq);
				
				TableSchema.TableColumn colvarScshyj = new TableSchema.TableColumn(schema);
				colvarScshyj.ColumnName = "SCSHYJ";
				colvarScshyj.DataType = DbType.String;
				colvarScshyj.MaxLength = 255;
				colvarScshyj.AutoIncrement = false;
				colvarScshyj.IsNullable = true;
				colvarScshyj.IsPrimaryKey = false;
				colvarScshyj.IsForeignKey = false;
				colvarScshyj.IsReadOnly = false;
				colvarScshyj.DefaultSetting = @"";
				colvarScshyj.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScshyj);
				
				TableSchema.TableColumn colvarScjhrq = new TableSchema.TableColumn(schema);
				colvarScjhrq.ColumnName = "SCJHRQ";
				colvarScjhrq.DataType = DbType.DateTime;
				colvarScjhrq.MaxLength = 0;
				colvarScjhrq.AutoIncrement = false;
				colvarScjhrq.IsNullable = true;
				colvarScjhrq.IsPrimaryKey = false;
				colvarScjhrq.IsForeignKey = false;
				colvarScjhrq.IsReadOnly = false;
				colvarScjhrq.DefaultSetting = @"";
				colvarScjhrq.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScjhrq);
				
				TableSchema.TableColumn colvarScjqrq = new TableSchema.TableColumn(schema);
				colvarScjqrq.ColumnName = "SCJQRQ";
				colvarScjqrq.DataType = DbType.DateTime;
				colvarScjqrq.MaxLength = 0;
				colvarScjqrq.AutoIncrement = false;
				colvarScjqrq.IsNullable = true;
				colvarScjqrq.IsPrimaryKey = false;
				colvarScjqrq.IsForeignKey = false;
				colvarScjqrq.IsReadOnly = false;
				colvarScjqrq.DefaultSetting = @"";
				colvarScjqrq.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScjqrq);
				
				TableSchema.TableColumn colvarScjqsm = new TableSchema.TableColumn(schema);
				colvarScjqsm.ColumnName = "SCJQSM";
				colvarScjqsm.DataType = DbType.String;
				colvarScjqsm.MaxLength = 100;
				colvarScjqsm.AutoIncrement = false;
				colvarScjqsm.IsNullable = true;
				colvarScjqsm.IsPrimaryKey = false;
				colvarScjqsm.IsForeignKey = false;
				colvarScjqsm.IsReadOnly = false;
				colvarScjqsm.DefaultSetting = @"";
				colvarScjqsm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScjqsm);
				
				TableSchema.TableColumn colvarSckhxm = new TableSchema.TableColumn(schema);
				colvarSckhxm.ColumnName = "SCKHXM";
				colvarSckhxm.DataType = DbType.String;
				colvarSckhxm.MaxLength = 100;
				colvarSckhxm.AutoIncrement = false;
				colvarSckhxm.IsNullable = true;
				colvarSckhxm.IsPrimaryKey = false;
				colvarSckhxm.IsForeignKey = false;
				colvarSckhxm.IsReadOnly = false;
				colvarSckhxm.DefaultSetting = @"";
				colvarSckhxm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSckhxm);
				
				TableSchema.TableColumn colvarScyspd = new TableSchema.TableColumn(schema);
				colvarScyspd.ColumnName = "SCYSPD";
				colvarScyspd.DataType = DbType.String;
				colvarScyspd.MaxLength = 20;
				colvarScyspd.AutoIncrement = false;
				colvarScyspd.IsNullable = true;
				colvarScyspd.IsPrimaryKey = false;
				colvarScyspd.IsForeignKey = false;
				colvarScyspd.IsReadOnly = false;
				colvarScyspd.DefaultSetting = @"";
				colvarScyspd.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScyspd);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ErpNowthwin"].AddSchema("SCT31",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Xtxsdm")]
		[Bindable(true)]
		public string Xtxsdm 
		{
			get { return GetColumnValue<string>(Columns.Xtxsdm); }
			set { SetColumnValue(Columns.Xtxsdm, value); }
		}
		  
		[XmlAttribute("Xthbdm")]
		[Bindable(true)]
		public string Xthbdm 
		{
			get { return GetColumnValue<string>(Columns.Xthbdm); }
			set { SetColumnValue(Columns.Xthbdm, value); }
		}
		  
		[XmlAttribute("Xtdhhl")]
		[Bindable(true)]
		public decimal? Xtdhhl 
		{
			get { return GetColumnValue<decimal?>(Columns.Xtdhhl); }
			set { SetColumnValue(Columns.Xtdhhl, value); }
		}
		  
		[XmlAttribute("Schtbh")]
		[Bindable(true)]
		public string Schtbh 
		{
			get { return GetColumnValue<string>(Columns.Schtbh); }
			set { SetColumnValue(Columns.Schtbh, value); }
		}
		  
		[XmlAttribute("Xtwldm")]
		[Bindable(true)]
		public string Xtwldm 
		{
			get { return GetColumnValue<string>(Columns.Xtwldm); }
			set { SetColumnValue(Columns.Xtwldm, value); }
		}
		  
		[XmlAttribute("Htlrry")]
		[Bindable(true)]
		public string Htlrry 
		{
			get { return GetColumnValue<string>(Columns.Htlrry); }
			set { SetColumnValue(Columns.Htlrry, value); }
		}
		  
		[XmlAttribute("Htlrrq")]
		[Bindable(true)]
		public DateTime? Htlrrq 
		{
			get { return GetColumnValue<DateTime?>(Columns.Htlrrq); }
			set { SetColumnValue(Columns.Htlrrq, value); }
		}
		  
		[XmlAttribute("Htssrq")]
		[Bindable(true)]
		public DateTime? Htssrq 
		{
			get { return GetColumnValue<DateTime?>(Columns.Htssrq); }
			set { SetColumnValue(Columns.Htssrq, value); }
		}
		  
		[XmlAttribute("Schtzt")]
		[Bindable(true)]
		public string Schtzt 
		{
			get { return GetColumnValue<string>(Columns.Schtzt); }
			set { SetColumnValue(Columns.Schtzt, value); }
		}
		  
		[XmlAttribute("Scywry")]
		[Bindable(true)]
		public string Scywry 
		{
			get { return GetColumnValue<string>(Columns.Scywry); }
			set { SetColumnValue(Columns.Scywry, value); }
		}
		  
		[XmlAttribute("Scqdrq")]
		[Bindable(true)]
		public DateTime? Scqdrq 
		{
			get { return GetColumnValue<DateTime?>(Columns.Scqdrq); }
			set { SetColumnValue(Columns.Scqdrq, value); }
		}
		  
		[XmlAttribute("Xtbmdm")]
		[Bindable(true)]
		public string Xtbmdm 
		{
			get { return GetColumnValue<string>(Columns.Xtbmdm); }
			set { SetColumnValue(Columns.Xtbmdm, value); }
		}
		  
		[XmlAttribute("Khddhm")]
		[Bindable(true)]
		public string Khddhm 
		{
			get { return GetColumnValue<string>(Columns.Khddhm); }
			set { SetColumnValue(Columns.Khddhm, value); }
		}
		  
		[XmlAttribute("Scglbz")]
		[Bindable(true)]
		public string Scglbz 
		{
			get { return GetColumnValue<string>(Columns.Scglbz); }
			set { SetColumnValue(Columns.Scglbz, value); }
		}
		  
		[XmlAttribute("Scdzbz")]
		[Bindable(true)]
		public string Scdzbz 
		{
			get { return GetColumnValue<string>(Columns.Scdzbz); }
			set { SetColumnValue(Columns.Scdzbz, value); }
		}
		  
		[XmlAttribute("Sctgbz")]
		[Bindable(true)]
		public string Sctgbz 
		{
			get { return GetColumnValue<string>(Columns.Sctgbz); }
			set { SetColumnValue(Columns.Sctgbz, value); }
		}
		  
		[XmlAttribute("Schtbz")]
		[Bindable(true)]
		public string Schtbz 
		{
			get { return GetColumnValue<string>(Columns.Schtbz); }
			set { SetColumnValue(Columns.Schtbz, value); }
		}
		  
		[XmlAttribute("Htshry")]
		[Bindable(true)]
		public string Htshry 
		{
			get { return GetColumnValue<string>(Columns.Htshry); }
			set { SetColumnValue(Columns.Htshry, value); }
		}
		  
		[XmlAttribute("Htshrq")]
		[Bindable(true)]
		public DateTime? Htshrq 
		{
			get { return GetColumnValue<DateTime?>(Columns.Htshrq); }
			set { SetColumnValue(Columns.Htshrq, value); }
		}
		  
		[XmlAttribute("Scshyj")]
		[Bindable(true)]
		public string Scshyj 
		{
			get { return GetColumnValue<string>(Columns.Scshyj); }
			set { SetColumnValue(Columns.Scshyj, value); }
		}
		  
		[XmlAttribute("Scjhrq")]
		[Bindable(true)]
		public DateTime? Scjhrq 
		{
			get { return GetColumnValue<DateTime?>(Columns.Scjhrq); }
			set { SetColumnValue(Columns.Scjhrq, value); }
		}
		  
		[XmlAttribute("Scjqrq")]
		[Bindable(true)]
		public DateTime? Scjqrq 
		{
			get { return GetColumnValue<DateTime?>(Columns.Scjqrq); }
			set { SetColumnValue(Columns.Scjqrq, value); }
		}
		  
		[XmlAttribute("Scjqsm")]
		[Bindable(true)]
		public string Scjqsm 
		{
			get { return GetColumnValue<string>(Columns.Scjqsm); }
			set { SetColumnValue(Columns.Scjqsm, value); }
		}
		  
		[XmlAttribute("Sckhxm")]
		[Bindable(true)]
		public string Sckhxm 
		{
			get { return GetColumnValue<string>(Columns.Sckhxm); }
			set { SetColumnValue(Columns.Sckhxm, value); }
		}
		  
		[XmlAttribute("Scyspd")]
		[Bindable(true)]
		public string Scyspd 
		{
			get { return GetColumnValue<string>(Columns.Scyspd); }
			set { SetColumnValue(Columns.Scyspd, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varXtxsdm,string varXthbdm,decimal? varXtdhhl,string varSchtbh,string varXtwldm,string varHtlrry,DateTime? varHtlrrq,DateTime? varHtssrq,string varSchtzt,string varScywry,DateTime? varScqdrq,string varXtbmdm,string varKhddhm,string varScglbz,string varScdzbz,string varSctgbz,string varSchtbz,string varHtshry,DateTime? varHtshrq,string varScshyj,DateTime? varScjhrq,DateTime? varScjqrq,string varScjqsm,string varSckhxm,string varScyspd)
		{
			SCT31 item = new SCT31();
			
			item.Xtxsdm = varXtxsdm;
			
			item.Xthbdm = varXthbdm;
			
			item.Xtdhhl = varXtdhhl;
			
			item.Schtbh = varSchtbh;
			
			item.Xtwldm = varXtwldm;
			
			item.Htlrry = varHtlrry;
			
			item.Htlrrq = varHtlrrq;
			
			item.Htssrq = varHtssrq;
			
			item.Schtzt = varSchtzt;
			
			item.Scywry = varScywry;
			
			item.Scqdrq = varScqdrq;
			
			item.Xtbmdm = varXtbmdm;
			
			item.Khddhm = varKhddhm;
			
			item.Scglbz = varScglbz;
			
			item.Scdzbz = varScdzbz;
			
			item.Sctgbz = varSctgbz;
			
			item.Schtbz = varSchtbz;
			
			item.Htshry = varHtshry;
			
			item.Htshrq = varHtshrq;
			
			item.Scshyj = varScshyj;
			
			item.Scjhrq = varScjhrq;
			
			item.Scjqrq = varScjqrq;
			
			item.Scjqsm = varScjqsm;
			
			item.Sckhxm = varSckhxm;
			
			item.Scyspd = varScyspd;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(string varXtxsdm,string varXthbdm,decimal? varXtdhhl,string varSchtbh,string varXtwldm,string varHtlrry,DateTime? varHtlrrq,DateTime? varHtssrq,string varSchtzt,string varScywry,DateTime? varScqdrq,string varXtbmdm,string varKhddhm,string varScglbz,string varScdzbz,string varSctgbz,string varSchtbz,string varHtshry,DateTime? varHtshrq,string varScshyj,DateTime? varScjhrq,DateTime? varScjqrq,string varScjqsm,string varSckhxm,string varScyspd)
		{
			SCT31 item = new SCT31();
			
				item.Xtxsdm = varXtxsdm;
			
				item.Xthbdm = varXthbdm;
			
				item.Xtdhhl = varXtdhhl;
			
				item.Schtbh = varSchtbh;
			
				item.Xtwldm = varXtwldm;
			
				item.Htlrry = varHtlrry;
			
				item.Htlrrq = varHtlrrq;
			
				item.Htssrq = varHtssrq;
			
				item.Schtzt = varSchtzt;
			
				item.Scywry = varScywry;
			
				item.Scqdrq = varScqdrq;
			
				item.Xtbmdm = varXtbmdm;
			
				item.Khddhm = varKhddhm;
			
				item.Scglbz = varScglbz;
			
				item.Scdzbz = varScdzbz;
			
				item.Sctgbz = varSctgbz;
			
				item.Schtbz = varSchtbz;
			
				item.Htshry = varHtshry;
			
				item.Htshrq = varHtshrq;
			
				item.Scshyj = varScshyj;
			
				item.Scjhrq = varScjhrq;
			
				item.Scjqrq = varScjqrq;
			
				item.Scjqsm = varScjqsm;
			
				item.Sckhxm = varSckhxm;
			
				item.Scyspd = varScyspd;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn XtxsdmColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn XthbdmColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn XtdhhlColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn SchtbhColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn XtwldmColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn HtlrryColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn HtlrrqColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn HtssrqColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn SchtztColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn ScywryColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn ScqdrqColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn XtbmdmColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn KhddhmColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        public static TableSchema.TableColumn ScglbzColumn
        {
            get { return Schema.Columns[13]; }
        }
        
        
        
        public static TableSchema.TableColumn ScdzbzColumn
        {
            get { return Schema.Columns[14]; }
        }
        
        
        
        public static TableSchema.TableColumn SctgbzColumn
        {
            get { return Schema.Columns[15]; }
        }
        
        
        
        public static TableSchema.TableColumn SchtbzColumn
        {
            get { return Schema.Columns[16]; }
        }
        
        
        
        public static TableSchema.TableColumn HtshryColumn
        {
            get { return Schema.Columns[17]; }
        }
        
        
        
        public static TableSchema.TableColumn HtshrqColumn
        {
            get { return Schema.Columns[18]; }
        }
        
        
        
        public static TableSchema.TableColumn ScshyjColumn
        {
            get { return Schema.Columns[19]; }
        }
        
        
        
        public static TableSchema.TableColumn ScjhrqColumn
        {
            get { return Schema.Columns[20]; }
        }
        
        
        
        public static TableSchema.TableColumn ScjqrqColumn
        {
            get { return Schema.Columns[21]; }
        }
        
        
        
        public static TableSchema.TableColumn ScjqsmColumn
        {
            get { return Schema.Columns[22]; }
        }
        
        
        
        public static TableSchema.TableColumn SckhxmColumn
        {
            get { return Schema.Columns[23]; }
        }
        
        
        
        public static TableSchema.TableColumn ScyspdColumn
        {
            get { return Schema.Columns[24]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Xtxsdm = @"XTXSDM";
			 public static string Xthbdm = @"XTHBDM";
			 public static string Xtdhhl = @"XTDHHL";
			 public static string Schtbh = @"SCHTBH";
			 public static string Xtwldm = @"XTWLDM";
			 public static string Htlrry = @"HTLRRY";
			 public static string Htlrrq = @"HTLRRQ";
			 public static string Htssrq = @"HTSSRQ";
			 public static string Schtzt = @"SCHTZT";
			 public static string Scywry = @"SCYWRY";
			 public static string Scqdrq = @"SCQDRQ";
			 public static string Xtbmdm = @"XTBMDM";
			 public static string Khddhm = @"KHDDHM";
			 public static string Scglbz = @"SCGLBZ";
			 public static string Scdzbz = @"SCDZBZ";
			 public static string Sctgbz = @"SCTGBZ";
			 public static string Schtbz = @"SCHTBZ";
			 public static string Htshry = @"HTSHRY";
			 public static string Htshrq = @"HTSHRQ";
			 public static string Scshyj = @"SCSHYJ";
			 public static string Scjhrq = @"SCJHRQ";
			 public static string Scjqrq = @"SCJQRQ";
			 public static string Scjqsm = @"SCJQSM";
			 public static string Sckhxm = @"SCKHXM";
			 public static string Scyspd = @"SCYSPD";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}

using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace OracleDataDomain{
    /// <summary>
    /// Strongly-typed collection for the SCT25 class.
    /// </summary>
    [Serializable]
    public partial class SCT25Collection : ReadOnlyList<SCT25, SCT25Collection>
    {        
        public SCT25Collection() {}
    }
    /// <summary>
    /// This is  Read-only wrapper class for the SCT25 view.
    /// </summary>
    [Serializable]
    public partial class SCT25 : ReadOnlyRecord<SCT25>, IReadOnlyRecord
    {
    
	    #region Default Settings
	    protected static void SetSQLProps() 
	    {
		    GetTableSchema();
	    }
	    #endregion
        #region Schema Accessor
	    public static TableSchema.Table Schema
        {
            get
            {
                if (BaseSchema == null)
                {
                    SetSQLProps();
                }
                return BaseSchema;
            }
        }
    	
        private static void GetTableSchema() 
        {
            if(!IsSchemaInitialized)
            {
                //Schema declaration
                TableSchema.Table schema = new TableSchema.Table("SCT25", TableType.View, DataService.GetInstance("ErpNowthwin"));
                schema.Columns = new TableSchema.TableColumnCollection();
                schema.SchemaName = @"FYERP";
                //columns
                
                TableSchema.TableColumn colvarScpjdm = new TableSchema.TableColumn(schema);
                colvarScpjdm.ColumnName = "SCPJDM";
                colvarScpjdm.DataType = DbType.String;
                colvarScpjdm.MaxLength = 2;
                colvarScpjdm.AutoIncrement = false;
                colvarScpjdm.IsNullable = true;
                colvarScpjdm.IsPrimaryKey = false;
                colvarScpjdm.IsForeignKey = false;
                colvarScpjdm.IsReadOnly = false;
                
                schema.Columns.Add(colvarScpjdm);
                
                TableSchema.TableColumn colvarSccndm = new TableSchema.TableColumn(schema);
                colvarSccndm.ColumnName = "SCCNDM";
                colvarSccndm.DataType = DbType.String;
                colvarSccndm.MaxLength = 4;
                colvarSccndm.AutoIncrement = false;
                colvarSccndm.IsNullable = false;
                colvarSccndm.IsPrimaryKey = false;
                colvarSccndm.IsForeignKey = false;
                colvarSccndm.IsReadOnly = false;
                
                schema.Columns.Add(colvarSccndm);
                
                TableSchema.TableColumn colvarSccnsm = new TableSchema.TableColumn(schema);
                colvarSccnsm.ColumnName = "SCCNSM";
                colvarSccnsm.DataType = DbType.String;
                colvarSccnsm.MaxLength = 100;
                colvarSccnsm.AutoIncrement = false;
                colvarSccnsm.IsNullable = true;
                colvarSccnsm.IsPrimaryKey = false;
                colvarSccnsm.IsForeignKey = false;
                colvarSccnsm.IsReadOnly = false;
                
                schema.Columns.Add(colvarSccnsm);
                
                TableSchema.TableColumn colvarScczrq = new TableSchema.TableColumn(schema);
                colvarScczrq.ColumnName = "SCCZRQ";
                colvarScczrq.DataType = DbType.DateTime;
                colvarScczrq.MaxLength = 0;
                colvarScczrq.AutoIncrement = false;
                colvarScczrq.IsNullable = true;
                colvarScczrq.IsPrimaryKey = false;
                colvarScczrq.IsForeignKey = false;
                colvarScczrq.IsReadOnly = false;
                
                schema.Columns.Add(colvarScczrq);
                
                TableSchema.TableColumn colvarScbzcn = new TableSchema.TableColumn(schema);
                colvarScbzcn.ColumnName = "SCBZCN";
                colvarScbzcn.DataType = DbType.Decimal;
                colvarScbzcn.MaxLength = 0;
                colvarScbzcn.AutoIncrement = false;
                colvarScbzcn.IsNullable = true;
                colvarScbzcn.IsPrimaryKey = false;
                colvarScbzcn.IsForeignKey = false;
                colvarScbzcn.IsReadOnly = false;
                
                schema.Columns.Add(colvarScbzcn);
                
                TableSchema.TableColumn colvarScdhyc = new TableSchema.TableColumn(schema);
                colvarScdhyc.ColumnName = "SCDHYC";
                colvarScdhyc.DataType = DbType.Decimal;
                colvarScdhyc.MaxLength = 0;
                colvarScdhyc.AutoIncrement = false;
                colvarScdhyc.IsNullable = true;
                colvarScdhyc.IsPrimaryKey = false;
                colvarScdhyc.IsForeignKey = false;
                colvarScdhyc.IsReadOnly = false;
                
                schema.Columns.Add(colvarScdhyc);
                
                TableSchema.TableColumn colvarScdhzy = new TableSchema.TableColumn(schema);
                colvarScdhzy.ColumnName = "SCDHZY";
                colvarScdhzy.DataType = DbType.Decimal;
                colvarScdhzy.MaxLength = 0;
                colvarScdhzy.AutoIncrement = false;
                colvarScdhzy.IsNullable = true;
                colvarScdhzy.IsPrimaryKey = false;
                colvarScdhzy.IsForeignKey = false;
                colvarScdhzy.IsReadOnly = false;
                
                schema.Columns.Add(colvarScdhzy);
                
                TableSchema.TableColumn colvarScttyc = new TableSchema.TableColumn(schema);
                colvarScttyc.ColumnName = "SCTTYC";
                colvarScttyc.DataType = DbType.Decimal;
                colvarScttyc.MaxLength = 0;
                colvarScttyc.AutoIncrement = false;
                colvarScttyc.IsNullable = true;
                colvarScttyc.IsPrimaryKey = false;
                colvarScttyc.IsForeignKey = false;
                colvarScttyc.IsReadOnly = false;
                
                schema.Columns.Add(colvarScttyc);
                
                TableSchema.TableColumn colvarScttzy = new TableSchema.TableColumn(schema);
                colvarScttzy.ColumnName = "SCTTZY";
                colvarScttzy.DataType = DbType.Decimal;
                colvarScttzy.MaxLength = 0;
                colvarScttzy.AutoIncrement = false;
                colvarScttzy.IsNullable = true;
                colvarScttzy.IsPrimaryKey = false;
                colvarScttzy.IsForeignKey = false;
                colvarScttzy.IsReadOnly = false;
                
                schema.Columns.Add(colvarScttzy);
                
                TableSchema.TableColumn colvarScdtyc = new TableSchema.TableColumn(schema);
                colvarScdtyc.ColumnName = "SCDTYC";
                colvarScdtyc.DataType = DbType.Decimal;
                colvarScdtyc.MaxLength = 0;
                colvarScdtyc.AutoIncrement = false;
                colvarScdtyc.IsNullable = true;
                colvarScdtyc.IsPrimaryKey = false;
                colvarScdtyc.IsForeignKey = false;
                colvarScdtyc.IsReadOnly = false;
                
                schema.Columns.Add(colvarScdtyc);
                
                TableSchema.TableColumn colvarScdtzy = new TableSchema.TableColumn(schema);
                colvarScdtzy.ColumnName = "SCDTZY";
                colvarScdtzy.DataType = DbType.Decimal;
                colvarScdtzy.MaxLength = 0;
                colvarScdtzy.AutoIncrement = false;
                colvarScdtzy.IsNullable = true;
                colvarScdtzy.IsPrimaryKey = false;
                colvarScdtzy.IsForeignKey = false;
                colvarScdtzy.IsReadOnly = false;
                
                schema.Columns.Add(colvarScdtzy);
                
                
                BaseSchema = schema;
                //add this schema to the provider
                //so we can query it later
                DataService.Providers["ErpNowthwin"].AddSchema("SCT25",schema);
            }
        }
        #endregion
        
        #region Query Accessor
	    public static Query CreateQuery()
	    {
		    return new Query(Schema);
	    }
	    #endregion
	    
	    #region .ctors
	    public SCT25()
	    {
            SetSQLProps();
            SetDefaults();
            MarkNew();
        }
        public SCT25(bool useDatabaseDefaults)
	    {
		    SetSQLProps();
		    if(useDatabaseDefaults)
		    {
				ForceDefaults();
			}
			MarkNew();
	    }
	    
	    public SCT25(object keyID)
	    {
		    SetSQLProps();
		    LoadByKey(keyID);
	    }
    	 
	    public SCT25(string columnName, object columnValue)
        {
            SetSQLProps();
            LoadByParam(columnName,columnValue);
        }
        
	    #endregion
	    
	    #region Props
	    
          
        [XmlAttribute("Scpjdm")]
        [Bindable(true)]
        public string Scpjdm 
	    {
		    get
		    {
			    return GetColumnValue<string>("SCPJDM");
		    }
            set 
		    {
			    SetColumnValue("SCPJDM", value);
            }
        }
	      
        [XmlAttribute("Sccndm")]
        [Bindable(true)]
        public string Sccndm 
	    {
		    get
		    {
			    return GetColumnValue<string>("SCCNDM");
		    }
            set 
		    {
			    SetColumnValue("SCCNDM", value);
            }
        }
	      
        [XmlAttribute("Sccnsm")]
        [Bindable(true)]
        public string Sccnsm 
	    {
		    get
		    {
			    return GetColumnValue<string>("SCCNSM");
		    }
            set 
		    {
			    SetColumnValue("SCCNSM", value);
            }
        }
	      
        [XmlAttribute("Scczrq")]
        [Bindable(true)]
        public DateTime? Scczrq 
	    {
		    get
		    {
			    return GetColumnValue<DateTime?>("SCCZRQ");
		    }
            set 
		    {
			    SetColumnValue("SCCZRQ", value);
            }
        }
	      
        [XmlAttribute("Scbzcn")]
        [Bindable(true)]
        public decimal? Scbzcn 
	    {
		    get
		    {
			    return GetColumnValue<decimal?>("SCBZCN");
		    }
            set 
		    {
			    SetColumnValue("SCBZCN", value);
            }
        }
	      
        [XmlAttribute("Scdhyc")]
        [Bindable(true)]
        public decimal? Scdhyc 
	    {
		    get
		    {
			    return GetColumnValue<decimal?>("SCDHYC");
		    }
            set 
		    {
			    SetColumnValue("SCDHYC", value);
            }
        }
	      
        [XmlAttribute("Scdhzy")]
        [Bindable(true)]
        public decimal? Scdhzy 
	    {
		    get
		    {
			    return GetColumnValue<decimal?>("SCDHZY");
		    }
            set 
		    {
			    SetColumnValue("SCDHZY", value);
            }
        }
	      
        [XmlAttribute("Scttyc")]
        [Bindable(true)]
        public decimal? Scttyc 
	    {
		    get
		    {
			    return GetColumnValue<decimal?>("SCTTYC");
		    }
            set 
		    {
			    SetColumnValue("SCTTYC", value);
            }
        }
	      
        [XmlAttribute("Scttzy")]
        [Bindable(true)]
        public decimal? Scttzy 
	    {
		    get
		    {
			    return GetColumnValue<decimal?>("SCTTZY");
		    }
            set 
		    {
			    SetColumnValue("SCTTZY", value);
            }
        }
	      
        [XmlAttribute("Scdtyc")]
        [Bindable(true)]
        public decimal? Scdtyc 
	    {
		    get
		    {
			    return GetColumnValue<decimal?>("SCDTYC");
		    }
            set 
		    {
			    SetColumnValue("SCDTYC", value);
            }
        }
	      
        [XmlAttribute("Scdtzy")]
        [Bindable(true)]
        public decimal? Scdtzy 
	    {
		    get
		    {
			    return GetColumnValue<decimal?>("SCDTZY");
		    }
            set 
		    {
			    SetColumnValue("SCDTZY", value);
            }
        }
	    
	    #endregion
    
	    #region Columns Struct
	    public struct Columns
	    {
		    
		    
            public static string Scpjdm = @"SCPJDM";
            
            public static string Sccndm = @"SCCNDM";
            
            public static string Sccnsm = @"SCCNSM";
            
            public static string Scczrq = @"SCCZRQ";
            
            public static string Scbzcn = @"SCBZCN";
            
            public static string Scdhyc = @"SCDHYC";
            
            public static string Scdhzy = @"SCDHZY";
            
            public static string Scttyc = @"SCTTYC";
            
            public static string Scttzy = @"SCTTZY";
            
            public static string Scdtyc = @"SCDTYC";
            
            public static string Scdtzy = @"SCDTZY";
            
	    }
	    #endregion
	    
	    
	    #region IAbstractRecord Members
        public new CT GetColumnValue<CT>(string columnName) {
            return base.GetColumnValue<CT>(columnName);
        }
        public object GetColumnValue(string columnName) {
            return base.GetColumnValue<object>(columnName);
        }
        #endregion
	    
    }
}

using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace OracleDataDomain
{
	/// <summary>
	/// Strongly-typed collection for the XST07 class.
	/// </summary>
    [Serializable]
	public partial class XST07Collection : ActiveList<XST07, XST07Collection>
	{	   
		public XST07Collection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>XST07Collection</returns>
		public XST07Collection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                XST07 o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the XST07 table.
	/// </summary>
	[Serializable]
	public partial class XST07 : ActiveRecord<XST07>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public XST07()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public XST07(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public XST07(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public XST07(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("XST07", TableType.Table, DataService.GetInstance("ErpNowthwin"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"FYERP";
				//columns
				
				TableSchema.TableColumn colvarKcczlx = new TableSchema.TableColumn(schema);
				colvarKcczlx.ColumnName = "KCCZLX";
				colvarKcczlx.DataType = DbType.String;
				colvarKcczlx.MaxLength = 2;
				colvarKcczlx.AutoIncrement = false;
				colvarKcczlx.IsNullable = true;
				colvarKcczlx.IsPrimaryKey = false;
				colvarKcczlx.IsForeignKey = false;
				colvarKcczlx.IsReadOnly = false;
				colvarKcczlx.DefaultSetting = @"";
				colvarKcczlx.ForeignKeyTableName = "";
				schema.Columns.Add(colvarKcczlx);
				
				TableSchema.TableColumn colvarXsckck = new TableSchema.TableColumn(schema);
				colvarXsckck.ColumnName = "XSCKCK";
				colvarXsckck.DataType = DbType.String;
				colvarXsckck.MaxLength = 8;
				colvarXsckck.AutoIncrement = false;
				colvarXsckck.IsNullable = true;
				colvarXsckck.IsPrimaryKey = false;
				colvarXsckck.IsForeignKey = false;
				colvarXsckck.IsReadOnly = false;
				colvarXsckck.DefaultSetting = @"";
				colvarXsckck.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXsckck);
				
				TableSchema.TableColumn colvarXsckdh = new TableSchema.TableColumn(schema);
				colvarXsckdh.ColumnName = "XSCKDH";
				colvarXsckdh.DataType = DbType.String;
				colvarXsckdh.MaxLength = 12;
				colvarXsckdh.AutoIncrement = false;
				colvarXsckdh.IsNullable = true;
				colvarXsckdh.IsPrimaryKey = false;
				colvarXsckdh.IsForeignKey = false;
				colvarXsckdh.IsReadOnly = false;
				colvarXsckdh.DefaultSetting = @"";
				colvarXsckdh.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXsckdh);
				
				TableSchema.TableColumn colvarXsfpbz = new TableSchema.TableColumn(schema);
				colvarXsfpbz.ColumnName = "XSFPBZ";
				colvarXsfpbz.DataType = DbType.String;
				colvarXsfpbz.MaxLength = 255;
				colvarXsfpbz.AutoIncrement = false;
				colvarXsfpbz.IsNullable = true;
				colvarXsfpbz.IsPrimaryKey = false;
				colvarXsfpbz.IsForeignKey = false;
				colvarXsfpbz.IsReadOnly = false;
				colvarXsfpbz.DefaultSetting = @"";
				colvarXsfpbz.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXsfpbz);
				
				TableSchema.TableColumn colvarXsfphm = new TableSchema.TableColumn(schema);
				colvarXsfphm.ColumnName = "XSFPHM";
				colvarXsfphm.DataType = DbType.String;
				colvarXsfphm.MaxLength = 12;
				colvarXsfphm.AutoIncrement = false;
				colvarXsfphm.IsNullable = false;
				colvarXsfphm.IsPrimaryKey = true;
				colvarXsfphm.IsForeignKey = false;
				colvarXsfphm.IsReadOnly = false;
				colvarXsfphm.DefaultSetting = @"";
				colvarXsfphm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXsfphm);
				
				TableSchema.TableColumn colvarXsfphh = new TableSchema.TableColumn(schema);
				colvarXsfphh.ColumnName = "XSFPHH";
				colvarXsfphh.DataType = DbType.Decimal;
				colvarXsfphh.MaxLength = 0;
				colvarXsfphh.AutoIncrement = false;
				colvarXsfphh.IsNullable = false;
				colvarXsfphh.IsPrimaryKey = true;
				colvarXsfphh.IsForeignKey = false;
				colvarXsfphh.IsReadOnly = false;
				colvarXsfphh.DefaultSetting = @"";
				colvarXsfphh.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXsfphh);
				
				TableSchema.TableColumn colvarXtwpks = new TableSchema.TableColumn(schema);
				colvarXtwpks.ColumnName = "XTWPKS";
				colvarXtwpks.DataType = DbType.String;
				colvarXtwpks.MaxLength = 20;
				colvarXtwpks.AutoIncrement = false;
				colvarXtwpks.IsNullable = true;
				colvarXtwpks.IsPrimaryKey = false;
				colvarXtwpks.IsForeignKey = false;
				colvarXtwpks.IsReadOnly = false;
				colvarXtwpks.DefaultSetting = @"";
				colvarXtwpks.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXtwpks);
				
				TableSchema.TableColumn colvarXtwpml = new TableSchema.TableColumn(schema);
				colvarXtwpml.ColumnName = "XTWPML";
				colvarXtwpml.DataType = DbType.String;
				colvarXtwpml.MaxLength = 20;
				colvarXtwpml.AutoIncrement = false;
				colvarXtwpml.IsNullable = true;
				colvarXtwpml.IsPrimaryKey = false;
				colvarXtwpml.IsForeignKey = false;
				colvarXtwpml.IsReadOnly = false;
				colvarXtwpml.DefaultSetting = @"";
				colvarXtwpml.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXtwpml);
				
				TableSchema.TableColumn colvarXtwpcm = new TableSchema.TableColumn(schema);
				colvarXtwpcm.ColumnName = "XTWPCM";
				colvarXtwpcm.DataType = DbType.String;
				colvarXtwpcm.MaxLength = 10;
				colvarXtwpcm.AutoIncrement = false;
				colvarXtwpcm.IsNullable = true;
				colvarXtwpcm.IsPrimaryKey = false;
				colvarXtwpcm.IsForeignKey = false;
				colvarXtwpcm.IsReadOnly = false;
				colvarXtwpcm.DefaultSetting = @"";
				colvarXtwpcm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXtwpcm);
				
				TableSchema.TableColumn colvarXsfpsl = new TableSchema.TableColumn(schema);
				colvarXsfpsl.ColumnName = "XSFPSL";
				colvarXsfpsl.DataType = DbType.Decimal;
				colvarXsfpsl.MaxLength = 0;
				colvarXsfpsl.AutoIncrement = false;
				colvarXsfpsl.IsNullable = true;
				colvarXsfpsl.IsPrimaryKey = false;
				colvarXsfpsl.IsForeignKey = false;
				colvarXsfpsl.IsReadOnly = false;
				colvarXsfpsl.DefaultSetting = @"";
				colvarXsfpsl.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXsfpsl);
				
				TableSchema.TableColumn colvarXsfpdj = new TableSchema.TableColumn(schema);
				colvarXsfpdj.ColumnName = "XSFPDJ";
				colvarXsfpdj.DataType = DbType.Decimal;
				colvarXsfpdj.MaxLength = 0;
				colvarXsfpdj.AutoIncrement = false;
				colvarXsfpdj.IsNullable = true;
				colvarXsfpdj.IsPrimaryKey = false;
				colvarXsfpdj.IsForeignKey = false;
				colvarXsfpdj.IsReadOnly = false;
				colvarXsfpdj.DefaultSetting = @"";
				colvarXsfpdj.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXsfpdj);
				
				TableSchema.TableColumn colvarXskoul = new TableSchema.TableColumn(schema);
				colvarXskoul.ColumnName = "XSKOUL";
				colvarXskoul.DataType = DbType.Decimal;
				colvarXskoul.MaxLength = 0;
				colvarXskoul.AutoIncrement = false;
				colvarXskoul.IsNullable = true;
				colvarXskoul.IsPrimaryKey = false;
				colvarXskoul.IsForeignKey = false;
				colvarXskoul.IsReadOnly = false;
				colvarXskoul.DefaultSetting = @"";
				colvarXskoul.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXskoul);
				
				TableSchema.TableColumn colvarXsfpje = new TableSchema.TableColumn(schema);
				colvarXsfpje.ColumnName = "XSFPJE";
				colvarXsfpje.DataType = DbType.Decimal;
				colvarXsfpje.MaxLength = 0;
				colvarXsfpje.AutoIncrement = false;
				colvarXsfpje.IsNullable = true;
				colvarXsfpje.IsPrimaryKey = false;
				colvarXsfpje.IsForeignKey = false;
				colvarXsfpje.IsReadOnly = false;
				colvarXsfpje.DefaultSetting = @"";
				colvarXsfpje.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXsfpje);
				
				TableSchema.TableColumn colvarXssuil = new TableSchema.TableColumn(schema);
				colvarXssuil.ColumnName = "XSSUIL";
				colvarXssuil.DataType = DbType.Decimal;
				colvarXssuil.MaxLength = 0;
				colvarXssuil.AutoIncrement = false;
				colvarXssuil.IsNullable = true;
				colvarXssuil.IsPrimaryKey = false;
				colvarXssuil.IsForeignKey = false;
				colvarXssuil.IsReadOnly = false;
				colvarXssuil.DefaultSetting = @"";
				colvarXssuil.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXssuil);
				
				TableSchema.TableColumn colvarXsfpsj = new TableSchema.TableColumn(schema);
				colvarXsfpsj.ColumnName = "XSFPSJ";
				colvarXsfpsj.DataType = DbType.Decimal;
				colvarXsfpsj.MaxLength = 0;
				colvarXsfpsj.AutoIncrement = false;
				colvarXsfpsj.IsNullable = true;
				colvarXsfpsj.IsPrimaryKey = false;
				colvarXsfpsj.IsForeignKey = false;
				colvarXsfpsj.IsReadOnly = false;
				colvarXsfpsj.DefaultSetting = @"";
				colvarXsfpsj.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXsfpsj);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ErpNowthwin"].AddSchema("XST07",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Kcczlx")]
		[Bindable(true)]
		public string Kcczlx 
		{
			get { return GetColumnValue<string>(Columns.Kcczlx); }
			set { SetColumnValue(Columns.Kcczlx, value); }
		}
		  
		[XmlAttribute("Xsckck")]
		[Bindable(true)]
		public string Xsckck 
		{
			get { return GetColumnValue<string>(Columns.Xsckck); }
			set { SetColumnValue(Columns.Xsckck, value); }
		}
		  
		[XmlAttribute("Xsckdh")]
		[Bindable(true)]
		public string Xsckdh 
		{
			get { return GetColumnValue<string>(Columns.Xsckdh); }
			set { SetColumnValue(Columns.Xsckdh, value); }
		}
		  
		[XmlAttribute("Xsfpbz")]
		[Bindable(true)]
		public string Xsfpbz 
		{
			get { return GetColumnValue<string>(Columns.Xsfpbz); }
			set { SetColumnValue(Columns.Xsfpbz, value); }
		}
		  
		[XmlAttribute("Xsfphm")]
		[Bindable(true)]
		public string Xsfphm 
		{
			get { return GetColumnValue<string>(Columns.Xsfphm); }
			set { SetColumnValue(Columns.Xsfphm, value); }
		}
		  
		[XmlAttribute("Xsfphh")]
		[Bindable(true)]
		public decimal Xsfphh 
		{
			get { return GetColumnValue<decimal>(Columns.Xsfphh); }
			set { SetColumnValue(Columns.Xsfphh, value); }
		}
		  
		[XmlAttribute("Xtwpks")]
		[Bindable(true)]
		public string Xtwpks 
		{
			get { return GetColumnValue<string>(Columns.Xtwpks); }
			set { SetColumnValue(Columns.Xtwpks, value); }
		}
		  
		[XmlAttribute("Xtwpml")]
		[Bindable(true)]
		public string Xtwpml 
		{
			get { return GetColumnValue<string>(Columns.Xtwpml); }
			set { SetColumnValue(Columns.Xtwpml, value); }
		}
		  
		[XmlAttribute("Xtwpcm")]
		[Bindable(true)]
		public string Xtwpcm 
		{
			get { return GetColumnValue<string>(Columns.Xtwpcm); }
			set { SetColumnValue(Columns.Xtwpcm, value); }
		}
		  
		[XmlAttribute("Xsfpsl")]
		[Bindable(true)]
		public decimal? Xsfpsl 
		{
			get { return GetColumnValue<decimal?>(Columns.Xsfpsl); }
			set { SetColumnValue(Columns.Xsfpsl, value); }
		}
		  
		[XmlAttribute("Xsfpdj")]
		[Bindable(true)]
		public decimal? Xsfpdj 
		{
			get { return GetColumnValue<decimal?>(Columns.Xsfpdj); }
			set { SetColumnValue(Columns.Xsfpdj, value); }
		}
		  
		[XmlAttribute("Xskoul")]
		[Bindable(true)]
		public decimal? Xskoul 
		{
			get { return GetColumnValue<decimal?>(Columns.Xskoul); }
			set { SetColumnValue(Columns.Xskoul, value); }
		}
		  
		[XmlAttribute("Xsfpje")]
		[Bindable(true)]
		public decimal? Xsfpje 
		{
			get { return GetColumnValue<decimal?>(Columns.Xsfpje); }
			set { SetColumnValue(Columns.Xsfpje, value); }
		}
		  
		[XmlAttribute("Xssuil")]
		[Bindable(true)]
		public decimal? Xssuil 
		{
			get { return GetColumnValue<decimal?>(Columns.Xssuil); }
			set { SetColumnValue(Columns.Xssuil, value); }
		}
		  
		[XmlAttribute("Xsfpsj")]
		[Bindable(true)]
		public decimal? Xsfpsj 
		{
			get { return GetColumnValue<decimal?>(Columns.Xsfpsj); }
			set { SetColumnValue(Columns.Xsfpsj, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varKcczlx,string varXsckck,string varXsckdh,string varXsfpbz,string varXsfphm,decimal varXsfphh,string varXtwpks,string varXtwpml,string varXtwpcm,decimal? varXsfpsl,decimal? varXsfpdj,decimal? varXskoul,decimal? varXsfpje,decimal? varXssuil,decimal? varXsfpsj)
		{
			XST07 item = new XST07();
			
			item.Kcczlx = varKcczlx;
			
			item.Xsckck = varXsckck;
			
			item.Xsckdh = varXsckdh;
			
			item.Xsfpbz = varXsfpbz;
			
			item.Xsfphm = varXsfphm;
			
			item.Xsfphh = varXsfphh;
			
			item.Xtwpks = varXtwpks;
			
			item.Xtwpml = varXtwpml;
			
			item.Xtwpcm = varXtwpcm;
			
			item.Xsfpsl = varXsfpsl;
			
			item.Xsfpdj = varXsfpdj;
			
			item.Xskoul = varXskoul;
			
			item.Xsfpje = varXsfpje;
			
			item.Xssuil = varXssuil;
			
			item.Xsfpsj = varXsfpsj;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(string varKcczlx,string varXsckck,string varXsckdh,string varXsfpbz,string varXsfphm,decimal varXsfphh,string varXtwpks,string varXtwpml,string varXtwpcm,decimal? varXsfpsl,decimal? varXsfpdj,decimal? varXskoul,decimal? varXsfpje,decimal? varXssuil,decimal? varXsfpsj)
		{
			XST07 item = new XST07();
			
				item.Kcczlx = varKcczlx;
			
				item.Xsckck = varXsckck;
			
				item.Xsckdh = varXsckdh;
			
				item.Xsfpbz = varXsfpbz;
			
				item.Xsfphm = varXsfphm;
			
				item.Xsfphh = varXsfphh;
			
				item.Xtwpks = varXtwpks;
			
				item.Xtwpml = varXtwpml;
			
				item.Xtwpcm = varXtwpcm;
			
				item.Xsfpsl = varXsfpsl;
			
				item.Xsfpdj = varXsfpdj;
			
				item.Xskoul = varXskoul;
			
				item.Xsfpje = varXsfpje;
			
				item.Xssuil = varXssuil;
			
				item.Xsfpsj = varXsfpsj;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn KcczlxColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn XsckckColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn XsckdhColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn XsfpbzColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn XsfphmColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn XsfphhColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn XtwpksColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn XtwpmlColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn XtwpcmColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn XsfpslColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn XsfpdjColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn XskoulColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn XsfpjeColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        public static TableSchema.TableColumn XssuilColumn
        {
            get { return Schema.Columns[13]; }
        }
        
        
        
        public static TableSchema.TableColumn XsfpsjColumn
        {
            get { return Schema.Columns[14]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Kcczlx = @"KCCZLX";
			 public static string Xsckck = @"XSCKCK";
			 public static string Xsckdh = @"XSCKDH";
			 public static string Xsfpbz = @"XSFPBZ";
			 public static string Xsfphm = @"XSFPHM";
			 public static string Xsfphh = @"XSFPHH";
			 public static string Xtwpks = @"XTWPKS";
			 public static string Xtwpml = @"XTWPML";
			 public static string Xtwpcm = @"XTWPCM";
			 public static string Xsfpsl = @"XSFPSL";
			 public static string Xsfpdj = @"XSFPDJ";
			 public static string Xskoul = @"XSKOUL";
			 public static string Xsfpje = @"XSFPJE";
			 public static string Xssuil = @"XSSUIL";
			 public static string Xsfpsj = @"XSFPSJ";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}

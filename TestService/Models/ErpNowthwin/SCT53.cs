using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace OracleDataDomain
{
	/// <summary>
	/// Strongly-typed collection for the SCT53 class.
	/// </summary>
    [Serializable]
	public partial class SCT53Collection : ActiveList<SCT53, SCT53Collection>
	{	   
		public SCT53Collection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>SCT53Collection</returns>
		public SCT53Collection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                SCT53 o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the SCT53 table.
	/// </summary>
	[Serializable]
	public partial class SCT53 : ActiveRecord<SCT53>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public SCT53()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public SCT53(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public SCT53(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public SCT53(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("SCT53", TableType.Table, DataService.GetInstance("ErpNowthwin"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"FYERP";
				//columns
				
				TableSchema.TableColumn colvarScggdh = new TableSchema.TableColumn(schema);
				colvarScggdh.ColumnName = "SCGGDH";
				colvarScggdh.DataType = DbType.String;
				colvarScggdh.MaxLength = 12;
				colvarScggdh.AutoIncrement = false;
				colvarScggdh.IsNullable = false;
				colvarScggdh.IsPrimaryKey = true;
				colvarScggdh.IsForeignKey = false;
				colvarScggdh.IsReadOnly = false;
				colvarScggdh.DefaultSetting = @"";
				colvarScggdh.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScggdh);
				
				TableSchema.TableColumn colvarScggxh = new TableSchema.TableColumn(schema);
				colvarScggxh.ColumnName = "SCGGXH";
				colvarScggxh.DataType = DbType.Decimal;
				colvarScggxh.MaxLength = 0;
				colvarScggxh.AutoIncrement = false;
				colvarScggxh.IsNullable = false;
				colvarScggxh.IsPrimaryKey = true;
				colvarScggxh.IsForeignKey = false;
				colvarScggxh.IsReadOnly = false;
				colvarScggxh.DefaultSetting = @"";
				colvarScggxh.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScggxh);
				
				TableSchema.TableColumn colvarXtggdm = new TableSchema.TableColumn(schema);
				colvarXtggdm.ColumnName = "XTGGDM";
				colvarXtggdm.DataType = DbType.String;
				colvarXtggdm.MaxLength = 4;
				colvarXtggdm.AutoIncrement = false;
				colvarXtggdm.IsNullable = false;
				colvarXtggdm.IsPrimaryKey = true;
				colvarXtggdm.IsForeignKey = false;
				colvarXtggdm.IsReadOnly = false;
				colvarXtggdm.DefaultSetting = @"";
				colvarXtggdm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXtggdm);
				
				TableSchema.TableColumn colvarXtggcd = new TableSchema.TableColumn(schema);
				colvarXtggcd.ColumnName = "XTGGCD";
				colvarXtggcd.DataType = DbType.Decimal;
				colvarXtggcd.MaxLength = 0;
				colvarXtggcd.AutoIncrement = false;
				colvarXtggcd.IsNullable = true;
				colvarXtggcd.IsPrimaryKey = false;
				colvarXtggcd.IsForeignKey = false;
				colvarXtggcd.IsReadOnly = false;
				colvarXtggcd.DefaultSetting = @"";
				colvarXtggcd.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXtggcd);
				
				TableSchema.TableColumn colvarXtgglf = new TableSchema.TableColumn(schema);
				colvarXtgglf.ColumnName = "XTGGLF";
				colvarXtgglf.DataType = DbType.String;
				colvarXtgglf.MaxLength = 60;
				colvarXtgglf.AutoIncrement = false;
				colvarXtgglf.IsNullable = true;
				colvarXtgglf.IsPrimaryKey = false;
				colvarXtgglf.IsForeignKey = false;
				colvarXtgglf.IsReadOnly = false;
				colvarXtgglf.DefaultSetting = @"";
				colvarXtgglf.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXtgglf);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ErpNowthwin"].AddSchema("SCT53",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Scggdh")]
		[Bindable(true)]
		public string Scggdh 
		{
			get { return GetColumnValue<string>(Columns.Scggdh); }
			set { SetColumnValue(Columns.Scggdh, value); }
		}
		  
		[XmlAttribute("Scggxh")]
		[Bindable(true)]
		public decimal Scggxh 
		{
			get { return GetColumnValue<decimal>(Columns.Scggxh); }
			set { SetColumnValue(Columns.Scggxh, value); }
		}
		  
		[XmlAttribute("Xtggdm")]
		[Bindable(true)]
		public string Xtggdm 
		{
			get { return GetColumnValue<string>(Columns.Xtggdm); }
			set { SetColumnValue(Columns.Xtggdm, value); }
		}
		  
		[XmlAttribute("Xtggcd")]
		[Bindable(true)]
		public decimal? Xtggcd 
		{
			get { return GetColumnValue<decimal?>(Columns.Xtggcd); }
			set { SetColumnValue(Columns.Xtggcd, value); }
		}
		  
		[XmlAttribute("Xtgglf")]
		[Bindable(true)]
		public string Xtgglf 
		{
			get { return GetColumnValue<string>(Columns.Xtgglf); }
			set { SetColumnValue(Columns.Xtgglf, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varScggdh,decimal varScggxh,string varXtggdm,decimal? varXtggcd,string varXtgglf)
		{
			SCT53 item = new SCT53();
			
			item.Scggdh = varScggdh;
			
			item.Scggxh = varScggxh;
			
			item.Xtggdm = varXtggdm;
			
			item.Xtggcd = varXtggcd;
			
			item.Xtgglf = varXtgglf;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(string varScggdh,decimal varScggxh,string varXtggdm,decimal? varXtggcd,string varXtgglf)
		{
			SCT53 item = new SCT53();
			
				item.Scggdh = varScggdh;
			
				item.Scggxh = varScggxh;
			
				item.Xtggdm = varXtggdm;
			
				item.Xtggcd = varXtggcd;
			
				item.Xtgglf = varXtgglf;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn ScggdhColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn ScggxhColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn XtggdmColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn XtggcdColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn XtgglfColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Scggdh = @"SCGGDH";
			 public static string Scggxh = @"SCGGXH";
			 public static string Xtggdm = @"XTGGDM";
			 public static string Xtggcd = @"XTGGCD";
			 public static string Xtgglf = @"XTGGLF";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}

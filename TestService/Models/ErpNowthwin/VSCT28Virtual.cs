using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace OracleDataDomain{
    /// <summary>
    /// Strongly-typed collection for the VSCT28Virtual class.
    /// </summary>
    [Serializable]
    public partial class VSCT28VirtualCollection : ReadOnlyList<VSCT28Virtual, VSCT28VirtualCollection>
    {        
        public VSCT28VirtualCollection() {}
    }
    /// <summary>
    /// This is  Read-only wrapper class for the V_SCT28_VIRTUAL view.
    /// </summary>
    [Serializable]
    public partial class VSCT28Virtual : ReadOnlyRecord<VSCT28Virtual>, IReadOnlyRecord
    {
    
	    #region Default Settings
	    protected static void SetSQLProps() 
	    {
		    GetTableSchema();
	    }
	    #endregion
        #region Schema Accessor
	    public static TableSchema.Table Schema
        {
            get
            {
                if (BaseSchema == null)
                {
                    SetSQLProps();
                }
                return BaseSchema;
            }
        }
    	
        private static void GetTableSchema() 
        {
            if(!IsSchemaInitialized)
            {
                //Schema declaration
                TableSchema.Table schema = new TableSchema.Table("V_SCT28_VIRTUAL", TableType.View, DataService.GetInstance("ErpNowthwin"));
                schema.Columns = new TableSchema.TableColumnCollection();
                schema.SchemaName = @"FYERP";
                //columns
                
                TableSchema.TableColumn colvarSczsbh = new TableSchema.TableColumn(schema);
                colvarSczsbh.ColumnName = "SCZSBH";
                colvarSczsbh.DataType = DbType.String;
                colvarSczsbh.MaxLength = 12;
                colvarSczsbh.AutoIncrement = false;
                colvarSczsbh.IsNullable = false;
                colvarSczsbh.IsPrimaryKey = false;
                colvarSczsbh.IsForeignKey = false;
                colvarSczsbh.IsReadOnly = false;
                
                schema.Columns.Add(colvarSczsbh);
                
                TableSchema.TableColumn colvarSchtbh = new TableSchema.TableColumn(schema);
                colvarSchtbh.ColumnName = "SCHTBH";
                colvarSchtbh.DataType = DbType.String;
                colvarSchtbh.MaxLength = 12;
                colvarSchtbh.AutoIncrement = false;
                colvarSchtbh.IsNullable = false;
                colvarSchtbh.IsPrimaryKey = false;
                colvarSchtbh.IsForeignKey = false;
                colvarSchtbh.IsReadOnly = false;
                
                schema.Columns.Add(colvarSchtbh);
                
                TableSchema.TableColumn colvarXttxhm = new TableSchema.TableColumn(schema);
                colvarXttxhm.ColumnName = "XTTXHM";
                colvarXttxhm.DataType = DbType.String;
                colvarXttxhm.MaxLength = 18;
                colvarXttxhm.AutoIncrement = false;
                colvarXttxhm.IsNullable = true;
                colvarXttxhm.IsPrimaryKey = false;
                colvarXttxhm.IsForeignKey = false;
                colvarXttxhm.IsReadOnly = false;
                
                schema.Columns.Add(colvarXttxhm);
                
                TableSchema.TableColumn colvarScyfsl = new TableSchema.TableColumn(schema);
                colvarScyfsl.ColumnName = "SCYFSL";
                colvarScyfsl.DataType = DbType.Decimal;
                colvarScyfsl.MaxLength = 0;
                colvarScyfsl.AutoIncrement = false;
                colvarScyfsl.IsNullable = true;
                colvarScyfsl.IsPrimaryKey = false;
                colvarScyfsl.IsForeignKey = false;
                colvarScyfsl.IsReadOnly = false;
                
                schema.Columns.Add(colvarScyfsl);
                
                TableSchema.TableColumn colvarScllsl = new TableSchema.TableColumn(schema);
                colvarScllsl.ColumnName = "SCLLSL";
                colvarScllsl.DataType = DbType.Decimal;
                colvarScllsl.MaxLength = 0;
                colvarScllsl.AutoIncrement = false;
                colvarScllsl.IsNullable = true;
                colvarScllsl.IsPrimaryKey = false;
                colvarScllsl.IsForeignKey = false;
                colvarScllsl.IsReadOnly = false;
                
                schema.Columns.Add(colvarScllsl);
                
                TableSchema.TableColumn colvarScxqrq = new TableSchema.TableColumn(schema);
                colvarScxqrq.ColumnName = "SCXQRQ";
                colvarScxqrq.DataType = DbType.DateTime;
                colvarScxqrq.MaxLength = 0;
                colvarScxqrq.AutoIncrement = false;
                colvarScxqrq.IsNullable = true;
                colvarScxqrq.IsPrimaryKey = false;
                colvarScxqrq.IsForeignKey = false;
                colvarScxqrq.IsReadOnly = false;
                
                schema.Columns.Add(colvarScxqrq);
                
                
                BaseSchema = schema;
                //add this schema to the provider
                //so we can query it later
                DataService.Providers["ErpNowthwin"].AddSchema("V_SCT28_VIRTUAL",schema);
            }
        }
        #endregion
        
        #region Query Accessor
	    public static Query CreateQuery()
	    {
		    return new Query(Schema);
	    }
	    #endregion
	    
	    #region .ctors
	    public VSCT28Virtual()
	    {
            SetSQLProps();
            SetDefaults();
            MarkNew();
        }
        public VSCT28Virtual(bool useDatabaseDefaults)
	    {
		    SetSQLProps();
		    if(useDatabaseDefaults)
		    {
				ForceDefaults();
			}
			MarkNew();
	    }
	    
	    public VSCT28Virtual(object keyID)
	    {
		    SetSQLProps();
		    LoadByKey(keyID);
	    }
    	 
	    public VSCT28Virtual(string columnName, object columnValue)
        {
            SetSQLProps();
            LoadByParam(columnName,columnValue);
        }
        
	    #endregion
	    
	    #region Props
	    
          
        [XmlAttribute("Sczsbh")]
        [Bindable(true)]
        public string Sczsbh 
	    {
		    get
		    {
			    return GetColumnValue<string>("SCZSBH");
		    }
            set 
		    {
			    SetColumnValue("SCZSBH", value);
            }
        }
	      
        [XmlAttribute("Schtbh")]
        [Bindable(true)]
        public string Schtbh 
	    {
		    get
		    {
			    return GetColumnValue<string>("SCHTBH");
		    }
            set 
		    {
			    SetColumnValue("SCHTBH", value);
            }
        }
	      
        [XmlAttribute("Xttxhm")]
        [Bindable(true)]
        public string Xttxhm 
	    {
		    get
		    {
			    return GetColumnValue<string>("XTTXHM");
		    }
            set 
		    {
			    SetColumnValue("XTTXHM", value);
            }
        }
	      
        [XmlAttribute("Scyfsl")]
        [Bindable(true)]
        public decimal? Scyfsl 
	    {
		    get
		    {
			    return GetColumnValue<decimal?>("SCYFSL");
		    }
            set 
		    {
			    SetColumnValue("SCYFSL", value);
            }
        }
	      
        [XmlAttribute("Scllsl")]
        [Bindable(true)]
        public decimal? Scllsl 
	    {
		    get
		    {
			    return GetColumnValue<decimal?>("SCLLSL");
		    }
            set 
		    {
			    SetColumnValue("SCLLSL", value);
            }
        }
	      
        [XmlAttribute("Scxqrq")]
        [Bindable(true)]
        public DateTime? Scxqrq 
	    {
		    get
		    {
			    return GetColumnValue<DateTime?>("SCXQRQ");
		    }
            set 
		    {
			    SetColumnValue("SCXQRQ", value);
            }
        }
	    
	    #endregion
    
	    #region Columns Struct
	    public struct Columns
	    {
		    
		    
            public static string Sczsbh = @"SCZSBH";
            
            public static string Schtbh = @"SCHTBH";
            
            public static string Xttxhm = @"XTTXHM";
            
            public static string Scyfsl = @"SCYFSL";
            
            public static string Scllsl = @"SCLLSL";
            
            public static string Scxqrq = @"SCXQRQ";
            
	    }
	    #endregion
	    
	    
	    #region IAbstractRecord Members
        public new CT GetColumnValue<CT>(string columnName) {
            return base.GetColumnValue<CT>(columnName);
        }
        public object GetColumnValue(string columnName) {
            return base.GetColumnValue<object>(columnName);
        }
        #endregion
	    
    }
}

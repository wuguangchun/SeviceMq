using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace OracleDataDomain
{
	/// <summary>
	/// Strongly-typed collection for the UfInventory class.
	/// </summary>
    [Serializable]
	public partial class UfInventoryCollection : ActiveList<UfInventory, UfInventoryCollection>
	{	   
		public UfInventoryCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>UfInventoryCollection</returns>
		public UfInventoryCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                UfInventory o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the UF_INVENTORY table.
	/// </summary>
	[Serializable]
	public partial class UfInventory : ActiveRecord<UfInventory>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public UfInventory()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public UfInventory(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public UfInventory(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public UfInventory(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("UF_INVENTORY", TableType.Table, DataService.GetInstance("ErpNowthwin"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"FYERP";
				//columns
				
				TableSchema.TableColumn colvarAutoid = new TableSchema.TableColumn(schema);
				colvarAutoid.ColumnName = "AUTOID";
				colvarAutoid.DataType = DbType.Decimal;
				colvarAutoid.MaxLength = 0;
				colvarAutoid.AutoIncrement = false;
				colvarAutoid.IsNullable = false;
				colvarAutoid.IsPrimaryKey = true;
				colvarAutoid.IsForeignKey = false;
				colvarAutoid.IsReadOnly = false;
				colvarAutoid.DefaultSetting = @"";
				colvarAutoid.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAutoid);
				
				TableSchema.TableColumn colvarCinvcode = new TableSchema.TableColumn(schema);
				colvarCinvcode.ColumnName = "CINVCODE";
				colvarCinvcode.DataType = DbType.String;
				colvarCinvcode.MaxLength = 20;
				colvarCinvcode.AutoIncrement = false;
				colvarCinvcode.IsNullable = false;
				colvarCinvcode.IsPrimaryKey = false;
				colvarCinvcode.IsForeignKey = false;
				colvarCinvcode.IsReadOnly = false;
				colvarCinvcode.DefaultSetting = @"";
				colvarCinvcode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCinvcode);
				
				TableSchema.TableColumn colvarCinvname = new TableSchema.TableColumn(schema);
				colvarCinvname.ColumnName = "CINVNAME";
				colvarCinvname.DataType = DbType.String;
				colvarCinvname.MaxLength = 100;
				colvarCinvname.AutoIncrement = false;
				colvarCinvname.IsNullable = false;
				colvarCinvname.IsPrimaryKey = false;
				colvarCinvname.IsForeignKey = false;
				colvarCinvname.IsReadOnly = false;
				colvarCinvname.DefaultSetting = @"";
				colvarCinvname.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCinvname);
				
				TableSchema.TableColumn colvarCinvstd = new TableSchema.TableColumn(schema);
				colvarCinvstd.ColumnName = "CINVSTD";
				colvarCinvstd.DataType = DbType.String;
				colvarCinvstd.MaxLength = 60;
				colvarCinvstd.AutoIncrement = false;
				colvarCinvstd.IsNullable = true;
				colvarCinvstd.IsPrimaryKey = false;
				colvarCinvstd.IsForeignKey = false;
				colvarCinvstd.IsReadOnly = false;
				colvarCinvstd.DefaultSetting = @"";
				colvarCinvstd.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCinvstd);
				
				TableSchema.TableColumn colvarCcomunitname = new TableSchema.TableColumn(schema);
				colvarCcomunitname.ColumnName = "CCOMUNITNAME";
				colvarCcomunitname.DataType = DbType.String;
				colvarCcomunitname.MaxLength = 20;
				colvarCcomunitname.AutoIncrement = false;
				colvarCcomunitname.IsNullable = false;
				colvarCcomunitname.IsPrimaryKey = false;
				colvarCcomunitname.IsForeignKey = false;
				colvarCcomunitname.IsReadOnly = false;
				colvarCcomunitname.DefaultSetting = @"";
				colvarCcomunitname.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCcomunitname);
				
				TableSchema.TableColumn colvarCinvccode = new TableSchema.TableColumn(schema);
				colvarCinvccode.ColumnName = "CINVCCODE";
				colvarCinvccode.DataType = DbType.String;
				colvarCinvccode.MaxLength = 20;
				colvarCinvccode.AutoIncrement = false;
				colvarCinvccode.IsNullable = false;
				colvarCinvccode.IsPrimaryKey = false;
				colvarCinvccode.IsForeignKey = false;
				colvarCinvccode.IsReadOnly = false;
				colvarCinvccode.DefaultSetting = @"";
				colvarCinvccode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCinvccode);
				
				TableSchema.TableColumn colvarBpurchase = new TableSchema.TableColumn(schema);
				colvarBpurchase.ColumnName = "BPURCHASE";
				colvarBpurchase.DataType = DbType.String;
				colvarBpurchase.MaxLength = 1;
				colvarBpurchase.AutoIncrement = false;
				colvarBpurchase.IsNullable = false;
				colvarBpurchase.IsPrimaryKey = false;
				colvarBpurchase.IsForeignKey = false;
				colvarBpurchase.IsReadOnly = false;
				colvarBpurchase.DefaultSetting = @"";
				colvarBpurchase.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBpurchase);
				
				TableSchema.TableColumn colvarBcomsume = new TableSchema.TableColumn(schema);
				colvarBcomsume.ColumnName = "BCOMSUME";
				colvarBcomsume.DataType = DbType.String;
				colvarBcomsume.MaxLength = 1;
				colvarBcomsume.AutoIncrement = false;
				colvarBcomsume.IsNullable = false;
				colvarBcomsume.IsPrimaryKey = false;
				colvarBcomsume.IsForeignKey = false;
				colvarBcomsume.IsReadOnly = false;
				colvarBcomsume.DefaultSetting = @"";
				colvarBcomsume.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBcomsume);
				
				TableSchema.TableColumn colvarBself = new TableSchema.TableColumn(schema);
				colvarBself.ColumnName = "BSELF";
				colvarBself.DataType = DbType.String;
				colvarBself.MaxLength = 1;
				colvarBself.AutoIncrement = false;
				colvarBself.IsNullable = false;
				colvarBself.IsPrimaryKey = false;
				colvarBself.IsForeignKey = false;
				colvarBself.IsReadOnly = false;
				colvarBself.DefaultSetting = @"";
				colvarBself.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBself);
				
				TableSchema.TableColumn colvarBsale = new TableSchema.TableColumn(schema);
				colvarBsale.ColumnName = "BSALE";
				colvarBsale.DataType = DbType.String;
				colvarBsale.MaxLength = 1;
				colvarBsale.AutoIncrement = false;
				colvarBsale.IsNullable = false;
				colvarBsale.IsPrimaryKey = false;
				colvarBsale.IsForeignKey = false;
				colvarBsale.IsReadOnly = false;
				colvarBsale.DefaultSetting = @"";
				colvarBsale.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBsale);
				
				TableSchema.TableColumn colvarOptype = new TableSchema.TableColumn(schema);
				colvarOptype.ColumnName = "OPTYPE";
				colvarOptype.DataType = DbType.String;
				colvarOptype.MaxLength = 10;
				colvarOptype.AutoIncrement = false;
				colvarOptype.IsNullable = false;
				colvarOptype.IsPrimaryKey = false;
				colvarOptype.IsForeignKey = false;
				colvarOptype.IsReadOnly = false;
				colvarOptype.DefaultSetting = @"";
				colvarOptype.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOptype);
				
				TableSchema.TableColumn colvarCreatedate = new TableSchema.TableColumn(schema);
				colvarCreatedate.ColumnName = "CREATEDATE";
				colvarCreatedate.DataType = DbType.DateTime;
				colvarCreatedate.MaxLength = 0;
				colvarCreatedate.AutoIncrement = false;
				colvarCreatedate.IsNullable = false;
				colvarCreatedate.IsPrimaryKey = false;
				colvarCreatedate.IsForeignKey = false;
				colvarCreatedate.IsReadOnly = false;
				colvarCreatedate.DefaultSetting = @"";
				colvarCreatedate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedate);
				
				TableSchema.TableColumn colvarStatus = new TableSchema.TableColumn(schema);
				colvarStatus.ColumnName = "STATUS";
				colvarStatus.DataType = DbType.Decimal;
				colvarStatus.MaxLength = 0;
				colvarStatus.AutoIncrement = false;
				colvarStatus.IsNullable = false;
				colvarStatus.IsPrimaryKey = false;
				colvarStatus.IsForeignKey = false;
				colvarStatus.IsReadOnly = false;
				colvarStatus.DefaultSetting = @"";
				colvarStatus.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStatus);
				
				TableSchema.TableColumn colvarExedate = new TableSchema.TableColumn(schema);
				colvarExedate.ColumnName = "EXEDATE";
				colvarExedate.DataType = DbType.DateTime;
				colvarExedate.MaxLength = 0;
				colvarExedate.AutoIncrement = false;
				colvarExedate.IsNullable = true;
				colvarExedate.IsPrimaryKey = false;
				colvarExedate.IsForeignKey = false;
				colvarExedate.IsReadOnly = false;
				colvarExedate.DefaultSetting = @"";
				colvarExedate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarExedate);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ErpNowthwin"].AddSchema("UF_INVENTORY",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Autoid")]
		[Bindable(true)]
		public decimal Autoid 
		{
			get { return GetColumnValue<decimal>(Columns.Autoid); }
			set { SetColumnValue(Columns.Autoid, value); }
		}
		  
		[XmlAttribute("Cinvcode")]
		[Bindable(true)]
		public string Cinvcode 
		{
			get { return GetColumnValue<string>(Columns.Cinvcode); }
			set { SetColumnValue(Columns.Cinvcode, value); }
		}
		  
		[XmlAttribute("Cinvname")]
		[Bindable(true)]
		public string Cinvname 
		{
			get { return GetColumnValue<string>(Columns.Cinvname); }
			set { SetColumnValue(Columns.Cinvname, value); }
		}
		  
		[XmlAttribute("Cinvstd")]
		[Bindable(true)]
		public string Cinvstd 
		{
			get { return GetColumnValue<string>(Columns.Cinvstd); }
			set { SetColumnValue(Columns.Cinvstd, value); }
		}
		  
		[XmlAttribute("Ccomunitname")]
		[Bindable(true)]
		public string Ccomunitname 
		{
			get { return GetColumnValue<string>(Columns.Ccomunitname); }
			set { SetColumnValue(Columns.Ccomunitname, value); }
		}
		  
		[XmlAttribute("Cinvccode")]
		[Bindable(true)]
		public string Cinvccode 
		{
			get { return GetColumnValue<string>(Columns.Cinvccode); }
			set { SetColumnValue(Columns.Cinvccode, value); }
		}
		  
		[XmlAttribute("Bpurchase")]
		[Bindable(true)]
		public string Bpurchase 
		{
			get { return GetColumnValue<string>(Columns.Bpurchase); }
			set { SetColumnValue(Columns.Bpurchase, value); }
		}
		  
		[XmlAttribute("Bcomsume")]
		[Bindable(true)]
		public string Bcomsume 
		{
			get { return GetColumnValue<string>(Columns.Bcomsume); }
			set { SetColumnValue(Columns.Bcomsume, value); }
		}
		  
		[XmlAttribute("Bself")]
		[Bindable(true)]
		public string Bself 
		{
			get { return GetColumnValue<string>(Columns.Bself); }
			set { SetColumnValue(Columns.Bself, value); }
		}
		  
		[XmlAttribute("Bsale")]
		[Bindable(true)]
		public string Bsale 
		{
			get { return GetColumnValue<string>(Columns.Bsale); }
			set { SetColumnValue(Columns.Bsale, value); }
		}
		  
		[XmlAttribute("Optype")]
		[Bindable(true)]
		public string Optype 
		{
			get { return GetColumnValue<string>(Columns.Optype); }
			set { SetColumnValue(Columns.Optype, value); }
		}
		  
		[XmlAttribute("Createdate")]
		[Bindable(true)]
		public DateTime Createdate 
		{
			get { return GetColumnValue<DateTime>(Columns.Createdate); }
			set { SetColumnValue(Columns.Createdate, value); }
		}
		  
		[XmlAttribute("Status")]
		[Bindable(true)]
		public decimal Status 
		{
			get { return GetColumnValue<decimal>(Columns.Status); }
			set { SetColumnValue(Columns.Status, value); }
		}
		  
		[XmlAttribute("Exedate")]
		[Bindable(true)]
		public DateTime? Exedate 
		{
			get { return GetColumnValue<DateTime?>(Columns.Exedate); }
			set { SetColumnValue(Columns.Exedate, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(decimal varAutoid,string varCinvcode,string varCinvname,string varCinvstd,string varCcomunitname,string varCinvccode,string varBpurchase,string varBcomsume,string varBself,string varBsale,string varOptype,DateTime varCreatedate,decimal varStatus,DateTime? varExedate)
		{
			UfInventory item = new UfInventory();
			
			item.Autoid = varAutoid;
			
			item.Cinvcode = varCinvcode;
			
			item.Cinvname = varCinvname;
			
			item.Cinvstd = varCinvstd;
			
			item.Ccomunitname = varCcomunitname;
			
			item.Cinvccode = varCinvccode;
			
			item.Bpurchase = varBpurchase;
			
			item.Bcomsume = varBcomsume;
			
			item.Bself = varBself;
			
			item.Bsale = varBsale;
			
			item.Optype = varOptype;
			
			item.Createdate = varCreatedate;
			
			item.Status = varStatus;
			
			item.Exedate = varExedate;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(decimal varAutoid,string varCinvcode,string varCinvname,string varCinvstd,string varCcomunitname,string varCinvccode,string varBpurchase,string varBcomsume,string varBself,string varBsale,string varOptype,DateTime varCreatedate,decimal varStatus,DateTime? varExedate)
		{
			UfInventory item = new UfInventory();
			
				item.Autoid = varAutoid;
			
				item.Cinvcode = varCinvcode;
			
				item.Cinvname = varCinvname;
			
				item.Cinvstd = varCinvstd;
			
				item.Ccomunitname = varCcomunitname;
			
				item.Cinvccode = varCinvccode;
			
				item.Bpurchase = varBpurchase;
			
				item.Bcomsume = varBcomsume;
			
				item.Bself = varBself;
			
				item.Bsale = varBsale;
			
				item.Optype = varOptype;
			
				item.Createdate = varCreatedate;
			
				item.Status = varStatus;
			
				item.Exedate = varExedate;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn AutoidColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn CinvcodeColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn CinvnameColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn CinvstdColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn CcomunitnameColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn CinvccodeColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn BpurchaseColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn BcomsumeColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn BselfColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn BsaleColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn OptypeColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn CreatedateColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn StatusColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        public static TableSchema.TableColumn ExedateColumn
        {
            get { return Schema.Columns[13]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Autoid = @"AUTOID";
			 public static string Cinvcode = @"CINVCODE";
			 public static string Cinvname = @"CINVNAME";
			 public static string Cinvstd = @"CINVSTD";
			 public static string Ccomunitname = @"CCOMUNITNAME";
			 public static string Cinvccode = @"CINVCCODE";
			 public static string Bpurchase = @"BPURCHASE";
			 public static string Bcomsume = @"BCOMSUME";
			 public static string Bself = @"BSELF";
			 public static string Bsale = @"BSALE";
			 public static string Optype = @"OPTYPE";
			 public static string Createdate = @"CREATEDATE";
			 public static string Status = @"STATUS";
			 public static string Exedate = @"EXEDATE";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}

using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace OracleDataDomain
{
	/// <summary>
	/// Strongly-typed collection for the SCT76 class.
	/// </summary>
    [Serializable]
	public partial class SCT76Collection : ActiveList<SCT76, SCT76Collection>
	{	   
		public SCT76Collection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>SCT76Collection</returns>
		public SCT76Collection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                SCT76 o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the SCT76 table.
	/// </summary>
	[Serializable]
	public partial class SCT76 : ActiveRecord<SCT76>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public SCT76()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public SCT76(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public SCT76(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public SCT76(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("SCT76", TableType.Table, DataService.GetInstance("ErpNowthwin"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"FYERP";
				//columns
				
				TableSchema.TableColumn colvarScgpbh = new TableSchema.TableColumn(schema);
				colvarScgpbh.ColumnName = "SCGPBH";
				colvarScgpbh.DataType = DbType.String;
				colvarScgpbh.MaxLength = 12;
				colvarScgpbh.AutoIncrement = false;
				colvarScgpbh.IsNullable = false;
				colvarScgpbh.IsPrimaryKey = true;
				colvarScgpbh.IsForeignKey = false;
				colvarScgpbh.IsReadOnly = false;
				colvarScgpbh.DefaultSetting = @"";
				colvarScgpbh.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScgpbh);
				
				TableSchema.TableColumn colvarScgyxh = new TableSchema.TableColumn(schema);
				colvarScgyxh.ColumnName = "SCGYXH";
				colvarScgyxh.DataType = DbType.Decimal;
				colvarScgyxh.MaxLength = 0;
				colvarScgyxh.AutoIncrement = false;
				colvarScgyxh.IsNullable = false;
				colvarScgyxh.IsPrimaryKey = true;
				colvarScgyxh.IsForeignKey = false;
				colvarScgyxh.IsReadOnly = false;
				colvarScgyxh.DefaultSetting = @"";
				colvarScgyxh.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScgyxh);
				
				TableSchema.TableColumn colvarXtzgdm = new TableSchema.TableColumn(schema);
				colvarXtzgdm.ColumnName = "XTZGDM";
				colvarXtzgdm.DataType = DbType.String;
				colvarXtzgdm.MaxLength = 8;
				colvarXtzgdm.AutoIncrement = false;
				colvarXtzgdm.IsNullable = true;
				colvarXtzgdm.IsPrimaryKey = false;
				colvarXtzgdm.IsForeignKey = false;
				colvarXtzgdm.IsReadOnly = false;
				colvarXtzgdm.DefaultSetting = @"";
				colvarXtzgdm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXtzgdm);
				
				TableSchema.TableColumn colvarScwgrq = new TableSchema.TableColumn(schema);
				colvarScwgrq.ColumnName = "SCWGRQ";
				colvarScwgrq.DataType = DbType.DateTime;
				colvarScwgrq.MaxLength = 0;
				colvarScwgrq.AutoIncrement = false;
				colvarScwgrq.IsNullable = true;
				colvarScwgrq.IsPrimaryKey = false;
				colvarScwgrq.IsForeignKey = false;
				colvarScwgrq.IsReadOnly = false;
				colvarScwgrq.DefaultSetting = @"";
				colvarScwgrq.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScwgrq);
				
				TableSchema.TableColumn colvarScgpsl = new TableSchema.TableColumn(schema);
				colvarScgpsl.ColumnName = "SCGPSL";
				colvarScgpsl.DataType = DbType.Decimal;
				colvarScgpsl.MaxLength = 0;
				colvarScgpsl.AutoIncrement = false;
				colvarScgpsl.IsNullable = true;
				colvarScgpsl.IsPrimaryKey = false;
				colvarScgpsl.IsForeignKey = false;
				colvarScgpsl.IsReadOnly = false;
				colvarScgpsl.DefaultSetting = @"";
				colvarScgpsl.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScgpsl);
				
				TableSchema.TableColumn colvarScwcqk = new TableSchema.TableColumn(schema);
				colvarScwcqk.ColumnName = "SCWCQK";
				colvarScwcqk.DataType = DbType.String;
				colvarScwcqk.MaxLength = 1;
				colvarScwcqk.AutoIncrement = false;
				colvarScwcqk.IsNullable = true;
				colvarScwcqk.IsPrimaryKey = false;
				colvarScwcqk.IsForeignKey = false;
				colvarScwcqk.IsReadOnly = false;
				colvarScwcqk.DefaultSetting = @"";
				colvarScwcqk.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScwcqk);
				
				TableSchema.TableColumn colvarSczsbh = new TableSchema.TableColumn(schema);
				colvarSczsbh.ColumnName = "SCZSBH";
				colvarSczsbh.DataType = DbType.String;
				colvarSczsbh.MaxLength = 12;
				colvarSczsbh.AutoIncrement = false;
				colvarSczsbh.IsNullable = true;
				colvarSczsbh.IsPrimaryKey = false;
				colvarSczsbh.IsForeignKey = false;
				colvarSczsbh.IsReadOnly = false;
				colvarSczsbh.DefaultSetting = @"";
				colvarSczsbh.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSczsbh);
				
				TableSchema.TableColumn colvarWptjxh = new TableSchema.TableColumn(schema);
				colvarWptjxh.ColumnName = "WPTJXH";
				colvarWptjxh.DataType = DbType.Decimal;
				colvarWptjxh.MaxLength = 0;
				colvarWptjxh.AutoIncrement = false;
				colvarWptjxh.IsNullable = true;
				colvarWptjxh.IsPrimaryKey = false;
				colvarWptjxh.IsForeignKey = false;
				colvarWptjxh.IsReadOnly = false;
				colvarWptjxh.DefaultSetting = @"";
				colvarWptjxh.ForeignKeyTableName = "";
				schema.Columns.Add(colvarWptjxh);
				
				TableSchema.TableColumn colvarScfddm = new TableSchema.TableColumn(schema);
				colvarScfddm.ColumnName = "SCFDDM";
				colvarScfddm.DataType = DbType.String;
				colvarScfddm.MaxLength = 6;
				colvarScfddm.AutoIncrement = false;
				colvarScfddm.IsNullable = true;
				colvarScfddm.IsPrimaryKey = false;
				colvarScfddm.IsForeignKey = false;
				colvarScfddm.IsReadOnly = false;
				colvarScfddm.DefaultSetting = @"";
				colvarScfddm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScfddm);
				
				TableSchema.TableColumn colvarXtwpdm = new TableSchema.TableColumn(schema);
				colvarXtwpdm.ColumnName = "XTWPDM";
				colvarXtwpdm.DataType = DbType.String;
				colvarXtwpdm.MaxLength = 20;
				colvarXtwpdm.AutoIncrement = false;
				colvarXtwpdm.IsNullable = true;
				colvarXtwpdm.IsPrimaryKey = false;
				colvarXtwpdm.IsForeignKey = false;
				colvarXtwpdm.IsReadOnly = false;
				colvarXtwpdm.DefaultSetting = @"";
				colvarXtwpdm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXtwpdm);
				
				TableSchema.TableColumn colvarScscdm = new TableSchema.TableColumn(schema);
				colvarScscdm.ColumnName = "SCSCDM";
				colvarScscdm.DataType = DbType.String;
				colvarScscdm.MaxLength = 10;
				colvarScscdm.AutoIncrement = false;
				colvarScscdm.IsNullable = true;
				colvarScscdm.IsPrimaryKey = false;
				colvarScscdm.IsForeignKey = false;
				colvarScscdm.IsReadOnly = false;
				colvarScscdm.DefaultSetting = @"";
				colvarScscdm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScscdm);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ErpNowthwin"].AddSchema("SCT76",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Scgpbh")]
		[Bindable(true)]
		public string Scgpbh 
		{
			get { return GetColumnValue<string>(Columns.Scgpbh); }
			set { SetColumnValue(Columns.Scgpbh, value); }
		}
		  
		[XmlAttribute("Scgyxh")]
		[Bindable(true)]
		public decimal Scgyxh 
		{
			get { return GetColumnValue<decimal>(Columns.Scgyxh); }
			set { SetColumnValue(Columns.Scgyxh, value); }
		}
		  
		[XmlAttribute("Xtzgdm")]
		[Bindable(true)]
		public string Xtzgdm 
		{
			get { return GetColumnValue<string>(Columns.Xtzgdm); }
			set { SetColumnValue(Columns.Xtzgdm, value); }
		}
		  
		[XmlAttribute("Scwgrq")]
		[Bindable(true)]
		public DateTime? Scwgrq 
		{
			get { return GetColumnValue<DateTime?>(Columns.Scwgrq); }
			set { SetColumnValue(Columns.Scwgrq, value); }
		}
		  
		[XmlAttribute("Scgpsl")]
		[Bindable(true)]
		public decimal? Scgpsl 
		{
			get { return GetColumnValue<decimal?>(Columns.Scgpsl); }
			set { SetColumnValue(Columns.Scgpsl, value); }
		}
		  
		[XmlAttribute("Scwcqk")]
		[Bindable(true)]
		public string Scwcqk 
		{
			get { return GetColumnValue<string>(Columns.Scwcqk); }
			set { SetColumnValue(Columns.Scwcqk, value); }
		}
		  
		[XmlAttribute("Sczsbh")]
		[Bindable(true)]
		public string Sczsbh 
		{
			get { return GetColumnValue<string>(Columns.Sczsbh); }
			set { SetColumnValue(Columns.Sczsbh, value); }
		}
		  
		[XmlAttribute("Wptjxh")]
		[Bindable(true)]
		public decimal? Wptjxh 
		{
			get { return GetColumnValue<decimal?>(Columns.Wptjxh); }
			set { SetColumnValue(Columns.Wptjxh, value); }
		}
		  
		[XmlAttribute("Scfddm")]
		[Bindable(true)]
		public string Scfddm 
		{
			get { return GetColumnValue<string>(Columns.Scfddm); }
			set { SetColumnValue(Columns.Scfddm, value); }
		}
		  
		[XmlAttribute("Xtwpdm")]
		[Bindable(true)]
		public string Xtwpdm 
		{
			get { return GetColumnValue<string>(Columns.Xtwpdm); }
			set { SetColumnValue(Columns.Xtwpdm, value); }
		}
		  
		[XmlAttribute("Scscdm")]
		[Bindable(true)]
		public string Scscdm 
		{
			get { return GetColumnValue<string>(Columns.Scscdm); }
			set { SetColumnValue(Columns.Scscdm, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varScgpbh,decimal varScgyxh,string varXtzgdm,DateTime? varScwgrq,decimal? varScgpsl,string varScwcqk,string varSczsbh,decimal? varWptjxh,string varScfddm,string varXtwpdm,string varScscdm)
		{
			SCT76 item = new SCT76();
			
			item.Scgpbh = varScgpbh;
			
			item.Scgyxh = varScgyxh;
			
			item.Xtzgdm = varXtzgdm;
			
			item.Scwgrq = varScwgrq;
			
			item.Scgpsl = varScgpsl;
			
			item.Scwcqk = varScwcqk;
			
			item.Sczsbh = varSczsbh;
			
			item.Wptjxh = varWptjxh;
			
			item.Scfddm = varScfddm;
			
			item.Xtwpdm = varXtwpdm;
			
			item.Scscdm = varScscdm;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(string varScgpbh,decimal varScgyxh,string varXtzgdm,DateTime? varScwgrq,decimal? varScgpsl,string varScwcqk,string varSczsbh,decimal? varWptjxh,string varScfddm,string varXtwpdm,string varScscdm)
		{
			SCT76 item = new SCT76();
			
				item.Scgpbh = varScgpbh;
			
				item.Scgyxh = varScgyxh;
			
				item.Xtzgdm = varXtzgdm;
			
				item.Scwgrq = varScwgrq;
			
				item.Scgpsl = varScgpsl;
			
				item.Scwcqk = varScwcqk;
			
				item.Sczsbh = varSczsbh;
			
				item.Wptjxh = varWptjxh;
			
				item.Scfddm = varScfddm;
			
				item.Xtwpdm = varXtwpdm;
			
				item.Scscdm = varScscdm;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn ScgpbhColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn ScgyxhColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn XtzgdmColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn ScwgrqColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn ScgpslColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn ScwcqkColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn SczsbhColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn WptjxhColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn ScfddmColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn XtwpdmColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn ScscdmColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Scgpbh = @"SCGPBH";
			 public static string Scgyxh = @"SCGYXH";
			 public static string Xtzgdm = @"XTZGDM";
			 public static string Scwgrq = @"SCWGRQ";
			 public static string Scgpsl = @"SCGPSL";
			 public static string Scwcqk = @"SCWCQK";
			 public static string Sczsbh = @"SCZSBH";
			 public static string Wptjxh = @"WPTJXH";
			 public static string Scfddm = @"SCFDDM";
			 public static string Xtwpdm = @"XTWPDM";
			 public static string Scscdm = @"SCSCDM";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}

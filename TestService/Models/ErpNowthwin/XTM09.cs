using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace OracleDataDomain
{
	/// <summary>
	/// Strongly-typed collection for the XTM09 class.
	/// </summary>
    [Serializable]
	public partial class XTM09Collection : ActiveList<XTM09, XTM09Collection>
	{	   
		public XTM09Collection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>XTM09Collection</returns>
		public XTM09Collection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                XTM09 o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the XTM09 table.
	/// </summary>
	[Serializable]
	public partial class XTM09 : ActiveRecord<XTM09>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public XTM09()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public XTM09(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public XTM09(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public XTM09(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("XTM09", TableType.Table, DataService.GetInstance("ErpNowthwin"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"FYERP";
				//columns
				
				TableSchema.TableColumn colvarXtxtlx = new TableSchema.TableColumn(schema);
				colvarXtxtlx.ColumnName = "XTXTLX";
				colvarXtxtlx.DataType = DbType.String;
				colvarXtxtlx.MaxLength = 1;
				colvarXtxtlx.AutoIncrement = false;
				colvarXtxtlx.IsNullable = false;
				colvarXtxtlx.IsPrimaryKey = true;
				colvarXtxtlx.IsForeignKey = false;
				colvarXtxtlx.IsReadOnly = false;
				colvarXtxtlx.DefaultSetting = @"";
				colvarXtxtlx.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXtxtlx);
				
				TableSchema.TableColumn colvarXtyhzm = new TableSchema.TableColumn(schema);
				colvarXtyhzm.ColumnName = "XTYHZM";
				colvarXtyhzm.DataType = DbType.String;
				colvarXtyhzm.MaxLength = 6;
				colvarXtyhzm.AutoIncrement = false;
				colvarXtyhzm.IsNullable = false;
				colvarXtyhzm.IsPrimaryKey = true;
				colvarXtyhzm.IsForeignKey = false;
				colvarXtyhzm.IsReadOnly = false;
				colvarXtyhzm.DefaultSetting = @"";
				colvarXtyhzm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXtyhzm);
				
				TableSchema.TableColumn colvarXtzmmc = new TableSchema.TableColumn(schema);
				colvarXtzmmc.ColumnName = "XTZMMC";
				colvarXtzmmc.DataType = DbType.String;
				colvarXtzmmc.MaxLength = 20;
				colvarXtzmmc.AutoIncrement = false;
				colvarXtzmmc.IsNullable = true;
				colvarXtzmmc.IsPrimaryKey = false;
				colvarXtzmmc.IsForeignKey = false;
				colvarXtzmmc.IsReadOnly = false;
				colvarXtzmmc.DefaultSetting = @"";
				colvarXtzmmc.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXtzmmc);
				
				TableSchema.TableColumn colvarXtzmms = new TableSchema.TableColumn(schema);
				colvarXtzmms.ColumnName = "XTZMMS";
				colvarXtzmms.DataType = DbType.String;
				colvarXtzmms.MaxLength = 100;
				colvarXtzmms.AutoIncrement = false;
				colvarXtzmms.IsNullable = true;
				colvarXtzmms.IsPrimaryKey = false;
				colvarXtzmms.IsForeignKey = false;
				colvarXtzmms.IsReadOnly = false;
				colvarXtzmms.DefaultSetting = @"";
				colvarXtzmms.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXtzmms);
				
				TableSchema.TableColumn colvarXtcjbz = new TableSchema.TableColumn(schema);
				colvarXtcjbz.ColumnName = "XTCJBZ";
				colvarXtcjbz.DataType = DbType.String;
				colvarXtcjbz.MaxLength = 1;
				colvarXtcjbz.AutoIncrement = false;
				colvarXtcjbz.IsNullable = true;
				colvarXtcjbz.IsPrimaryKey = false;
				colvarXtcjbz.IsForeignKey = false;
				colvarXtcjbz.IsReadOnly = false;
				colvarXtcjbz.DefaultSetting = @"";
				colvarXtcjbz.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXtcjbz);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ErpNowthwin"].AddSchema("XTM09",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Xtxtlx")]
		[Bindable(true)]
		public string Xtxtlx 
		{
			get { return GetColumnValue<string>(Columns.Xtxtlx); }
			set { SetColumnValue(Columns.Xtxtlx, value); }
		}
		  
		[XmlAttribute("Xtyhzm")]
		[Bindable(true)]
		public string Xtyhzm 
		{
			get { return GetColumnValue<string>(Columns.Xtyhzm); }
			set { SetColumnValue(Columns.Xtyhzm, value); }
		}
		  
		[XmlAttribute("Xtzmmc")]
		[Bindable(true)]
		public string Xtzmmc 
		{
			get { return GetColumnValue<string>(Columns.Xtzmmc); }
			set { SetColumnValue(Columns.Xtzmmc, value); }
		}
		  
		[XmlAttribute("Xtzmms")]
		[Bindable(true)]
		public string Xtzmms 
		{
			get { return GetColumnValue<string>(Columns.Xtzmms); }
			set { SetColumnValue(Columns.Xtzmms, value); }
		}
		  
		[XmlAttribute("Xtcjbz")]
		[Bindable(true)]
		public string Xtcjbz 
		{
			get { return GetColumnValue<string>(Columns.Xtcjbz); }
			set { SetColumnValue(Columns.Xtcjbz, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varXtxtlx,string varXtyhzm,string varXtzmmc,string varXtzmms,string varXtcjbz)
		{
			XTM09 item = new XTM09();
			
			item.Xtxtlx = varXtxtlx;
			
			item.Xtyhzm = varXtyhzm;
			
			item.Xtzmmc = varXtzmmc;
			
			item.Xtzmms = varXtzmms;
			
			item.Xtcjbz = varXtcjbz;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(string varXtxtlx,string varXtyhzm,string varXtzmmc,string varXtzmms,string varXtcjbz)
		{
			XTM09 item = new XTM09();
			
				item.Xtxtlx = varXtxtlx;
			
				item.Xtyhzm = varXtyhzm;
			
				item.Xtzmmc = varXtzmmc;
			
				item.Xtzmms = varXtzmms;
			
				item.Xtcjbz = varXtcjbz;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn XtxtlxColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn XtyhzmColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn XtzmmcColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn XtzmmsColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn XtcjbzColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Xtxtlx = @"XTXTLX";
			 public static string Xtyhzm = @"XTYHZM";
			 public static string Xtzmmc = @"XTZMMC";
			 public static string Xtzmms = @"XTZMMS";
			 public static string Xtcjbz = @"XTCJBZ";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}

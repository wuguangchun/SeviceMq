using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace OracleDataDomain{
    /// <summary>
    /// Strongly-typed collection for the VKCT04 class.
    /// </summary>
    [Serializable]
    public partial class VKCT04Collection : ReadOnlyList<VKCT04, VKCT04Collection>
    {        
        public VKCT04Collection() {}
    }
    /// <summary>
    /// This is  Read-only wrapper class for the V_KCT04 view.
    /// </summary>
    [Serializable]
    public partial class VKCT04 : ReadOnlyRecord<VKCT04>, IReadOnlyRecord
    {
    
	    #region Default Settings
	    protected static void SetSQLProps() 
	    {
		    GetTableSchema();
	    }
	    #endregion
        #region Schema Accessor
	    public static TableSchema.Table Schema
        {
            get
            {
                if (BaseSchema == null)
                {
                    SetSQLProps();
                }
                return BaseSchema;
            }
        }
    	
        private static void GetTableSchema() 
        {
            if(!IsSchemaInitialized)
            {
                //Schema declaration
                TableSchema.Table schema = new TableSchema.Table("V_KCT04", TableType.View, DataService.GetInstance("ErpNowthwin"));
                schema.Columns = new TableSchema.TableColumnCollection();
                schema.SchemaName = @"FYERP";
                //columns
                
                TableSchema.TableColumn colvarXtwpdm = new TableSchema.TableColumn(schema);
                colvarXtwpdm.ColumnName = "XTWPDM";
                colvarXtwpdm.DataType = DbType.String;
                colvarXtwpdm.MaxLength = 20;
                colvarXtwpdm.AutoIncrement = false;
                colvarXtwpdm.IsNullable = true;
                colvarXtwpdm.IsPrimaryKey = false;
                colvarXtwpdm.IsForeignKey = false;
                colvarXtwpdm.IsReadOnly = false;
                
                schema.Columns.Add(colvarXtwpdm);
                
                TableSchema.TableColumn colvarKcckdm = new TableSchema.TableColumn(schema);
                colvarKcckdm.ColumnName = "KCCKDM";
                colvarKcckdm.DataType = DbType.String;
                colvarKcckdm.MaxLength = 8;
                colvarKcckdm.AutoIncrement = false;
                colvarKcckdm.IsNullable = true;
                colvarKcckdm.IsPrimaryKey = false;
                colvarKcckdm.IsForeignKey = false;
                colvarKcckdm.IsReadOnly = false;
                
                schema.Columns.Add(colvarKcckdm);
                
                TableSchema.TableColumn colvarKczksl = new TableSchema.TableColumn(schema);
                colvarKczksl.ColumnName = "KCZKSL";
                colvarKczksl.DataType = DbType.Decimal;
                colvarKczksl.MaxLength = 0;
                colvarKczksl.AutoIncrement = false;
                colvarKczksl.IsNullable = true;
                colvarKczksl.IsPrimaryKey = false;
                colvarKczksl.IsForeignKey = false;
                colvarKczksl.IsReadOnly = false;
                
                schema.Columns.Add(colvarKczksl);
                
                TableSchema.TableColumn colvarXsphsl = new TableSchema.TableColumn(schema);
                colvarXsphsl.ColumnName = "XSPHSL";
                colvarXsphsl.DataType = DbType.Decimal;
                colvarXsphsl.MaxLength = 0;
                colvarXsphsl.AutoIncrement = false;
                colvarXsphsl.IsNullable = true;
                colvarXsphsl.IsPrimaryKey = false;
                colvarXsphsl.IsForeignKey = false;
                colvarXsphsl.IsReadOnly = false;
                
                schema.Columns.Add(colvarXsphsl);
                
                
                BaseSchema = schema;
                //add this schema to the provider
                //so we can query it later
                DataService.Providers["ErpNowthwin"].AddSchema("V_KCT04",schema);
            }
        }
        #endregion
        
        #region Query Accessor
	    public static Query CreateQuery()
	    {
		    return new Query(Schema);
	    }
	    #endregion
	    
	    #region .ctors
	    public VKCT04()
	    {
            SetSQLProps();
            SetDefaults();
            MarkNew();
        }
        public VKCT04(bool useDatabaseDefaults)
	    {
		    SetSQLProps();
		    if(useDatabaseDefaults)
		    {
				ForceDefaults();
			}
			MarkNew();
	    }
	    
	    public VKCT04(object keyID)
	    {
		    SetSQLProps();
		    LoadByKey(keyID);
	    }
    	 
	    public VKCT04(string columnName, object columnValue)
        {
            SetSQLProps();
            LoadByParam(columnName,columnValue);
        }
        
	    #endregion
	    
	    #region Props
	    
          
        [XmlAttribute("Xtwpdm")]
        [Bindable(true)]
        public string Xtwpdm 
	    {
		    get
		    {
			    return GetColumnValue<string>("XTWPDM");
		    }
            set 
		    {
			    SetColumnValue("XTWPDM", value);
            }
        }
	      
        [XmlAttribute("Kcckdm")]
        [Bindable(true)]
        public string Kcckdm 
	    {
		    get
		    {
			    return GetColumnValue<string>("KCCKDM");
		    }
            set 
		    {
			    SetColumnValue("KCCKDM", value);
            }
        }
	      
        [XmlAttribute("Kczksl")]
        [Bindable(true)]
        public decimal? Kczksl 
	    {
		    get
		    {
			    return GetColumnValue<decimal?>("KCZKSL");
		    }
            set 
		    {
			    SetColumnValue("KCZKSL", value);
            }
        }
	      
        [XmlAttribute("Xsphsl")]
        [Bindable(true)]
        public decimal? Xsphsl 
	    {
		    get
		    {
			    return GetColumnValue<decimal?>("XSPHSL");
		    }
            set 
		    {
			    SetColumnValue("XSPHSL", value);
            }
        }
	    
	    #endregion
    
	    #region Columns Struct
	    public struct Columns
	    {
		    
		    
            public static string Xtwpdm = @"XTWPDM";
            
            public static string Kcckdm = @"KCCKDM";
            
            public static string Kczksl = @"KCZKSL";
            
            public static string Xsphsl = @"XSPHSL";
            
	    }
	    #endregion
	    
	    
	    #region IAbstractRecord Members
        public new CT GetColumnValue<CT>(string columnName) {
            return base.GetColumnValue<CT>(columnName);
        }
        public object GetColumnValue(string columnName) {
            return base.GetColumnValue<object>(columnName);
        }
        #endregion
	    
    }
}

using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace OracleDataDomain
{
	/// <summary>
	/// Strongly-typed collection for the XSM09 class.
	/// </summary>
    [Serializable]
	public partial class XSM09Collection : ActiveList<XSM09, XSM09Collection>
	{	   
		public XSM09Collection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>XSM09Collection</returns>
		public XSM09Collection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                XSM09 o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the XSM09 table.
	/// </summary>
	[Serializable]
	public partial class XSM09 : ActiveRecord<XSM09>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public XSM09()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public XSM09(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public XSM09(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public XSM09(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("XSM09", TableType.Table, DataService.GetInstance("ErpNowthwin"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"FYERP";
				//columns
				
				TableSchema.TableColumn colvarXsjsfs = new TableSchema.TableColumn(schema);
				colvarXsjsfs.ColumnName = "XSJSFS";
				colvarXsjsfs.DataType = DbType.String;
				colvarXsjsfs.MaxLength = 2;
				colvarXsjsfs.AutoIncrement = false;
				colvarXsjsfs.IsNullable = false;
				colvarXsjsfs.IsPrimaryKey = true;
				colvarXsjsfs.IsForeignKey = false;
				colvarXsjsfs.IsReadOnly = false;
				colvarXsjsfs.DefaultSetting = @"";
				colvarXsjsfs.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXsjsfs);
				
				TableSchema.TableColumn colvarXsjssm = new TableSchema.TableColumn(schema);
				colvarXsjssm.ColumnName = "XSJSSM";
				colvarXsjssm.DataType = DbType.String;
				colvarXsjssm.MaxLength = 20;
				colvarXsjssm.AutoIncrement = false;
				colvarXsjssm.IsNullable = true;
				colvarXsjssm.IsPrimaryKey = false;
				colvarXsjssm.IsForeignKey = false;
				colvarXsjssm.IsReadOnly = false;
				colvarXsjssm.DefaultSetting = @"";
				colvarXsjssm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXsjssm);
				
				TableSchema.TableColumn colvarXsjslx = new TableSchema.TableColumn(schema);
				colvarXsjslx.ColumnName = "XSJSLX";
				colvarXsjslx.DataType = DbType.String;
				colvarXsjslx.MaxLength = 1;
				colvarXsjslx.AutoIncrement = false;
				colvarXsjslx.IsNullable = true;
				colvarXsjslx.IsPrimaryKey = false;
				colvarXsjslx.IsForeignKey = false;
				colvarXsjslx.IsReadOnly = false;
				colvarXsjslx.DefaultSetting = @"";
				colvarXsjslx.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXsjslx);
				
				TableSchema.TableColumn colvarXssyyt = new TableSchema.TableColumn(schema);
				colvarXssyyt.ColumnName = "XSSYYT";
				colvarXssyyt.DataType = DbType.String;
				colvarXssyyt.MaxLength = 1;
				colvarXssyyt.AutoIncrement = false;
				colvarXssyyt.IsNullable = true;
				colvarXssyyt.IsPrimaryKey = false;
				colvarXssyyt.IsForeignKey = false;
				colvarXssyyt.IsReadOnly = false;
				colvarXssyyt.DefaultSetting = @"";
				colvarXssyyt.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXssyyt);
				
				TableSchema.TableColumn colvarXsdjyt = new TableSchema.TableColumn(schema);
				colvarXsdjyt.ColumnName = "XSDJYT";
				colvarXsdjyt.DataType = DbType.String;
				colvarXsdjyt.MaxLength = 1;
				colvarXsdjyt.AutoIncrement = false;
				colvarXsdjyt.IsNullable = true;
				colvarXsdjyt.IsPrimaryKey = false;
				colvarXsdjyt.IsForeignKey = false;
				colvarXsdjyt.IsReadOnly = false;
				colvarXsdjyt.DefaultSetting = @"";
				colvarXsdjyt.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXsdjyt);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ErpNowthwin"].AddSchema("XSM09",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Xsjsfs")]
		[Bindable(true)]
		public string Xsjsfs 
		{
			get { return GetColumnValue<string>(Columns.Xsjsfs); }
			set { SetColumnValue(Columns.Xsjsfs, value); }
		}
		  
		[XmlAttribute("Xsjssm")]
		[Bindable(true)]
		public string Xsjssm 
		{
			get { return GetColumnValue<string>(Columns.Xsjssm); }
			set { SetColumnValue(Columns.Xsjssm, value); }
		}
		  
		[XmlAttribute("Xsjslx")]
		[Bindable(true)]
		public string Xsjslx 
		{
			get { return GetColumnValue<string>(Columns.Xsjslx); }
			set { SetColumnValue(Columns.Xsjslx, value); }
		}
		  
		[XmlAttribute("Xssyyt")]
		[Bindable(true)]
		public string Xssyyt 
		{
			get { return GetColumnValue<string>(Columns.Xssyyt); }
			set { SetColumnValue(Columns.Xssyyt, value); }
		}
		  
		[XmlAttribute("Xsdjyt")]
		[Bindable(true)]
		public string Xsdjyt 
		{
			get { return GetColumnValue<string>(Columns.Xsdjyt); }
			set { SetColumnValue(Columns.Xsdjyt, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varXsjsfs,string varXsjssm,string varXsjslx,string varXssyyt,string varXsdjyt)
		{
			XSM09 item = new XSM09();
			
			item.Xsjsfs = varXsjsfs;
			
			item.Xsjssm = varXsjssm;
			
			item.Xsjslx = varXsjslx;
			
			item.Xssyyt = varXssyyt;
			
			item.Xsdjyt = varXsdjyt;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(string varXsjsfs,string varXsjssm,string varXsjslx,string varXssyyt,string varXsdjyt)
		{
			XSM09 item = new XSM09();
			
				item.Xsjsfs = varXsjsfs;
			
				item.Xsjssm = varXsjssm;
			
				item.Xsjslx = varXsjslx;
			
				item.Xssyyt = varXssyyt;
			
				item.Xsdjyt = varXsdjyt;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn XsjsfsColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn XsjssmColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn XsjslxColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn XssyytColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn XsdjytColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Xsjsfs = @"XSJSFS";
			 public static string Xsjssm = @"XSJSSM";
			 public static string Xsjslx = @"XSJSLX";
			 public static string Xssyyt = @"XSSYYT";
			 public static string Xsdjyt = @"XSDJYT";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}

using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace OracleDataDomain
{
	/// <summary>
	/// Strongly-typed collection for the ZYT02 class.
	/// </summary>
    [Serializable]
	public partial class ZYT02Collection : ActiveList<ZYT02, ZYT02Collection>
	{	   
		public ZYT02Collection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>ZYT02Collection</returns>
		public ZYT02Collection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                ZYT02 o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the ZYT02 table.
	/// </summary>
	[Serializable]
	public partial class ZYT02 : ActiveRecord<ZYT02>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public ZYT02()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public ZYT02(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public ZYT02(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public ZYT02(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("ZYT02", TableType.Table, DataService.GetInstance("ErpNowthwin"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"FYERP";
				//columns
				
				TableSchema.TableColumn colvarSchtbh = new TableSchema.TableColumn(schema);
				colvarSchtbh.ColumnName = "SCHTBH";
				colvarSchtbh.DataType = DbType.String;
				colvarSchtbh.MaxLength = 12;
				colvarSchtbh.AutoIncrement = false;
				colvarSchtbh.IsNullable = true;
				colvarSchtbh.IsPrimaryKey = false;
				colvarSchtbh.IsForeignKey = false;
				colvarSchtbh.IsReadOnly = false;
				colvarSchtbh.DefaultSetting = @"";
				colvarSchtbh.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSchtbh);
				
				TableSchema.TableColumn colvarScyspd = new TableSchema.TableColumn(schema);
				colvarScyspd.ColumnName = "SCYSPD";
				colvarScyspd.DataType = DbType.String;
				colvarScyspd.MaxLength = 14;
				colvarScyspd.AutoIncrement = false;
				colvarScyspd.IsNullable = true;
				colvarScyspd.IsPrimaryKey = false;
				colvarScyspd.IsForeignKey = false;
				colvarScyspd.IsReadOnly = false;
				colvarScyspd.DefaultSetting = @"";
				colvarScyspd.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScyspd);
				
				TableSchema.TableColumn colvarXtczxh = new TableSchema.TableColumn(schema);
				colvarXtczxh.ColumnName = "XTCZXH";
				colvarXtczxh.DataType = DbType.Decimal;
				colvarXtczxh.MaxLength = 0;
				colvarXtczxh.AutoIncrement = false;
				colvarXtczxh.IsNullable = false;
				colvarXtczxh.IsPrimaryKey = true;
				colvarXtczxh.IsForeignKey = false;
				colvarXtczxh.IsReadOnly = false;
				colvarXtczxh.DefaultSetting = @"";
				colvarXtczxh.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXtczxh);
				
				TableSchema.TableColumn colvarXtlybz = new TableSchema.TableColumn(schema);
				colvarXtlybz.ColumnName = "XTLYBZ";
				colvarXtlybz.DataType = DbType.String;
				colvarXtlybz.MaxLength = 1;
				colvarXtlybz.AutoIncrement = false;
				colvarXtlybz.IsNullable = true;
				colvarXtlybz.IsPrimaryKey = false;
				colvarXtlybz.IsForeignKey = false;
				colvarXtlybz.IsReadOnly = false;
				colvarXtlybz.DefaultSetting = @"";
				colvarXtlybz.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXtlybz);
				
				TableSchema.TableColumn colvarXtyhdm = new TableSchema.TableColumn(schema);
				colvarXtyhdm.ColumnName = "XTYHDM";
				colvarXtyhdm.DataType = DbType.String;
				colvarXtyhdm.MaxLength = 100;
				colvarXtyhdm.AutoIncrement = false;
				colvarXtyhdm.IsNullable = true;
				colvarXtyhdm.IsPrimaryKey = false;
				colvarXtyhdm.IsForeignKey = false;
				colvarXtyhdm.IsReadOnly = false;
				colvarXtyhdm.DefaultSetting = @"";
				colvarXtyhdm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXtyhdm);
				
				TableSchema.TableColumn colvarXttxhm = new TableSchema.TableColumn(schema);
				colvarXttxhm.ColumnName = "XTTXHM";
				colvarXttxhm.DataType = DbType.String;
				colvarXttxhm.MaxLength = 20;
				colvarXttxhm.AutoIncrement = false;
				colvarXttxhm.IsNullable = true;
				colvarXttxhm.IsPrimaryKey = false;
				colvarXttxhm.IsForeignKey = false;
				colvarXttxhm.IsReadOnly = false;
				colvarXttxhm.DefaultSetting = @"";
				colvarXttxhm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXttxhm);
				
				TableSchema.TableColumn colvarXtjldw = new TableSchema.TableColumn(schema);
				colvarXtjldw.ColumnName = "XTJLDW";
				colvarXtjldw.DataType = DbType.String;
				colvarXtjldw.MaxLength = 5;
				colvarXtjldw.AutoIncrement = false;
				colvarXtjldw.IsNullable = true;
				colvarXtjldw.IsPrimaryKey = false;
				colvarXtjldw.IsForeignKey = false;
				colvarXtjldw.IsReadOnly = false;
				colvarXtjldw.DefaultSetting = @"";
				colvarXtjldw.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXtjldw);
				
				TableSchema.TableColumn colvarXtzysl = new TableSchema.TableColumn(schema);
				colvarXtzysl.ColumnName = "XTZYSL";
				colvarXtzysl.DataType = DbType.Decimal;
				colvarXtzysl.MaxLength = 0;
				colvarXtzysl.AutoIncrement = false;
				colvarXtzysl.IsNullable = true;
				colvarXtzysl.IsPrimaryKey = false;
				colvarXtzysl.IsForeignKey = false;
				colvarXtzysl.IsReadOnly = false;
				colvarXtzysl.DefaultSetting = @"";
				colvarXtzysl.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXtzysl);
				
				TableSchema.TableColumn colvarXtcxsl = new TableSchema.TableColumn(schema);
				colvarXtcxsl.ColumnName = "XTCXSL";
				colvarXtcxsl.DataType = DbType.Decimal;
				colvarXtcxsl.MaxLength = 0;
				colvarXtcxsl.AutoIncrement = false;
				colvarXtcxsl.IsNullable = true;
				colvarXtcxsl.IsPrimaryKey = false;
				colvarXtcxsl.IsForeignKey = false;
				colvarXtcxsl.IsReadOnly = false;
				colvarXtcxsl.DefaultSetting = @"";
				colvarXtcxsl.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXtcxsl);
				
				TableSchema.TableColumn colvarXtzysj = new TableSchema.TableColumn(schema);
				colvarXtzysj.ColumnName = "XTZYSJ";
				colvarXtzysj.DataType = DbType.String;
				colvarXtzysj.MaxLength = 20;
				colvarXtzysj.AutoIncrement = false;
				colvarXtzysj.IsNullable = true;
				colvarXtzysj.IsPrimaryKey = false;
				colvarXtzysj.IsForeignKey = false;
				colvarXtzysj.IsReadOnly = false;
				colvarXtzysj.DefaultSetting = @"";
				colvarXtzysj.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXtzysj);
				
				TableSchema.TableColumn colvarXtsfsj = new TableSchema.TableColumn(schema);
				colvarXtsfsj.ColumnName = "XTSFSJ";
				colvarXtsfsj.DataType = DbType.String;
				colvarXtsfsj.MaxLength = 20;
				colvarXtsfsj.AutoIncrement = false;
				colvarXtsfsj.IsNullable = true;
				colvarXtsfsj.IsPrimaryKey = false;
				colvarXtsfsj.IsForeignKey = false;
				colvarXtsfsj.IsReadOnly = false;
				colvarXtsfsj.DefaultSetting = @"";
				colvarXtsfsj.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXtsfsj);
				
				TableSchema.TableColumn colvarXtxxzt = new TableSchema.TableColumn(schema);
				colvarXtxxzt.ColumnName = "XTXXZT";
				colvarXtxxzt.DataType = DbType.String;
				colvarXtxxzt.MaxLength = 1;
				colvarXtxxzt.AutoIncrement = false;
				colvarXtxxzt.IsNullable = true;
				colvarXtxxzt.IsPrimaryKey = false;
				colvarXtxxzt.IsForeignKey = false;
				colvarXtxxzt.IsReadOnly = false;
				colvarXtxxzt.DefaultSetting = @"";
				colvarXtxxzt.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXtxxzt);
				
				TableSchema.TableColumn colvarXtzybz = new TableSchema.TableColumn(schema);
				colvarXtzybz.ColumnName = "XTZYBZ";
				colvarXtzybz.DataType = DbType.String;
				colvarXtzybz.MaxLength = 255;
				colvarXtzybz.AutoIncrement = false;
				colvarXtzybz.IsNullable = true;
				colvarXtzybz.IsPrimaryKey = false;
				colvarXtzybz.IsForeignKey = false;
				colvarXtzybz.IsReadOnly = false;
				colvarXtzybz.DefaultSetting = @"";
				colvarXtzybz.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXtzybz);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ErpNowthwin"].AddSchema("ZYT02",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Schtbh")]
		[Bindable(true)]
		public string Schtbh 
		{
			get { return GetColumnValue<string>(Columns.Schtbh); }
			set { SetColumnValue(Columns.Schtbh, value); }
		}
		  
		[XmlAttribute("Scyspd")]
		[Bindable(true)]
		public string Scyspd 
		{
			get { return GetColumnValue<string>(Columns.Scyspd); }
			set { SetColumnValue(Columns.Scyspd, value); }
		}
		  
		[XmlAttribute("Xtczxh")]
		[Bindable(true)]
		public decimal Xtczxh 
		{
			get { return GetColumnValue<decimal>(Columns.Xtczxh); }
			set { SetColumnValue(Columns.Xtczxh, value); }
		}
		  
		[XmlAttribute("Xtlybz")]
		[Bindable(true)]
		public string Xtlybz 
		{
			get { return GetColumnValue<string>(Columns.Xtlybz); }
			set { SetColumnValue(Columns.Xtlybz, value); }
		}
		  
		[XmlAttribute("Xtyhdm")]
		[Bindable(true)]
		public string Xtyhdm 
		{
			get { return GetColumnValue<string>(Columns.Xtyhdm); }
			set { SetColumnValue(Columns.Xtyhdm, value); }
		}
		  
		[XmlAttribute("Xttxhm")]
		[Bindable(true)]
		public string Xttxhm 
		{
			get { return GetColumnValue<string>(Columns.Xttxhm); }
			set { SetColumnValue(Columns.Xttxhm, value); }
		}
		  
		[XmlAttribute("Xtjldw")]
		[Bindable(true)]
		public string Xtjldw 
		{
			get { return GetColumnValue<string>(Columns.Xtjldw); }
			set { SetColumnValue(Columns.Xtjldw, value); }
		}
		  
		[XmlAttribute("Xtzysl")]
		[Bindable(true)]
		public decimal? Xtzysl 
		{
			get { return GetColumnValue<decimal?>(Columns.Xtzysl); }
			set { SetColumnValue(Columns.Xtzysl, value); }
		}
		  
		[XmlAttribute("Xtcxsl")]
		[Bindable(true)]
		public decimal? Xtcxsl 
		{
			get { return GetColumnValue<decimal?>(Columns.Xtcxsl); }
			set { SetColumnValue(Columns.Xtcxsl, value); }
		}
		  
		[XmlAttribute("Xtzysj")]
		[Bindable(true)]
		public string Xtzysj 
		{
			get { return GetColumnValue<string>(Columns.Xtzysj); }
			set { SetColumnValue(Columns.Xtzysj, value); }
		}
		  
		[XmlAttribute("Xtsfsj")]
		[Bindable(true)]
		public string Xtsfsj 
		{
			get { return GetColumnValue<string>(Columns.Xtsfsj); }
			set { SetColumnValue(Columns.Xtsfsj, value); }
		}
		  
		[XmlAttribute("Xtxxzt")]
		[Bindable(true)]
		public string Xtxxzt 
		{
			get { return GetColumnValue<string>(Columns.Xtxxzt); }
			set { SetColumnValue(Columns.Xtxxzt, value); }
		}
		  
		[XmlAttribute("Xtzybz")]
		[Bindable(true)]
		public string Xtzybz 
		{
			get { return GetColumnValue<string>(Columns.Xtzybz); }
			set { SetColumnValue(Columns.Xtzybz, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varSchtbh,string varScyspd,decimal varXtczxh,string varXtlybz,string varXtyhdm,string varXttxhm,string varXtjldw,decimal? varXtzysl,decimal? varXtcxsl,string varXtzysj,string varXtsfsj,string varXtxxzt,string varXtzybz)
		{
			ZYT02 item = new ZYT02();
			
			item.Schtbh = varSchtbh;
			
			item.Scyspd = varScyspd;
			
			item.Xtczxh = varXtczxh;
			
			item.Xtlybz = varXtlybz;
			
			item.Xtyhdm = varXtyhdm;
			
			item.Xttxhm = varXttxhm;
			
			item.Xtjldw = varXtjldw;
			
			item.Xtzysl = varXtzysl;
			
			item.Xtcxsl = varXtcxsl;
			
			item.Xtzysj = varXtzysj;
			
			item.Xtsfsj = varXtsfsj;
			
			item.Xtxxzt = varXtxxzt;
			
			item.Xtzybz = varXtzybz;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(string varSchtbh,string varScyspd,decimal varXtczxh,string varXtlybz,string varXtyhdm,string varXttxhm,string varXtjldw,decimal? varXtzysl,decimal? varXtcxsl,string varXtzysj,string varXtsfsj,string varXtxxzt,string varXtzybz)
		{
			ZYT02 item = new ZYT02();
			
				item.Schtbh = varSchtbh;
			
				item.Scyspd = varScyspd;
			
				item.Xtczxh = varXtczxh;
			
				item.Xtlybz = varXtlybz;
			
				item.Xtyhdm = varXtyhdm;
			
				item.Xttxhm = varXttxhm;
			
				item.Xtjldw = varXtjldw;
			
				item.Xtzysl = varXtzysl;
			
				item.Xtcxsl = varXtcxsl;
			
				item.Xtzysj = varXtzysj;
			
				item.Xtsfsj = varXtsfsj;
			
				item.Xtxxzt = varXtxxzt;
			
				item.Xtzybz = varXtzybz;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn SchtbhColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn ScyspdColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn XtczxhColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn XtlybzColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn XtyhdmColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn XttxhmColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn XtjldwColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn XtzyslColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn XtcxslColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn XtzysjColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn XtsfsjColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn XtxxztColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn XtzybzColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Schtbh = @"SCHTBH";
			 public static string Scyspd = @"SCYSPD";
			 public static string Xtczxh = @"XTCZXH";
			 public static string Xtlybz = @"XTLYBZ";
			 public static string Xtyhdm = @"XTYHDM";
			 public static string Xttxhm = @"XTTXHM";
			 public static string Xtjldw = @"XTJLDW";
			 public static string Xtzysl = @"XTZYSL";
			 public static string Xtcxsl = @"XTCXSL";
			 public static string Xtzysj = @"XTZYSJ";
			 public static string Xtsfsj = @"XTSFSJ";
			 public static string Xtxxzt = @"XTXXZT";
			 public static string Xtzybz = @"XTZYBZ";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}

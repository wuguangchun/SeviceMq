using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace OracleDataDomain
{
	/// <summary>
	/// Strongly-typed collection for the XST01 class.
	/// </summary>
    [Serializable]
	public partial class XST01Collection : ActiveList<XST01, XST01Collection>
	{	   
		public XST01Collection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>XST01Collection</returns>
		public XST01Collection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                XST01 o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the XST01 table.
	/// </summary>
	[Serializable]
	public partial class XST01 : ActiveRecord<XST01>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public XST01()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public XST01(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public XST01(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public XST01(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("XST01", TableType.Table, DataService.GetInstance("ErpNowthwin"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"FYERP";
				//columns
				
				TableSchema.TableColumn colvarXtdhhl = new TableSchema.TableColumn(schema);
				colvarXtdhhl.ColumnName = "XTDHHL";
				colvarXtdhhl.DataType = DbType.Decimal;
				colvarXtdhhl.MaxLength = 0;
				colvarXtdhhl.AutoIncrement = false;
				colvarXtdhhl.IsNullable = true;
				colvarXtdhhl.IsPrimaryKey = false;
				colvarXtdhhl.IsForeignKey = false;
				colvarXtdhhl.IsReadOnly = false;
				colvarXtdhhl.DefaultSetting = @"";
				colvarXtdhhl.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXtdhhl);
				
				TableSchema.TableColumn colvarXtxsdm = new TableSchema.TableColumn(schema);
				colvarXtxsdm.ColumnName = "XTXSDM";
				colvarXtxsdm.DataType = DbType.String;
				colvarXtxsdm.MaxLength = 4;
				colvarXtxsdm.AutoIncrement = false;
				colvarXtxsdm.IsNullable = true;
				colvarXtxsdm.IsPrimaryKey = false;
				colvarXtxsdm.IsForeignKey = false;
				colvarXtxsdm.IsReadOnly = false;
				colvarXtxsdm.DefaultSetting = @"";
				colvarXtxsdm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXtxsdm);
				
				TableSchema.TableColumn colvarXsddhm = new TableSchema.TableColumn(schema);
				colvarXsddhm.ColumnName = "XSDDHM";
				colvarXsddhm.DataType = DbType.String;
				colvarXsddhm.MaxLength = 12;
				colvarXsddhm.AutoIncrement = false;
				colvarXsddhm.IsNullable = false;
				colvarXsddhm.IsPrimaryKey = true;
				colvarXsddhm.IsForeignKey = false;
				colvarXsddhm.IsReadOnly = false;
				colvarXsddhm.DefaultSetting = @"";
				colvarXsddhm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXsddhm);
				
				TableSchema.TableColumn colvarXtbmdm = new TableSchema.TableColumn(schema);
				colvarXtbmdm.ColumnName = "XTBMDM";
				colvarXtbmdm.DataType = DbType.String;
				colvarXtbmdm.MaxLength = 8;
				colvarXtbmdm.AutoIncrement = false;
				colvarXtbmdm.IsNullable = true;
				colvarXtbmdm.IsPrimaryKey = false;
				colvarXtbmdm.IsForeignKey = false;
				colvarXtbmdm.IsReadOnly = false;
				colvarXtbmdm.DefaultSetting = @"";
				colvarXtbmdm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXtbmdm);
				
				TableSchema.TableColumn colvarXsxsdb = new TableSchema.TableColumn(schema);
				colvarXsxsdb.ColumnName = "XSXSDB";
				colvarXsxsdb.DataType = DbType.String;
				colvarXsxsdb.MaxLength = 8;
				colvarXsxsdb.AutoIncrement = false;
				colvarXsxsdb.IsNullable = true;
				colvarXsxsdb.IsPrimaryKey = false;
				colvarXsxsdb.IsForeignKey = false;
				colvarXsxsdb.IsReadOnly = false;
				colvarXsxsdb.DefaultSetting = @"";
				colvarXsxsdb.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXsxsdb);
				
				TableSchema.TableColumn colvarXthbdm = new TableSchema.TableColumn(schema);
				colvarXthbdm.ColumnName = "XTHBDM";
				colvarXthbdm.DataType = DbType.String;
				colvarXthbdm.MaxLength = 3;
				colvarXthbdm.AutoIncrement = false;
				colvarXthbdm.IsNullable = true;
				colvarXthbdm.IsPrimaryKey = false;
				colvarXthbdm.IsForeignKey = false;
				colvarXthbdm.IsReadOnly = false;
				colvarXthbdm.DefaultSetting = @"";
				colvarXthbdm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXthbdm);
				
				TableSchema.TableColumn colvarXtwldm = new TableSchema.TableColumn(schema);
				colvarXtwldm.ColumnName = "XTWLDM";
				colvarXtwldm.DataType = DbType.String;
				colvarXtwldm.MaxLength = 8;
				colvarXtwldm.AutoIncrement = false;
				colvarXtwldm.IsNullable = false;
				colvarXtwldm.IsPrimaryKey = false;
				colvarXtwldm.IsForeignKey = false;
				colvarXtwldm.IsReadOnly = false;
				colvarXtwldm.DefaultSetting = @"";
				colvarXtwldm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXtwldm);
				
				TableSchema.TableColumn colvarXtjsfs = new TableSchema.TableColumn(schema);
				colvarXtjsfs.ColumnName = "XTJSFS";
				colvarXtjsfs.DataType = DbType.String;
				colvarXtjsfs.MaxLength = 4;
				colvarXtjsfs.AutoIncrement = false;
				colvarXtjsfs.IsNullable = true;
				colvarXtjsfs.IsPrimaryKey = false;
				colvarXtjsfs.IsForeignKey = false;
				colvarXtjsfs.IsReadOnly = false;
				colvarXtjsfs.DefaultSetting = @"";
				colvarXtjsfs.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXtjsfs);
				
				TableSchema.TableColumn colvarXtfkqx = new TableSchema.TableColumn(schema);
				colvarXtfkqx.ColumnName = "XTFKQX";
				colvarXtfkqx.DataType = DbType.Decimal;
				colvarXtfkqx.MaxLength = 0;
				colvarXtfkqx.AutoIncrement = false;
				colvarXtfkqx.IsNullable = true;
				colvarXtfkqx.IsPrimaryKey = false;
				colvarXtfkqx.IsForeignKey = false;
				colvarXtfkqx.IsReadOnly = false;
				colvarXtfkqx.DefaultSetting = @"";
				colvarXtfkqx.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXtfkqx);
				
				TableSchema.TableColumn colvarXsqdrq = new TableSchema.TableColumn(schema);
				colvarXsqdrq.ColumnName = "XSQDRQ";
				colvarXsqdrq.DataType = DbType.DateTime;
				colvarXsqdrq.MaxLength = 0;
				colvarXsqdrq.AutoIncrement = false;
				colvarXsqdrq.IsNullable = true;
				colvarXsqdrq.IsPrimaryKey = false;
				colvarXsqdrq.IsForeignKey = false;
				colvarXsqdrq.IsReadOnly = false;
				colvarXsqdrq.DefaultSetting = @"";
				colvarXsqdrq.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXsqdrq);
				
				TableSchema.TableColumn colvarXskjnd = new TableSchema.TableColumn(schema);
				colvarXskjnd.ColumnName = "XSKJND";
				colvarXskjnd.DataType = DbType.Decimal;
				colvarXskjnd.MaxLength = 0;
				colvarXskjnd.AutoIncrement = false;
				colvarXskjnd.IsNullable = true;
				colvarXskjnd.IsPrimaryKey = false;
				colvarXskjnd.IsForeignKey = false;
				colvarXskjnd.IsReadOnly = false;
				colvarXskjnd.DefaultSetting = @"";
				colvarXskjnd.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXskjnd);
				
				TableSchema.TableColumn colvarXskjyf = new TableSchema.TableColumn(schema);
				colvarXskjyf.ColumnName = "XSKJYF";
				colvarXskjyf.DataType = DbType.Decimal;
				colvarXskjyf.MaxLength = 0;
				colvarXskjyf.AutoIncrement = false;
				colvarXskjyf.IsNullable = true;
				colvarXskjyf.IsPrimaryKey = false;
				colvarXskjyf.IsForeignKey = false;
				colvarXskjyf.IsReadOnly = false;
				colvarXskjyf.DefaultSetting = @"";
				colvarXskjyf.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXskjyf);
				
				TableSchema.TableColumn colvarXsddze = new TableSchema.TableColumn(schema);
				colvarXsddze.ColumnName = "XSDDZE";
				colvarXsddze.DataType = DbType.Decimal;
				colvarXsddze.MaxLength = 0;
				colvarXsddze.AutoIncrement = false;
				colvarXsddze.IsNullable = true;
				colvarXsddze.IsPrimaryKey = false;
				colvarXsddze.IsForeignKey = false;
				colvarXsddze.IsReadOnly = false;
				colvarXsddze.DefaultSetting = @"";
				colvarXsddze.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXsddze);
				
				TableSchema.TableColumn colvarXsbbje = new TableSchema.TableColumn(schema);
				colvarXsbbje.ColumnName = "XSBBJE";
				colvarXsbbje.DataType = DbType.Decimal;
				colvarXsbbje.MaxLength = 0;
				colvarXsbbje.AutoIncrement = false;
				colvarXsbbje.IsNullable = true;
				colvarXsbbje.IsPrimaryKey = false;
				colvarXsbbje.IsForeignKey = false;
				colvarXsbbje.IsReadOnly = false;
				colvarXsbbje.DefaultSetting = @"";
				colvarXsbbje.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXsbbje);
				
				TableSchema.TableColumn colvarXsddzt = new TableSchema.TableColumn(schema);
				colvarXsddzt.ColumnName = "XSDDZT";
				colvarXsddzt.DataType = DbType.String;
				colvarXsddzt.MaxLength = 1;
				colvarXsddzt.AutoIncrement = false;
				colvarXsddzt.IsNullable = true;
				colvarXsddzt.IsPrimaryKey = false;
				colvarXsddzt.IsForeignKey = false;
				colvarXsddzt.IsReadOnly = false;
				colvarXsddzt.DefaultSetting = @"";
				colvarXsddzt.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXsddzt);
				
				TableSchema.TableColumn colvarXslrry = new TableSchema.TableColumn(schema);
				colvarXslrry.ColumnName = "XSLRRY";
				colvarXslrry.DataType = DbType.String;
				colvarXslrry.MaxLength = 8;
				colvarXslrry.AutoIncrement = false;
				colvarXslrry.IsNullable = true;
				colvarXslrry.IsPrimaryKey = false;
				colvarXslrry.IsForeignKey = false;
				colvarXslrry.IsReadOnly = false;
				colvarXslrry.DefaultSetting = @"";
				colvarXslrry.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXslrry);
				
				TableSchema.TableColumn colvarXslrrq = new TableSchema.TableColumn(schema);
				colvarXslrrq.ColumnName = "XSLRRQ";
				colvarXslrrq.DataType = DbType.DateTime;
				colvarXslrrq.MaxLength = 0;
				colvarXslrrq.AutoIncrement = false;
				colvarXslrrq.IsNullable = true;
				colvarXslrrq.IsPrimaryKey = false;
				colvarXslrrq.IsForeignKey = false;
				colvarXslrrq.IsReadOnly = false;
				colvarXslrrq.DefaultSetting = @"";
				colvarXslrrq.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXslrrq);
				
				TableSchema.TableColumn colvarXsshry = new TableSchema.TableColumn(schema);
				colvarXsshry.ColumnName = "XSSHRY";
				colvarXsshry.DataType = DbType.String;
				colvarXsshry.MaxLength = 8;
				colvarXsshry.AutoIncrement = false;
				colvarXsshry.IsNullable = true;
				colvarXsshry.IsPrimaryKey = false;
				colvarXsshry.IsForeignKey = false;
				colvarXsshry.IsReadOnly = false;
				colvarXsshry.DefaultSetting = @"";
				colvarXsshry.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXsshry);
				
				TableSchema.TableColumn colvarXsshrq = new TableSchema.TableColumn(schema);
				colvarXsshrq.ColumnName = "XSSHRQ";
				colvarXsshrq.DataType = DbType.DateTime;
				colvarXsshrq.MaxLength = 0;
				colvarXsshrq.AutoIncrement = false;
				colvarXsshrq.IsNullable = true;
				colvarXsshrq.IsPrimaryKey = false;
				colvarXsshrq.IsForeignKey = false;
				colvarXsshrq.IsReadOnly = false;
				colvarXsshrq.DefaultSetting = @"";
				colvarXsshrq.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXsshrq);
				
				TableSchema.TableColumn colvarXszzyy = new TableSchema.TableColumn(schema);
				colvarXszzyy.ColumnName = "XSZZYY";
				colvarXszzyy.DataType = DbType.String;
				colvarXszzyy.MaxLength = 255;
				colvarXszzyy.AutoIncrement = false;
				colvarXszzyy.IsNullable = true;
				colvarXszzyy.IsPrimaryKey = false;
				colvarXszzyy.IsForeignKey = false;
				colvarXszzyy.IsReadOnly = false;
				colvarXszzyy.DefaultSetting = @"";
				colvarXszzyy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXszzyy);
				
				TableSchema.TableColumn colvarXxddbz = new TableSchema.TableColumn(schema);
				colvarXxddbz.ColumnName = "XXDDBZ";
				colvarXxddbz.DataType = DbType.String;
				colvarXxddbz.MaxLength = 255;
				colvarXxddbz.AutoIncrement = false;
				colvarXxddbz.IsNullable = true;
				colvarXxddbz.IsPrimaryKey = false;
				colvarXxddbz.IsForeignKey = false;
				colvarXxddbz.IsReadOnly = false;
				colvarXxddbz.DefaultSetting = @"";
				colvarXxddbz.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXxddbz);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ErpNowthwin"].AddSchema("XST01",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Xtdhhl")]
		[Bindable(true)]
		public decimal? Xtdhhl 
		{
			get { return GetColumnValue<decimal?>(Columns.Xtdhhl); }
			set { SetColumnValue(Columns.Xtdhhl, value); }
		}
		  
		[XmlAttribute("Xtxsdm")]
		[Bindable(true)]
		public string Xtxsdm 
		{
			get { return GetColumnValue<string>(Columns.Xtxsdm); }
			set { SetColumnValue(Columns.Xtxsdm, value); }
		}
		  
		[XmlAttribute("Xsddhm")]
		[Bindable(true)]
		public string Xsddhm 
		{
			get { return GetColumnValue<string>(Columns.Xsddhm); }
			set { SetColumnValue(Columns.Xsddhm, value); }
		}
		  
		[XmlAttribute("Xtbmdm")]
		[Bindable(true)]
		public string Xtbmdm 
		{
			get { return GetColumnValue<string>(Columns.Xtbmdm); }
			set { SetColumnValue(Columns.Xtbmdm, value); }
		}
		  
		[XmlAttribute("Xsxsdb")]
		[Bindable(true)]
		public string Xsxsdb 
		{
			get { return GetColumnValue<string>(Columns.Xsxsdb); }
			set { SetColumnValue(Columns.Xsxsdb, value); }
		}
		  
		[XmlAttribute("Xthbdm")]
		[Bindable(true)]
		public string Xthbdm 
		{
			get { return GetColumnValue<string>(Columns.Xthbdm); }
			set { SetColumnValue(Columns.Xthbdm, value); }
		}
		  
		[XmlAttribute("Xtwldm")]
		[Bindable(true)]
		public string Xtwldm 
		{
			get { return GetColumnValue<string>(Columns.Xtwldm); }
			set { SetColumnValue(Columns.Xtwldm, value); }
		}
		  
		[XmlAttribute("Xtjsfs")]
		[Bindable(true)]
		public string Xtjsfs 
		{
			get { return GetColumnValue<string>(Columns.Xtjsfs); }
			set { SetColumnValue(Columns.Xtjsfs, value); }
		}
		  
		[XmlAttribute("Xtfkqx")]
		[Bindable(true)]
		public decimal? Xtfkqx 
		{
			get { return GetColumnValue<decimal?>(Columns.Xtfkqx); }
			set { SetColumnValue(Columns.Xtfkqx, value); }
		}
		  
		[XmlAttribute("Xsqdrq")]
		[Bindable(true)]
		public DateTime? Xsqdrq 
		{
			get { return GetColumnValue<DateTime?>(Columns.Xsqdrq); }
			set { SetColumnValue(Columns.Xsqdrq, value); }
		}
		  
		[XmlAttribute("Xskjnd")]
		[Bindable(true)]
		public decimal? Xskjnd 
		{
			get { return GetColumnValue<decimal?>(Columns.Xskjnd); }
			set { SetColumnValue(Columns.Xskjnd, value); }
		}
		  
		[XmlAttribute("Xskjyf")]
		[Bindable(true)]
		public decimal? Xskjyf 
		{
			get { return GetColumnValue<decimal?>(Columns.Xskjyf); }
			set { SetColumnValue(Columns.Xskjyf, value); }
		}
		  
		[XmlAttribute("Xsddze")]
		[Bindable(true)]
		public decimal? Xsddze 
		{
			get { return GetColumnValue<decimal?>(Columns.Xsddze); }
			set { SetColumnValue(Columns.Xsddze, value); }
		}
		  
		[XmlAttribute("Xsbbje")]
		[Bindable(true)]
		public decimal? Xsbbje 
		{
			get { return GetColumnValue<decimal?>(Columns.Xsbbje); }
			set { SetColumnValue(Columns.Xsbbje, value); }
		}
		  
		[XmlAttribute("Xsddzt")]
		[Bindable(true)]
		public string Xsddzt 
		{
			get { return GetColumnValue<string>(Columns.Xsddzt); }
			set { SetColumnValue(Columns.Xsddzt, value); }
		}
		  
		[XmlAttribute("Xslrry")]
		[Bindable(true)]
		public string Xslrry 
		{
			get { return GetColumnValue<string>(Columns.Xslrry); }
			set { SetColumnValue(Columns.Xslrry, value); }
		}
		  
		[XmlAttribute("Xslrrq")]
		[Bindable(true)]
		public DateTime? Xslrrq 
		{
			get { return GetColumnValue<DateTime?>(Columns.Xslrrq); }
			set { SetColumnValue(Columns.Xslrrq, value); }
		}
		  
		[XmlAttribute("Xsshry")]
		[Bindable(true)]
		public string Xsshry 
		{
			get { return GetColumnValue<string>(Columns.Xsshry); }
			set { SetColumnValue(Columns.Xsshry, value); }
		}
		  
		[XmlAttribute("Xsshrq")]
		[Bindable(true)]
		public DateTime? Xsshrq 
		{
			get { return GetColumnValue<DateTime?>(Columns.Xsshrq); }
			set { SetColumnValue(Columns.Xsshrq, value); }
		}
		  
		[XmlAttribute("Xszzyy")]
		[Bindable(true)]
		public string Xszzyy 
		{
			get { return GetColumnValue<string>(Columns.Xszzyy); }
			set { SetColumnValue(Columns.Xszzyy, value); }
		}
		  
		[XmlAttribute("Xxddbz")]
		[Bindable(true)]
		public string Xxddbz 
		{
			get { return GetColumnValue<string>(Columns.Xxddbz); }
			set { SetColumnValue(Columns.Xxddbz, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(decimal? varXtdhhl,string varXtxsdm,string varXsddhm,string varXtbmdm,string varXsxsdb,string varXthbdm,string varXtwldm,string varXtjsfs,decimal? varXtfkqx,DateTime? varXsqdrq,decimal? varXskjnd,decimal? varXskjyf,decimal? varXsddze,decimal? varXsbbje,string varXsddzt,string varXslrry,DateTime? varXslrrq,string varXsshry,DateTime? varXsshrq,string varXszzyy,string varXxddbz)
		{
			XST01 item = new XST01();
			
			item.Xtdhhl = varXtdhhl;
			
			item.Xtxsdm = varXtxsdm;
			
			item.Xsddhm = varXsddhm;
			
			item.Xtbmdm = varXtbmdm;
			
			item.Xsxsdb = varXsxsdb;
			
			item.Xthbdm = varXthbdm;
			
			item.Xtwldm = varXtwldm;
			
			item.Xtjsfs = varXtjsfs;
			
			item.Xtfkqx = varXtfkqx;
			
			item.Xsqdrq = varXsqdrq;
			
			item.Xskjnd = varXskjnd;
			
			item.Xskjyf = varXskjyf;
			
			item.Xsddze = varXsddze;
			
			item.Xsbbje = varXsbbje;
			
			item.Xsddzt = varXsddzt;
			
			item.Xslrry = varXslrry;
			
			item.Xslrrq = varXslrrq;
			
			item.Xsshry = varXsshry;
			
			item.Xsshrq = varXsshrq;
			
			item.Xszzyy = varXszzyy;
			
			item.Xxddbz = varXxddbz;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(decimal? varXtdhhl,string varXtxsdm,string varXsddhm,string varXtbmdm,string varXsxsdb,string varXthbdm,string varXtwldm,string varXtjsfs,decimal? varXtfkqx,DateTime? varXsqdrq,decimal? varXskjnd,decimal? varXskjyf,decimal? varXsddze,decimal? varXsbbje,string varXsddzt,string varXslrry,DateTime? varXslrrq,string varXsshry,DateTime? varXsshrq,string varXszzyy,string varXxddbz)
		{
			XST01 item = new XST01();
			
				item.Xtdhhl = varXtdhhl;
			
				item.Xtxsdm = varXtxsdm;
			
				item.Xsddhm = varXsddhm;
			
				item.Xtbmdm = varXtbmdm;
			
				item.Xsxsdb = varXsxsdb;
			
				item.Xthbdm = varXthbdm;
			
				item.Xtwldm = varXtwldm;
			
				item.Xtjsfs = varXtjsfs;
			
				item.Xtfkqx = varXtfkqx;
			
				item.Xsqdrq = varXsqdrq;
			
				item.Xskjnd = varXskjnd;
			
				item.Xskjyf = varXskjyf;
			
				item.Xsddze = varXsddze;
			
				item.Xsbbje = varXsbbje;
			
				item.Xsddzt = varXsddzt;
			
				item.Xslrry = varXslrry;
			
				item.Xslrrq = varXslrrq;
			
				item.Xsshry = varXsshry;
			
				item.Xsshrq = varXsshrq;
			
				item.Xszzyy = varXszzyy;
			
				item.Xxddbz = varXxddbz;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn XtdhhlColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn XtxsdmColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn XsddhmColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn XtbmdmColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn XsxsdbColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn XthbdmColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn XtwldmColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn XtjsfsColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn XtfkqxColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn XsqdrqColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn XskjndColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn XskjyfColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn XsddzeColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        public static TableSchema.TableColumn XsbbjeColumn
        {
            get { return Schema.Columns[13]; }
        }
        
        
        
        public static TableSchema.TableColumn XsddztColumn
        {
            get { return Schema.Columns[14]; }
        }
        
        
        
        public static TableSchema.TableColumn XslrryColumn
        {
            get { return Schema.Columns[15]; }
        }
        
        
        
        public static TableSchema.TableColumn XslrrqColumn
        {
            get { return Schema.Columns[16]; }
        }
        
        
        
        public static TableSchema.TableColumn XsshryColumn
        {
            get { return Schema.Columns[17]; }
        }
        
        
        
        public static TableSchema.TableColumn XsshrqColumn
        {
            get { return Schema.Columns[18]; }
        }
        
        
        
        public static TableSchema.TableColumn XszzyyColumn
        {
            get { return Schema.Columns[19]; }
        }
        
        
        
        public static TableSchema.TableColumn XxddbzColumn
        {
            get { return Schema.Columns[20]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Xtdhhl = @"XTDHHL";
			 public static string Xtxsdm = @"XTXSDM";
			 public static string Xsddhm = @"XSDDHM";
			 public static string Xtbmdm = @"XTBMDM";
			 public static string Xsxsdb = @"XSXSDB";
			 public static string Xthbdm = @"XTHBDM";
			 public static string Xtwldm = @"XTWLDM";
			 public static string Xtjsfs = @"XTJSFS";
			 public static string Xtfkqx = @"XTFKQX";
			 public static string Xsqdrq = @"XSQDRQ";
			 public static string Xskjnd = @"XSKJND";
			 public static string Xskjyf = @"XSKJYF";
			 public static string Xsddze = @"XSDDZE";
			 public static string Xsbbje = @"XSBBJE";
			 public static string Xsddzt = @"XSDDZT";
			 public static string Xslrry = @"XSLRRY";
			 public static string Xslrrq = @"XSLRRQ";
			 public static string Xsshry = @"XSSHRY";
			 public static string Xsshrq = @"XSSHRQ";
			 public static string Xszzyy = @"XSZZYY";
			 public static string Xxddbz = @"XXDDBZ";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}

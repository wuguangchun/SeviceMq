using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace OracleDataDomain
{
	/// <summary>
	/// Strongly-typed collection for the XSM14 class.
	/// </summary>
    [Serializable]
	public partial class XSM14Collection : ActiveList<XSM14, XSM14Collection>
	{	   
		public XSM14Collection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>XSM14Collection</returns>
		public XSM14Collection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                XSM14 o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the XSM14 table.
	/// </summary>
	[Serializable]
	public partial class XSM14 : ActiveRecord<XSM14>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public XSM14()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public XSM14(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public XSM14(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public XSM14(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("XSM14", TableType.Table, DataService.GetInstance("ErpNowthwin"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"FYERP";
				//columns
				
				TableSchema.TableColumn colvarXscphm = new TableSchema.TableColumn(schema);
				colvarXscphm.ColumnName = "XSCPHM";
				colvarXscphm.DataType = DbType.String;
				colvarXscphm.MaxLength = 10;
				colvarXscphm.AutoIncrement = false;
				colvarXscphm.IsNullable = false;
				colvarXscphm.IsPrimaryKey = true;
				colvarXscphm.IsForeignKey = false;
				colvarXscphm.IsReadOnly = false;
				colvarXscphm.DefaultSetting = @"";
				colvarXscphm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXscphm);
				
				TableSchema.TableColumn colvarXsclsm = new TableSchema.TableColumn(schema);
				colvarXsclsm.ColumnName = "XSCLSM";
				colvarXsclsm.DataType = DbType.String;
				colvarXsclsm.MaxLength = 60;
				colvarXsclsm.AutoIncrement = false;
				colvarXsclsm.IsNullable = true;
				colvarXsclsm.IsPrimaryKey = false;
				colvarXsclsm.IsForeignKey = false;
				colvarXsclsm.IsReadOnly = false;
				colvarXsclsm.DefaultSetting = @"";
				colvarXsclsm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXsclsm);
				
				TableSchema.TableColumn colvarXssjxm = new TableSchema.TableColumn(schema);
				colvarXssjxm.ColumnName = "XSSJXM";
				colvarXssjxm.DataType = DbType.String;
				colvarXssjxm.MaxLength = 20;
				colvarXssjxm.AutoIncrement = false;
				colvarXssjxm.IsNullable = true;
				colvarXssjxm.IsPrimaryKey = false;
				colvarXssjxm.IsForeignKey = false;
				colvarXssjxm.IsReadOnly = false;
				colvarXssjxm.DefaultSetting = @"";
				colvarXssjxm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXssjxm);
				
				TableSchema.TableColumn colvarXsgmrq = new TableSchema.TableColumn(schema);
				colvarXsgmrq.ColumnName = "XSGMRQ";
				colvarXsgmrq.DataType = DbType.DateTime;
				colvarXsgmrq.MaxLength = 0;
				colvarXsgmrq.AutoIncrement = false;
				colvarXsgmrq.IsNullable = true;
				colvarXsgmrq.IsPrimaryKey = false;
				colvarXsgmrq.IsForeignKey = false;
				colvarXsgmrq.IsReadOnly = false;
				colvarXsgmrq.DefaultSetting = @"";
				colvarXsgmrq.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXsgmrq);
				
				TableSchema.TableColumn colvarXsclzk = new TableSchema.TableColumn(schema);
				colvarXsclzk.ColumnName = "XSCLZK";
				colvarXsclzk.DataType = DbType.String;
				colvarXsclzk.MaxLength = 1;
				colvarXsclzk.AutoIncrement = false;
				colvarXsclzk.IsNullable = true;
				colvarXsclzk.IsPrimaryKey = false;
				colvarXsclzk.IsForeignKey = false;
				colvarXsclzk.IsReadOnly = false;
				colvarXsclzk.DefaultSetting = @"";
				colvarXsclzk.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXsclzk);
				
				TableSchema.TableColumn colvarXszzsy = new TableSchema.TableColumn(schema);
				colvarXszzsy.ColumnName = "XSZZSY";
				colvarXszzsy.DataType = DbType.String;
				colvarXszzsy.MaxLength = 1;
				colvarXszzsy.AutoIncrement = false;
				colvarXszzsy.IsNullable = true;
				colvarXszzsy.IsPrimaryKey = false;
				colvarXszzsy.IsForeignKey = false;
				colvarXszzsy.IsReadOnly = false;
				colvarXszzsy.DefaultSetting = @"";
				colvarXszzsy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXszzsy);
				
				TableSchema.TableColumn colvarXsclxh = new TableSchema.TableColumn(schema);
				colvarXsclxh.ColumnName = "XSCLXH";
				colvarXsclxh.DataType = DbType.String;
				colvarXsclxh.MaxLength = 30;
				colvarXsclxh.AutoIncrement = false;
				colvarXsclxh.IsNullable = true;
				colvarXsclxh.IsPrimaryKey = false;
				colvarXsclxh.IsForeignKey = false;
				colvarXsclxh.IsReadOnly = false;
				colvarXsclxh.DefaultSetting = @"";
				colvarXsclxh.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXsclxh);
				
				TableSchema.TableColumn colvarXsclzz = new TableSchema.TableColumn(schema);
				colvarXsclzz.ColumnName = "XSCLZZ";
				colvarXsclzz.DataType = DbType.Decimal;
				colvarXsclzz.MaxLength = 0;
				colvarXsclzz.AutoIncrement = false;
				colvarXsclzz.IsNullable = true;
				colvarXsclzz.IsPrimaryKey = false;
				colvarXsclzz.IsForeignKey = false;
				colvarXsclzz.IsReadOnly = false;
				colvarXsclzz.DefaultSetting = @"";
				colvarXsclzz.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXsclzz);
				
				TableSchema.TableColumn colvarXsyxls = new TableSchema.TableColumn(schema);
				colvarXsyxls.ColumnName = "XSYXLS";
				colvarXsyxls.DataType = DbType.Decimal;
				colvarXsyxls.MaxLength = 0;
				colvarXsyxls.AutoIncrement = false;
				colvarXsyxls.IsNullable = true;
				colvarXsyxls.IsPrimaryKey = false;
				colvarXsyxls.IsForeignKey = false;
				colvarXsyxls.IsReadOnly = false;
				colvarXsyxls.DefaultSetting = @"";
				colvarXsyxls.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXsyxls);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ErpNowthwin"].AddSchema("XSM14",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Xscphm")]
		[Bindable(true)]
		public string Xscphm 
		{
			get { return GetColumnValue<string>(Columns.Xscphm); }
			set { SetColumnValue(Columns.Xscphm, value); }
		}
		  
		[XmlAttribute("Xsclsm")]
		[Bindable(true)]
		public string Xsclsm 
		{
			get { return GetColumnValue<string>(Columns.Xsclsm); }
			set { SetColumnValue(Columns.Xsclsm, value); }
		}
		  
		[XmlAttribute("Xssjxm")]
		[Bindable(true)]
		public string Xssjxm 
		{
			get { return GetColumnValue<string>(Columns.Xssjxm); }
			set { SetColumnValue(Columns.Xssjxm, value); }
		}
		  
		[XmlAttribute("Xsgmrq")]
		[Bindable(true)]
		public DateTime? Xsgmrq 
		{
			get { return GetColumnValue<DateTime?>(Columns.Xsgmrq); }
			set { SetColumnValue(Columns.Xsgmrq, value); }
		}
		  
		[XmlAttribute("Xsclzk")]
		[Bindable(true)]
		public string Xsclzk 
		{
			get { return GetColumnValue<string>(Columns.Xsclzk); }
			set { SetColumnValue(Columns.Xsclzk, value); }
		}
		  
		[XmlAttribute("Xszzsy")]
		[Bindable(true)]
		public string Xszzsy 
		{
			get { return GetColumnValue<string>(Columns.Xszzsy); }
			set { SetColumnValue(Columns.Xszzsy, value); }
		}
		  
		[XmlAttribute("Xsclxh")]
		[Bindable(true)]
		public string Xsclxh 
		{
			get { return GetColumnValue<string>(Columns.Xsclxh); }
			set { SetColumnValue(Columns.Xsclxh, value); }
		}
		  
		[XmlAttribute("Xsclzz")]
		[Bindable(true)]
		public decimal? Xsclzz 
		{
			get { return GetColumnValue<decimal?>(Columns.Xsclzz); }
			set { SetColumnValue(Columns.Xsclzz, value); }
		}
		  
		[XmlAttribute("Xsyxls")]
		[Bindable(true)]
		public decimal? Xsyxls 
		{
			get { return GetColumnValue<decimal?>(Columns.Xsyxls); }
			set { SetColumnValue(Columns.Xsyxls, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varXscphm,string varXsclsm,string varXssjxm,DateTime? varXsgmrq,string varXsclzk,string varXszzsy,string varXsclxh,decimal? varXsclzz,decimal? varXsyxls)
		{
			XSM14 item = new XSM14();
			
			item.Xscphm = varXscphm;
			
			item.Xsclsm = varXsclsm;
			
			item.Xssjxm = varXssjxm;
			
			item.Xsgmrq = varXsgmrq;
			
			item.Xsclzk = varXsclzk;
			
			item.Xszzsy = varXszzsy;
			
			item.Xsclxh = varXsclxh;
			
			item.Xsclzz = varXsclzz;
			
			item.Xsyxls = varXsyxls;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(string varXscphm,string varXsclsm,string varXssjxm,DateTime? varXsgmrq,string varXsclzk,string varXszzsy,string varXsclxh,decimal? varXsclzz,decimal? varXsyxls)
		{
			XSM14 item = new XSM14();
			
				item.Xscphm = varXscphm;
			
				item.Xsclsm = varXsclsm;
			
				item.Xssjxm = varXssjxm;
			
				item.Xsgmrq = varXsgmrq;
			
				item.Xsclzk = varXsclzk;
			
				item.Xszzsy = varXszzsy;
			
				item.Xsclxh = varXsclxh;
			
				item.Xsclzz = varXsclzz;
			
				item.Xsyxls = varXsyxls;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn XscphmColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn XsclsmColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn XssjxmColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn XsgmrqColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn XsclzkColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn XszzsyColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn XsclxhColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn XsclzzColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn XsyxlsColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Xscphm = @"XSCPHM";
			 public static string Xsclsm = @"XSCLSM";
			 public static string Xssjxm = @"XSSJXM";
			 public static string Xsgmrq = @"XSGMRQ";
			 public static string Xsclzk = @"XSCLZK";
			 public static string Xszzsy = @"XSZZSY";
			 public static string Xsclxh = @"XSCLXH";
			 public static string Xsclzz = @"XSCLZZ";
			 public static string Xsyxls = @"XSYXLS";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}

using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace OracleDataDomain
{
	/// <summary>
	/// Strongly-typed collection for the XTM123 class.
	/// </summary>
    [Serializable]
	public partial class XTM123Collection : ActiveList<XTM123, XTM123Collection>
	{	   
		public XTM123Collection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>XTM123Collection</returns>
		public XTM123Collection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                XTM123 o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the XTM123 table.
	/// </summary>
	[Serializable]
	public partial class XTM123 : ActiveRecord<XTM123>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public XTM123()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public XTM123(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public XTM123(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public XTM123(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("XTM123", TableType.Table, DataService.GetInstance("ErpNowthwin"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"FYERP";
				//columns
				
				TableSchema.TableColumn colvarWplbdm = new TableSchema.TableColumn(schema);
				colvarWplbdm.ColumnName = "WPLBDM";
				colvarWplbdm.DataType = DbType.String;
				colvarWplbdm.MaxLength = 2;
				colvarWplbdm.AutoIncrement = false;
				colvarWplbdm.IsNullable = false;
				colvarWplbdm.IsPrimaryKey = true;
				colvarWplbdm.IsForeignKey = false;
				colvarWplbdm.IsReadOnly = false;
				colvarWplbdm.DefaultSetting = @"";
				colvarWplbdm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarWplbdm);
				
				TableSchema.TableColumn colvarWplbmc = new TableSchema.TableColumn(schema);
				colvarWplbmc.ColumnName = "WPLBMC";
				colvarWplbmc.DataType = DbType.String;
				colvarWplbmc.MaxLength = 20;
				colvarWplbmc.AutoIncrement = false;
				colvarWplbmc.IsNullable = true;
				colvarWplbmc.IsPrimaryKey = false;
				colvarWplbmc.IsForeignKey = false;
				colvarWplbmc.IsReadOnly = false;
				colvarWplbmc.DefaultSetting = @"";
				colvarWplbmc.ForeignKeyTableName = "";
				schema.Columns.Add(colvarWplbmc);
				
				TableSchema.TableColumn colvarWpsxzd = new TableSchema.TableColumn(schema);
				colvarWpsxzd.ColumnName = "WPSXZD";
				colvarWpsxzd.DataType = DbType.String;
				colvarWpsxzd.MaxLength = 20;
				colvarWpsxzd.AutoIncrement = false;
				colvarWpsxzd.IsNullable = true;
				colvarWpsxzd.IsPrimaryKey = false;
				colvarWpsxzd.IsForeignKey = false;
				colvarWpsxzd.IsReadOnly = false;
				colvarWpsxzd.DefaultSetting = @"";
				colvarWpsxzd.ForeignKeyTableName = "";
				schema.Columns.Add(colvarWpsxzd);
				
				TableSchema.TableColumn colvarSxqybz = new TableSchema.TableColumn(schema);
				colvarSxqybz.ColumnName = "SXQYBZ";
				colvarSxqybz.DataType = DbType.String;
				colvarSxqybz.MaxLength = 1;
				colvarSxqybz.AutoIncrement = false;
				colvarSxqybz.IsNullable = true;
				colvarSxqybz.IsPrimaryKey = false;
				colvarSxqybz.IsForeignKey = false;
				colvarSxqybz.IsReadOnly = false;
				colvarSxqybz.DefaultSetting = @"";
				colvarSxqybz.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSxqybz);
				
				TableSchema.TableColumn colvarSxxsbz = new TableSchema.TableColumn(schema);
				colvarSxxsbz.ColumnName = "SXXSBZ";
				colvarSxxsbz.DataType = DbType.String;
				colvarSxxsbz.MaxLength = 1;
				colvarSxxsbz.AutoIncrement = false;
				colvarSxxsbz.IsNullable = true;
				colvarSxxsbz.IsPrimaryKey = false;
				colvarSxxsbz.IsForeignKey = false;
				colvarSxxsbz.IsReadOnly = false;
				colvarSxxsbz.DefaultSetting = @"";
				colvarSxxsbz.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSxxsbz);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ErpNowthwin"].AddSchema("XTM123",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Wplbdm")]
		[Bindable(true)]
		public string Wplbdm 
		{
			get { return GetColumnValue<string>(Columns.Wplbdm); }
			set { SetColumnValue(Columns.Wplbdm, value); }
		}
		  
		[XmlAttribute("Wplbmc")]
		[Bindable(true)]
		public string Wplbmc 
		{
			get { return GetColumnValue<string>(Columns.Wplbmc); }
			set { SetColumnValue(Columns.Wplbmc, value); }
		}
		  
		[XmlAttribute("Wpsxzd")]
		[Bindable(true)]
		public string Wpsxzd 
		{
			get { return GetColumnValue<string>(Columns.Wpsxzd); }
			set { SetColumnValue(Columns.Wpsxzd, value); }
		}
		  
		[XmlAttribute("Sxqybz")]
		[Bindable(true)]
		public string Sxqybz 
		{
			get { return GetColumnValue<string>(Columns.Sxqybz); }
			set { SetColumnValue(Columns.Sxqybz, value); }
		}
		  
		[XmlAttribute("Sxxsbz")]
		[Bindable(true)]
		public string Sxxsbz 
		{
			get { return GetColumnValue<string>(Columns.Sxxsbz); }
			set { SetColumnValue(Columns.Sxxsbz, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varWplbdm,string varWplbmc,string varWpsxzd,string varSxqybz,string varSxxsbz)
		{
			XTM123 item = new XTM123();
			
			item.Wplbdm = varWplbdm;
			
			item.Wplbmc = varWplbmc;
			
			item.Wpsxzd = varWpsxzd;
			
			item.Sxqybz = varSxqybz;
			
			item.Sxxsbz = varSxxsbz;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(string varWplbdm,string varWplbmc,string varWpsxzd,string varSxqybz,string varSxxsbz)
		{
			XTM123 item = new XTM123();
			
				item.Wplbdm = varWplbdm;
			
				item.Wplbmc = varWplbmc;
			
				item.Wpsxzd = varWpsxzd;
			
				item.Sxqybz = varSxqybz;
			
				item.Sxxsbz = varSxxsbz;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn WplbdmColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn WplbmcColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn WpsxzdColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn SxqybzColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn SxxsbzColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Wplbdm = @"WPLBDM";
			 public static string Wplbmc = @"WPLBMC";
			 public static string Wpsxzd = @"WPSXZD";
			 public static string Sxqybz = @"SXQYBZ";
			 public static string Sxxsbz = @"SXXSBZ";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}

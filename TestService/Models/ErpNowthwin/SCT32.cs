using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace OracleDataDomain
{
	/// <summary>
	/// Strongly-typed collection for the SCT32 class.
	/// </summary>
    [Serializable]
	public partial class SCT32Collection : ActiveList<SCT32, SCT32Collection>
	{	   
		public SCT32Collection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>SCT32Collection</returns>
		public SCT32Collection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                SCT32 o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the SCT32 table.
	/// </summary>
	[Serializable]
	public partial class SCT32 : ActiveRecord<SCT32>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public SCT32()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public SCT32(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public SCT32(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public SCT32(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("SCT32", TableType.Table, DataService.GetInstance("ErpNowthwin"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"FYERP";
				//columns
				
				TableSchema.TableColumn colvarScyxjb = new TableSchema.TableColumn(schema);
				colvarScyxjb.ColumnName = "SCYXJB";
				colvarScyxjb.DataType = DbType.Decimal;
				colvarScyxjb.MaxLength = 0;
				colvarScyxjb.AutoIncrement = false;
				colvarScyxjb.IsNullable = true;
				colvarScyxjb.IsPrimaryKey = false;
				colvarScyxjb.IsForeignKey = false;
				colvarScyxjb.IsReadOnly = false;
				colvarScyxjb.DefaultSetting = @"";
				colvarScyxjb.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScyxjb);
				
				TableSchema.TableColumn colvarScgydm = new TableSchema.TableColumn(schema);
				colvarScgydm.ColumnName = "SCGYDM";
				colvarScgydm.DataType = DbType.String;
				colvarScgydm.MaxLength = 4;
				colvarScgydm.AutoIncrement = false;
				colvarScgydm.IsNullable = true;
				colvarScgydm.IsPrimaryKey = false;
				colvarScgydm.IsForeignKey = false;
				colvarScgydm.IsReadOnly = false;
				colvarScgydm.DefaultSetting = @"";
				colvarScgydm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScgydm);
				
				TableSchema.TableColumn colvarScwpsl = new TableSchema.TableColumn(schema);
				colvarScwpsl.ColumnName = "SCWPSL";
				colvarScwpsl.DataType = DbType.Decimal;
				colvarScwpsl.MaxLength = 0;
				colvarScwpsl.AutoIncrement = false;
				colvarScwpsl.IsNullable = true;
				colvarScwpsl.IsPrimaryKey = false;
				colvarScwpsl.IsForeignKey = false;
				colvarScwpsl.IsReadOnly = false;
				colvarScwpsl.DefaultSetting = @"";
				colvarScwpsl.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScwpsl);
				
				TableSchema.TableColumn colvarScjhbz = new TableSchema.TableColumn(schema);
				colvarScjhbz.ColumnName = "SCJHBZ";
				colvarScjhbz.DataType = DbType.String;
				colvarScjhbz.MaxLength = 255;
				colvarScjhbz.AutoIncrement = false;
				colvarScjhbz.IsNullable = true;
				colvarScjhbz.IsPrimaryKey = false;
				colvarScjhbz.IsForeignKey = false;
				colvarScjhbz.IsReadOnly = false;
				colvarScjhbz.DefaultSetting = @"";
				colvarScjhbz.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScjhbz);
				
				TableSchema.TableColumn colvarScpcrq = new TableSchema.TableColumn(schema);
				colvarScpcrq.ColumnName = "SCPCRQ";
				colvarScpcrq.DataType = DbType.DateTime;
				colvarScpcrq.MaxLength = 0;
				colvarScpcrq.AutoIncrement = false;
				colvarScpcrq.IsNullable = true;
				colvarScpcrq.IsPrimaryKey = false;
				colvarScpcrq.IsForeignKey = false;
				colvarScpcrq.IsReadOnly = false;
				colvarScpcrq.DefaultSetting = @"";
				colvarScpcrq.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScpcrq);
				
				TableSchema.TableColumn colvarScndxs = new TableSchema.TableColumn(schema);
				colvarScndxs.ColumnName = "SCNDXS";
				colvarScndxs.DataType = DbType.Decimal;
				colvarScndxs.MaxLength = 0;
				colvarScndxs.AutoIncrement = false;
				colvarScndxs.IsNullable = true;
				colvarScndxs.IsPrimaryKey = false;
				colvarScndxs.IsForeignKey = false;
				colvarScndxs.IsReadOnly = false;
				colvarScndxs.DefaultSetting = @"";
				colvarScndxs.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScndxs);
				
				TableSchema.TableColumn colvarSchtbh = new TableSchema.TableColumn(schema);
				colvarSchtbh.ColumnName = "SCHTBH";
				colvarSchtbh.DataType = DbType.String;
				colvarSchtbh.MaxLength = 12;
				colvarSchtbh.AutoIncrement = false;
				colvarSchtbh.IsNullable = false;
				colvarSchtbh.IsPrimaryKey = true;
				colvarSchtbh.IsForeignKey = false;
				colvarSchtbh.IsReadOnly = false;
				colvarSchtbh.DefaultSetting = @"";
				colvarSchtbh.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSchtbh);
				
				TableSchema.TableColumn colvarSchtxh = new TableSchema.TableColumn(schema);
				colvarSchtxh.ColumnName = "SCHTXH";
				colvarSchtxh.DataType = DbType.Decimal;
				colvarSchtxh.MaxLength = 0;
				colvarSchtxh.AutoIncrement = false;
				colvarSchtxh.IsNullable = false;
				colvarSchtxh.IsPrimaryKey = true;
				colvarSchtxh.IsForeignKey = false;
				colvarSchtxh.IsReadOnly = false;
				colvarSchtxh.DefaultSetting = @"";
				colvarSchtxh.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSchtxh);
				
				TableSchema.TableColumn colvarXtwpks = new TableSchema.TableColumn(schema);
				colvarXtwpks.ColumnName = "XTWPKS";
				colvarXtwpks.DataType = DbType.String;
				colvarXtwpks.MaxLength = 20;
				colvarXtwpks.AutoIncrement = false;
				colvarXtwpks.IsNullable = true;
				colvarXtwpks.IsPrimaryKey = false;
				colvarXtwpks.IsForeignKey = false;
				colvarXtwpks.IsReadOnly = false;
				colvarXtwpks.DefaultSetting = @"";
				colvarXtwpks.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXtwpks);
				
				TableSchema.TableColumn colvarXtwpys = new TableSchema.TableColumn(schema);
				colvarXtwpys.ColumnName = "XTWPYS";
				colvarXtwpys.DataType = DbType.String;
				colvarXtwpys.MaxLength = 20;
				colvarXtwpys.AutoIncrement = false;
				colvarXtwpys.IsNullable = true;
				colvarXtwpys.IsPrimaryKey = false;
				colvarXtwpys.IsForeignKey = false;
				colvarXtwpys.IsReadOnly = false;
				colvarXtwpys.DefaultSetting = @"";
				colvarXtwpys.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXtwpys);
				
				TableSchema.TableColumn colvarXtwpdm = new TableSchema.TableColumn(schema);
				colvarXtwpdm.ColumnName = "XTWPDM";
				colvarXtwpdm.DataType = DbType.String;
				colvarXtwpdm.MaxLength = 20;
				colvarXtwpdm.AutoIncrement = false;
				colvarXtwpdm.IsNullable = true;
				colvarXtwpdm.IsPrimaryKey = false;
				colvarXtwpdm.IsForeignKey = false;
				colvarXtwpdm.IsReadOnly = false;
				colvarXtwpdm.DefaultSetting = @"";
				colvarXtwpdm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXtwpdm);
				
				TableSchema.TableColumn colvarScjgdj = new TableSchema.TableColumn(schema);
				colvarScjgdj.ColumnName = "SCJGDJ";
				colvarScjgdj.DataType = DbType.Decimal;
				colvarScjgdj.MaxLength = 0;
				colvarScjgdj.AutoIncrement = false;
				colvarScjgdj.IsNullable = true;
				colvarScjgdj.IsPrimaryKey = false;
				colvarScjgdj.IsForeignKey = false;
				colvarScjgdj.IsReadOnly = false;
				colvarScjgdj.DefaultSetting = @"";
				colvarScjgdj.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScjgdj);
				
				TableSchema.TableColumn colvarSchtsl = new TableSchema.TableColumn(schema);
				colvarSchtsl.ColumnName = "SCHTSL";
				colvarSchtsl.DataType = DbType.Decimal;
				colvarSchtsl.MaxLength = 0;
				colvarSchtsl.AutoIncrement = false;
				colvarSchtsl.IsNullable = true;
				colvarSchtsl.IsPrimaryKey = false;
				colvarSchtsl.IsForeignKey = false;
				colvarSchtsl.IsReadOnly = false;
				colvarSchtsl.DefaultSetting = @"";
				colvarSchtsl.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSchtsl);
				
				TableSchema.TableColumn colvarScjhrq = new TableSchema.TableColumn(schema);
				colvarScjhrq.ColumnName = "SCJHRQ";
				colvarScjhrq.DataType = DbType.DateTime;
				colvarScjhrq.MaxLength = 0;
				colvarScjhrq.AutoIncrement = false;
				colvarScjhrq.IsNullable = true;
				colvarScjhrq.IsPrimaryKey = false;
				colvarScjhrq.IsForeignKey = false;
				colvarScjhrq.IsReadOnly = false;
				colvarScjhrq.DefaultSetting = @"";
				colvarScjhrq.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScjhrq);
				
				TableSchema.TableColumn colvarScjhdd = new TableSchema.TableColumn(schema);
				colvarScjhdd.ColumnName = "SCJHDD";
				colvarScjhdd.DataType = DbType.String;
				colvarScjhdd.MaxLength = 4000;
				colvarScjhdd.AutoIncrement = false;
				colvarScjhdd.IsNullable = true;
				colvarScjhdd.IsPrimaryKey = false;
				colvarScjhdd.IsForeignKey = false;
				colvarScjhdd.IsReadOnly = false;
				colvarScjhdd.DefaultSetting = @"";
				colvarScjhdd.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScjhdd);
				
				TableSchema.TableColumn colvarScjqbz = new TableSchema.TableColumn(schema);
				colvarScjqbz.ColumnName = "SCJQBZ";
				colvarScjqbz.DataType = DbType.String;
				colvarScjqbz.MaxLength = 1;
				colvarScjqbz.AutoIncrement = false;
				colvarScjqbz.IsNullable = true;
				colvarScjqbz.IsPrimaryKey = false;
				colvarScjqbz.IsForeignKey = false;
				colvarScjqbz.IsReadOnly = false;
				colvarScjqbz.DefaultSetting = @"";
				colvarScjqbz.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScjqbz);
				
				TableSchema.TableColumn colvarScjqsm = new TableSchema.TableColumn(schema);
				colvarScjqsm.ColumnName = "SCJQSM";
				colvarScjqsm.DataType = DbType.String;
				colvarScjqsm.MaxLength = 100;
				colvarScjqsm.AutoIncrement = false;
				colvarScjqsm.IsNullable = true;
				colvarScjqsm.IsPrimaryKey = false;
				colvarScjqsm.IsForeignKey = false;
				colvarScjqsm.IsReadOnly = false;
				colvarScjqsm.DefaultSetting = @"";
				colvarScjqsm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScjqsm);
				
				TableSchema.TableColumn colvarScjqrq = new TableSchema.TableColumn(schema);
				colvarScjqrq.ColumnName = "SCJQRQ";
				colvarScjqrq.DataType = DbType.DateTime;
				colvarScjqrq.MaxLength = 0;
				colvarScjqrq.AutoIncrement = false;
				colvarScjqrq.IsNullable = true;
				colvarScjqrq.IsPrimaryKey = false;
				colvarScjqrq.IsForeignKey = false;
				colvarScjqrq.IsReadOnly = false;
				colvarScjqrq.DefaultSetting = @"";
				colvarScjqrq.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScjqrq);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ErpNowthwin"].AddSchema("SCT32",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Scyxjb")]
		[Bindable(true)]
		public decimal? Scyxjb 
		{
			get { return GetColumnValue<decimal?>(Columns.Scyxjb); }
			set { SetColumnValue(Columns.Scyxjb, value); }
		}
		  
		[XmlAttribute("Scgydm")]
		[Bindable(true)]
		public string Scgydm 
		{
			get { return GetColumnValue<string>(Columns.Scgydm); }
			set { SetColumnValue(Columns.Scgydm, value); }
		}
		  
		[XmlAttribute("Scwpsl")]
		[Bindable(true)]
		public decimal? Scwpsl 
		{
			get { return GetColumnValue<decimal?>(Columns.Scwpsl); }
			set { SetColumnValue(Columns.Scwpsl, value); }
		}
		  
		[XmlAttribute("Scjhbz")]
		[Bindable(true)]
		public string Scjhbz 
		{
			get { return GetColumnValue<string>(Columns.Scjhbz); }
			set { SetColumnValue(Columns.Scjhbz, value); }
		}
		  
		[XmlAttribute("Scpcrq")]
		[Bindable(true)]
		public DateTime? Scpcrq 
		{
			get { return GetColumnValue<DateTime?>(Columns.Scpcrq); }
			set { SetColumnValue(Columns.Scpcrq, value); }
		}
		  
		[XmlAttribute("Scndxs")]
		[Bindable(true)]
		public decimal? Scndxs 
		{
			get { return GetColumnValue<decimal?>(Columns.Scndxs); }
			set { SetColumnValue(Columns.Scndxs, value); }
		}
		  
		[XmlAttribute("Schtbh")]
		[Bindable(true)]
		public string Schtbh 
		{
			get { return GetColumnValue<string>(Columns.Schtbh); }
			set { SetColumnValue(Columns.Schtbh, value); }
		}
		  
		[XmlAttribute("Schtxh")]
		[Bindable(true)]
		public decimal Schtxh 
		{
			get { return GetColumnValue<decimal>(Columns.Schtxh); }
			set { SetColumnValue(Columns.Schtxh, value); }
		}
		  
		[XmlAttribute("Xtwpks")]
		[Bindable(true)]
		public string Xtwpks 
		{
			get { return GetColumnValue<string>(Columns.Xtwpks); }
			set { SetColumnValue(Columns.Xtwpks, value); }
		}
		  
		[XmlAttribute("Xtwpys")]
		[Bindable(true)]
		public string Xtwpys 
		{
			get { return GetColumnValue<string>(Columns.Xtwpys); }
			set { SetColumnValue(Columns.Xtwpys, value); }
		}
		  
		[XmlAttribute("Xtwpdm")]
		[Bindable(true)]
		public string Xtwpdm 
		{
			get { return GetColumnValue<string>(Columns.Xtwpdm); }
			set { SetColumnValue(Columns.Xtwpdm, value); }
		}
		  
		[XmlAttribute("Scjgdj")]
		[Bindable(true)]
		public decimal? Scjgdj 
		{
			get { return GetColumnValue<decimal?>(Columns.Scjgdj); }
			set { SetColumnValue(Columns.Scjgdj, value); }
		}
		  
		[XmlAttribute("Schtsl")]
		[Bindable(true)]
		public decimal? Schtsl 
		{
			get { return GetColumnValue<decimal?>(Columns.Schtsl); }
			set { SetColumnValue(Columns.Schtsl, value); }
		}
		  
		[XmlAttribute("Scjhrq")]
		[Bindable(true)]
		public DateTime? Scjhrq 
		{
			get { return GetColumnValue<DateTime?>(Columns.Scjhrq); }
			set { SetColumnValue(Columns.Scjhrq, value); }
		}
		  
		[XmlAttribute("Scjhdd")]
		[Bindable(true)]
		public string Scjhdd 
		{
			get { return GetColumnValue<string>(Columns.Scjhdd); }
			set { SetColumnValue(Columns.Scjhdd, value); }
		}
		  
		[XmlAttribute("Scjqbz")]
		[Bindable(true)]
		public string Scjqbz 
		{
			get { return GetColumnValue<string>(Columns.Scjqbz); }
			set { SetColumnValue(Columns.Scjqbz, value); }
		}
		  
		[XmlAttribute("Scjqsm")]
		[Bindable(true)]
		public string Scjqsm 
		{
			get { return GetColumnValue<string>(Columns.Scjqsm); }
			set { SetColumnValue(Columns.Scjqsm, value); }
		}
		  
		[XmlAttribute("Scjqrq")]
		[Bindable(true)]
		public DateTime? Scjqrq 
		{
			get { return GetColumnValue<DateTime?>(Columns.Scjqrq); }
			set { SetColumnValue(Columns.Scjqrq, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(decimal? varScyxjb,string varScgydm,decimal? varScwpsl,string varScjhbz,DateTime? varScpcrq,decimal? varScndxs,string varSchtbh,decimal varSchtxh,string varXtwpks,string varXtwpys,string varXtwpdm,decimal? varScjgdj,decimal? varSchtsl,DateTime? varScjhrq,string varScjhdd,string varScjqbz,string varScjqsm,DateTime? varScjqrq)
		{
			SCT32 item = new SCT32();
			
			item.Scyxjb = varScyxjb;
			
			item.Scgydm = varScgydm;
			
			item.Scwpsl = varScwpsl;
			
			item.Scjhbz = varScjhbz;
			
			item.Scpcrq = varScpcrq;
			
			item.Scndxs = varScndxs;
			
			item.Schtbh = varSchtbh;
			
			item.Schtxh = varSchtxh;
			
			item.Xtwpks = varXtwpks;
			
			item.Xtwpys = varXtwpys;
			
			item.Xtwpdm = varXtwpdm;
			
			item.Scjgdj = varScjgdj;
			
			item.Schtsl = varSchtsl;
			
			item.Scjhrq = varScjhrq;
			
			item.Scjhdd = varScjhdd;
			
			item.Scjqbz = varScjqbz;
			
			item.Scjqsm = varScjqsm;
			
			item.Scjqrq = varScjqrq;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(decimal? varScyxjb,string varScgydm,decimal? varScwpsl,string varScjhbz,DateTime? varScpcrq,decimal? varScndxs,string varSchtbh,decimal varSchtxh,string varXtwpks,string varXtwpys,string varXtwpdm,decimal? varScjgdj,decimal? varSchtsl,DateTime? varScjhrq,string varScjhdd,string varScjqbz,string varScjqsm,DateTime? varScjqrq)
		{
			SCT32 item = new SCT32();
			
				item.Scyxjb = varScyxjb;
			
				item.Scgydm = varScgydm;
			
				item.Scwpsl = varScwpsl;
			
				item.Scjhbz = varScjhbz;
			
				item.Scpcrq = varScpcrq;
			
				item.Scndxs = varScndxs;
			
				item.Schtbh = varSchtbh;
			
				item.Schtxh = varSchtxh;
			
				item.Xtwpks = varXtwpks;
			
				item.Xtwpys = varXtwpys;
			
				item.Xtwpdm = varXtwpdm;
			
				item.Scjgdj = varScjgdj;
			
				item.Schtsl = varSchtsl;
			
				item.Scjhrq = varScjhrq;
			
				item.Scjhdd = varScjhdd;
			
				item.Scjqbz = varScjqbz;
			
				item.Scjqsm = varScjqsm;
			
				item.Scjqrq = varScjqrq;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn ScyxjbColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn ScgydmColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn ScwpslColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn ScjhbzColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn ScpcrqColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn ScndxsColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn SchtbhColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn SchtxhColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn XtwpksColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn XtwpysColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn XtwpdmColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn ScjgdjColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn SchtslColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        public static TableSchema.TableColumn ScjhrqColumn
        {
            get { return Schema.Columns[13]; }
        }
        
        
        
        public static TableSchema.TableColumn ScjhddColumn
        {
            get { return Schema.Columns[14]; }
        }
        
        
        
        public static TableSchema.TableColumn ScjqbzColumn
        {
            get { return Schema.Columns[15]; }
        }
        
        
        
        public static TableSchema.TableColumn ScjqsmColumn
        {
            get { return Schema.Columns[16]; }
        }
        
        
        
        public static TableSchema.TableColumn ScjqrqColumn
        {
            get { return Schema.Columns[17]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Scyxjb = @"SCYXJB";
			 public static string Scgydm = @"SCGYDM";
			 public static string Scwpsl = @"SCWPSL";
			 public static string Scjhbz = @"SCJHBZ";
			 public static string Scpcrq = @"SCPCRQ";
			 public static string Scndxs = @"SCNDXS";
			 public static string Schtbh = @"SCHTBH";
			 public static string Schtxh = @"SCHTXH";
			 public static string Xtwpks = @"XTWPKS";
			 public static string Xtwpys = @"XTWPYS";
			 public static string Xtwpdm = @"XTWPDM";
			 public static string Scjgdj = @"SCJGDJ";
			 public static string Schtsl = @"SCHTSL";
			 public static string Scjhrq = @"SCJHRQ";
			 public static string Scjhdd = @"SCJHDD";
			 public static string Scjqbz = @"SCJQBZ";
			 public static string Scjqsm = @"SCJQSM";
			 public static string Scjqrq = @"SCJQRQ";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}

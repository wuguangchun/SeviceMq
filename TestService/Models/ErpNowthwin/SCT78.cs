using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace OracleDataDomain
{
	/// <summary>
	/// Strongly-typed collection for the SCT78 class.
	/// </summary>
    [Serializable]
	public partial class SCT78Collection : ActiveList<SCT78, SCT78Collection>
	{	   
		public SCT78Collection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>SCT78Collection</returns>
		public SCT78Collection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                SCT78 o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the SCT78 table.
	/// </summary>
	[Serializable]
	public partial class SCT78 : ActiveRecord<SCT78>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public SCT78()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public SCT78(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public SCT78(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public SCT78(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("SCT78", TableType.Table, DataService.GetInstance("ErpNowthwin"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"FYERP";
				//columns
				
				TableSchema.TableColumn colvarSchsnd = new TableSchema.TableColumn(schema);
				colvarSchsnd.ColumnName = "SCHSND";
				colvarSchsnd.DataType = DbType.Decimal;
				colvarSchsnd.MaxLength = 0;
				colvarSchsnd.AutoIncrement = false;
				colvarSchsnd.IsNullable = false;
				colvarSchsnd.IsPrimaryKey = true;
				colvarSchsnd.IsForeignKey = false;
				colvarSchsnd.IsReadOnly = false;
				colvarSchsnd.DefaultSetting = @"";
				colvarSchsnd.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSchsnd);
				
				TableSchema.TableColumn colvarSchsyf = new TableSchema.TableColumn(schema);
				colvarSchsyf.ColumnName = "SCHSYF";
				colvarSchsyf.DataType = DbType.Decimal;
				colvarSchsyf.MaxLength = 0;
				colvarSchsyf.AutoIncrement = false;
				colvarSchsyf.IsNullable = false;
				colvarSchsyf.IsPrimaryKey = true;
				colvarSchsyf.IsForeignKey = false;
				colvarSchsyf.IsReadOnly = false;
				colvarSchsyf.DefaultSetting = @"";
				colvarSchsyf.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSchsyf);
				
				TableSchema.TableColumn colvarScscdm = new TableSchema.TableColumn(schema);
				colvarScscdm.ColumnName = "SCSCDM";
				colvarScscdm.DataType = DbType.String;
				colvarScscdm.MaxLength = 8;
				colvarScscdm.AutoIncrement = false;
				colvarScscdm.IsNullable = false;
				colvarScscdm.IsPrimaryKey = true;
				colvarScscdm.IsForeignKey = false;
				colvarScscdm.IsReadOnly = false;
				colvarScscdm.DefaultSetting = @"";
				colvarScscdm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScscdm);
				
				TableSchema.TableColumn colvarScmbfh = new TableSchema.TableColumn(schema);
				colvarScmbfh.ColumnName = "SCMBFH";
				colvarScmbfh.DataType = DbType.Decimal;
				colvarScmbfh.MaxLength = 0;
				colvarScmbfh.AutoIncrement = false;
				colvarScmbfh.IsNullable = true;
				colvarScmbfh.IsPrimaryKey = false;
				colvarScmbfh.IsForeignKey = false;
				colvarScmbfh.IsReadOnly = false;
				colvarScmbfh.DefaultSetting = @"";
				colvarScmbfh.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScmbfh);
				
				TableSchema.TableColumn colvarScpcfh = new TableSchema.TableColumn(schema);
				colvarScpcfh.ColumnName = "SCPCFH";
				colvarScpcfh.DataType = DbType.Decimal;
				colvarScpcfh.MaxLength = 0;
				colvarScpcfh.AutoIncrement = false;
				colvarScpcfh.IsNullable = true;
				colvarScpcfh.IsPrimaryKey = false;
				colvarScpcfh.IsForeignKey = false;
				colvarScpcfh.IsReadOnly = false;
				colvarScpcfh.DefaultSetting = @"";
				colvarScpcfh.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScpcfh);
				
				TableSchema.TableColumn colvarScsjfh = new TableSchema.TableColumn(schema);
				colvarScsjfh.ColumnName = "SCSJFH";
				colvarScsjfh.DataType = DbType.Decimal;
				colvarScsjfh.MaxLength = 0;
				colvarScsjfh.AutoIncrement = false;
				colvarScsjfh.IsNullable = true;
				colvarScsjfh.IsPrimaryKey = false;
				colvarScsjfh.IsForeignKey = false;
				colvarScsjfh.IsReadOnly = false;
				colvarScsjfh.DefaultSetting = @"";
				colvarScsjfh.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScsjfh);
				
				TableSchema.TableColumn colvarSctcds = new TableSchema.TableColumn(schema);
				colvarSctcds.ColumnName = "SCTCDS";
				colvarSctcds.DataType = DbType.Decimal;
				colvarSctcds.MaxLength = 0;
				colvarSctcds.AutoIncrement = false;
				colvarSctcds.IsNullable = true;
				colvarSctcds.IsPrimaryKey = false;
				colvarSctcds.IsForeignKey = false;
				colvarSctcds.IsReadOnly = false;
				colvarSctcds.DefaultSetting = @"";
				colvarSctcds.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSctcds);
				
				TableSchema.TableColumn colvarScywcs = new TableSchema.TableColumn(schema);
				colvarScywcs.ColumnName = "SCYWCS";
				colvarScywcs.DataType = DbType.Decimal;
				colvarScywcs.MaxLength = 0;
				colvarScywcs.AutoIncrement = false;
				colvarScywcs.IsNullable = true;
				colvarScywcs.IsPrimaryKey = false;
				colvarScywcs.IsForeignKey = false;
				colvarScywcs.IsReadOnly = false;
				colvarScywcs.DefaultSetting = @"";
				colvarScywcs.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScywcs);
				
				TableSchema.TableColumn colvarScjxpf = new TableSchema.TableColumn(schema);
				colvarScjxpf.ColumnName = "SCJXPF";
				colvarScjxpf.DataType = DbType.Decimal;
				colvarScjxpf.MaxLength = 0;
				colvarScjxpf.AutoIncrement = false;
				colvarScjxpf.IsNullable = true;
				colvarScjxpf.IsPrimaryKey = false;
				colvarScjxpf.IsForeignKey = false;
				colvarScjxpf.IsReadOnly = false;
				colvarScjxpf.DefaultSetting = @"";
				colvarScjxpf.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScjxpf);
				
				TableSchema.TableColumn colvarScmbxl = new TableSchema.TableColumn(schema);
				colvarScmbxl.ColumnName = "SCMBXL";
				colvarScmbxl.DataType = DbType.Decimal;
				colvarScmbxl.MaxLength = 0;
				colvarScmbxl.AutoIncrement = false;
				colvarScmbxl.IsNullable = true;
				colvarScmbxl.IsPrimaryKey = false;
				colvarScmbxl.IsForeignKey = false;
				colvarScmbxl.IsReadOnly = false;
				colvarScmbxl.DefaultSetting = @"";
				colvarScmbxl.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScmbxl);
				
				TableSchema.TableColumn colvarScsjxl = new TableSchema.TableColumn(schema);
				colvarScsjxl.ColumnName = "SCSJXL";
				colvarScsjxl.DataType = DbType.Decimal;
				colvarScsjxl.MaxLength = 0;
				colvarScsjxl.AutoIncrement = false;
				colvarScsjxl.IsNullable = true;
				colvarScsjxl.IsPrimaryKey = false;
				colvarScsjxl.IsForeignKey = false;
				colvarScsjxl.IsReadOnly = false;
				colvarScsjxl.DefaultSetting = @"";
				colvarScsjxl.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScsjxl);
				
				TableSchema.TableColumn colvarScxlpf = new TableSchema.TableColumn(schema);
				colvarScxlpf.ColumnName = "SCXLPF";
				colvarScxlpf.DataType = DbType.Decimal;
				colvarScxlpf.MaxLength = 0;
				colvarScxlpf.AutoIncrement = false;
				colvarScxlpf.IsNullable = true;
				colvarScxlpf.IsPrimaryKey = false;
				colvarScxlpf.IsForeignKey = false;
				colvarScxlpf.IsReadOnly = false;
				colvarScxlpf.DefaultSetting = @"";
				colvarScxlpf.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScxlpf);
				
				TableSchema.TableColumn colvarScmbzl = new TableSchema.TableColumn(schema);
				colvarScmbzl.ColumnName = "SCMBZL";
				colvarScmbzl.DataType = DbType.Decimal;
				colvarScmbzl.MaxLength = 0;
				colvarScmbzl.AutoIncrement = false;
				colvarScmbzl.IsNullable = true;
				colvarScmbzl.IsPrimaryKey = false;
				colvarScmbzl.IsForeignKey = false;
				colvarScmbzl.IsReadOnly = false;
				colvarScmbzl.DefaultSetting = @"";
				colvarScmbzl.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScmbzl);
				
				TableSchema.TableColumn colvarScsjzl = new TableSchema.TableColumn(schema);
				colvarScsjzl.ColumnName = "SCSJZL";
				colvarScsjzl.DataType = DbType.Decimal;
				colvarScsjzl.MaxLength = 0;
				colvarScsjzl.AutoIncrement = false;
				colvarScsjzl.IsNullable = true;
				colvarScsjzl.IsPrimaryKey = false;
				colvarScsjzl.IsForeignKey = false;
				colvarScsjzl.IsReadOnly = false;
				colvarScsjzl.DefaultSetting = @"";
				colvarScsjzl.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScsjzl);
				
				TableSchema.TableColumn colvarSczlpf = new TableSchema.TableColumn(schema);
				colvarSczlpf.ColumnName = "SCZLPF";
				colvarSczlpf.DataType = DbType.Decimal;
				colvarSczlpf.MaxLength = 0;
				colvarSczlpf.AutoIncrement = false;
				colvarSczlpf.IsNullable = true;
				colvarSczlpf.IsPrimaryKey = false;
				colvarSczlpf.IsForeignKey = false;
				colvarSczlpf.IsReadOnly = false;
				colvarSczlpf.DefaultSetting = @"";
				colvarSczlpf.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSczlpf);
				
				TableSchema.TableColumn colvarScswcl = new TableSchema.TableColumn(schema);
				colvarScswcl.ColumnName = "SCSWCL";
				colvarScswcl.DataType = DbType.Decimal;
				colvarScswcl.MaxLength = 0;
				colvarScswcl.AutoIncrement = false;
				colvarScswcl.IsNullable = true;
				colvarScswcl.IsPrimaryKey = false;
				colvarScswcl.IsForeignKey = false;
				colvarScswcl.IsReadOnly = false;
				colvarScswcl.DefaultSetting = @"";
				colvarScswcl.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScswcl);
				
				TableSchema.TableColumn colvarScswpf = new TableSchema.TableColumn(schema);
				colvarScswpf.ColumnName = "SCSWPF";
				colvarScswpf.DataType = DbType.Decimal;
				colvarScswpf.MaxLength = 0;
				colvarScswpf.AutoIncrement = false;
				colvarScswpf.IsNullable = true;
				colvarScswpf.IsPrimaryKey = false;
				colvarScswpf.IsForeignKey = false;
				colvarScswpf.IsReadOnly = false;
				colvarScswpf.DefaultSetting = @"";
				colvarScswpf.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScswpf);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ErpNowthwin"].AddSchema("SCT78",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Schsnd")]
		[Bindable(true)]
		public decimal Schsnd 
		{
			get { return GetColumnValue<decimal>(Columns.Schsnd); }
			set { SetColumnValue(Columns.Schsnd, value); }
		}
		  
		[XmlAttribute("Schsyf")]
		[Bindable(true)]
		public decimal Schsyf 
		{
			get { return GetColumnValue<decimal>(Columns.Schsyf); }
			set { SetColumnValue(Columns.Schsyf, value); }
		}
		  
		[XmlAttribute("Scscdm")]
		[Bindable(true)]
		public string Scscdm 
		{
			get { return GetColumnValue<string>(Columns.Scscdm); }
			set { SetColumnValue(Columns.Scscdm, value); }
		}
		  
		[XmlAttribute("Scmbfh")]
		[Bindable(true)]
		public decimal? Scmbfh 
		{
			get { return GetColumnValue<decimal?>(Columns.Scmbfh); }
			set { SetColumnValue(Columns.Scmbfh, value); }
		}
		  
		[XmlAttribute("Scpcfh")]
		[Bindable(true)]
		public decimal? Scpcfh 
		{
			get { return GetColumnValue<decimal?>(Columns.Scpcfh); }
			set { SetColumnValue(Columns.Scpcfh, value); }
		}
		  
		[XmlAttribute("Scsjfh")]
		[Bindable(true)]
		public decimal? Scsjfh 
		{
			get { return GetColumnValue<decimal?>(Columns.Scsjfh); }
			set { SetColumnValue(Columns.Scsjfh, value); }
		}
		  
		[XmlAttribute("Sctcds")]
		[Bindable(true)]
		public decimal? Sctcds 
		{
			get { return GetColumnValue<decimal?>(Columns.Sctcds); }
			set { SetColumnValue(Columns.Sctcds, value); }
		}
		  
		[XmlAttribute("Scywcs")]
		[Bindable(true)]
		public decimal? Scywcs 
		{
			get { return GetColumnValue<decimal?>(Columns.Scywcs); }
			set { SetColumnValue(Columns.Scywcs, value); }
		}
		  
		[XmlAttribute("Scjxpf")]
		[Bindable(true)]
		public decimal? Scjxpf 
		{
			get { return GetColumnValue<decimal?>(Columns.Scjxpf); }
			set { SetColumnValue(Columns.Scjxpf, value); }
		}
		  
		[XmlAttribute("Scmbxl")]
		[Bindable(true)]
		public decimal? Scmbxl 
		{
			get { return GetColumnValue<decimal?>(Columns.Scmbxl); }
			set { SetColumnValue(Columns.Scmbxl, value); }
		}
		  
		[XmlAttribute("Scsjxl")]
		[Bindable(true)]
		public decimal? Scsjxl 
		{
			get { return GetColumnValue<decimal?>(Columns.Scsjxl); }
			set { SetColumnValue(Columns.Scsjxl, value); }
		}
		  
		[XmlAttribute("Scxlpf")]
		[Bindable(true)]
		public decimal? Scxlpf 
		{
			get { return GetColumnValue<decimal?>(Columns.Scxlpf); }
			set { SetColumnValue(Columns.Scxlpf, value); }
		}
		  
		[XmlAttribute("Scmbzl")]
		[Bindable(true)]
		public decimal? Scmbzl 
		{
			get { return GetColumnValue<decimal?>(Columns.Scmbzl); }
			set { SetColumnValue(Columns.Scmbzl, value); }
		}
		  
		[XmlAttribute("Scsjzl")]
		[Bindable(true)]
		public decimal? Scsjzl 
		{
			get { return GetColumnValue<decimal?>(Columns.Scsjzl); }
			set { SetColumnValue(Columns.Scsjzl, value); }
		}
		  
		[XmlAttribute("Sczlpf")]
		[Bindable(true)]
		public decimal? Sczlpf 
		{
			get { return GetColumnValue<decimal?>(Columns.Sczlpf); }
			set { SetColumnValue(Columns.Sczlpf, value); }
		}
		  
		[XmlAttribute("Scswcl")]
		[Bindable(true)]
		public decimal? Scswcl 
		{
			get { return GetColumnValue<decimal?>(Columns.Scswcl); }
			set { SetColumnValue(Columns.Scswcl, value); }
		}
		  
		[XmlAttribute("Scswpf")]
		[Bindable(true)]
		public decimal? Scswpf 
		{
			get { return GetColumnValue<decimal?>(Columns.Scswpf); }
			set { SetColumnValue(Columns.Scswpf, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(decimal varSchsnd,decimal varSchsyf,string varScscdm,decimal? varScmbfh,decimal? varScpcfh,decimal? varScsjfh,decimal? varSctcds,decimal? varScywcs,decimal? varScjxpf,decimal? varScmbxl,decimal? varScsjxl,decimal? varScxlpf,decimal? varScmbzl,decimal? varScsjzl,decimal? varSczlpf,decimal? varScswcl,decimal? varScswpf)
		{
			SCT78 item = new SCT78();
			
			item.Schsnd = varSchsnd;
			
			item.Schsyf = varSchsyf;
			
			item.Scscdm = varScscdm;
			
			item.Scmbfh = varScmbfh;
			
			item.Scpcfh = varScpcfh;
			
			item.Scsjfh = varScsjfh;
			
			item.Sctcds = varSctcds;
			
			item.Scywcs = varScywcs;
			
			item.Scjxpf = varScjxpf;
			
			item.Scmbxl = varScmbxl;
			
			item.Scsjxl = varScsjxl;
			
			item.Scxlpf = varScxlpf;
			
			item.Scmbzl = varScmbzl;
			
			item.Scsjzl = varScsjzl;
			
			item.Sczlpf = varSczlpf;
			
			item.Scswcl = varScswcl;
			
			item.Scswpf = varScswpf;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(decimal varSchsnd,decimal varSchsyf,string varScscdm,decimal? varScmbfh,decimal? varScpcfh,decimal? varScsjfh,decimal? varSctcds,decimal? varScywcs,decimal? varScjxpf,decimal? varScmbxl,decimal? varScsjxl,decimal? varScxlpf,decimal? varScmbzl,decimal? varScsjzl,decimal? varSczlpf,decimal? varScswcl,decimal? varScswpf)
		{
			SCT78 item = new SCT78();
			
				item.Schsnd = varSchsnd;
			
				item.Schsyf = varSchsyf;
			
				item.Scscdm = varScscdm;
			
				item.Scmbfh = varScmbfh;
			
				item.Scpcfh = varScpcfh;
			
				item.Scsjfh = varScsjfh;
			
				item.Sctcds = varSctcds;
			
				item.Scywcs = varScywcs;
			
				item.Scjxpf = varScjxpf;
			
				item.Scmbxl = varScmbxl;
			
				item.Scsjxl = varScsjxl;
			
				item.Scxlpf = varScxlpf;
			
				item.Scmbzl = varScmbzl;
			
				item.Scsjzl = varScsjzl;
			
				item.Sczlpf = varSczlpf;
			
				item.Scswcl = varScswcl;
			
				item.Scswpf = varScswpf;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn SchsndColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn SchsyfColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn ScscdmColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn ScmbfhColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn ScpcfhColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn ScsjfhColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn SctcdsColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn ScywcsColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn ScjxpfColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn ScmbxlColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn ScsjxlColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn ScxlpfColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn ScmbzlColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        public static TableSchema.TableColumn ScsjzlColumn
        {
            get { return Schema.Columns[13]; }
        }
        
        
        
        public static TableSchema.TableColumn SczlpfColumn
        {
            get { return Schema.Columns[14]; }
        }
        
        
        
        public static TableSchema.TableColumn ScswclColumn
        {
            get { return Schema.Columns[15]; }
        }
        
        
        
        public static TableSchema.TableColumn ScswpfColumn
        {
            get { return Schema.Columns[16]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Schsnd = @"SCHSND";
			 public static string Schsyf = @"SCHSYF";
			 public static string Scscdm = @"SCSCDM";
			 public static string Scmbfh = @"SCMBFH";
			 public static string Scpcfh = @"SCPCFH";
			 public static string Scsjfh = @"SCSJFH";
			 public static string Sctcds = @"SCTCDS";
			 public static string Scywcs = @"SCYWCS";
			 public static string Scjxpf = @"SCJXPF";
			 public static string Scmbxl = @"SCMBXL";
			 public static string Scsjxl = @"SCSJXL";
			 public static string Scxlpf = @"SCXLPF";
			 public static string Scmbzl = @"SCMBZL";
			 public static string Scsjzl = @"SCSJZL";
			 public static string Sczlpf = @"SCZLPF";
			 public static string Scswcl = @"SCSWCL";
			 public static string Scswpf = @"SCSWPF";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}

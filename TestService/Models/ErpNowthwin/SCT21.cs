using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace OracleDataDomain
{
	/// <summary>
	/// Strongly-typed collection for the SCT21 class.
	/// </summary>
    [Serializable]
	public partial class SCT21Collection : ActiveList<SCT21, SCT21Collection>
	{	   
		public SCT21Collection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>SCT21Collection</returns>
		public SCT21Collection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                SCT21 o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the SCT21 table.
	/// </summary>
	[Serializable]
	public partial class SCT21 : ActiveRecord<SCT21>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public SCT21()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public SCT21(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public SCT21(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public SCT21(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("SCT21", TableType.Table, DataService.GetInstance("ErpNowthwin"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"FYERP";
				//columns
				
				TableSchema.TableColumn colvarScpjdm = new TableSchema.TableColumn(schema);
				colvarScpjdm.ColumnName = "SCPJDM";
				colvarScpjdm.DataType = DbType.String;
				colvarScpjdm.MaxLength = 2;
				colvarScpjdm.AutoIncrement = false;
				colvarScpjdm.IsNullable = false;
				colvarScpjdm.IsPrimaryKey = true;
				colvarScpjdm.IsForeignKey = false;
				colvarScpjdm.IsReadOnly = false;
				colvarScpjdm.DefaultSetting = @"";
				colvarScpjdm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScpjdm);
				
				TableSchema.TableColumn colvarSccndm = new TableSchema.TableColumn(schema);
				colvarSccndm.ColumnName = "SCCNDM";
				colvarSccndm.DataType = DbType.String;
				colvarSccndm.MaxLength = 4;
				colvarSccndm.AutoIncrement = false;
				colvarSccndm.IsNullable = false;
				colvarSccndm.IsPrimaryKey = true;
				colvarSccndm.IsForeignKey = false;
				colvarSccndm.IsReadOnly = false;
				colvarSccndm.DefaultSetting = @"";
				colvarSccndm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSccndm);
				
				TableSchema.TableColumn colvarSchtbh = new TableSchema.TableColumn(schema);
				colvarSchtbh.ColumnName = "SCHTBH";
				colvarSchtbh.DataType = DbType.String;
				colvarSchtbh.MaxLength = 12;
				colvarSchtbh.AutoIncrement = false;
				colvarSchtbh.IsNullable = false;
				colvarSchtbh.IsPrimaryKey = true;
				colvarSchtbh.IsForeignKey = false;
				colvarSchtbh.IsReadOnly = false;
				colvarSchtbh.DefaultSetting = @"";
				colvarSchtbh.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSchtbh);
				
				TableSchema.TableColumn colvarSchtxh = new TableSchema.TableColumn(schema);
				colvarSchtxh.ColumnName = "SCHTXH";
				colvarSchtxh.DataType = DbType.Decimal;
				colvarSchtxh.MaxLength = 0;
				colvarSchtxh.AutoIncrement = false;
				colvarSchtxh.IsNullable = false;
				colvarSchtxh.IsPrimaryKey = true;
				colvarSchtxh.IsForeignKey = false;
				colvarSchtxh.IsReadOnly = false;
				colvarSchtxh.DefaultSetting = @"";
				colvarSchtxh.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSchtxh);
				
				TableSchema.TableColumn colvarScjhrq = new TableSchema.TableColumn(schema);
				colvarScjhrq.ColumnName = "SCJHRQ";
				colvarScjhrq.DataType = DbType.DateTime;
				colvarScjhrq.MaxLength = 0;
				colvarScjhrq.AutoIncrement = false;
				colvarScjhrq.IsNullable = false;
				colvarScjhrq.IsPrimaryKey = true;
				colvarScjhrq.IsForeignKey = false;
				colvarScjhrq.IsReadOnly = false;
				colvarScjhrq.DefaultSetting = @"";
				colvarScjhrq.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScjhrq);
				
				TableSchema.TableColumn colvarScapsl = new TableSchema.TableColumn(schema);
				colvarScapsl.ColumnName = "SCAPSL";
				colvarScapsl.DataType = DbType.Decimal;
				colvarScapsl.MaxLength = 0;
				colvarScapsl.AutoIncrement = false;
				colvarScapsl.IsNullable = true;
				colvarScapsl.IsPrimaryKey = false;
				colvarScapsl.IsForeignKey = false;
				colvarScapsl.IsReadOnly = false;
				colvarScapsl.DefaultSetting = @"";
				colvarScapsl.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScapsl);
				
				TableSchema.TableColumn colvarSczhsl = new TableSchema.TableColumn(schema);
				colvarSczhsl.ColumnName = "SCZHSL";
				colvarSczhsl.DataType = DbType.Decimal;
				colvarSczhsl.MaxLength = 0;
				colvarSczhsl.AutoIncrement = false;
				colvarSczhsl.IsNullable = true;
				colvarSczhsl.IsPrimaryKey = false;
				colvarSczhsl.IsForeignKey = false;
				colvarSczhsl.IsReadOnly = false;
				colvarSczhsl.DefaultSetting = @"";
				colvarSczhsl.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSczhsl);
				
				TableSchema.TableColumn colvarScddlx = new TableSchema.TableColumn(schema);
				colvarScddlx.ColumnName = "SCDDLX";
				colvarScddlx.DataType = DbType.String;
				colvarScddlx.MaxLength = 1;
				colvarScddlx.AutoIncrement = false;
				colvarScddlx.IsNullable = true;
				colvarScddlx.IsPrimaryKey = false;
				colvarScddlx.IsForeignKey = false;
				colvarScddlx.IsReadOnly = false;
				colvarScddlx.DefaultSetting = @"";
				colvarScddlx.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScddlx);
				
				TableSchema.TableColumn colvarSccpdl = new TableSchema.TableColumn(schema);
				colvarSccpdl.ColumnName = "SCCPDL";
				colvarSccpdl.DataType = DbType.String;
				colvarSccpdl.MaxLength = 20;
				colvarSccpdl.AutoIncrement = false;
				colvarSccpdl.IsNullable = true;
				colvarSccpdl.IsPrimaryKey = false;
				colvarSccpdl.IsForeignKey = false;
				colvarSccpdl.IsReadOnly = false;
				colvarSccpdl.DefaultSetting = @"";
				colvarSccpdl.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSccpdl);
				
				TableSchema.TableColumn colvarSctzzt = new TableSchema.TableColumn(schema);
				colvarSctzzt.ColumnName = "SCTZZT";
				colvarSctzzt.DataType = DbType.String;
				colvarSctzzt.MaxLength = 1;
				colvarSctzzt.AutoIncrement = false;
				colvarSctzzt.IsNullable = true;
				colvarSctzzt.IsPrimaryKey = false;
				colvarSctzzt.IsForeignKey = false;
				colvarSctzzt.IsReadOnly = false;
				colvarSctzzt.DefaultSetting = @"";
				colvarSctzzt.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSctzzt);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ErpNowthwin"].AddSchema("SCT21",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Scpjdm")]
		[Bindable(true)]
		public string Scpjdm 
		{
			get { return GetColumnValue<string>(Columns.Scpjdm); }
			set { SetColumnValue(Columns.Scpjdm, value); }
		}
		  
		[XmlAttribute("Sccndm")]
		[Bindable(true)]
		public string Sccndm 
		{
			get { return GetColumnValue<string>(Columns.Sccndm); }
			set { SetColumnValue(Columns.Sccndm, value); }
		}
		  
		[XmlAttribute("Schtbh")]
		[Bindable(true)]
		public string Schtbh 
		{
			get { return GetColumnValue<string>(Columns.Schtbh); }
			set { SetColumnValue(Columns.Schtbh, value); }
		}
		  
		[XmlAttribute("Schtxh")]
		[Bindable(true)]
		public decimal Schtxh 
		{
			get { return GetColumnValue<decimal>(Columns.Schtxh); }
			set { SetColumnValue(Columns.Schtxh, value); }
		}
		  
		[XmlAttribute("Scjhrq")]
		[Bindable(true)]
		public DateTime Scjhrq 
		{
			get { return GetColumnValue<DateTime>(Columns.Scjhrq); }
			set { SetColumnValue(Columns.Scjhrq, value); }
		}
		  
		[XmlAttribute("Scapsl")]
		[Bindable(true)]
		public decimal? Scapsl 
		{
			get { return GetColumnValue<decimal?>(Columns.Scapsl); }
			set { SetColumnValue(Columns.Scapsl, value); }
		}
		  
		[XmlAttribute("Sczhsl")]
		[Bindable(true)]
		public decimal? Sczhsl 
		{
			get { return GetColumnValue<decimal?>(Columns.Sczhsl); }
			set { SetColumnValue(Columns.Sczhsl, value); }
		}
		  
		[XmlAttribute("Scddlx")]
		[Bindable(true)]
		public string Scddlx 
		{
			get { return GetColumnValue<string>(Columns.Scddlx); }
			set { SetColumnValue(Columns.Scddlx, value); }
		}
		  
		[XmlAttribute("Sccpdl")]
		[Bindable(true)]
		public string Sccpdl 
		{
			get { return GetColumnValue<string>(Columns.Sccpdl); }
			set { SetColumnValue(Columns.Sccpdl, value); }
		}
		  
		[XmlAttribute("Sctzzt")]
		[Bindable(true)]
		public string Sctzzt 
		{
			get { return GetColumnValue<string>(Columns.Sctzzt); }
			set { SetColumnValue(Columns.Sctzzt, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varScpjdm,string varSccndm,string varSchtbh,decimal varSchtxh,DateTime varScjhrq,decimal? varScapsl,decimal? varSczhsl,string varScddlx,string varSccpdl,string varSctzzt)
		{
			SCT21 item = new SCT21();
			
			item.Scpjdm = varScpjdm;
			
			item.Sccndm = varSccndm;
			
			item.Schtbh = varSchtbh;
			
			item.Schtxh = varSchtxh;
			
			item.Scjhrq = varScjhrq;
			
			item.Scapsl = varScapsl;
			
			item.Sczhsl = varSczhsl;
			
			item.Scddlx = varScddlx;
			
			item.Sccpdl = varSccpdl;
			
			item.Sctzzt = varSctzzt;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(string varScpjdm,string varSccndm,string varSchtbh,decimal varSchtxh,DateTime varScjhrq,decimal? varScapsl,decimal? varSczhsl,string varScddlx,string varSccpdl,string varSctzzt)
		{
			SCT21 item = new SCT21();
			
				item.Scpjdm = varScpjdm;
			
				item.Sccndm = varSccndm;
			
				item.Schtbh = varSchtbh;
			
				item.Schtxh = varSchtxh;
			
				item.Scjhrq = varScjhrq;
			
				item.Scapsl = varScapsl;
			
				item.Sczhsl = varSczhsl;
			
				item.Scddlx = varScddlx;
			
				item.Sccpdl = varSccpdl;
			
				item.Sctzzt = varSctzzt;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn ScpjdmColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn SccndmColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn SchtbhColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn SchtxhColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn ScjhrqColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn ScapslColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn SczhslColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn ScddlxColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn SccpdlColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn SctzztColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Scpjdm = @"SCPJDM";
			 public static string Sccndm = @"SCCNDM";
			 public static string Schtbh = @"SCHTBH";
			 public static string Schtxh = @"SCHTXH";
			 public static string Scjhrq = @"SCJHRQ";
			 public static string Scapsl = @"SCAPSL";
			 public static string Sczhsl = @"SCZHSL";
			 public static string Scddlx = @"SCDDLX";
			 public static string Sccpdl = @"SCCPDL";
			 public static string Sctzzt = @"SCTZZT";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}

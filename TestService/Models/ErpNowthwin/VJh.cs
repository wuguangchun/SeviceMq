using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace OracleDataDomain{
    /// <summary>
    /// Strongly-typed collection for the VJh class.
    /// </summary>
    [Serializable]
    public partial class VJhCollection : ReadOnlyList<VJh, VJhCollection>
    {        
        public VJhCollection() {}
    }
    /// <summary>
    /// This is  Read-only wrapper class for the V_JH view.
    /// </summary>
    [Serializable]
    public partial class VJh : ReadOnlyRecord<VJh>, IReadOnlyRecord
    {
    
	    #region Default Settings
	    protected static void SetSQLProps() 
	    {
		    GetTableSchema();
	    }
	    #endregion
        #region Schema Accessor
	    public static TableSchema.Table Schema
        {
            get
            {
                if (BaseSchema == null)
                {
                    SetSQLProps();
                }
                return BaseSchema;
            }
        }
    	
        private static void GetTableSchema() 
        {
            if(!IsSchemaInitialized)
            {
                //Schema declaration
                TableSchema.Table schema = new TableSchema.Table("V_JH", TableType.View, DataService.GetInstance("ErpNowthwin"));
                schema.Columns = new TableSchema.TableColumnCollection();
                schema.SchemaName = @"FYERP";
                //columns
                
                TableSchema.TableColumn colvarScgydm = new TableSchema.TableColumn(schema);
                colvarScgydm.ColumnName = "SCGYDM";
                colvarScgydm.DataType = DbType.String;
                colvarScgydm.MaxLength = 4000;
                colvarScgydm.AutoIncrement = false;
                colvarScgydm.IsNullable = true;
                colvarScgydm.IsPrimaryKey = false;
                colvarScgydm.IsForeignKey = false;
                colvarScgydm.IsReadOnly = false;
                
                schema.Columns.Add(colvarScgydm);
                
                TableSchema.TableColumn colvarScjhrq = new TableSchema.TableColumn(schema);
                colvarScjhrq.ColumnName = "SCJHRQ";
                colvarScjhrq.DataType = DbType.DateTime;
                colvarScjhrq.MaxLength = 0;
                colvarScjhrq.AutoIncrement = false;
                colvarScjhrq.IsNullable = true;
                colvarScjhrq.IsPrimaryKey = false;
                colvarScjhrq.IsForeignKey = false;
                colvarScjhrq.IsReadOnly = false;
                
                schema.Columns.Add(colvarScjhrq);
                
                TableSchema.TableColumn colvarKhdh = new TableSchema.TableColumn(schema);
                colvarKhdh.ColumnName = "KHDH";
                colvarKhdh.DataType = DbType.String;
                colvarKhdh.MaxLength = 12;
                colvarKhdh.AutoIncrement = false;
                colvarKhdh.IsNullable = true;
                colvarKhdh.IsPrimaryKey = false;
                colvarKhdh.IsForeignKey = false;
                colvarKhdh.IsReadOnly = false;
                
                schema.Columns.Add(colvarKhdh);
                
                TableSchema.TableColumn colvarScggdh = new TableSchema.TableColumn(schema);
                colvarScggdh.ColumnName = "SCGGDH";
                colvarScggdh.DataType = DbType.String;
                colvarScggdh.MaxLength = 12;
                colvarScggdh.AutoIncrement = false;
                colvarScggdh.IsNullable = false;
                colvarScggdh.IsPrimaryKey = false;
                colvarScggdh.IsForeignKey = false;
                colvarScggdh.IsReadOnly = false;
                
                schema.Columns.Add(colvarScggdh);
                
                TableSchema.TableColumn colvarXtwpmc = new TableSchema.TableColumn(schema);
                colvarXtwpmc.ColumnName = "XTWPMC";
                colvarXtwpmc.DataType = DbType.String;
                colvarXtwpmc.MaxLength = 4000;
                colvarXtwpmc.AutoIncrement = false;
                colvarXtwpmc.IsNullable = true;
                colvarXtwpmc.IsPrimaryKey = false;
                colvarXtwpmc.IsForeignKey = false;
                colvarXtwpmc.IsReadOnly = false;
                
                schema.Columns.Add(colvarXtwpmc);
                
                TableSchema.TableColumn colvarScggbz = new TableSchema.TableColumn(schema);
                colvarScggbz.ColumnName = "SCGGBZ";
                colvarScggbz.DataType = DbType.String;
                colvarScggbz.MaxLength = 1000;
                colvarScggbz.AutoIncrement = false;
                colvarScggbz.IsNullable = true;
                colvarScggbz.IsPrimaryKey = false;
                colvarScggbz.IsForeignKey = false;
                colvarScggbz.IsReadOnly = false;
                
                schema.Columns.Add(colvarScggbz);
                
                TableSchema.TableColumn colvarScjhbz = new TableSchema.TableColumn(schema);
                colvarScjhbz.ColumnName = "SCJHBZ";
                colvarScjhbz.DataType = DbType.String;
                colvarScjhbz.MaxLength = 4000;
                colvarScjhbz.AutoIncrement = false;
                colvarScjhbz.IsNullable = true;
                colvarScjhbz.IsPrimaryKey = false;
                colvarScjhbz.IsForeignKey = false;
                colvarScjhbz.IsReadOnly = false;
                
                schema.Columns.Add(colvarScjhbz);
                
                TableSchema.TableColumn colvarIsfangge = new TableSchema.TableColumn(schema);
                colvarIsfangge.ColumnName = "ISFANGGE";
                colvarIsfangge.DataType = DbType.String;
                colvarIsfangge.MaxLength = 6;
                colvarIsfangge.AutoIncrement = false;
                colvarIsfangge.IsNullable = true;
                colvarIsfangge.IsPrimaryKey = false;
                colvarIsfangge.IsForeignKey = false;
                colvarIsfangge.IsReadOnly = false;
                
                schema.Columns.Add(colvarIsfangge);
                
                TableSchema.TableColumn colvarColthtype = new TableSchema.TableColumn(schema);
                colvarColthtype.ColumnName = "COLTHTYPE";
                colvarColthtype.DataType = DbType.String;
                colvarColthtype.MaxLength = 2;
                colvarColthtype.AutoIncrement = false;
                colvarColthtype.IsNullable = true;
                colvarColthtype.IsPrimaryKey = false;
                colvarColthtype.IsForeignKey = false;
                colvarColthtype.IsReadOnly = false;
                
                schema.Columns.Add(colvarColthtype);
                
                
                BaseSchema = schema;
                //add this schema to the provider
                //so we can query it later
                DataService.Providers["ErpNowthwin"].AddSchema("V_JH",schema);
            }
        }
        #endregion
        
        #region Query Accessor
	    public static Query CreateQuery()
	    {
		    return new Query(Schema);
	    }
	    #endregion
	    
	    #region .ctors
	    public VJh()
	    {
            SetSQLProps();
            SetDefaults();
            MarkNew();
        }
        public VJh(bool useDatabaseDefaults)
	    {
		    SetSQLProps();
		    if(useDatabaseDefaults)
		    {
				ForceDefaults();
			}
			MarkNew();
	    }
	    
	    public VJh(object keyID)
	    {
		    SetSQLProps();
		    LoadByKey(keyID);
	    }
    	 
	    public VJh(string columnName, object columnValue)
        {
            SetSQLProps();
            LoadByParam(columnName,columnValue);
        }
        
	    #endregion
	    
	    #region Props
	    
          
        [XmlAttribute("Scgydm")]
        [Bindable(true)]
        public string Scgydm 
	    {
		    get
		    {
			    return GetColumnValue<string>("SCGYDM");
		    }
            set 
		    {
			    SetColumnValue("SCGYDM", value);
            }
        }
	      
        [XmlAttribute("Scjhrq")]
        [Bindable(true)]
        public DateTime? Scjhrq 
	    {
		    get
		    {
			    return GetColumnValue<DateTime?>("SCJHRQ");
		    }
            set 
		    {
			    SetColumnValue("SCJHRQ", value);
            }
        }
	      
        [XmlAttribute("Khdh")]
        [Bindable(true)]
        public string Khdh 
	    {
		    get
		    {
			    return GetColumnValue<string>("KHDH");
		    }
            set 
		    {
			    SetColumnValue("KHDH", value);
            }
        }
	      
        [XmlAttribute("Scggdh")]
        [Bindable(true)]
        public string Scggdh 
	    {
		    get
		    {
			    return GetColumnValue<string>("SCGGDH");
		    }
            set 
		    {
			    SetColumnValue("SCGGDH", value);
            }
        }
	      
        [XmlAttribute("Xtwpmc")]
        [Bindable(true)]
        public string Xtwpmc 
	    {
		    get
		    {
			    return GetColumnValue<string>("XTWPMC");
		    }
            set 
		    {
			    SetColumnValue("XTWPMC", value);
            }
        }
	      
        [XmlAttribute("Scggbz")]
        [Bindable(true)]
        public string Scggbz 
	    {
		    get
		    {
			    return GetColumnValue<string>("SCGGBZ");
		    }
            set 
		    {
			    SetColumnValue("SCGGBZ", value);
            }
        }
	      
        [XmlAttribute("Scjhbz")]
        [Bindable(true)]
        public string Scjhbz 
	    {
		    get
		    {
			    return GetColumnValue<string>("SCJHBZ");
		    }
            set 
		    {
			    SetColumnValue("SCJHBZ", value);
            }
        }
	      
        [XmlAttribute("Isfangge")]
        [Bindable(true)]
        public string Isfangge 
	    {
		    get
		    {
			    return GetColumnValue<string>("ISFANGGE");
		    }
            set 
		    {
			    SetColumnValue("ISFANGGE", value);
            }
        }
	      
        [XmlAttribute("Colthtype")]
        [Bindable(true)]
        public string Colthtype 
	    {
		    get
		    {
			    return GetColumnValue<string>("COLTHTYPE");
		    }
            set 
		    {
			    SetColumnValue("COLTHTYPE", value);
            }
        }
	    
	    #endregion
    
	    #region Columns Struct
	    public struct Columns
	    {
		    
		    
            public static string Scgydm = @"SCGYDM";
            
            public static string Scjhrq = @"SCJHRQ";
            
            public static string Khdh = @"KHDH";
            
            public static string Scggdh = @"SCGGDH";
            
            public static string Xtwpmc = @"XTWPMC";
            
            public static string Scggbz = @"SCGGBZ";
            
            public static string Scjhbz = @"SCJHBZ";
            
            public static string Isfangge = @"ISFANGGE";
            
            public static string Colthtype = @"COLTHTYPE";
            
	    }
	    #endregion
	    
	    
	    #region IAbstractRecord Members
        public new CT GetColumnValue<CT>(string columnName) {
            return base.GetColumnValue<CT>(columnName);
        }
        public object GetColumnValue(string columnName) {
            return base.GetColumnValue<object>(columnName);
        }
        #endregion
	    
    }
}

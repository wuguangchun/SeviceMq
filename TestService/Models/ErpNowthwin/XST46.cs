using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace OracleDataDomain
{
	/// <summary>
	/// Strongly-typed collection for the XST46 class.
	/// </summary>
    [Serializable]
	public partial class XST46Collection : ActiveList<XST46, XST46Collection>
	{	   
		public XST46Collection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>XST46Collection</returns>
		public XST46Collection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                XST46 o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the XST46 table.
	/// </summary>
	[Serializable]
	public partial class XST46 : ActiveRecord<XST46>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public XST46()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public XST46(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public XST46(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public XST46(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("XST46", TableType.Table, DataService.GetInstance("ErpNowthwin"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"FYERP";
				//columns
				
				TableSchema.TableColumn colvarXsjpdm = new TableSchema.TableColumn(schema);
				colvarXsjpdm.ColumnName = "XSJPDM";
				colvarXsjpdm.DataType = DbType.String;
				colvarXsjpdm.MaxLength = 4;
				colvarXsjpdm.AutoIncrement = false;
				colvarXsjpdm.IsNullable = false;
				colvarXsjpdm.IsPrimaryKey = true;
				colvarXsjpdm.IsForeignKey = false;
				colvarXsjpdm.IsReadOnly = false;
				colvarXsjpdm.DefaultSetting = @"";
				colvarXsjpdm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXsjpdm);
				
				TableSchema.TableColumn colvarXshdxh = new TableSchema.TableColumn(schema);
				colvarXshdxh.ColumnName = "XSHDXH";
				colvarXshdxh.DataType = DbType.Decimal;
				colvarXshdxh.MaxLength = 0;
				colvarXshdxh.AutoIncrement = false;
				colvarXshdxh.IsNullable = false;
				colvarXshdxh.IsPrimaryKey = true;
				colvarXshdxh.IsForeignKey = false;
				colvarXshdxh.IsReadOnly = false;
				colvarXshdxh.DefaultSetting = @"";
				colvarXshdxh.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXshdxh);
				
				TableSchema.TableColumn colvarXsqsrq = new TableSchema.TableColumn(schema);
				colvarXsqsrq.ColumnName = "XSQSRQ";
				colvarXsqsrq.DataType = DbType.DateTime;
				colvarXsqsrq.MaxLength = 0;
				colvarXsqsrq.AutoIncrement = false;
				colvarXsqsrq.IsNullable = true;
				colvarXsqsrq.IsPrimaryKey = false;
				colvarXsqsrq.IsForeignKey = false;
				colvarXsqsrq.IsReadOnly = false;
				colvarXsqsrq.DefaultSetting = @"";
				colvarXsqsrq.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXsqsrq);
				
				TableSchema.TableColumn colvarXsjzrq = new TableSchema.TableColumn(schema);
				colvarXsjzrq.ColumnName = "XSJZRQ";
				colvarXsjzrq.DataType = DbType.DateTime;
				colvarXsjzrq.MaxLength = 0;
				colvarXsjzrq.AutoIncrement = false;
				colvarXsjzrq.IsNullable = true;
				colvarXsjzrq.IsPrimaryKey = false;
				colvarXsjzrq.IsForeignKey = false;
				colvarXsjzrq.IsReadOnly = false;
				colvarXsjzrq.DefaultSetting = @"";
				colvarXsjzrq.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXsjzrq);
				
				TableSchema.TableColumn colvarXshdfs = new TableSchema.TableColumn(schema);
				colvarXshdfs.ColumnName = "XSHDFS";
				colvarXshdfs.DataType = DbType.String;
				colvarXshdfs.MaxLength = 100;
				colvarXshdfs.AutoIncrement = false;
				colvarXshdfs.IsNullable = true;
				colvarXshdfs.IsPrimaryKey = false;
				colvarXshdfs.IsForeignKey = false;
				colvarXshdfs.IsReadOnly = false;
				colvarXshdfs.DefaultSetting = @"";
				colvarXshdfs.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXshdfs);
				
				TableSchema.TableColumn colvarXszdsc = new TableSchema.TableColumn(schema);
				colvarXszdsc.ColumnName = "XSZDSC";
				colvarXszdsc.DataType = DbType.String;
				colvarXszdsc.MaxLength = 100;
				colvarXszdsc.AutoIncrement = false;
				colvarXszdsc.IsNullable = true;
				colvarXszdsc.IsPrimaryKey = false;
				colvarXszdsc.IsForeignKey = false;
				colvarXszdsc.IsReadOnly = false;
				colvarXszdsc.DefaultSetting = @"";
				colvarXszdsc.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXszdsc);
				
				TableSchema.TableColumn colvarXsjzgj = new TableSchema.TableColumn(schema);
				colvarXsjzgj.ColumnName = "XSJZGJ";
				colvarXsjzgj.DataType = DbType.String;
				colvarXsjzgj.MaxLength = 100;
				colvarXsjzgj.AutoIncrement = false;
				colvarXsjzgj.IsNullable = true;
				colvarXsjzgj.IsPrimaryKey = false;
				colvarXsjzgj.IsForeignKey = false;
				colvarXsjzgj.IsReadOnly = false;
				colvarXsjzgj.DefaultSetting = @"";
				colvarXsjzgj.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXsjzgj);
				
				TableSchema.TableColumn colvarXshdxg = new TableSchema.TableColumn(schema);
				colvarXshdxg.ColumnName = "XSHDXG";
				colvarXshdxg.DataType = DbType.String;
				colvarXshdxg.MaxLength = 200;
				colvarXshdxg.AutoIncrement = false;
				colvarXshdxg.IsNullable = true;
				colvarXshdxg.IsPrimaryKey = false;
				colvarXshdxg.IsForeignKey = false;
				colvarXshdxg.IsReadOnly = false;
				colvarXshdxg.DefaultSetting = @"";
				colvarXshdxg.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXshdxg);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ErpNowthwin"].AddSchema("XST46",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Xsjpdm")]
		[Bindable(true)]
		public string Xsjpdm 
		{
			get { return GetColumnValue<string>(Columns.Xsjpdm); }
			set { SetColumnValue(Columns.Xsjpdm, value); }
		}
		  
		[XmlAttribute("Xshdxh")]
		[Bindable(true)]
		public decimal Xshdxh 
		{
			get { return GetColumnValue<decimal>(Columns.Xshdxh); }
			set { SetColumnValue(Columns.Xshdxh, value); }
		}
		  
		[XmlAttribute("Xsqsrq")]
		[Bindable(true)]
		public DateTime? Xsqsrq 
		{
			get { return GetColumnValue<DateTime?>(Columns.Xsqsrq); }
			set { SetColumnValue(Columns.Xsqsrq, value); }
		}
		  
		[XmlAttribute("Xsjzrq")]
		[Bindable(true)]
		public DateTime? Xsjzrq 
		{
			get { return GetColumnValue<DateTime?>(Columns.Xsjzrq); }
			set { SetColumnValue(Columns.Xsjzrq, value); }
		}
		  
		[XmlAttribute("Xshdfs")]
		[Bindable(true)]
		public string Xshdfs 
		{
			get { return GetColumnValue<string>(Columns.Xshdfs); }
			set { SetColumnValue(Columns.Xshdfs, value); }
		}
		  
		[XmlAttribute("Xszdsc")]
		[Bindable(true)]
		public string Xszdsc 
		{
			get { return GetColumnValue<string>(Columns.Xszdsc); }
			set { SetColumnValue(Columns.Xszdsc, value); }
		}
		  
		[XmlAttribute("Xsjzgj")]
		[Bindable(true)]
		public string Xsjzgj 
		{
			get { return GetColumnValue<string>(Columns.Xsjzgj); }
			set { SetColumnValue(Columns.Xsjzgj, value); }
		}
		  
		[XmlAttribute("Xshdxg")]
		[Bindable(true)]
		public string Xshdxg 
		{
			get { return GetColumnValue<string>(Columns.Xshdxg); }
			set { SetColumnValue(Columns.Xshdxg, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varXsjpdm,decimal varXshdxh,DateTime? varXsqsrq,DateTime? varXsjzrq,string varXshdfs,string varXszdsc,string varXsjzgj,string varXshdxg)
		{
			XST46 item = new XST46();
			
			item.Xsjpdm = varXsjpdm;
			
			item.Xshdxh = varXshdxh;
			
			item.Xsqsrq = varXsqsrq;
			
			item.Xsjzrq = varXsjzrq;
			
			item.Xshdfs = varXshdfs;
			
			item.Xszdsc = varXszdsc;
			
			item.Xsjzgj = varXsjzgj;
			
			item.Xshdxg = varXshdxg;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(string varXsjpdm,decimal varXshdxh,DateTime? varXsqsrq,DateTime? varXsjzrq,string varXshdfs,string varXszdsc,string varXsjzgj,string varXshdxg)
		{
			XST46 item = new XST46();
			
				item.Xsjpdm = varXsjpdm;
			
				item.Xshdxh = varXshdxh;
			
				item.Xsqsrq = varXsqsrq;
			
				item.Xsjzrq = varXsjzrq;
			
				item.Xshdfs = varXshdfs;
			
				item.Xszdsc = varXszdsc;
			
				item.Xsjzgj = varXsjzgj;
			
				item.Xshdxg = varXshdxg;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn XsjpdmColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn XshdxhColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn XsqsrqColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn XsjzrqColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn XshdfsColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn XszdscColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn XsjzgjColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn XshdxgColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Xsjpdm = @"XSJPDM";
			 public static string Xshdxh = @"XSHDXH";
			 public static string Xsqsrq = @"XSQSRQ";
			 public static string Xsjzrq = @"XSJZRQ";
			 public static string Xshdfs = @"XSHDFS";
			 public static string Xszdsc = @"XSZDSC";
			 public static string Xsjzgj = @"XSJZGJ";
			 public static string Xshdxg = @"XSHDXG";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}

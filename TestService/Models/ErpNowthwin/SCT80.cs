using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace OracleDataDomain
{
	/// <summary>
	/// Strongly-typed collection for the SCT80 class.
	/// </summary>
    [Serializable]
	public partial class SCT80Collection : ActiveList<SCT80, SCT80Collection>
	{	   
		public SCT80Collection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>SCT80Collection</returns>
		public SCT80Collection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                SCT80 o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the SCT80 table.
	/// </summary>
	[Serializable]
	public partial class SCT80 : ActiveRecord<SCT80>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public SCT80()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public SCT80(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public SCT80(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public SCT80(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("SCT80", TableType.Table, DataService.GetInstance("ErpNowthwin"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"FYERP";
				//columns
				
				TableSchema.TableColumn colvarScsfbh = new TableSchema.TableColumn(schema);
				colvarScsfbh.ColumnName = "SCSFBH";
				colvarScsfbh.DataType = DbType.String;
				colvarScsfbh.MaxLength = 12;
				colvarScsfbh.AutoIncrement = false;
				colvarScsfbh.IsNullable = false;
				colvarScsfbh.IsPrimaryKey = true;
				colvarScsfbh.IsForeignKey = false;
				colvarScsfbh.IsReadOnly = false;
				colvarScsfbh.DefaultSetting = @"";
				colvarScsfbh.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScsfbh);
				
				TableSchema.TableColumn colvarScsfry = new TableSchema.TableColumn(schema);
				colvarScsfry.ColumnName = "SCSFRY";
				colvarScsfry.DataType = DbType.String;
				colvarScsfry.MaxLength = 8;
				colvarScsfry.AutoIncrement = false;
				colvarScsfry.IsNullable = true;
				colvarScsfry.IsPrimaryKey = false;
				colvarScsfry.IsForeignKey = false;
				colvarScsfry.IsReadOnly = false;
				colvarScsfry.DefaultSetting = @"";
				colvarScsfry.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScsfry);
				
				TableSchema.TableColumn colvarScsfrq = new TableSchema.TableColumn(schema);
				colvarScsfrq.ColumnName = "SCSFRQ";
				colvarScsfrq.DataType = DbType.DateTime;
				colvarScsfrq.MaxLength = 0;
				colvarScsfrq.AutoIncrement = false;
				colvarScsfrq.IsNullable = true;
				colvarScsfrq.IsPrimaryKey = false;
				colvarScsfrq.IsForeignKey = false;
				colvarScsfrq.IsReadOnly = false;
				colvarScsfrq.DefaultSetting = @"";
				colvarScsfrq.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScsfrq);
				
				TableSchema.TableColumn colvarSclrry = new TableSchema.TableColumn(schema);
				colvarSclrry.ColumnName = "SCLRRY";
				colvarSclrry.DataType = DbType.String;
				colvarSclrry.MaxLength = 8;
				colvarSclrry.AutoIncrement = false;
				colvarSclrry.IsNullable = true;
				colvarSclrry.IsPrimaryKey = false;
				colvarSclrry.IsForeignKey = false;
				colvarSclrry.IsReadOnly = false;
				colvarSclrry.DefaultSetting = @"";
				colvarSclrry.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSclrry);
				
				TableSchema.TableColumn colvarSclrrq = new TableSchema.TableColumn(schema);
				colvarSclrrq.ColumnName = "SCLRRQ";
				colvarSclrrq.DataType = DbType.DateTime;
				colvarSclrrq.MaxLength = 0;
				colvarSclrrq.AutoIncrement = false;
				colvarSclrrq.IsNullable = true;
				colvarSclrrq.IsPrimaryKey = false;
				colvarSclrrq.IsForeignKey = false;
				colvarSclrrq.IsReadOnly = false;
				colvarSclrrq.DefaultSetting = @"";
				colvarSclrrq.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSclrrq);
				
				TableSchema.TableColumn colvarScshry = new TableSchema.TableColumn(schema);
				colvarScshry.ColumnName = "SCSHRY";
				colvarScshry.DataType = DbType.String;
				colvarScshry.MaxLength = 8;
				colvarScshry.AutoIncrement = false;
				colvarScshry.IsNullable = true;
				colvarScshry.IsPrimaryKey = false;
				colvarScshry.IsForeignKey = false;
				colvarScshry.IsReadOnly = false;
				colvarScshry.DefaultSetting = @"";
				colvarScshry.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScshry);
				
				TableSchema.TableColumn colvarScshrq = new TableSchema.TableColumn(schema);
				colvarScshrq.ColumnName = "SCSHRQ";
				colvarScshrq.DataType = DbType.DateTime;
				colvarScshrq.MaxLength = 0;
				colvarScshrq.AutoIncrement = false;
				colvarScshrq.IsNullable = true;
				colvarScshrq.IsPrimaryKey = false;
				colvarScshrq.IsForeignKey = false;
				colvarScshrq.IsReadOnly = false;
				colvarScshrq.DefaultSetting = @"";
				colvarScshrq.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScshrq);
				
				TableSchema.TableColumn colvarScdjzt = new TableSchema.TableColumn(schema);
				colvarScdjzt.ColumnName = "SCDJZT";
				colvarScdjzt.DataType = DbType.String;
				colvarScdjzt.MaxLength = 1;
				colvarScdjzt.AutoIncrement = false;
				colvarScdjzt.IsNullable = true;
				colvarScdjzt.IsPrimaryKey = false;
				colvarScdjzt.IsForeignKey = false;
				colvarScdjzt.IsReadOnly = false;
				colvarScdjzt.DefaultSetting = @"";
				colvarScdjzt.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScdjzt);
				
				TableSchema.TableColumn colvarScgcdm = new TableSchema.TableColumn(schema);
				colvarScgcdm.ColumnName = "SCGCDM";
				colvarScgcdm.DataType = DbType.String;
				colvarScgcdm.MaxLength = 8;
				colvarScgcdm.AutoIncrement = false;
				colvarScgcdm.IsNullable = true;
				colvarScgcdm.IsPrimaryKey = false;
				colvarScgcdm.IsForeignKey = false;
				colvarScgcdm.IsReadOnly = false;
				colvarScgcdm.DefaultSetting = @"";
				colvarScgcdm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScgcdm);
				
				TableSchema.TableColumn colvarScfccj = new TableSchema.TableColumn(schema);
				colvarScfccj.ColumnName = "SCFCCJ";
				colvarScfccj.DataType = DbType.String;
				colvarScfccj.MaxLength = 8;
				colvarScfccj.AutoIncrement = false;
				colvarScfccj.IsNullable = true;
				colvarScfccj.IsPrimaryKey = false;
				colvarScfccj.IsForeignKey = false;
				colvarScfccj.IsReadOnly = false;
				colvarScfccj.DefaultSetting = @"";
				colvarScfccj.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScfccj);
				
				TableSchema.TableColumn colvarScfchj = new TableSchema.TableColumn(schema);
				colvarScfchj.ColumnName = "SCFCHJ";
				colvarScfchj.DataType = DbType.String;
				colvarScfchj.MaxLength = 2;
				colvarScfchj.AutoIncrement = false;
				colvarScfchj.IsNullable = true;
				colvarScfchj.IsPrimaryKey = false;
				colvarScfchj.IsForeignKey = false;
				colvarScfchj.IsReadOnly = false;
				colvarScfchj.DefaultSetting = @"";
				colvarScfchj.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScfchj);
				
				TableSchema.TableColumn colvarScfczx = new TableSchema.TableColumn(schema);
				colvarScfczx.ColumnName = "SCFCZX";
				colvarScfczx.DataType = DbType.String;
				colvarScfczx.MaxLength = 8;
				colvarScfczx.AutoIncrement = false;
				colvarScfczx.IsNullable = true;
				colvarScfczx.IsPrimaryKey = false;
				colvarScfczx.IsForeignKey = false;
				colvarScfczx.IsReadOnly = false;
				colvarScfczx.DefaultSetting = @"";
				colvarScfczx.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScfczx);
				
				TableSchema.TableColumn colvarScjscj = new TableSchema.TableColumn(schema);
				colvarScjscj.ColumnName = "SCJSCJ";
				colvarScjscj.DataType = DbType.String;
				colvarScjscj.MaxLength = 8;
				colvarScjscj.AutoIncrement = false;
				colvarScjscj.IsNullable = true;
				colvarScjscj.IsPrimaryKey = false;
				colvarScjscj.IsForeignKey = false;
				colvarScjscj.IsReadOnly = false;
				colvarScjscj.DefaultSetting = @"";
				colvarScjscj.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScjscj);
				
				TableSchema.TableColumn colvarScjshj = new TableSchema.TableColumn(schema);
				colvarScjshj.ColumnName = "SCJSHJ";
				colvarScjshj.DataType = DbType.String;
				colvarScjshj.MaxLength = 2;
				colvarScjshj.AutoIncrement = false;
				colvarScjshj.IsNullable = true;
				colvarScjshj.IsPrimaryKey = false;
				colvarScjshj.IsForeignKey = false;
				colvarScjshj.IsReadOnly = false;
				colvarScjshj.DefaultSetting = @"";
				colvarScjshj.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScjshj);
				
				TableSchema.TableColumn colvarScjszx = new TableSchema.TableColumn(schema);
				colvarScjszx.ColumnName = "SCJSZX";
				colvarScjszx.DataType = DbType.String;
				colvarScjszx.MaxLength = 8;
				colvarScjszx.AutoIncrement = false;
				colvarScjszx.IsNullable = true;
				colvarScjszx.IsPrimaryKey = false;
				colvarScjszx.IsForeignKey = false;
				colvarScjszx.IsReadOnly = false;
				colvarScjszx.DefaultSetting = @"";
				colvarScjszx.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScjszx);
				
				TableSchema.TableColumn colvarKcckdm = new TableSchema.TableColumn(schema);
				colvarKcckdm.ColumnName = "KCCKDM";
				colvarKcckdm.DataType = DbType.String;
				colvarKcckdm.MaxLength = 8;
				colvarKcckdm.AutoIncrement = false;
				colvarKcckdm.IsNullable = true;
				colvarKcckdm.IsPrimaryKey = false;
				colvarKcckdm.IsForeignKey = false;
				colvarKcckdm.IsReadOnly = false;
				colvarKcckdm.DefaultSetting = @"";
				colvarKcckdm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarKcckdm);
				
				TableSchema.TableColumn colvarScthbz = new TableSchema.TableColumn(schema);
				colvarScthbz.ColumnName = "SCTHBZ";
				colvarScthbz.DataType = DbType.String;
				colvarScthbz.MaxLength = 1;
				colvarScthbz.AutoIncrement = false;
				colvarScthbz.IsNullable = true;
				colvarScthbz.IsPrimaryKey = false;
				colvarScthbz.IsForeignKey = false;
				colvarScthbz.IsReadOnly = false;
				colvarScthbz.DefaultSetting = @"";
				colvarScthbz.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScthbz);
				
				TableSchema.TableColumn colvarScdzbz = new TableSchema.TableColumn(schema);
				colvarScdzbz.ColumnName = "SCDZBZ";
				colvarScdzbz.DataType = DbType.String;
				colvarScdzbz.MaxLength = 1;
				colvarScdzbz.AutoIncrement = false;
				colvarScdzbz.IsNullable = true;
				colvarScdzbz.IsPrimaryKey = false;
				colvarScdzbz.IsForeignKey = false;
				colvarScdzbz.IsReadOnly = false;
				colvarScdzbz.DefaultSetting = @"";
				colvarScdzbz.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScdzbz);
				
				TableSchema.TableColumn colvarScsfbz = new TableSchema.TableColumn(schema);
				colvarScsfbz.ColumnName = "SCSFBZ";
				colvarScsfbz.DataType = DbType.String;
				colvarScsfbz.MaxLength = 200;
				colvarScsfbz.AutoIncrement = false;
				colvarScsfbz.IsNullable = true;
				colvarScsfbz.IsPrimaryKey = false;
				colvarScsfbz.IsForeignKey = false;
				colvarScsfbz.IsReadOnly = false;
				colvarScsfbz.DefaultSetting = @"";
				colvarScsfbz.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScsfbz);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ErpNowthwin"].AddSchema("SCT80",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Scsfbh")]
		[Bindable(true)]
		public string Scsfbh 
		{
			get { return GetColumnValue<string>(Columns.Scsfbh); }
			set { SetColumnValue(Columns.Scsfbh, value); }
		}
		  
		[XmlAttribute("Scsfry")]
		[Bindable(true)]
		public string Scsfry 
		{
			get { return GetColumnValue<string>(Columns.Scsfry); }
			set { SetColumnValue(Columns.Scsfry, value); }
		}
		  
		[XmlAttribute("Scsfrq")]
		[Bindable(true)]
		public DateTime? Scsfrq 
		{
			get { return GetColumnValue<DateTime?>(Columns.Scsfrq); }
			set { SetColumnValue(Columns.Scsfrq, value); }
		}
		  
		[XmlAttribute("Sclrry")]
		[Bindable(true)]
		public string Sclrry 
		{
			get { return GetColumnValue<string>(Columns.Sclrry); }
			set { SetColumnValue(Columns.Sclrry, value); }
		}
		  
		[XmlAttribute("Sclrrq")]
		[Bindable(true)]
		public DateTime? Sclrrq 
		{
			get { return GetColumnValue<DateTime?>(Columns.Sclrrq); }
			set { SetColumnValue(Columns.Sclrrq, value); }
		}
		  
		[XmlAttribute("Scshry")]
		[Bindable(true)]
		public string Scshry 
		{
			get { return GetColumnValue<string>(Columns.Scshry); }
			set { SetColumnValue(Columns.Scshry, value); }
		}
		  
		[XmlAttribute("Scshrq")]
		[Bindable(true)]
		public DateTime? Scshrq 
		{
			get { return GetColumnValue<DateTime?>(Columns.Scshrq); }
			set { SetColumnValue(Columns.Scshrq, value); }
		}
		  
		[XmlAttribute("Scdjzt")]
		[Bindable(true)]
		public string Scdjzt 
		{
			get { return GetColumnValue<string>(Columns.Scdjzt); }
			set { SetColumnValue(Columns.Scdjzt, value); }
		}
		  
		[XmlAttribute("Scgcdm")]
		[Bindable(true)]
		public string Scgcdm 
		{
			get { return GetColumnValue<string>(Columns.Scgcdm); }
			set { SetColumnValue(Columns.Scgcdm, value); }
		}
		  
		[XmlAttribute("Scfccj")]
		[Bindable(true)]
		public string Scfccj 
		{
			get { return GetColumnValue<string>(Columns.Scfccj); }
			set { SetColumnValue(Columns.Scfccj, value); }
		}
		  
		[XmlAttribute("Scfchj")]
		[Bindable(true)]
		public string Scfchj 
		{
			get { return GetColumnValue<string>(Columns.Scfchj); }
			set { SetColumnValue(Columns.Scfchj, value); }
		}
		  
		[XmlAttribute("Scfczx")]
		[Bindable(true)]
		public string Scfczx 
		{
			get { return GetColumnValue<string>(Columns.Scfczx); }
			set { SetColumnValue(Columns.Scfczx, value); }
		}
		  
		[XmlAttribute("Scjscj")]
		[Bindable(true)]
		public string Scjscj 
		{
			get { return GetColumnValue<string>(Columns.Scjscj); }
			set { SetColumnValue(Columns.Scjscj, value); }
		}
		  
		[XmlAttribute("Scjshj")]
		[Bindable(true)]
		public string Scjshj 
		{
			get { return GetColumnValue<string>(Columns.Scjshj); }
			set { SetColumnValue(Columns.Scjshj, value); }
		}
		  
		[XmlAttribute("Scjszx")]
		[Bindable(true)]
		public string Scjszx 
		{
			get { return GetColumnValue<string>(Columns.Scjszx); }
			set { SetColumnValue(Columns.Scjszx, value); }
		}
		  
		[XmlAttribute("Kcckdm")]
		[Bindable(true)]
		public string Kcckdm 
		{
			get { return GetColumnValue<string>(Columns.Kcckdm); }
			set { SetColumnValue(Columns.Kcckdm, value); }
		}
		  
		[XmlAttribute("Scthbz")]
		[Bindable(true)]
		public string Scthbz 
		{
			get { return GetColumnValue<string>(Columns.Scthbz); }
			set { SetColumnValue(Columns.Scthbz, value); }
		}
		  
		[XmlAttribute("Scdzbz")]
		[Bindable(true)]
		public string Scdzbz 
		{
			get { return GetColumnValue<string>(Columns.Scdzbz); }
			set { SetColumnValue(Columns.Scdzbz, value); }
		}
		  
		[XmlAttribute("Scsfbz")]
		[Bindable(true)]
		public string Scsfbz 
		{
			get { return GetColumnValue<string>(Columns.Scsfbz); }
			set { SetColumnValue(Columns.Scsfbz, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varScsfbh,string varScsfry,DateTime? varScsfrq,string varSclrry,DateTime? varSclrrq,string varScshry,DateTime? varScshrq,string varScdjzt,string varScgcdm,string varScfccj,string varScfchj,string varScfczx,string varScjscj,string varScjshj,string varScjszx,string varKcckdm,string varScthbz,string varScdzbz,string varScsfbz)
		{
			SCT80 item = new SCT80();
			
			item.Scsfbh = varScsfbh;
			
			item.Scsfry = varScsfry;
			
			item.Scsfrq = varScsfrq;
			
			item.Sclrry = varSclrry;
			
			item.Sclrrq = varSclrrq;
			
			item.Scshry = varScshry;
			
			item.Scshrq = varScshrq;
			
			item.Scdjzt = varScdjzt;
			
			item.Scgcdm = varScgcdm;
			
			item.Scfccj = varScfccj;
			
			item.Scfchj = varScfchj;
			
			item.Scfczx = varScfczx;
			
			item.Scjscj = varScjscj;
			
			item.Scjshj = varScjshj;
			
			item.Scjszx = varScjszx;
			
			item.Kcckdm = varKcckdm;
			
			item.Scthbz = varScthbz;
			
			item.Scdzbz = varScdzbz;
			
			item.Scsfbz = varScsfbz;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(string varScsfbh,string varScsfry,DateTime? varScsfrq,string varSclrry,DateTime? varSclrrq,string varScshry,DateTime? varScshrq,string varScdjzt,string varScgcdm,string varScfccj,string varScfchj,string varScfczx,string varScjscj,string varScjshj,string varScjszx,string varKcckdm,string varScthbz,string varScdzbz,string varScsfbz)
		{
			SCT80 item = new SCT80();
			
				item.Scsfbh = varScsfbh;
			
				item.Scsfry = varScsfry;
			
				item.Scsfrq = varScsfrq;
			
				item.Sclrry = varSclrry;
			
				item.Sclrrq = varSclrrq;
			
				item.Scshry = varScshry;
			
				item.Scshrq = varScshrq;
			
				item.Scdjzt = varScdjzt;
			
				item.Scgcdm = varScgcdm;
			
				item.Scfccj = varScfccj;
			
				item.Scfchj = varScfchj;
			
				item.Scfczx = varScfczx;
			
				item.Scjscj = varScjscj;
			
				item.Scjshj = varScjshj;
			
				item.Scjszx = varScjszx;
			
				item.Kcckdm = varKcckdm;
			
				item.Scthbz = varScthbz;
			
				item.Scdzbz = varScdzbz;
			
				item.Scsfbz = varScsfbz;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn ScsfbhColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn ScsfryColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn ScsfrqColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn SclrryColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn SclrrqColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn ScshryColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn ScshrqColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn ScdjztColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn ScgcdmColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn ScfccjColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn ScfchjColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn ScfczxColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn ScjscjColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        public static TableSchema.TableColumn ScjshjColumn
        {
            get { return Schema.Columns[13]; }
        }
        
        
        
        public static TableSchema.TableColumn ScjszxColumn
        {
            get { return Schema.Columns[14]; }
        }
        
        
        
        public static TableSchema.TableColumn KcckdmColumn
        {
            get { return Schema.Columns[15]; }
        }
        
        
        
        public static TableSchema.TableColumn ScthbzColumn
        {
            get { return Schema.Columns[16]; }
        }
        
        
        
        public static TableSchema.TableColumn ScdzbzColumn
        {
            get { return Schema.Columns[17]; }
        }
        
        
        
        public static TableSchema.TableColumn ScsfbzColumn
        {
            get { return Schema.Columns[18]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Scsfbh = @"SCSFBH";
			 public static string Scsfry = @"SCSFRY";
			 public static string Scsfrq = @"SCSFRQ";
			 public static string Sclrry = @"SCLRRY";
			 public static string Sclrrq = @"SCLRRQ";
			 public static string Scshry = @"SCSHRY";
			 public static string Scshrq = @"SCSHRQ";
			 public static string Scdjzt = @"SCDJZT";
			 public static string Scgcdm = @"SCGCDM";
			 public static string Scfccj = @"SCFCCJ";
			 public static string Scfchj = @"SCFCHJ";
			 public static string Scfczx = @"SCFCZX";
			 public static string Scjscj = @"SCJSCJ";
			 public static string Scjshj = @"SCJSHJ";
			 public static string Scjszx = @"SCJSZX";
			 public static string Kcckdm = @"KCCKDM";
			 public static string Scthbz = @"SCTHBZ";
			 public static string Scdzbz = @"SCDZBZ";
			 public static string Scsfbz = @"SCSFBZ";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}

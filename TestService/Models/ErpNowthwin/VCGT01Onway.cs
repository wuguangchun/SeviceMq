using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace OracleDataDomain{
    /// <summary>
    /// Strongly-typed collection for the VCGT01Onway class.
    /// </summary>
    [Serializable]
    public partial class VCGT01OnwayCollection : ReadOnlyList<VCGT01Onway, VCGT01OnwayCollection>
    {        
        public VCGT01OnwayCollection() {}
    }
    /// <summary>
    /// This is  Read-only wrapper class for the V_CGT01_ONWAY view.
    /// </summary>
    [Serializable]
    public partial class VCGT01Onway : ReadOnlyRecord<VCGT01Onway>, IReadOnlyRecord
    {
    
	    #region Default Settings
	    protected static void SetSQLProps() 
	    {
		    GetTableSchema();
	    }
	    #endregion
        #region Schema Accessor
	    public static TableSchema.Table Schema
        {
            get
            {
                if (BaseSchema == null)
                {
                    SetSQLProps();
                }
                return BaseSchema;
            }
        }
    	
        private static void GetTableSchema() 
        {
            if(!IsSchemaInitialized)
            {
                //Schema declaration
                TableSchema.Table schema = new TableSchema.Table("V_CGT01_ONWAY", TableType.View, DataService.GetInstance("ErpNowthwin"));
                schema.Columns = new TableSchema.TableColumnCollection();
                schema.SchemaName = @"FYERP";
                //columns
                
                TableSchema.TableColumn colvarCgddhm = new TableSchema.TableColumn(schema);
                colvarCgddhm.ColumnName = "CGDDHM";
                colvarCgddhm.DataType = DbType.String;
                colvarCgddhm.MaxLength = 12;
                colvarCgddhm.AutoIncrement = false;
                colvarCgddhm.IsNullable = false;
                colvarCgddhm.IsPrimaryKey = false;
                colvarCgddhm.IsForeignKey = false;
                colvarCgddhm.IsReadOnly = false;
                
                schema.Columns.Add(colvarCgddhm);
                
                TableSchema.TableColumn colvarCgddhh = new TableSchema.TableColumn(schema);
                colvarCgddhh.ColumnName = "CGDDHH";
                colvarCgddhh.DataType = DbType.Decimal;
                colvarCgddhh.MaxLength = 0;
                colvarCgddhh.AutoIncrement = false;
                colvarCgddhh.IsNullable = false;
                colvarCgddhh.IsPrimaryKey = false;
                colvarCgddhh.IsForeignKey = false;
                colvarCgddhh.IsReadOnly = false;
                
                schema.Columns.Add(colvarCgddhh);
                
                TableSchema.TableColumn colvarXtwpdm = new TableSchema.TableColumn(schema);
                colvarXtwpdm.ColumnName = "XTWPDM";
                colvarXtwpdm.DataType = DbType.String;
                colvarXtwpdm.MaxLength = 20;
                colvarXtwpdm.AutoIncrement = false;
                colvarXtwpdm.IsNullable = true;
                colvarXtwpdm.IsPrimaryKey = false;
                colvarXtwpdm.IsForeignKey = false;
                colvarXtwpdm.IsReadOnly = false;
                
                schema.Columns.Add(colvarXtwpdm);
                
                TableSchema.TableColumn colvarCgddsl = new TableSchema.TableColumn(schema);
                colvarCgddsl.ColumnName = "CGDDSL";
                colvarCgddsl.DataType = DbType.Decimal;
                colvarCgddsl.MaxLength = 0;
                colvarCgddsl.AutoIncrement = false;
                colvarCgddsl.IsNullable = true;
                colvarCgddsl.IsPrimaryKey = false;
                colvarCgddsl.IsForeignKey = false;
                colvarCgddsl.IsReadOnly = false;
                
                schema.Columns.Add(colvarCgddsl);
                
                TableSchema.TableColumn colvarCgyssl = new TableSchema.TableColumn(schema);
                colvarCgyssl.ColumnName = "CGYSSL";
                colvarCgyssl.DataType = DbType.Decimal;
                colvarCgyssl.MaxLength = 0;
                colvarCgyssl.AutoIncrement = false;
                colvarCgyssl.IsNullable = true;
                colvarCgyssl.IsPrimaryKey = false;
                colvarCgyssl.IsForeignKey = false;
                colvarCgyssl.IsReadOnly = false;
                
                schema.Columns.Add(colvarCgyssl);
                
                
                BaseSchema = schema;
                //add this schema to the provider
                //so we can query it later
                DataService.Providers["ErpNowthwin"].AddSchema("V_CGT01_ONWAY",schema);
            }
        }
        #endregion
        
        #region Query Accessor
	    public static Query CreateQuery()
	    {
		    return new Query(Schema);
	    }
	    #endregion
	    
	    #region .ctors
	    public VCGT01Onway()
	    {
            SetSQLProps();
            SetDefaults();
            MarkNew();
        }
        public VCGT01Onway(bool useDatabaseDefaults)
	    {
		    SetSQLProps();
		    if(useDatabaseDefaults)
		    {
				ForceDefaults();
			}
			MarkNew();
	    }
	    
	    public VCGT01Onway(object keyID)
	    {
		    SetSQLProps();
		    LoadByKey(keyID);
	    }
    	 
	    public VCGT01Onway(string columnName, object columnValue)
        {
            SetSQLProps();
            LoadByParam(columnName,columnValue);
        }
        
	    #endregion
	    
	    #region Props
	    
          
        [XmlAttribute("Cgddhm")]
        [Bindable(true)]
        public string Cgddhm 
	    {
		    get
		    {
			    return GetColumnValue<string>("CGDDHM");
		    }
            set 
		    {
			    SetColumnValue("CGDDHM", value);
            }
        }
	      
        [XmlAttribute("Cgddhh")]
        [Bindable(true)]
        public decimal Cgddhh 
	    {
		    get
		    {
			    return GetColumnValue<decimal>("CGDDHH");
		    }
            set 
		    {
			    SetColumnValue("CGDDHH", value);
            }
        }
	      
        [XmlAttribute("Xtwpdm")]
        [Bindable(true)]
        public string Xtwpdm 
	    {
		    get
		    {
			    return GetColumnValue<string>("XTWPDM");
		    }
            set 
		    {
			    SetColumnValue("XTWPDM", value);
            }
        }
	      
        [XmlAttribute("Cgddsl")]
        [Bindable(true)]
        public decimal? Cgddsl 
	    {
		    get
		    {
			    return GetColumnValue<decimal?>("CGDDSL");
		    }
            set 
		    {
			    SetColumnValue("CGDDSL", value);
            }
        }
	      
        [XmlAttribute("Cgyssl")]
        [Bindable(true)]
        public decimal? Cgyssl 
	    {
		    get
		    {
			    return GetColumnValue<decimal?>("CGYSSL");
		    }
            set 
		    {
			    SetColumnValue("CGYSSL", value);
            }
        }
	    
	    #endregion
    
	    #region Columns Struct
	    public struct Columns
	    {
		    
		    
            public static string Cgddhm = @"CGDDHM";
            
            public static string Cgddhh = @"CGDDHH";
            
            public static string Xtwpdm = @"XTWPDM";
            
            public static string Cgddsl = @"CGDDSL";
            
            public static string Cgyssl = @"CGYSSL";
            
	    }
	    #endregion
	    
	    
	    #region IAbstractRecord Members
        public new CT GetColumnValue<CT>(string columnName) {
            return base.GetColumnValue<CT>(columnName);
        }
        public object GetColumnValue(string columnName) {
            return base.GetColumnValue<object>(columnName);
        }
        #endregion
	    
    }
}

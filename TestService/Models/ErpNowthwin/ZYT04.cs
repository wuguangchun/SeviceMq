using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace OracleDataDomain
{
	/// <summary>
	/// Strongly-typed collection for the ZYT04 class.
	/// </summary>
    [Serializable]
	public partial class ZYT04Collection : ActiveList<ZYT04, ZYT04Collection>
	{	   
		public ZYT04Collection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>ZYT04Collection</returns>
		public ZYT04Collection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                ZYT04 o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the ZYT04 table.
	/// </summary>
	[Serializable]
	public partial class ZYT04 : ActiveRecord<ZYT04>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public ZYT04()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public ZYT04(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public ZYT04(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public ZYT04(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("ZYT04", TableType.Table, DataService.GetInstance("ErpNowthwin"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"FYERP";
				//columns
				
				TableSchema.TableColumn colvarZylold = new TableSchema.TableColumn(schema);
				colvarZylold.ColumnName = "ZYLOLD";
				colvarZylold.DataType = DbType.Decimal;
				colvarZylold.MaxLength = 0;
				colvarZylold.AutoIncrement = false;
				colvarZylold.IsNullable = true;
				colvarZylold.IsPrimaryKey = false;
				colvarZylold.IsForeignKey = false;
				colvarZylold.IsReadOnly = false;
				colvarZylold.DefaultSetting = @"";
				colvarZylold.ForeignKeyTableName = "";
				schema.Columns.Add(colvarZylold);
				
				TableSchema.TableColumn colvarXdclsl = new TableSchema.TableColumn(schema);
				colvarXdclsl.ColumnName = "XDCLSL";
				colvarXdclsl.DataType = DbType.Decimal;
				colvarXdclsl.MaxLength = 0;
				colvarXdclsl.AutoIncrement = false;
				colvarXdclsl.IsNullable = true;
				colvarXdclsl.IsPrimaryKey = false;
				colvarXdclsl.IsForeignKey = false;
				colvarXdclsl.IsReadOnly = false;
				colvarXdclsl.DefaultSetting = @"";
				colvarXdclsl.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXdclsl);
				
				TableSchema.TableColumn colvarScggdh = new TableSchema.TableColumn(schema);
				colvarScggdh.ColumnName = "SCGGDH";
				colvarScggdh.DataType = DbType.String;
				colvarScggdh.MaxLength = 12;
				colvarScggdh.AutoIncrement = false;
				colvarScggdh.IsNullable = false;
				colvarScggdh.IsPrimaryKey = true;
				colvarScggdh.IsForeignKey = false;
				colvarScggdh.IsReadOnly = false;
				colvarScggdh.DefaultSetting = @"";
				colvarScggdh.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScggdh);
				
				TableSchema.TableColumn colvarXttxhm = new TableSchema.TableColumn(schema);
				colvarXttxhm.ColumnName = "XTTXHM";
				colvarXttxhm.DataType = DbType.String;
				colvarXttxhm.MaxLength = 20;
				colvarXttxhm.AutoIncrement = false;
				colvarXttxhm.IsNullable = false;
				colvarXttxhm.IsPrimaryKey = true;
				colvarXttxhm.IsForeignKey = false;
				colvarXttxhm.IsReadOnly = false;
				colvarXttxhm.DefaultSetting = @"";
				colvarXttxhm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXttxhm);
				
				TableSchema.TableColumn colvarXtzysl = new TableSchema.TableColumn(schema);
				colvarXtzysl.ColumnName = "XTZYSL";
				colvarXtzysl.DataType = DbType.Decimal;
				colvarXtzysl.MaxLength = 0;
				colvarXtzysl.AutoIncrement = false;
				colvarXtzysl.IsNullable = true;
				colvarXtzysl.IsPrimaryKey = false;
				colvarXtzysl.IsForeignKey = false;
				colvarXtzysl.IsReadOnly = false;
				colvarXtzysl.DefaultSetting = @"";
				colvarXtzysl.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXtzysl);
				
				TableSchema.TableColumn colvarXtcrsj = new TableSchema.TableColumn(schema);
				colvarXtcrsj.ColumnName = "XTCRSJ";
				colvarXtcrsj.DataType = DbType.DateTime;
				colvarXtcrsj.MaxLength = 0;
				colvarXtcrsj.AutoIncrement = false;
				colvarXtcrsj.IsNullable = true;
				colvarXtcrsj.IsPrimaryKey = false;
				colvarXtcrsj.IsForeignKey = false;
				colvarXtcrsj.IsReadOnly = false;
				colvarXtcrsj.DefaultSetting = @"";
				colvarXtcrsj.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXtcrsj);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ErpNowthwin"].AddSchema("ZYT04",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Zylold")]
		[Bindable(true)]
		public decimal? Zylold 
		{
			get { return GetColumnValue<decimal?>(Columns.Zylold); }
			set { SetColumnValue(Columns.Zylold, value); }
		}
		  
		[XmlAttribute("Xdclsl")]
		[Bindable(true)]
		public decimal? Xdclsl 
		{
			get { return GetColumnValue<decimal?>(Columns.Xdclsl); }
			set { SetColumnValue(Columns.Xdclsl, value); }
		}
		  
		[XmlAttribute("Scggdh")]
		[Bindable(true)]
		public string Scggdh 
		{
			get { return GetColumnValue<string>(Columns.Scggdh); }
			set { SetColumnValue(Columns.Scggdh, value); }
		}
		  
		[XmlAttribute("Xttxhm")]
		[Bindable(true)]
		public string Xttxhm 
		{
			get { return GetColumnValue<string>(Columns.Xttxhm); }
			set { SetColumnValue(Columns.Xttxhm, value); }
		}
		  
		[XmlAttribute("Xtzysl")]
		[Bindable(true)]
		public decimal? Xtzysl 
		{
			get { return GetColumnValue<decimal?>(Columns.Xtzysl); }
			set { SetColumnValue(Columns.Xtzysl, value); }
		}
		  
		[XmlAttribute("Xtcrsj")]
		[Bindable(true)]
		public DateTime? Xtcrsj 
		{
			get { return GetColumnValue<DateTime?>(Columns.Xtcrsj); }
			set { SetColumnValue(Columns.Xtcrsj, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(decimal? varZylold,decimal? varXdclsl,string varScggdh,string varXttxhm,decimal? varXtzysl,DateTime? varXtcrsj)
		{
			ZYT04 item = new ZYT04();
			
			item.Zylold = varZylold;
			
			item.Xdclsl = varXdclsl;
			
			item.Scggdh = varScggdh;
			
			item.Xttxhm = varXttxhm;
			
			item.Xtzysl = varXtzysl;
			
			item.Xtcrsj = varXtcrsj;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(decimal? varZylold,decimal? varXdclsl,string varScggdh,string varXttxhm,decimal? varXtzysl,DateTime? varXtcrsj)
		{
			ZYT04 item = new ZYT04();
			
				item.Zylold = varZylold;
			
				item.Xdclsl = varXdclsl;
			
				item.Scggdh = varScggdh;
			
				item.Xttxhm = varXttxhm;
			
				item.Xtzysl = varXtzysl;
			
				item.Xtcrsj = varXtcrsj;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn ZyloldColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn XdclslColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn ScggdhColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn XttxhmColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn XtzyslColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn XtcrsjColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Zylold = @"ZYLOLD";
			 public static string Xdclsl = @"XDCLSL";
			 public static string Scggdh = @"SCGGDH";
			 public static string Xttxhm = @"XTTXHM";
			 public static string Xtzysl = @"XTZYSL";
			 public static string Xtcrsj = @"XTCRSJ";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}

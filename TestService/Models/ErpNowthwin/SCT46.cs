using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace OracleDataDomain
{
	/// <summary>
	/// Strongly-typed collection for the SCT46 class.
	/// </summary>
    [Serializable]
	public partial class SCT46Collection : ActiveList<SCT46, SCT46Collection>
	{	   
		public SCT46Collection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>SCT46Collection</returns>
		public SCT46Collection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                SCT46 o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the SCT46 table.
	/// </summary>
	[Serializable]
	public partial class SCT46 : ActiveRecord<SCT46>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public SCT46()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public SCT46(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public SCT46(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public SCT46(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("SCT46", TableType.Table, DataService.GetInstance("ErpNowthwin"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"FYERP";
				//columns
				
				TableSchema.TableColumn colvarXtzgdm = new TableSchema.TableColumn(schema);
				colvarXtzgdm.ColumnName = "XTZGDM";
				colvarXtzgdm.DataType = DbType.String;
				colvarXtzgdm.MaxLength = 8;
				colvarXtzgdm.AutoIncrement = false;
				colvarXtzgdm.IsNullable = false;
				colvarXtzgdm.IsPrimaryKey = true;
				colvarXtzgdm.IsForeignKey = false;
				colvarXtzgdm.IsReadOnly = false;
				colvarXtzgdm.DefaultSetting = @"";
				colvarXtzgdm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXtzgdm);
				
				TableSchema.TableColumn colvarXtwpdm = new TableSchema.TableColumn(schema);
				colvarXtwpdm.ColumnName = "XTWPDM";
				colvarXtwpdm.DataType = DbType.String;
				colvarXtwpdm.MaxLength = 20;
				colvarXtwpdm.AutoIncrement = false;
				colvarXtwpdm.IsNullable = false;
				colvarXtwpdm.IsPrimaryKey = true;
				colvarXtwpdm.IsForeignKey = false;
				colvarXtwpdm.IsReadOnly = false;
				colvarXtwpdm.DefaultSetting = @"";
				colvarXtwpdm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXtwpdm);
				
				TableSchema.TableColumn colvarXtzysl = new TableSchema.TableColumn(schema);
				colvarXtzysl.ColumnName = "XTZYSL";
				colvarXtzysl.DataType = DbType.Decimal;
				colvarXtzysl.MaxLength = 0;
				colvarXtzysl.AutoIncrement = false;
				colvarXtzysl.IsNullable = true;
				colvarXtzysl.IsPrimaryKey = false;
				colvarXtzysl.IsForeignKey = false;
				colvarXtzysl.IsReadOnly = false;
				colvarXtzysl.DefaultSetting = @"";
				colvarXtzysl.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXtzysl);
				
				TableSchema.TableColumn colvarXtxdsl = new TableSchema.TableColumn(schema);
				colvarXtxdsl.ColumnName = "XTXDSL";
				colvarXtxdsl.DataType = DbType.Decimal;
				colvarXtxdsl.MaxLength = 0;
				colvarXtxdsl.AutoIncrement = false;
				colvarXtxdsl.IsNullable = true;
				colvarXtxdsl.IsPrimaryKey = false;
				colvarXtxdsl.IsForeignKey = false;
				colvarXtxdsl.IsReadOnly = false;
				colvarXtxdsl.DefaultSetting = @"";
				colvarXtxdsl.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXtxdsl);
				
				TableSchema.TableColumn colvarXtxqrq = new TableSchema.TableColumn(schema);
				colvarXtxqrq.ColumnName = "XTXQRQ";
				colvarXtxqrq.DataType = DbType.DateTime;
				colvarXtxqrq.MaxLength = 0;
				colvarXtxqrq.AutoIncrement = false;
				colvarXtxqrq.IsNullable = true;
				colvarXtxqrq.IsPrimaryKey = false;
				colvarXtxqrq.IsForeignKey = false;
				colvarXtxqrq.IsReadOnly = false;
				colvarXtxqrq.DefaultSetting = @"";
				colvarXtxqrq.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXtxqrq);
				
				TableSchema.TableColumn colvarXtzybz = new TableSchema.TableColumn(schema);
				colvarXtzybz.ColumnName = "XTZYBZ";
				colvarXtzybz.DataType = DbType.String;
				colvarXtzybz.MaxLength = 255;
				colvarXtzybz.AutoIncrement = false;
				colvarXtzybz.IsNullable = true;
				colvarXtzybz.IsPrimaryKey = false;
				colvarXtzybz.IsForeignKey = false;
				colvarXtzybz.IsReadOnly = false;
				colvarXtzybz.DefaultSetting = @"";
				colvarXtzybz.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXtzybz);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ErpNowthwin"].AddSchema("SCT46",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Xtzgdm")]
		[Bindable(true)]
		public string Xtzgdm 
		{
			get { return GetColumnValue<string>(Columns.Xtzgdm); }
			set { SetColumnValue(Columns.Xtzgdm, value); }
		}
		  
		[XmlAttribute("Xtwpdm")]
		[Bindable(true)]
		public string Xtwpdm 
		{
			get { return GetColumnValue<string>(Columns.Xtwpdm); }
			set { SetColumnValue(Columns.Xtwpdm, value); }
		}
		  
		[XmlAttribute("Xtzysl")]
		[Bindable(true)]
		public decimal? Xtzysl 
		{
			get { return GetColumnValue<decimal?>(Columns.Xtzysl); }
			set { SetColumnValue(Columns.Xtzysl, value); }
		}
		  
		[XmlAttribute("Xtxdsl")]
		[Bindable(true)]
		public decimal? Xtxdsl 
		{
			get { return GetColumnValue<decimal?>(Columns.Xtxdsl); }
			set { SetColumnValue(Columns.Xtxdsl, value); }
		}
		  
		[XmlAttribute("Xtxqrq")]
		[Bindable(true)]
		public DateTime? Xtxqrq 
		{
			get { return GetColumnValue<DateTime?>(Columns.Xtxqrq); }
			set { SetColumnValue(Columns.Xtxqrq, value); }
		}
		  
		[XmlAttribute("Xtzybz")]
		[Bindable(true)]
		public string Xtzybz 
		{
			get { return GetColumnValue<string>(Columns.Xtzybz); }
			set { SetColumnValue(Columns.Xtzybz, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varXtzgdm,string varXtwpdm,decimal? varXtzysl,decimal? varXtxdsl,DateTime? varXtxqrq,string varXtzybz)
		{
			SCT46 item = new SCT46();
			
			item.Xtzgdm = varXtzgdm;
			
			item.Xtwpdm = varXtwpdm;
			
			item.Xtzysl = varXtzysl;
			
			item.Xtxdsl = varXtxdsl;
			
			item.Xtxqrq = varXtxqrq;
			
			item.Xtzybz = varXtzybz;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(string varXtzgdm,string varXtwpdm,decimal? varXtzysl,decimal? varXtxdsl,DateTime? varXtxqrq,string varXtzybz)
		{
			SCT46 item = new SCT46();
			
				item.Xtzgdm = varXtzgdm;
			
				item.Xtwpdm = varXtwpdm;
			
				item.Xtzysl = varXtzysl;
			
				item.Xtxdsl = varXtxdsl;
			
				item.Xtxqrq = varXtxqrq;
			
				item.Xtzybz = varXtzybz;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn XtzgdmColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn XtwpdmColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn XtzyslColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn XtxdslColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn XtxqrqColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn XtzybzColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Xtzgdm = @"XTZGDM";
			 public static string Xtwpdm = @"XTWPDM";
			 public static string Xtzysl = @"XTZYSL";
			 public static string Xtxdsl = @"XTXDSL";
			 public static string Xtxqrq = @"XTXQRQ";
			 public static string Xtzybz = @"XTZYBZ";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}

using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace OracleDataDomain
{
	/// <summary>
	/// Strongly-typed collection for the ZLT07 class.
	/// </summary>
    [Serializable]
	public partial class ZLT07Collection : ActiveList<ZLT07, ZLT07Collection>
	{	   
		public ZLT07Collection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>ZLT07Collection</returns>
		public ZLT07Collection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                ZLT07 o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the ZLT07 table.
	/// </summary>
	[Serializable]
	public partial class ZLT07 : ActiveRecord<ZLT07>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public ZLT07()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public ZLT07(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public ZLT07(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public ZLT07(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("ZLT07", TableType.Table, DataService.GetInstance("ErpNowthwin"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"FYERP";
				//columns
				
				TableSchema.TableColumn colvarZlfgdh = new TableSchema.TableColumn(schema);
				colvarZlfgdh.ColumnName = "ZLFGDH";
				colvarZlfgdh.DataType = DbType.String;
				colvarZlfgdh.MaxLength = 12;
				colvarZlfgdh.AutoIncrement = false;
				colvarZlfgdh.IsNullable = false;
				colvarZlfgdh.IsPrimaryKey = true;
				colvarZlfgdh.IsForeignKey = false;
				colvarZlfgdh.IsReadOnly = false;
				colvarZlfgdh.DefaultSetting = @"";
				colvarZlfgdh.ForeignKeyTableName = "";
				schema.Columns.Add(colvarZlfgdh);
				
				TableSchema.TableColumn colvarZlfgxh = new TableSchema.TableColumn(schema);
				colvarZlfgxh.ColumnName = "ZLFGXH";
				colvarZlfgxh.DataType = DbType.Decimal;
				colvarZlfgxh.MaxLength = 0;
				colvarZlfgxh.AutoIncrement = false;
				colvarZlfgxh.IsNullable = false;
				colvarZlfgxh.IsPrimaryKey = true;
				colvarZlfgxh.IsForeignKey = false;
				colvarZlfgxh.IsReadOnly = false;
				colvarZlfgxh.DefaultSetting = @"";
				colvarZlfgxh.ForeignKeyTableName = "";
				schema.Columns.Add(colvarZlfgxh);
				
				TableSchema.TableColumn colvarZlcddm = new TableSchema.TableColumn(schema);
				colvarZlcddm.ColumnName = "ZLCDDM";
				colvarZlcddm.DataType = DbType.String;
				colvarZlcddm.MaxLength = 10;
				colvarZlcddm.AutoIncrement = false;
				colvarZlcddm.IsNullable = false;
				colvarZlcddm.IsPrimaryKey = true;
				colvarZlcddm.IsForeignKey = false;
				colvarZlcddm.IsReadOnly = false;
				colvarZlcddm.DefaultSetting = @"";
				colvarZlcddm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarZlcddm);
				
				TableSchema.TableColumn colvarZlcpsl = new TableSchema.TableColumn(schema);
				colvarZlcpsl.ColumnName = "ZLCPSL";
				colvarZlcpsl.DataType = DbType.Decimal;
				colvarZlcpsl.MaxLength = 0;
				colvarZlcpsl.AutoIncrement = false;
				colvarZlcpsl.IsNullable = true;
				colvarZlcpsl.IsPrimaryKey = false;
				colvarZlcpsl.IsForeignKey = false;
				colvarZlcpsl.IsReadOnly = false;
				colvarZlcpsl.DefaultSetting = @"";
				colvarZlcpsl.ForeignKeyTableName = "";
				schema.Columns.Add(colvarZlcpsl);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ErpNowthwin"].AddSchema("ZLT07",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Zlfgdh")]
		[Bindable(true)]
		public string Zlfgdh 
		{
			get { return GetColumnValue<string>(Columns.Zlfgdh); }
			set { SetColumnValue(Columns.Zlfgdh, value); }
		}
		  
		[XmlAttribute("Zlfgxh")]
		[Bindable(true)]
		public decimal Zlfgxh 
		{
			get { return GetColumnValue<decimal>(Columns.Zlfgxh); }
			set { SetColumnValue(Columns.Zlfgxh, value); }
		}
		  
		[XmlAttribute("Zlcddm")]
		[Bindable(true)]
		public string Zlcddm 
		{
			get { return GetColumnValue<string>(Columns.Zlcddm); }
			set { SetColumnValue(Columns.Zlcddm, value); }
		}
		  
		[XmlAttribute("Zlcpsl")]
		[Bindable(true)]
		public decimal? Zlcpsl 
		{
			get { return GetColumnValue<decimal?>(Columns.Zlcpsl); }
			set { SetColumnValue(Columns.Zlcpsl, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varZlfgdh,decimal varZlfgxh,string varZlcddm,decimal? varZlcpsl)
		{
			ZLT07 item = new ZLT07();
			
			item.Zlfgdh = varZlfgdh;
			
			item.Zlfgxh = varZlfgxh;
			
			item.Zlcddm = varZlcddm;
			
			item.Zlcpsl = varZlcpsl;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(string varZlfgdh,decimal varZlfgxh,string varZlcddm,decimal? varZlcpsl)
		{
			ZLT07 item = new ZLT07();
			
				item.Zlfgdh = varZlfgdh;
			
				item.Zlfgxh = varZlfgxh;
			
				item.Zlcddm = varZlcddm;
			
				item.Zlcpsl = varZlcpsl;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn ZlfgdhColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn ZlfgxhColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn ZlcddmColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn ZlcpslColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Zlfgdh = @"ZLFGDH";
			 public static string Zlfgxh = @"ZLFGXH";
			 public static string Zlcddm = @"ZLCDDM";
			 public static string Zlcpsl = @"ZLCPSL";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}

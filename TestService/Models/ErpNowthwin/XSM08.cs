using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace OracleDataDomain
{
	/// <summary>
	/// Strongly-typed collection for the XSM08 class.
	/// </summary>
    [Serializable]
	public partial class XSM08Collection : ActiveList<XSM08, XSM08Collection>
	{	   
		public XSM08Collection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>XSM08Collection</returns>
		public XSM08Collection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                XSM08 o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the XSM08 table.
	/// </summary>
	[Serializable]
	public partial class XSM08 : ActiveRecord<XSM08>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public XSM08()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public XSM08(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public XSM08(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public XSM08(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("XSM08", TableType.Table, DataService.GetInstance("ErpNowthwin"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"FYERP";
				//columns
				
				TableSchema.TableColumn colvarXtbmdm = new TableSchema.TableColumn(schema);
				colvarXtbmdm.ColumnName = "XTBMDM";
				colvarXtbmdm.DataType = DbType.String;
				colvarXtbmdm.MaxLength = 8;
				colvarXtbmdm.AutoIncrement = false;
				colvarXtbmdm.IsNullable = false;
				colvarXtbmdm.IsPrimaryKey = true;
				colvarXtbmdm.IsForeignKey = false;
				colvarXtbmdm.IsReadOnly = false;
				colvarXtbmdm.DefaultSetting = @"";
				colvarXtbmdm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXtbmdm);
				
				TableSchema.TableColumn colvarXsxsxh = new TableSchema.TableColumn(schema);
				colvarXsxsxh.ColumnName = "XSXSXH";
				colvarXsxsxh.DataType = DbType.Decimal;
				colvarXsxsxh.MaxLength = 0;
				colvarXsxsxh.AutoIncrement = false;
				colvarXsxsxh.IsNullable = false;
				colvarXsxsxh.IsPrimaryKey = true;
				colvarXsxsxh.IsForeignKey = false;
				colvarXsxsxh.IsReadOnly = false;
				colvarXsxsxh.DefaultSetting = @"";
				colvarXsxsxh.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXsxsxh);
				
				TableSchema.TableColumn colvarXsqsje = new TableSchema.TableColumn(schema);
				colvarXsqsje.ColumnName = "XSQSJE";
				colvarXsqsje.DataType = DbType.Decimal;
				colvarXsqsje.MaxLength = 0;
				colvarXsqsje.AutoIncrement = false;
				colvarXsqsje.IsNullable = true;
				colvarXsqsje.IsPrimaryKey = false;
				colvarXsqsje.IsForeignKey = false;
				colvarXsqsje.IsReadOnly = false;
				colvarXsqsje.DefaultSetting = @"";
				colvarXsqsje.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXsqsje);
				
				TableSchema.TableColumn colvarXsjzje = new TableSchema.TableColumn(schema);
				colvarXsjzje.ColumnName = "XSJZJE";
				colvarXsjzje.DataType = DbType.Decimal;
				colvarXsjzje.MaxLength = 0;
				colvarXsjzje.AutoIncrement = false;
				colvarXsjzje.IsNullable = true;
				colvarXsjzje.IsPrimaryKey = false;
				colvarXsjzje.IsForeignKey = false;
				colvarXsjzje.IsReadOnly = false;
				colvarXsjzje.DefaultSetting = @"";
				colvarXsjzje.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXsjzje);
				
				TableSchema.TableColumn colvarXstcxs = new TableSchema.TableColumn(schema);
				colvarXstcxs.ColumnName = "XSTCXS";
				colvarXstcxs.DataType = DbType.Decimal;
				colvarXstcxs.MaxLength = 0;
				colvarXstcxs.AutoIncrement = false;
				colvarXstcxs.IsNullable = true;
				colvarXstcxs.IsPrimaryKey = false;
				colvarXstcxs.IsForeignKey = false;
				colvarXstcxs.IsReadOnly = false;
				colvarXstcxs.DefaultSetting = @"";
				colvarXstcxs.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXstcxs);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ErpNowthwin"].AddSchema("XSM08",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Xtbmdm")]
		[Bindable(true)]
		public string Xtbmdm 
		{
			get { return GetColumnValue<string>(Columns.Xtbmdm); }
			set { SetColumnValue(Columns.Xtbmdm, value); }
		}
		  
		[XmlAttribute("Xsxsxh")]
		[Bindable(true)]
		public decimal Xsxsxh 
		{
			get { return GetColumnValue<decimal>(Columns.Xsxsxh); }
			set { SetColumnValue(Columns.Xsxsxh, value); }
		}
		  
		[XmlAttribute("Xsqsje")]
		[Bindable(true)]
		public decimal? Xsqsje 
		{
			get { return GetColumnValue<decimal?>(Columns.Xsqsje); }
			set { SetColumnValue(Columns.Xsqsje, value); }
		}
		  
		[XmlAttribute("Xsjzje")]
		[Bindable(true)]
		public decimal? Xsjzje 
		{
			get { return GetColumnValue<decimal?>(Columns.Xsjzje); }
			set { SetColumnValue(Columns.Xsjzje, value); }
		}
		  
		[XmlAttribute("Xstcxs")]
		[Bindable(true)]
		public decimal? Xstcxs 
		{
			get { return GetColumnValue<decimal?>(Columns.Xstcxs); }
			set { SetColumnValue(Columns.Xstcxs, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varXtbmdm,decimal varXsxsxh,decimal? varXsqsje,decimal? varXsjzje,decimal? varXstcxs)
		{
			XSM08 item = new XSM08();
			
			item.Xtbmdm = varXtbmdm;
			
			item.Xsxsxh = varXsxsxh;
			
			item.Xsqsje = varXsqsje;
			
			item.Xsjzje = varXsjzje;
			
			item.Xstcxs = varXstcxs;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(string varXtbmdm,decimal varXsxsxh,decimal? varXsqsje,decimal? varXsjzje,decimal? varXstcxs)
		{
			XSM08 item = new XSM08();
			
				item.Xtbmdm = varXtbmdm;
			
				item.Xsxsxh = varXsxsxh;
			
				item.Xsqsje = varXsqsje;
			
				item.Xsjzje = varXsjzje;
			
				item.Xstcxs = varXstcxs;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn XtbmdmColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn XsxsxhColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn XsqsjeColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn XsjzjeColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn XstcxsColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Xtbmdm = @"XTBMDM";
			 public static string Xsxsxh = @"XSXSXH";
			 public static string Xsqsje = @"XSQSJE";
			 public static string Xsjzje = @"XSJZJE";
			 public static string Xstcxs = @"XSTCXS";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}

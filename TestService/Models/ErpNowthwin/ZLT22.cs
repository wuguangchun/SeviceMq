using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace OracleDataDomain
{
	/// <summary>
	/// Strongly-typed collection for the ZLT22 class.
	/// </summary>
    [Serializable]
	public partial class ZLT22Collection : ActiveList<ZLT22, ZLT22Collection>
	{	   
		public ZLT22Collection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>ZLT22Collection</returns>
		public ZLT22Collection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                ZLT22 o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the ZLT22 table.
	/// </summary>
	[Serializable]
	public partial class ZLT22 : ActiveRecord<ZLT22>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public ZLT22()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public ZLT22(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public ZLT22(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public ZLT22(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("ZLT22", TableType.Table, DataService.GetInstance("ErpNowthwin"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"FYERP";
				//columns
				
				TableSchema.TableColumn colvarZljybh = new TableSchema.TableColumn(schema);
				colvarZljybh.ColumnName = "ZLJYBH";
				colvarZljybh.DataType = DbType.String;
				colvarZljybh.MaxLength = 12;
				colvarZljybh.AutoIncrement = false;
				colvarZljybh.IsNullable = false;
				colvarZljybh.IsPrimaryKey = true;
				colvarZljybh.IsForeignKey = false;
				colvarZljybh.IsReadOnly = false;
				colvarZljybh.DefaultSetting = @"";
				colvarZljybh.ForeignKeyTableName = "";
				schema.Columns.Add(colvarZljybh);
				
				TableSchema.TableColumn colvarZlxmdm = new TableSchema.TableColumn(schema);
				colvarZlxmdm.ColumnName = "ZLXMDM";
				colvarZlxmdm.DataType = DbType.String;
				colvarZlxmdm.MaxLength = 12;
				colvarZlxmdm.AutoIncrement = false;
				colvarZlxmdm.IsNullable = false;
				colvarZlxmdm.IsPrimaryKey = true;
				colvarZlxmdm.IsForeignKey = false;
				colvarZlxmdm.IsReadOnly = false;
				colvarZlxmdm.DefaultSetting = @"";
				colvarZlxmdm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarZlxmdm);
				
				TableSchema.TableColumn colvarZlllsz = new TableSchema.TableColumn(schema);
				colvarZlllsz.ColumnName = "ZLLLSZ";
				colvarZlllsz.DataType = DbType.String;
				colvarZlllsz.MaxLength = 15;
				colvarZlllsz.AutoIncrement = false;
				colvarZlllsz.IsNullable = true;
				colvarZlllsz.IsPrimaryKey = false;
				colvarZlllsz.IsForeignKey = false;
				colvarZlllsz.IsReadOnly = false;
				colvarZlllsz.DefaultSetting = @"";
				colvarZlllsz.ForeignKeyTableName = "";
				schema.Columns.Add(colvarZlllsz);
				
				TableSchema.TableColumn colvarZLSCZ1 = new TableSchema.TableColumn(schema);
				colvarZLSCZ1.ColumnName = "ZLSCZ1";
				colvarZLSCZ1.DataType = DbType.String;
				colvarZLSCZ1.MaxLength = 15;
				colvarZLSCZ1.AutoIncrement = false;
				colvarZLSCZ1.IsNullable = true;
				colvarZLSCZ1.IsPrimaryKey = false;
				colvarZLSCZ1.IsForeignKey = false;
				colvarZLSCZ1.IsReadOnly = false;
				colvarZLSCZ1.DefaultSetting = @"";
				colvarZLSCZ1.ForeignKeyTableName = "";
				schema.Columns.Add(colvarZLSCZ1);
				
				TableSchema.TableColumn colvarZLSCZ2 = new TableSchema.TableColumn(schema);
				colvarZLSCZ2.ColumnName = "ZLSCZ2";
				colvarZLSCZ2.DataType = DbType.String;
				colvarZLSCZ2.MaxLength = 15;
				colvarZLSCZ2.AutoIncrement = false;
				colvarZLSCZ2.IsNullable = true;
				colvarZLSCZ2.IsPrimaryKey = false;
				colvarZLSCZ2.IsForeignKey = false;
				colvarZLSCZ2.IsReadOnly = false;
				colvarZLSCZ2.DefaultSetting = @"";
				colvarZLSCZ2.ForeignKeyTableName = "";
				schema.Columns.Add(colvarZLSCZ2);
				
				TableSchema.TableColumn colvarZLSCZ3 = new TableSchema.TableColumn(schema);
				colvarZLSCZ3.ColumnName = "ZLSCZ3";
				colvarZLSCZ3.DataType = DbType.String;
				colvarZLSCZ3.MaxLength = 15;
				colvarZLSCZ3.AutoIncrement = false;
				colvarZLSCZ3.IsNullable = true;
				colvarZLSCZ3.IsPrimaryKey = false;
				colvarZLSCZ3.IsForeignKey = false;
				colvarZLSCZ3.IsReadOnly = false;
				colvarZLSCZ3.DefaultSetting = @"";
				colvarZLSCZ3.ForeignKeyTableName = "";
				schema.Columns.Add(colvarZLSCZ3);
				
				TableSchema.TableColumn colvarZLSCZ4 = new TableSchema.TableColumn(schema);
				colvarZLSCZ4.ColumnName = "ZLSCZ4";
				colvarZLSCZ4.DataType = DbType.String;
				colvarZLSCZ4.MaxLength = 15;
				colvarZLSCZ4.AutoIncrement = false;
				colvarZLSCZ4.IsNullable = true;
				colvarZLSCZ4.IsPrimaryKey = false;
				colvarZLSCZ4.IsForeignKey = false;
				colvarZLSCZ4.IsReadOnly = false;
				colvarZLSCZ4.DefaultSetting = @"";
				colvarZLSCZ4.ForeignKeyTableName = "";
				schema.Columns.Add(colvarZLSCZ4);
				
				TableSchema.TableColumn colvarZLSCZ5 = new TableSchema.TableColumn(schema);
				colvarZLSCZ5.ColumnName = "ZLSCZ5";
				colvarZLSCZ5.DataType = DbType.String;
				colvarZLSCZ5.MaxLength = 10;
				colvarZLSCZ5.AutoIncrement = false;
				colvarZLSCZ5.IsNullable = true;
				colvarZLSCZ5.IsPrimaryKey = false;
				colvarZLSCZ5.IsForeignKey = false;
				colvarZLSCZ5.IsReadOnly = false;
				colvarZLSCZ5.DefaultSetting = @"";
				colvarZLSCZ5.ForeignKeyTableName = "";
				schema.Columns.Add(colvarZLSCZ5);
				
				TableSchema.TableColumn colvarZldxjl = new TableSchema.TableColumn(schema);
				colvarZldxjl.ColumnName = "ZLDXJL";
				colvarZldxjl.DataType = DbType.String;
				colvarZldxjl.MaxLength = 1;
				colvarZldxjl.AutoIncrement = false;
				colvarZldxjl.IsNullable = true;
				colvarZldxjl.IsPrimaryKey = false;
				colvarZldxjl.IsForeignKey = false;
				colvarZldxjl.IsReadOnly = false;
				colvarZldxjl.DefaultSetting = @"";
				colvarZldxjl.ForeignKeyTableName = "";
				schema.Columns.Add(colvarZldxjl);
				
				TableSchema.TableColumn colvarZldxbz = new TableSchema.TableColumn(schema);
				colvarZldxbz.ColumnName = "ZLDXBZ";
				colvarZldxbz.DataType = DbType.String;
				colvarZldxbz.MaxLength = 100;
				colvarZldxbz.AutoIncrement = false;
				colvarZldxbz.IsNullable = true;
				colvarZldxbz.IsPrimaryKey = false;
				colvarZldxbz.IsForeignKey = false;
				colvarZldxbz.IsReadOnly = false;
				colvarZldxbz.DefaultSetting = @"";
				colvarZldxbz.ForeignKeyTableName = "";
				schema.Columns.Add(colvarZldxbz);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ErpNowthwin"].AddSchema("ZLT22",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Zljybh")]
		[Bindable(true)]
		public string Zljybh 
		{
			get { return GetColumnValue<string>(Columns.Zljybh); }
			set { SetColumnValue(Columns.Zljybh, value); }
		}
		  
		[XmlAttribute("Zlxmdm")]
		[Bindable(true)]
		public string Zlxmdm 
		{
			get { return GetColumnValue<string>(Columns.Zlxmdm); }
			set { SetColumnValue(Columns.Zlxmdm, value); }
		}
		  
		[XmlAttribute("Zlllsz")]
		[Bindable(true)]
		public string Zlllsz 
		{
			get { return GetColumnValue<string>(Columns.Zlllsz); }
			set { SetColumnValue(Columns.Zlllsz, value); }
		}
		  
		[XmlAttribute("ZLSCZ1")]
		[Bindable(true)]
		public string ZLSCZ1 
		{
			get { return GetColumnValue<string>(Columns.ZLSCZ1); }
			set { SetColumnValue(Columns.ZLSCZ1, value); }
		}
		  
		[XmlAttribute("ZLSCZ2")]
		[Bindable(true)]
		public string ZLSCZ2 
		{
			get { return GetColumnValue<string>(Columns.ZLSCZ2); }
			set { SetColumnValue(Columns.ZLSCZ2, value); }
		}
		  
		[XmlAttribute("ZLSCZ3")]
		[Bindable(true)]
		public string ZLSCZ3 
		{
			get { return GetColumnValue<string>(Columns.ZLSCZ3); }
			set { SetColumnValue(Columns.ZLSCZ3, value); }
		}
		  
		[XmlAttribute("ZLSCZ4")]
		[Bindable(true)]
		public string ZLSCZ4 
		{
			get { return GetColumnValue<string>(Columns.ZLSCZ4); }
			set { SetColumnValue(Columns.ZLSCZ4, value); }
		}
		  
		[XmlAttribute("ZLSCZ5")]
		[Bindable(true)]
		public string ZLSCZ5 
		{
			get { return GetColumnValue<string>(Columns.ZLSCZ5); }
			set { SetColumnValue(Columns.ZLSCZ5, value); }
		}
		  
		[XmlAttribute("Zldxjl")]
		[Bindable(true)]
		public string Zldxjl 
		{
			get { return GetColumnValue<string>(Columns.Zldxjl); }
			set { SetColumnValue(Columns.Zldxjl, value); }
		}
		  
		[XmlAttribute("Zldxbz")]
		[Bindable(true)]
		public string Zldxbz 
		{
			get { return GetColumnValue<string>(Columns.Zldxbz); }
			set { SetColumnValue(Columns.Zldxbz, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varZljybh,string varZlxmdm,string varZlllsz,string varZLSCZ1,string varZLSCZ2,string varZLSCZ3,string varZLSCZ4,string varZLSCZ5,string varZldxjl,string varZldxbz)
		{
			ZLT22 item = new ZLT22();
			
			item.Zljybh = varZljybh;
			
			item.Zlxmdm = varZlxmdm;
			
			item.Zlllsz = varZlllsz;
			
			item.ZLSCZ1 = varZLSCZ1;
			
			item.ZLSCZ2 = varZLSCZ2;
			
			item.ZLSCZ3 = varZLSCZ3;
			
			item.ZLSCZ4 = varZLSCZ4;
			
			item.ZLSCZ5 = varZLSCZ5;
			
			item.Zldxjl = varZldxjl;
			
			item.Zldxbz = varZldxbz;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(string varZljybh,string varZlxmdm,string varZlllsz,string varZLSCZ1,string varZLSCZ2,string varZLSCZ3,string varZLSCZ4,string varZLSCZ5,string varZldxjl,string varZldxbz)
		{
			ZLT22 item = new ZLT22();
			
				item.Zljybh = varZljybh;
			
				item.Zlxmdm = varZlxmdm;
			
				item.Zlllsz = varZlllsz;
			
				item.ZLSCZ1 = varZLSCZ1;
			
				item.ZLSCZ2 = varZLSCZ2;
			
				item.ZLSCZ3 = varZLSCZ3;
			
				item.ZLSCZ4 = varZLSCZ4;
			
				item.ZLSCZ5 = varZLSCZ5;
			
				item.Zldxjl = varZldxjl;
			
				item.Zldxbz = varZldxbz;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn ZljybhColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn ZlxmdmColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn ZlllszColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn ZLSCZ1Column
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn ZLSCZ2Column
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn ZLSCZ3Column
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn ZLSCZ4Column
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn ZLSCZ5Column
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn ZldxjlColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn ZldxbzColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Zljybh = @"ZLJYBH";
			 public static string Zlxmdm = @"ZLXMDM";
			 public static string Zlllsz = @"ZLLLSZ";
			 public static string ZLSCZ1 = @"ZLSCZ1";
			 public static string ZLSCZ2 = @"ZLSCZ2";
			 public static string ZLSCZ3 = @"ZLSCZ3";
			 public static string ZLSCZ4 = @"ZLSCZ4";
			 public static string ZLSCZ5 = @"ZLSCZ5";
			 public static string Zldxjl = @"ZLDXJL";
			 public static string Zldxbz = @"ZLDXBZ";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}

using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace OracleDataDomain
{
	/// <summary>
	/// Strongly-typed collection for the XST35 class.
	/// </summary>
    [Serializable]
	public partial class XST35Collection : ActiveList<XST35, XST35Collection>
	{	   
		public XST35Collection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>XST35Collection</returns>
		public XST35Collection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                XST35 o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the XST35 table.
	/// </summary>
	[Serializable]
	public partial class XST35 : ActiveRecord<XST35>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public XST35()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public XST35(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public XST35(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public XST35(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("XST35", TableType.Table, DataService.GetInstance("ErpNowthwin"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"FYERP";
				//columns
				
				TableSchema.TableColumn colvarXsdhdh = new TableSchema.TableColumn(schema);
				colvarXsdhdh.ColumnName = "XSDHDH";
				colvarXsdhdh.DataType = DbType.String;
				colvarXsdhdh.MaxLength = 12;
				colvarXsdhdh.AutoIncrement = false;
				colvarXsdhdh.IsNullable = false;
				colvarXsdhdh.IsPrimaryKey = true;
				colvarXsdhdh.IsForeignKey = false;
				colvarXsdhdh.IsReadOnly = false;
				colvarXsdhdh.DefaultSetting = @"";
				colvarXsdhdh.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXsdhdh);
				
				TableSchema.TableColumn colvarXsddhh = new TableSchema.TableColumn(schema);
				colvarXsddhh.ColumnName = "XSDDHH";
				colvarXsddhh.DataType = DbType.Decimal;
				colvarXsddhh.MaxLength = 0;
				colvarXsddhh.AutoIncrement = false;
				colvarXsddhh.IsNullable = false;
				colvarXsddhh.IsPrimaryKey = true;
				colvarXsddhh.IsForeignKey = false;
				colvarXsddhh.IsReadOnly = false;
				colvarXsddhh.DefaultSetting = @"";
				colvarXsddhh.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXsddhh);
				
				TableSchema.TableColumn colvarXtwpdm = new TableSchema.TableColumn(schema);
				colvarXtwpdm.ColumnName = "XTWPDM";
				colvarXtwpdm.DataType = DbType.String;
				colvarXtwpdm.MaxLength = 20;
				colvarXtwpdm.AutoIncrement = false;
				colvarXtwpdm.IsNullable = true;
				colvarXtwpdm.IsPrimaryKey = false;
				colvarXtwpdm.IsForeignKey = false;
				colvarXtwpdm.IsReadOnly = false;
				colvarXtwpdm.DefaultSetting = @"";
				colvarXtwpdm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXtwpdm);
				
				TableSchema.TableColumn colvarXtjldw = new TableSchema.TableColumn(schema);
				colvarXtjldw.ColumnName = "XTJLDW";
				colvarXtjldw.DataType = DbType.String;
				colvarXtjldw.MaxLength = 6;
				colvarXtjldw.AutoIncrement = false;
				colvarXtjldw.IsNullable = true;
				colvarXtjldw.IsPrimaryKey = false;
				colvarXtjldw.IsForeignKey = false;
				colvarXtjldw.IsReadOnly = false;
				colvarXtjldw.DefaultSetting = @"";
				colvarXtjldw.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXtjldw);
				
				TableSchema.TableColumn colvarXsdhsl = new TableSchema.TableColumn(schema);
				colvarXsdhsl.ColumnName = "XSDHSL";
				colvarXsdhsl.DataType = DbType.Decimal;
				colvarXsdhsl.MaxLength = 0;
				colvarXsdhsl.AutoIncrement = false;
				colvarXsdhsl.IsNullable = true;
				colvarXsdhsl.IsPrimaryKey = false;
				colvarXsdhsl.IsForeignKey = false;
				colvarXsdhsl.IsReadOnly = false;
				colvarXsdhsl.DefaultSetting = @"";
				colvarXsdhsl.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXsdhsl);
				
				TableSchema.TableColumn colvarXsdhje = new TableSchema.TableColumn(schema);
				colvarXsdhje.ColumnName = "XSDHJE";
				colvarXsdhje.DataType = DbType.Decimal;
				colvarXsdhje.MaxLength = 0;
				colvarXsdhje.AutoIncrement = false;
				colvarXsdhje.IsNullable = true;
				colvarXsdhje.IsPrimaryKey = false;
				colvarXsdhje.IsForeignKey = false;
				colvarXsdhje.IsReadOnly = false;
				colvarXsdhje.DefaultSetting = @"";
				colvarXsdhje.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXsdhje);
				
				TableSchema.TableColumn colvarXsdhdj = new TableSchema.TableColumn(schema);
				colvarXsdhdj.ColumnName = "XSDHDJ";
				colvarXsdhdj.DataType = DbType.Decimal;
				colvarXsdhdj.MaxLength = 0;
				colvarXsdhdj.AutoIncrement = false;
				colvarXsdhdj.IsNullable = true;
				colvarXsdhdj.IsPrimaryKey = false;
				colvarXsdhdj.IsForeignKey = false;
				colvarXsdhdj.IsReadOnly = false;
				colvarXsdhdj.DefaultSetting = @"";
				colvarXsdhdj.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXsdhdj);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ErpNowthwin"].AddSchema("XST35",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Xsdhdh")]
		[Bindable(true)]
		public string Xsdhdh 
		{
			get { return GetColumnValue<string>(Columns.Xsdhdh); }
			set { SetColumnValue(Columns.Xsdhdh, value); }
		}
		  
		[XmlAttribute("Xsddhh")]
		[Bindable(true)]
		public decimal Xsddhh 
		{
			get { return GetColumnValue<decimal>(Columns.Xsddhh); }
			set { SetColumnValue(Columns.Xsddhh, value); }
		}
		  
		[XmlAttribute("Xtwpdm")]
		[Bindable(true)]
		public string Xtwpdm 
		{
			get { return GetColumnValue<string>(Columns.Xtwpdm); }
			set { SetColumnValue(Columns.Xtwpdm, value); }
		}
		  
		[XmlAttribute("Xtjldw")]
		[Bindable(true)]
		public string Xtjldw 
		{
			get { return GetColumnValue<string>(Columns.Xtjldw); }
			set { SetColumnValue(Columns.Xtjldw, value); }
		}
		  
		[XmlAttribute("Xsdhsl")]
		[Bindable(true)]
		public decimal? Xsdhsl 
		{
			get { return GetColumnValue<decimal?>(Columns.Xsdhsl); }
			set { SetColumnValue(Columns.Xsdhsl, value); }
		}
		  
		[XmlAttribute("Xsdhje")]
		[Bindable(true)]
		public decimal? Xsdhje 
		{
			get { return GetColumnValue<decimal?>(Columns.Xsdhje); }
			set { SetColumnValue(Columns.Xsdhje, value); }
		}
		  
		[XmlAttribute("Xsdhdj")]
		[Bindable(true)]
		public decimal? Xsdhdj 
		{
			get { return GetColumnValue<decimal?>(Columns.Xsdhdj); }
			set { SetColumnValue(Columns.Xsdhdj, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varXsdhdh,decimal varXsddhh,string varXtwpdm,string varXtjldw,decimal? varXsdhsl,decimal? varXsdhje,decimal? varXsdhdj)
		{
			XST35 item = new XST35();
			
			item.Xsdhdh = varXsdhdh;
			
			item.Xsddhh = varXsddhh;
			
			item.Xtwpdm = varXtwpdm;
			
			item.Xtjldw = varXtjldw;
			
			item.Xsdhsl = varXsdhsl;
			
			item.Xsdhje = varXsdhje;
			
			item.Xsdhdj = varXsdhdj;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(string varXsdhdh,decimal varXsddhh,string varXtwpdm,string varXtjldw,decimal? varXsdhsl,decimal? varXsdhje,decimal? varXsdhdj)
		{
			XST35 item = new XST35();
			
				item.Xsdhdh = varXsdhdh;
			
				item.Xsddhh = varXsddhh;
			
				item.Xtwpdm = varXtwpdm;
			
				item.Xtjldw = varXtjldw;
			
				item.Xsdhsl = varXsdhsl;
			
				item.Xsdhje = varXsdhje;
			
				item.Xsdhdj = varXsdhdj;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn XsdhdhColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn XsddhhColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn XtwpdmColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn XtjldwColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn XsdhslColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn XsdhjeColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn XsdhdjColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Xsdhdh = @"XSDHDH";
			 public static string Xsddhh = @"XSDDHH";
			 public static string Xtwpdm = @"XTWPDM";
			 public static string Xtjldw = @"XTJLDW";
			 public static string Xsdhsl = @"XSDHSL";
			 public static string Xsdhje = @"XSDHJE";
			 public static string Xsdhdj = @"XSDHDJ";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}

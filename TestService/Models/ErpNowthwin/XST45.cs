using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace OracleDataDomain
{
	/// <summary>
	/// Strongly-typed collection for the XST45 class.
	/// </summary>
    [Serializable]
	public partial class XST45Collection : ActiveList<XST45, XST45Collection>
	{	   
		public XST45Collection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>XST45Collection</returns>
		public XST45Collection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                XST45 o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the XST45 table.
	/// </summary>
	[Serializable]
	public partial class XST45 : ActiveRecord<XST45>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public XST45()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public XST45(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public XST45(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public XST45(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("XST45", TableType.Table, DataService.GetInstance("ErpNowthwin"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"FYERP";
				//columns
				
				TableSchema.TableColumn colvarXtwldm = new TableSchema.TableColumn(schema);
				colvarXtwldm.ColumnName = "XTWLDM";
				colvarXtwldm.DataType = DbType.String;
				colvarXtwldm.MaxLength = 8;
				colvarXtwldm.AutoIncrement = false;
				colvarXtwldm.IsNullable = false;
				colvarXtwldm.IsPrimaryKey = true;
				colvarXtwldm.IsForeignKey = false;
				colvarXtwldm.IsReadOnly = false;
				colvarXtwldm.DefaultSetting = @"";
				colvarXtwldm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXtwldm);
				
				TableSchema.TableColumn colvarXsxsrq = new TableSchema.TableColumn(schema);
				colvarXsxsrq.ColumnName = "XSXSRQ";
				colvarXsxsrq.DataType = DbType.DateTime;
				colvarXsxsrq.MaxLength = 0;
				colvarXsxsrq.AutoIncrement = false;
				colvarXsxsrq.IsNullable = false;
				colvarXsxsrq.IsPrimaryKey = true;
				colvarXsxsrq.IsForeignKey = false;
				colvarXsxsrq.IsReadOnly = false;
				colvarXsxsrq.DefaultSetting = @"";
				colvarXsxsrq.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXsxsrq);
				
				TableSchema.TableColumn colvarXsjpdm = new TableSchema.TableColumn(schema);
				colvarXsjpdm.ColumnName = "XSJPDM";
				colvarXsjpdm.DataType = DbType.String;
				colvarXsjpdm.MaxLength = 4;
				colvarXsjpdm.AutoIncrement = false;
				colvarXsjpdm.IsNullable = false;
				colvarXsjpdm.IsPrimaryKey = true;
				colvarXsjpdm.IsForeignKey = false;
				colvarXsjpdm.IsReadOnly = false;
				colvarXsjpdm.DefaultSetting = @"";
				colvarXsjpdm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXsjpdm);
				
				TableSchema.TableColumn colvarXsxsje = new TableSchema.TableColumn(schema);
				colvarXsxsje.ColumnName = "XSXSJE";
				colvarXsxsje.DataType = DbType.Decimal;
				colvarXsxsje.MaxLength = 0;
				colvarXsxsje.AutoIncrement = false;
				colvarXsxsje.IsNullable = true;
				colvarXsxsje.IsPrimaryKey = false;
				colvarXsxsje.IsForeignKey = false;
				colvarXsxsje.IsReadOnly = false;
				colvarXsxsje.DefaultSetting = @"";
				colvarXsxsje.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXsxsje);
				
				TableSchema.TableColumn colvarXsxssl = new TableSchema.TableColumn(schema);
				colvarXsxssl.ColumnName = "XSXSSL";
				colvarXsxssl.DataType = DbType.Decimal;
				colvarXsxssl.MaxLength = 0;
				colvarXsxssl.AutoIncrement = false;
				colvarXsxssl.IsNullable = true;
				colvarXsxssl.IsPrimaryKey = false;
				colvarXsxssl.IsForeignKey = false;
				colvarXsxssl.IsReadOnly = false;
				colvarXsxssl.DefaultSetting = @"";
				colvarXsxssl.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXsxssl);
				
				TableSchema.TableColumn colvarXslrry = new TableSchema.TableColumn(schema);
				colvarXslrry.ColumnName = "XSLRRY";
				colvarXslrry.DataType = DbType.String;
				colvarXslrry.MaxLength = 8;
				colvarXslrry.AutoIncrement = false;
				colvarXslrry.IsNullable = true;
				colvarXslrry.IsPrimaryKey = false;
				colvarXslrry.IsForeignKey = false;
				colvarXslrry.IsReadOnly = false;
				colvarXslrry.DefaultSetting = @"";
				colvarXslrry.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXslrry);
				
				TableSchema.TableColumn colvarXslrrq = new TableSchema.TableColumn(schema);
				colvarXslrrq.ColumnName = "XSLRRQ";
				colvarXslrrq.DataType = DbType.DateTime;
				colvarXslrrq.MaxLength = 0;
				colvarXslrrq.AutoIncrement = false;
				colvarXslrrq.IsNullable = true;
				colvarXslrrq.IsPrimaryKey = false;
				colvarXslrrq.IsForeignKey = false;
				colvarXslrrq.IsReadOnly = false;
				colvarXslrrq.DefaultSetting = @"";
				colvarXslrrq.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXslrrq);
				
				TableSchema.TableColumn colvarXszsyy = new TableSchema.TableColumn(schema);
				colvarXszsyy.ColumnName = "XSZSYY";
				colvarXszsyy.DataType = DbType.String;
				colvarXszsyy.MaxLength = 6;
				colvarXszsyy.AutoIncrement = false;
				colvarXszsyy.IsNullable = true;
				colvarXszsyy.IsPrimaryKey = false;
				colvarXszsyy.IsForeignKey = false;
				colvarXszsyy.IsReadOnly = false;
				colvarXszsyy.DefaultSetting = @"";
				colvarXszsyy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXszsyy);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ErpNowthwin"].AddSchema("XST45",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Xtwldm")]
		[Bindable(true)]
		public string Xtwldm 
		{
			get { return GetColumnValue<string>(Columns.Xtwldm); }
			set { SetColumnValue(Columns.Xtwldm, value); }
		}
		  
		[XmlAttribute("Xsxsrq")]
		[Bindable(true)]
		public DateTime Xsxsrq 
		{
			get { return GetColumnValue<DateTime>(Columns.Xsxsrq); }
			set { SetColumnValue(Columns.Xsxsrq, value); }
		}
		  
		[XmlAttribute("Xsjpdm")]
		[Bindable(true)]
		public string Xsjpdm 
		{
			get { return GetColumnValue<string>(Columns.Xsjpdm); }
			set { SetColumnValue(Columns.Xsjpdm, value); }
		}
		  
		[XmlAttribute("Xsxsje")]
		[Bindable(true)]
		public decimal? Xsxsje 
		{
			get { return GetColumnValue<decimal?>(Columns.Xsxsje); }
			set { SetColumnValue(Columns.Xsxsje, value); }
		}
		  
		[XmlAttribute("Xsxssl")]
		[Bindable(true)]
		public decimal? Xsxssl 
		{
			get { return GetColumnValue<decimal?>(Columns.Xsxssl); }
			set { SetColumnValue(Columns.Xsxssl, value); }
		}
		  
		[XmlAttribute("Xslrry")]
		[Bindable(true)]
		public string Xslrry 
		{
			get { return GetColumnValue<string>(Columns.Xslrry); }
			set { SetColumnValue(Columns.Xslrry, value); }
		}
		  
		[XmlAttribute("Xslrrq")]
		[Bindable(true)]
		public DateTime? Xslrrq 
		{
			get { return GetColumnValue<DateTime?>(Columns.Xslrrq); }
			set { SetColumnValue(Columns.Xslrrq, value); }
		}
		  
		[XmlAttribute("Xszsyy")]
		[Bindable(true)]
		public string Xszsyy 
		{
			get { return GetColumnValue<string>(Columns.Xszsyy); }
			set { SetColumnValue(Columns.Xszsyy, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varXtwldm,DateTime varXsxsrq,string varXsjpdm,decimal? varXsxsje,decimal? varXsxssl,string varXslrry,DateTime? varXslrrq,string varXszsyy)
		{
			XST45 item = new XST45();
			
			item.Xtwldm = varXtwldm;
			
			item.Xsxsrq = varXsxsrq;
			
			item.Xsjpdm = varXsjpdm;
			
			item.Xsxsje = varXsxsje;
			
			item.Xsxssl = varXsxssl;
			
			item.Xslrry = varXslrry;
			
			item.Xslrrq = varXslrrq;
			
			item.Xszsyy = varXszsyy;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(string varXtwldm,DateTime varXsxsrq,string varXsjpdm,decimal? varXsxsje,decimal? varXsxssl,string varXslrry,DateTime? varXslrrq,string varXszsyy)
		{
			XST45 item = new XST45();
			
				item.Xtwldm = varXtwldm;
			
				item.Xsxsrq = varXsxsrq;
			
				item.Xsjpdm = varXsjpdm;
			
				item.Xsxsje = varXsxsje;
			
				item.Xsxssl = varXsxssl;
			
				item.Xslrry = varXslrry;
			
				item.Xslrrq = varXslrrq;
			
				item.Xszsyy = varXszsyy;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn XtwldmColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn XsxsrqColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn XsjpdmColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn XsxsjeColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn XsxsslColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn XslrryColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn XslrrqColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn XszsyyColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Xtwldm = @"XTWLDM";
			 public static string Xsxsrq = @"XSXSRQ";
			 public static string Xsjpdm = @"XSJPDM";
			 public static string Xsxsje = @"XSXSJE";
			 public static string Xsxssl = @"XSXSSL";
			 public static string Xslrry = @"XSLRRY";
			 public static string Xslrrq = @"XSLRRQ";
			 public static string Xszsyy = @"XSZSYY";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}

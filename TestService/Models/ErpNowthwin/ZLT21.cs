using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace OracleDataDomain
{
	/// <summary>
	/// Strongly-typed collection for the ZLT21 class.
	/// </summary>
    [Serializable]
	public partial class ZLT21Collection : ActiveList<ZLT21, ZLT21Collection>
	{	   
		public ZLT21Collection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>ZLT21Collection</returns>
		public ZLT21Collection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                ZLT21 o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the ZLT21 table.
	/// </summary>
	[Serializable]
	public partial class ZLT21 : ActiveRecord<ZLT21>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public ZLT21()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public ZLT21(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public ZLT21(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public ZLT21(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("ZLT21", TableType.Table, DataService.GetInstance("ErpNowthwin"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"FYERP";
				//columns
				
				TableSchema.TableColumn colvarZlysjy = new TableSchema.TableColumn(schema);
				colvarZlysjy.ColumnName = "ZLYSJY";
				colvarZlysjy.DataType = DbType.String;
				colvarZlysjy.MaxLength = 12;
				colvarZlysjy.AutoIncrement = false;
				colvarZlysjy.IsNullable = true;
				colvarZlysjy.IsPrimaryKey = false;
				colvarZlysjy.IsForeignKey = false;
				colvarZlysjy.IsReadOnly = false;
				colvarZlysjy.DefaultSetting = @"";
				colvarZlysjy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarZlysjy);
				
				TableSchema.TableColumn colvarZlzhbz = new TableSchema.TableColumn(schema);
				colvarZlzhbz.ColumnName = "ZLZHBZ";
				colvarZlzhbz.DataType = DbType.String;
				colvarZlzhbz.MaxLength = 1;
				colvarZlzhbz.AutoIncrement = false;
				colvarZlzhbz.IsNullable = true;
				colvarZlzhbz.IsPrimaryKey = false;
				colvarZlzhbz.IsForeignKey = false;
				colvarZlzhbz.IsReadOnly = false;
				colvarZlzhbz.DefaultSetting = @"";
				colvarZlzhbz.ForeignKeyTableName = "";
				schema.Columns.Add(colvarZlzhbz);
				
				TableSchema.TableColumn colvarZljybh = new TableSchema.TableColumn(schema);
				colvarZljybh.ColumnName = "ZLJYBH";
				colvarZljybh.DataType = DbType.String;
				colvarZljybh.MaxLength = 12;
				colvarZljybh.AutoIncrement = false;
				colvarZljybh.IsNullable = false;
				colvarZljybh.IsPrimaryKey = true;
				colvarZljybh.IsForeignKey = false;
				colvarZljybh.IsReadOnly = false;
				colvarZljybh.DefaultSetting = @"";
				colvarZljybh.ForeignKeyTableName = "";
				schema.Columns.Add(colvarZljybh);
				
				TableSchema.TableColumn colvarZlzjdm = new TableSchema.TableColumn(schema);
				colvarZlzjdm.ColumnName = "ZLZJDM";
				colvarZlzjdm.DataType = DbType.String;
				colvarZlzjdm.MaxLength = 12;
				colvarZlzjdm.AutoIncrement = false;
				colvarZlzjdm.IsNullable = true;
				colvarZlzjdm.IsPrimaryKey = false;
				colvarZlzjdm.IsForeignKey = false;
				colvarZlzjdm.IsReadOnly = false;
				colvarZlzjdm.DefaultSetting = @"";
				colvarZlzjdm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarZlzjdm);
				
				TableSchema.TableColumn colvarXtwldm = new TableSchema.TableColumn(schema);
				colvarXtwldm.ColumnName = "XTWLDM";
				colvarXtwldm.DataType = DbType.String;
				colvarXtwldm.MaxLength = 12;
				colvarXtwldm.AutoIncrement = false;
				colvarXtwldm.IsNullable = true;
				colvarXtwldm.IsPrimaryKey = false;
				colvarXtwldm.IsForeignKey = false;
				colvarXtwldm.IsReadOnly = false;
				colvarXtwldm.DefaultSetting = @"";
				colvarXtwldm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXtwldm);
				
				TableSchema.TableColumn colvarXtwpdm = new TableSchema.TableColumn(schema);
				colvarXtwpdm.ColumnName = "XTWPDM";
				colvarXtwpdm.DataType = DbType.String;
				colvarXtwpdm.MaxLength = 20;
				colvarXtwpdm.AutoIncrement = false;
				colvarXtwpdm.IsNullable = true;
				colvarXtwpdm.IsPrimaryKey = false;
				colvarXtwpdm.IsForeignKey = false;
				colvarXtwpdm.IsReadOnly = false;
				colvarXtwpdm.DefaultSetting = @"";
				colvarXtwpdm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXtwpdm);
				
				TableSchema.TableColumn colvarZljldw = new TableSchema.TableColumn(schema);
				colvarZljldw.ColumnName = "ZLJLDW";
				colvarZljldw.DataType = DbType.String;
				colvarZljldw.MaxLength = 10;
				colvarZljldw.AutoIncrement = false;
				colvarZljldw.IsNullable = true;
				colvarZljldw.IsPrimaryKey = false;
				colvarZljldw.IsForeignKey = false;
				colvarZljldw.IsReadOnly = false;
				colvarZljldw.DefaultSetting = @"";
				colvarZljldw.ForeignKeyTableName = "";
				schema.Columns.Add(colvarZljldw);
				
				TableSchema.TableColumn colvarZldlsl = new TableSchema.TableColumn(schema);
				colvarZldlsl.ColumnName = "ZLDLSL";
				colvarZldlsl.DataType = DbType.Decimal;
				colvarZldlsl.MaxLength = 0;
				colvarZldlsl.AutoIncrement = false;
				colvarZldlsl.IsNullable = true;
				colvarZldlsl.IsPrimaryKey = false;
				colvarZldlsl.IsForeignKey = false;
				colvarZldlsl.IsReadOnly = false;
				colvarZldlsl.DefaultSetting = @"";
				colvarZldlsl.ForeignKeyTableName = "";
				schema.Columns.Add(colvarZldlsl);
				
				TableSchema.TableColumn colvarZldlrq = new TableSchema.TableColumn(schema);
				colvarZldlrq.ColumnName = "ZLDLRQ";
				colvarZldlrq.DataType = DbType.DateTime;
				colvarZldlrq.MaxLength = 0;
				colvarZldlrq.AutoIncrement = false;
				colvarZldlrq.IsNullable = true;
				colvarZldlrq.IsPrimaryKey = false;
				colvarZldlrq.IsForeignKey = false;
				colvarZldlrq.IsReadOnly = false;
				colvarZldlrq.DefaultSetting = @"";
				colvarZldlrq.ForeignKeyTableName = "";
				schema.Columns.Add(colvarZldlrq);
				
				TableSchema.TableColumn colvarZlcjsl = new TableSchema.TableColumn(schema);
				colvarZlcjsl.ColumnName = "ZLCJSL";
				colvarZlcjsl.DataType = DbType.Decimal;
				colvarZlcjsl.MaxLength = 0;
				colvarZlcjsl.AutoIncrement = false;
				colvarZlcjsl.IsNullable = true;
				colvarZlcjsl.IsPrimaryKey = false;
				colvarZlcjsl.IsForeignKey = false;
				colvarZlcjsl.IsReadOnly = false;
				colvarZlcjsl.DefaultSetting = @"";
				colvarZlcjsl.ForeignKeyTableName = "";
				schema.Columns.Add(colvarZlcjsl);
				
				TableSchema.TableColumn colvarZlddbh = new TableSchema.TableColumn(schema);
				colvarZlddbh.ColumnName = "ZLDDBH";
				colvarZlddbh.DataType = DbType.String;
				colvarZlddbh.MaxLength = 12;
				colvarZlddbh.AutoIncrement = false;
				colvarZlddbh.IsNullable = true;
				colvarZlddbh.IsPrimaryKey = false;
				colvarZlddbh.IsForeignKey = false;
				colvarZlddbh.IsReadOnly = false;
				colvarZlddbh.DefaultSetting = @"";
				colvarZlddbh.ForeignKeyTableName = "";
				schema.Columns.Add(colvarZlddbh);
				
				TableSchema.TableColumn colvarZlztjl = new TableSchema.TableColumn(schema);
				colvarZlztjl.ColumnName = "ZLZTJL";
				colvarZlztjl.DataType = DbType.String;
				colvarZlztjl.MaxLength = 100;
				colvarZlztjl.AutoIncrement = false;
				colvarZlztjl.IsNullable = true;
				colvarZlztjl.IsPrimaryKey = false;
				colvarZlztjl.IsForeignKey = false;
				colvarZlztjl.IsReadOnly = false;
				colvarZlztjl.DefaultSetting = @"";
				colvarZlztjl.ForeignKeyTableName = "";
				schema.Columns.Add(colvarZlztjl);
				
				TableSchema.TableColumn colvarZlztbz = new TableSchema.TableColumn(schema);
				colvarZlztbz.ColumnName = "ZLZTBZ";
				colvarZlztbz.DataType = DbType.String;
				colvarZlztbz.MaxLength = 100;
				colvarZlztbz.AutoIncrement = false;
				colvarZlztbz.IsNullable = true;
				colvarZlztbz.IsPrimaryKey = false;
				colvarZlztbz.IsForeignKey = false;
				colvarZlztbz.IsReadOnly = false;
				colvarZlztbz.DefaultSetting = @"";
				colvarZlztbz.ForeignKeyTableName = "";
				schema.Columns.Add(colvarZlztbz);
				
				TableSchema.TableColumn colvarZllrry = new TableSchema.TableColumn(schema);
				colvarZllrry.ColumnName = "ZLLRRY";
				colvarZllrry.DataType = DbType.String;
				colvarZllrry.MaxLength = 10;
				colvarZllrry.AutoIncrement = false;
				colvarZllrry.IsNullable = true;
				colvarZllrry.IsPrimaryKey = false;
				colvarZllrry.IsForeignKey = false;
				colvarZllrry.IsReadOnly = false;
				colvarZllrry.DefaultSetting = @"";
				colvarZllrry.ForeignKeyTableName = "";
				schema.Columns.Add(colvarZllrry);
				
				TableSchema.TableColumn colvarZllrrq = new TableSchema.TableColumn(schema);
				colvarZllrrq.ColumnName = "ZLLRRQ";
				colvarZllrrq.DataType = DbType.DateTime;
				colvarZllrrq.MaxLength = 0;
				colvarZllrrq.AutoIncrement = false;
				colvarZllrrq.IsNullable = true;
				colvarZllrrq.IsPrimaryKey = false;
				colvarZllrrq.IsForeignKey = false;
				colvarZllrrq.IsReadOnly = false;
				colvarZllrrq.DefaultSetting = @"";
				colvarZllrrq.ForeignKeyTableName = "";
				schema.Columns.Add(colvarZllrrq);
				
				TableSchema.TableColumn colvarZlshry = new TableSchema.TableColumn(schema);
				colvarZlshry.ColumnName = "ZLSHRY";
				colvarZlshry.DataType = DbType.String;
				colvarZlshry.MaxLength = 10;
				colvarZlshry.AutoIncrement = false;
				colvarZlshry.IsNullable = true;
				colvarZlshry.IsPrimaryKey = false;
				colvarZlshry.IsForeignKey = false;
				colvarZlshry.IsReadOnly = false;
				colvarZlshry.DefaultSetting = @"";
				colvarZlshry.ForeignKeyTableName = "";
				schema.Columns.Add(colvarZlshry);
				
				TableSchema.TableColumn colvarZlshrq = new TableSchema.TableColumn(schema);
				colvarZlshrq.ColumnName = "ZLSHRQ";
				colvarZlshrq.DataType = DbType.DateTime;
				colvarZlshrq.MaxLength = 0;
				colvarZlshrq.AutoIncrement = false;
				colvarZlshrq.IsNullable = true;
				colvarZlshrq.IsPrimaryKey = false;
				colvarZlshrq.IsForeignKey = false;
				colvarZlshrq.IsReadOnly = false;
				colvarZlshrq.DefaultSetting = @"";
				colvarZlshrq.ForeignKeyTableName = "";
				schema.Columns.Add(colvarZlshrq);
				
				TableSchema.TableColumn colvarZldjzt = new TableSchema.TableColumn(schema);
				colvarZldjzt.ColumnName = "ZLDJZT";
				colvarZldjzt.DataType = DbType.String;
				colvarZldjzt.MaxLength = 1;
				colvarZldjzt.AutoIncrement = false;
				colvarZldjzt.IsNullable = true;
				colvarZldjzt.IsPrimaryKey = false;
				colvarZldjzt.IsForeignKey = false;
				colvarZldjzt.IsReadOnly = false;
				colvarZldjzt.DefaultSetting = @"";
				colvarZldjzt.ForeignKeyTableName = "";
				schema.Columns.Add(colvarZldjzt);
				
				TableSchema.TableColumn colvarCgshdh = new TableSchema.TableColumn(schema);
				colvarCgshdh.ColumnName = "CGSHDH";
				colvarCgshdh.DataType = DbType.String;
				colvarCgshdh.MaxLength = 12;
				colvarCgshdh.AutoIncrement = false;
				colvarCgshdh.IsNullable = true;
				colvarCgshdh.IsPrimaryKey = false;
				colvarCgshdh.IsForeignKey = false;
				colvarCgshdh.IsReadOnly = false;
				colvarCgshdh.DefaultSetting = @"";
				colvarCgshdh.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCgshdh);
				
				TableSchema.TableColumn colvarCgshhh = new TableSchema.TableColumn(schema);
				colvarCgshhh.ColumnName = "CGSHHH";
				colvarCgshhh.DataType = DbType.Decimal;
				colvarCgshhh.MaxLength = 0;
				colvarCgshhh.AutoIncrement = false;
				colvarCgshhh.IsNullable = true;
				colvarCgshhh.IsPrimaryKey = false;
				colvarCgshhh.IsForeignKey = false;
				colvarCgshhh.IsReadOnly = false;
				colvarCgshhh.DefaultSetting = @"";
				colvarCgshhh.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCgshhh);
				
				TableSchema.TableColumn colvarZlhgsl = new TableSchema.TableColumn(schema);
				colvarZlhgsl.ColumnName = "ZLHGSL";
				colvarZlhgsl.DataType = DbType.Decimal;
				colvarZlhgsl.MaxLength = 0;
				colvarZlhgsl.AutoIncrement = false;
				colvarZlhgsl.IsNullable = true;
				colvarZlhgsl.IsPrimaryKey = false;
				colvarZlhgsl.IsForeignKey = false;
				colvarZlhgsl.IsReadOnly = false;
				colvarZlhgsl.DefaultSetting = @"";
				colvarZlhgsl.ForeignKeyTableName = "";
				schema.Columns.Add(colvarZlhgsl);
				
				TableSchema.TableColumn colvarZltssl = new TableSchema.TableColumn(schema);
				colvarZltssl.ColumnName = "ZLTSSL";
				colvarZltssl.DataType = DbType.Decimal;
				colvarZltssl.MaxLength = 0;
				colvarZltssl.AutoIncrement = false;
				colvarZltssl.IsNullable = true;
				colvarZltssl.IsPrimaryKey = false;
				colvarZltssl.IsForeignKey = false;
				colvarZltssl.IsReadOnly = false;
				colvarZltssl.DefaultSetting = @"";
				colvarZltssl.ForeignKeyTableName = "";
				schema.Columns.Add(colvarZltssl);
				
				TableSchema.TableColumn colvarZljssl = new TableSchema.TableColumn(schema);
				colvarZljssl.ColumnName = "ZLJSSL";
				colvarZljssl.DataType = DbType.Decimal;
				colvarZljssl.MaxLength = 0;
				colvarZljssl.AutoIncrement = false;
				colvarZljssl.IsNullable = true;
				colvarZljssl.IsPrimaryKey = false;
				colvarZljssl.IsForeignKey = false;
				colvarZljssl.IsReadOnly = false;
				colvarZljssl.DefaultSetting = @"";
				colvarZljssl.ForeignKeyTableName = "";
				schema.Columns.Add(colvarZljssl);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ErpNowthwin"].AddSchema("ZLT21",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Zlysjy")]
		[Bindable(true)]
		public string Zlysjy 
		{
			get { return GetColumnValue<string>(Columns.Zlysjy); }
			set { SetColumnValue(Columns.Zlysjy, value); }
		}
		  
		[XmlAttribute("Zlzhbz")]
		[Bindable(true)]
		public string Zlzhbz 
		{
			get { return GetColumnValue<string>(Columns.Zlzhbz); }
			set { SetColumnValue(Columns.Zlzhbz, value); }
		}
		  
		[XmlAttribute("Zljybh")]
		[Bindable(true)]
		public string Zljybh 
		{
			get { return GetColumnValue<string>(Columns.Zljybh); }
			set { SetColumnValue(Columns.Zljybh, value); }
		}
		  
		[XmlAttribute("Zlzjdm")]
		[Bindable(true)]
		public string Zlzjdm 
		{
			get { return GetColumnValue<string>(Columns.Zlzjdm); }
			set { SetColumnValue(Columns.Zlzjdm, value); }
		}
		  
		[XmlAttribute("Xtwldm")]
		[Bindable(true)]
		public string Xtwldm 
		{
			get { return GetColumnValue<string>(Columns.Xtwldm); }
			set { SetColumnValue(Columns.Xtwldm, value); }
		}
		  
		[XmlAttribute("Xtwpdm")]
		[Bindable(true)]
		public string Xtwpdm 
		{
			get { return GetColumnValue<string>(Columns.Xtwpdm); }
			set { SetColumnValue(Columns.Xtwpdm, value); }
		}
		  
		[XmlAttribute("Zljldw")]
		[Bindable(true)]
		public string Zljldw 
		{
			get { return GetColumnValue<string>(Columns.Zljldw); }
			set { SetColumnValue(Columns.Zljldw, value); }
		}
		  
		[XmlAttribute("Zldlsl")]
		[Bindable(true)]
		public decimal? Zldlsl 
		{
			get { return GetColumnValue<decimal?>(Columns.Zldlsl); }
			set { SetColumnValue(Columns.Zldlsl, value); }
		}
		  
		[XmlAttribute("Zldlrq")]
		[Bindable(true)]
		public DateTime? Zldlrq 
		{
			get { return GetColumnValue<DateTime?>(Columns.Zldlrq); }
			set { SetColumnValue(Columns.Zldlrq, value); }
		}
		  
		[XmlAttribute("Zlcjsl")]
		[Bindable(true)]
		public decimal? Zlcjsl 
		{
			get { return GetColumnValue<decimal?>(Columns.Zlcjsl); }
			set { SetColumnValue(Columns.Zlcjsl, value); }
		}
		  
		[XmlAttribute("Zlddbh")]
		[Bindable(true)]
		public string Zlddbh 
		{
			get { return GetColumnValue<string>(Columns.Zlddbh); }
			set { SetColumnValue(Columns.Zlddbh, value); }
		}
		  
		[XmlAttribute("Zlztjl")]
		[Bindable(true)]
		public string Zlztjl 
		{
			get { return GetColumnValue<string>(Columns.Zlztjl); }
			set { SetColumnValue(Columns.Zlztjl, value); }
		}
		  
		[XmlAttribute("Zlztbz")]
		[Bindable(true)]
		public string Zlztbz 
		{
			get { return GetColumnValue<string>(Columns.Zlztbz); }
			set { SetColumnValue(Columns.Zlztbz, value); }
		}
		  
		[XmlAttribute("Zllrry")]
		[Bindable(true)]
		public string Zllrry 
		{
			get { return GetColumnValue<string>(Columns.Zllrry); }
			set { SetColumnValue(Columns.Zllrry, value); }
		}
		  
		[XmlAttribute("Zllrrq")]
		[Bindable(true)]
		public DateTime? Zllrrq 
		{
			get { return GetColumnValue<DateTime?>(Columns.Zllrrq); }
			set { SetColumnValue(Columns.Zllrrq, value); }
		}
		  
		[XmlAttribute("Zlshry")]
		[Bindable(true)]
		public string Zlshry 
		{
			get { return GetColumnValue<string>(Columns.Zlshry); }
			set { SetColumnValue(Columns.Zlshry, value); }
		}
		  
		[XmlAttribute("Zlshrq")]
		[Bindable(true)]
		public DateTime? Zlshrq 
		{
			get { return GetColumnValue<DateTime?>(Columns.Zlshrq); }
			set { SetColumnValue(Columns.Zlshrq, value); }
		}
		  
		[XmlAttribute("Zldjzt")]
		[Bindable(true)]
		public string Zldjzt 
		{
			get { return GetColumnValue<string>(Columns.Zldjzt); }
			set { SetColumnValue(Columns.Zldjzt, value); }
		}
		  
		[XmlAttribute("Cgshdh")]
		[Bindable(true)]
		public string Cgshdh 
		{
			get { return GetColumnValue<string>(Columns.Cgshdh); }
			set { SetColumnValue(Columns.Cgshdh, value); }
		}
		  
		[XmlAttribute("Cgshhh")]
		[Bindable(true)]
		public decimal? Cgshhh 
		{
			get { return GetColumnValue<decimal?>(Columns.Cgshhh); }
			set { SetColumnValue(Columns.Cgshhh, value); }
		}
		  
		[XmlAttribute("Zlhgsl")]
		[Bindable(true)]
		public decimal? Zlhgsl 
		{
			get { return GetColumnValue<decimal?>(Columns.Zlhgsl); }
			set { SetColumnValue(Columns.Zlhgsl, value); }
		}
		  
		[XmlAttribute("Zltssl")]
		[Bindable(true)]
		public decimal? Zltssl 
		{
			get { return GetColumnValue<decimal?>(Columns.Zltssl); }
			set { SetColumnValue(Columns.Zltssl, value); }
		}
		  
		[XmlAttribute("Zljssl")]
		[Bindable(true)]
		public decimal? Zljssl 
		{
			get { return GetColumnValue<decimal?>(Columns.Zljssl); }
			set { SetColumnValue(Columns.Zljssl, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varZlysjy,string varZlzhbz,string varZljybh,string varZlzjdm,string varXtwldm,string varXtwpdm,string varZljldw,decimal? varZldlsl,DateTime? varZldlrq,decimal? varZlcjsl,string varZlddbh,string varZlztjl,string varZlztbz,string varZllrry,DateTime? varZllrrq,string varZlshry,DateTime? varZlshrq,string varZldjzt,string varCgshdh,decimal? varCgshhh,decimal? varZlhgsl,decimal? varZltssl,decimal? varZljssl)
		{
			ZLT21 item = new ZLT21();
			
			item.Zlysjy = varZlysjy;
			
			item.Zlzhbz = varZlzhbz;
			
			item.Zljybh = varZljybh;
			
			item.Zlzjdm = varZlzjdm;
			
			item.Xtwldm = varXtwldm;
			
			item.Xtwpdm = varXtwpdm;
			
			item.Zljldw = varZljldw;
			
			item.Zldlsl = varZldlsl;
			
			item.Zldlrq = varZldlrq;
			
			item.Zlcjsl = varZlcjsl;
			
			item.Zlddbh = varZlddbh;
			
			item.Zlztjl = varZlztjl;
			
			item.Zlztbz = varZlztbz;
			
			item.Zllrry = varZllrry;
			
			item.Zllrrq = varZllrrq;
			
			item.Zlshry = varZlshry;
			
			item.Zlshrq = varZlshrq;
			
			item.Zldjzt = varZldjzt;
			
			item.Cgshdh = varCgshdh;
			
			item.Cgshhh = varCgshhh;
			
			item.Zlhgsl = varZlhgsl;
			
			item.Zltssl = varZltssl;
			
			item.Zljssl = varZljssl;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(string varZlysjy,string varZlzhbz,string varZljybh,string varZlzjdm,string varXtwldm,string varXtwpdm,string varZljldw,decimal? varZldlsl,DateTime? varZldlrq,decimal? varZlcjsl,string varZlddbh,string varZlztjl,string varZlztbz,string varZllrry,DateTime? varZllrrq,string varZlshry,DateTime? varZlshrq,string varZldjzt,string varCgshdh,decimal? varCgshhh,decimal? varZlhgsl,decimal? varZltssl,decimal? varZljssl)
		{
			ZLT21 item = new ZLT21();
			
				item.Zlysjy = varZlysjy;
			
				item.Zlzhbz = varZlzhbz;
			
				item.Zljybh = varZljybh;
			
				item.Zlzjdm = varZlzjdm;
			
				item.Xtwldm = varXtwldm;
			
				item.Xtwpdm = varXtwpdm;
			
				item.Zljldw = varZljldw;
			
				item.Zldlsl = varZldlsl;
			
				item.Zldlrq = varZldlrq;
			
				item.Zlcjsl = varZlcjsl;
			
				item.Zlddbh = varZlddbh;
			
				item.Zlztjl = varZlztjl;
			
				item.Zlztbz = varZlztbz;
			
				item.Zllrry = varZllrry;
			
				item.Zllrrq = varZllrrq;
			
				item.Zlshry = varZlshry;
			
				item.Zlshrq = varZlshrq;
			
				item.Zldjzt = varZldjzt;
			
				item.Cgshdh = varCgshdh;
			
				item.Cgshhh = varCgshhh;
			
				item.Zlhgsl = varZlhgsl;
			
				item.Zltssl = varZltssl;
			
				item.Zljssl = varZljssl;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn ZlysjyColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn ZlzhbzColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn ZljybhColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn ZlzjdmColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn XtwldmColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn XtwpdmColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn ZljldwColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn ZldlslColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn ZldlrqColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn ZlcjslColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn ZlddbhColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn ZlztjlColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn ZlztbzColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        public static TableSchema.TableColumn ZllrryColumn
        {
            get { return Schema.Columns[13]; }
        }
        
        
        
        public static TableSchema.TableColumn ZllrrqColumn
        {
            get { return Schema.Columns[14]; }
        }
        
        
        
        public static TableSchema.TableColumn ZlshryColumn
        {
            get { return Schema.Columns[15]; }
        }
        
        
        
        public static TableSchema.TableColumn ZlshrqColumn
        {
            get { return Schema.Columns[16]; }
        }
        
        
        
        public static TableSchema.TableColumn ZldjztColumn
        {
            get { return Schema.Columns[17]; }
        }
        
        
        
        public static TableSchema.TableColumn CgshdhColumn
        {
            get { return Schema.Columns[18]; }
        }
        
        
        
        public static TableSchema.TableColumn CgshhhColumn
        {
            get { return Schema.Columns[19]; }
        }
        
        
        
        public static TableSchema.TableColumn ZlhgslColumn
        {
            get { return Schema.Columns[20]; }
        }
        
        
        
        public static TableSchema.TableColumn ZltsslColumn
        {
            get { return Schema.Columns[21]; }
        }
        
        
        
        public static TableSchema.TableColumn ZljsslColumn
        {
            get { return Schema.Columns[22]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Zlysjy = @"ZLYSJY";
			 public static string Zlzhbz = @"ZLZHBZ";
			 public static string Zljybh = @"ZLJYBH";
			 public static string Zlzjdm = @"ZLZJDM";
			 public static string Xtwldm = @"XTWLDM";
			 public static string Xtwpdm = @"XTWPDM";
			 public static string Zljldw = @"ZLJLDW";
			 public static string Zldlsl = @"ZLDLSL";
			 public static string Zldlrq = @"ZLDLRQ";
			 public static string Zlcjsl = @"ZLCJSL";
			 public static string Zlddbh = @"ZLDDBH";
			 public static string Zlztjl = @"ZLZTJL";
			 public static string Zlztbz = @"ZLZTBZ";
			 public static string Zllrry = @"ZLLRRY";
			 public static string Zllrrq = @"ZLLRRQ";
			 public static string Zlshry = @"ZLSHRY";
			 public static string Zlshrq = @"ZLSHRQ";
			 public static string Zldjzt = @"ZLDJZT";
			 public static string Cgshdh = @"CGSHDH";
			 public static string Cgshhh = @"CGSHHH";
			 public static string Zlhgsl = @"ZLHGSL";
			 public static string Zltssl = @"ZLTSSL";
			 public static string Zljssl = @"ZLJSSL";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}

using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace OracleDataDomain
{
	/// <summary>
	/// Strongly-typed collection for the SCT301 class.
	/// </summary>
    [Serializable]
	public partial class SCT301Collection : ActiveList<SCT301, SCT301Collection>
	{	   
		public SCT301Collection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>SCT301Collection</returns>
		public SCT301Collection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                SCT301 o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the SCT301 table.
	/// </summary>
	[Serializable]
	public partial class SCT301 : ActiveRecord<SCT301>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public SCT301()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public SCT301(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public SCT301(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public SCT301(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("SCT301", TableType.Table, DataService.GetInstance("ErpNowthwin"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"FYERP";
				//columns
				
				TableSchema.TableColumn colvarSclldh = new TableSchema.TableColumn(schema);
				colvarSclldh.ColumnName = "SCLLDH";
				colvarSclldh.DataType = DbType.String;
				colvarSclldh.MaxLength = 12;
				colvarSclldh.AutoIncrement = false;
				colvarSclldh.IsNullable = false;
				colvarSclldh.IsPrimaryKey = true;
				colvarSclldh.IsForeignKey = false;
				colvarSclldh.IsReadOnly = false;
				colvarSclldh.DefaultSetting = @"";
				colvarSclldh.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSclldh);
				
				TableSchema.TableColumn colvarScllxh = new TableSchema.TableColumn(schema);
				colvarScllxh.ColumnName = "SCLLXH";
				colvarScllxh.DataType = DbType.Decimal;
				colvarScllxh.MaxLength = 0;
				colvarScllxh.AutoIncrement = false;
				colvarScllxh.IsNullable = false;
				colvarScllxh.IsPrimaryKey = true;
				colvarScllxh.IsForeignKey = false;
				colvarScllxh.IsReadOnly = false;
				colvarScllxh.DefaultSetting = @"";
				colvarScllxh.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScllxh);
				
				TableSchema.TableColumn colvarXttxhm = new TableSchema.TableColumn(schema);
				colvarXttxhm.ColumnName = "XTTXHM";
				colvarXttxhm.DataType = DbType.String;
				colvarXttxhm.MaxLength = 18;
				colvarXttxhm.AutoIncrement = false;
				colvarXttxhm.IsNullable = false;
				colvarXttxhm.IsPrimaryKey = true;
				colvarXttxhm.IsForeignKey = false;
				colvarXttxhm.IsReadOnly = false;
				colvarXttxhm.DefaultSetting = @"";
				colvarXttxhm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXttxhm);
				
				TableSchema.TableColumn colvarSchtbh = new TableSchema.TableColumn(schema);
				colvarSchtbh.ColumnName = "SCHTBH";
				colvarSchtbh.DataType = DbType.String;
				colvarSchtbh.MaxLength = 12;
				colvarSchtbh.AutoIncrement = false;
				colvarSchtbh.IsNullable = false;
				colvarSchtbh.IsPrimaryKey = true;
				colvarSchtbh.IsForeignKey = false;
				colvarSchtbh.IsReadOnly = false;
				colvarSchtbh.DefaultSetting = @"";
				colvarSchtbh.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSchtbh);
				
				TableSchema.TableColumn colvarSczsbh = new TableSchema.TableColumn(schema);
				colvarSczsbh.ColumnName = "SCZSBH";
				colvarSczsbh.DataType = DbType.String;
				colvarSczsbh.MaxLength = 12;
				colvarSczsbh.AutoIncrement = false;
				colvarSczsbh.IsNullable = false;
				colvarSczsbh.IsPrimaryKey = true;
				colvarSczsbh.IsForeignKey = false;
				colvarSczsbh.IsReadOnly = false;
				colvarSczsbh.DefaultSetting = @"";
				colvarSczsbh.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSczsbh);
				
				TableSchema.TableColumn colvarSccpdl = new TableSchema.TableColumn(schema);
				colvarSccpdl.ColumnName = "SCCPDL";
				colvarSccpdl.DataType = DbType.String;
				colvarSccpdl.MaxLength = 20;
				colvarSccpdl.AutoIncrement = false;
				colvarSccpdl.IsNullable = false;
				colvarSccpdl.IsPrimaryKey = true;
				colvarSccpdl.IsForeignKey = false;
				colvarSccpdl.IsReadOnly = false;
				colvarSccpdl.DefaultSetting = @"";
				colvarSccpdl.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSccpdl);
				
				TableSchema.TableColumn colvarScwgsl = new TableSchema.TableColumn(schema);
				colvarScwgsl.ColumnName = "SCWGSL";
				colvarScwgsl.DataType = DbType.Decimal;
				colvarScwgsl.MaxLength = 0;
				colvarScwgsl.AutoIncrement = false;
				colvarScwgsl.IsNullable = true;
				colvarScwgsl.IsPrimaryKey = false;
				colvarScwgsl.IsForeignKey = false;
				colvarScwgsl.IsReadOnly = false;
				colvarScwgsl.DefaultSetting = @"";
				colvarScwgsl.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScwgsl);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ErpNowthwin"].AddSchema("SCT301",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Sclldh")]
		[Bindable(true)]
		public string Sclldh 
		{
			get { return GetColumnValue<string>(Columns.Sclldh); }
			set { SetColumnValue(Columns.Sclldh, value); }
		}
		  
		[XmlAttribute("Scllxh")]
		[Bindable(true)]
		public decimal Scllxh 
		{
			get { return GetColumnValue<decimal>(Columns.Scllxh); }
			set { SetColumnValue(Columns.Scllxh, value); }
		}
		  
		[XmlAttribute("Xttxhm")]
		[Bindable(true)]
		public string Xttxhm 
		{
			get { return GetColumnValue<string>(Columns.Xttxhm); }
			set { SetColumnValue(Columns.Xttxhm, value); }
		}
		  
		[XmlAttribute("Schtbh")]
		[Bindable(true)]
		public string Schtbh 
		{
			get { return GetColumnValue<string>(Columns.Schtbh); }
			set { SetColumnValue(Columns.Schtbh, value); }
		}
		  
		[XmlAttribute("Sczsbh")]
		[Bindable(true)]
		public string Sczsbh 
		{
			get { return GetColumnValue<string>(Columns.Sczsbh); }
			set { SetColumnValue(Columns.Sczsbh, value); }
		}
		  
		[XmlAttribute("Sccpdl")]
		[Bindable(true)]
		public string Sccpdl 
		{
			get { return GetColumnValue<string>(Columns.Sccpdl); }
			set { SetColumnValue(Columns.Sccpdl, value); }
		}
		  
		[XmlAttribute("Scwgsl")]
		[Bindable(true)]
		public decimal? Scwgsl 
		{
			get { return GetColumnValue<decimal?>(Columns.Scwgsl); }
			set { SetColumnValue(Columns.Scwgsl, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varSclldh,decimal varScllxh,string varXttxhm,string varSchtbh,string varSczsbh,string varSccpdl,decimal? varScwgsl)
		{
			SCT301 item = new SCT301();
			
			item.Sclldh = varSclldh;
			
			item.Scllxh = varScllxh;
			
			item.Xttxhm = varXttxhm;
			
			item.Schtbh = varSchtbh;
			
			item.Sczsbh = varSczsbh;
			
			item.Sccpdl = varSccpdl;
			
			item.Scwgsl = varScwgsl;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(string varSclldh,decimal varScllxh,string varXttxhm,string varSchtbh,string varSczsbh,string varSccpdl,decimal? varScwgsl)
		{
			SCT301 item = new SCT301();
			
				item.Sclldh = varSclldh;
			
				item.Scllxh = varScllxh;
			
				item.Xttxhm = varXttxhm;
			
				item.Schtbh = varSchtbh;
			
				item.Sczsbh = varSczsbh;
			
				item.Sccpdl = varSccpdl;
			
				item.Scwgsl = varScwgsl;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn SclldhColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn ScllxhColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn XttxhmColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn SchtbhColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn SczsbhColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn SccpdlColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn ScwgslColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Sclldh = @"SCLLDH";
			 public static string Scllxh = @"SCLLXH";
			 public static string Xttxhm = @"XTTXHM";
			 public static string Schtbh = @"SCHTBH";
			 public static string Sczsbh = @"SCZSBH";
			 public static string Sccpdl = @"SCCPDL";
			 public static string Scwgsl = @"SCWGSL";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}

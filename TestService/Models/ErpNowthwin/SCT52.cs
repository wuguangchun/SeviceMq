using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace OracleDataDomain
{
	/// <summary>
	/// Strongly-typed collection for the SCT52 class.
	/// </summary>
    [Serializable]
	public partial class SCT52Collection : ActiveList<SCT52, SCT52Collection>
	{	   
		public SCT52Collection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>SCT52Collection</returns>
		public SCT52Collection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                SCT52 o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the SCT52 table.
	/// </summary>
	[Serializable]
	public partial class SCT52 : ActiveRecord<SCT52>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public SCT52()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public SCT52(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public SCT52(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public SCT52(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("SCT52", TableType.Table, DataService.GetInstance("ErpNowthwin"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"FYERP";
				//columns
				
				TableSchema.TableColumn colvarSckgks = new TableSchema.TableColumn(schema);
				colvarSckgks.ColumnName = "SCKGKS";
				colvarSckgks.DataType = DbType.String;
				colvarSckgks.MaxLength = 50;
				colvarSckgks.AutoIncrement = false;
				colvarSckgks.IsNullable = true;
				colvarSckgks.IsPrimaryKey = false;
				colvarSckgks.IsForeignKey = false;
				colvarSckgks.IsReadOnly = false;
				colvarSckgks.DefaultSetting = @"";
				colvarSckgks.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSckgks);
				
				TableSchema.TableColumn colvarSckgml = new TableSchema.TableColumn(schema);
				colvarSckgml.ColumnName = "SCKGML";
				colvarSckgml.DataType = DbType.String;
				colvarSckgml.MaxLength = 50;
				colvarSckgml.AutoIncrement = false;
				colvarSckgml.IsNullable = true;
				colvarSckgml.IsPrimaryKey = false;
				colvarSckgml.IsForeignKey = false;
				colvarSckgml.IsReadOnly = false;
				colvarSckgml.DefaultSetting = @"";
				colvarSckgml.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSckgml);
				
				TableSchema.TableColumn colvarScwpsl = new TableSchema.TableColumn(schema);
				colvarScwpsl.ColumnName = "SCWPSL";
				colvarScwpsl.DataType = DbType.Decimal;
				colvarScwpsl.MaxLength = 0;
				colvarScwpsl.AutoIncrement = false;
				colvarScwpsl.IsNullable = true;
				colvarScwpsl.IsPrimaryKey = false;
				colvarScwpsl.IsForeignKey = false;
				colvarScwpsl.IsReadOnly = false;
				colvarScwpsl.DefaultSetting = @"";
				colvarScwpsl.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScwpsl);
				
				TableSchema.TableColumn colvarXtwpbm = new TableSchema.TableColumn(schema);
				colvarXtwpbm.ColumnName = "XTWPBM";
				colvarXtwpbm.DataType = DbType.String;
				colvarXtwpbm.MaxLength = 17;
				colvarXtwpbm.AutoIncrement = false;
				colvarXtwpbm.IsNullable = true;
				colvarXtwpbm.IsPrimaryKey = false;
				colvarXtwpbm.IsForeignKey = false;
				colvarXtwpbm.IsReadOnly = false;
				colvarXtwpbm.DefaultSetting = @"";
				colvarXtwpbm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXtwpbm);
				
				TableSchema.TableColumn colvarFzfl = new TableSchema.TableColumn(schema);
				colvarFzfl.ColumnName = "FZFL";
				colvarFzfl.DataType = DbType.String;
				colvarFzfl.MaxLength = 6;
				colvarFzfl.AutoIncrement = false;
				colvarFzfl.IsNullable = true;
				colvarFzfl.IsPrimaryKey = false;
				colvarFzfl.IsForeignKey = false;
				colvarFzfl.IsReadOnly = false;
				colvarFzfl.DefaultSetting = @"";
				colvarFzfl.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFzfl);
				
				TableSchema.TableColumn colvarScggdh = new TableSchema.TableColumn(schema);
				colvarScggdh.ColumnName = "SCGGDH";
				colvarScggdh.DataType = DbType.String;
				colvarScggdh.MaxLength = 12;
				colvarScggdh.AutoIncrement = false;
				colvarScggdh.IsNullable = false;
				colvarScggdh.IsPrimaryKey = true;
				colvarScggdh.IsForeignKey = false;
				colvarScggdh.IsReadOnly = false;
				colvarScggdh.DefaultSetting = @"";
				colvarScggdh.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScggdh);
				
				TableSchema.TableColumn colvarScggxh = new TableSchema.TableColumn(schema);
				colvarScggxh.ColumnName = "SCGGXH";
				colvarScggxh.DataType = DbType.Decimal;
				colvarScggxh.MaxLength = 0;
				colvarScggxh.AutoIncrement = false;
				colvarScggxh.IsNullable = false;
				colvarScggxh.IsPrimaryKey = true;
				colvarScggxh.IsForeignKey = false;
				colvarScggxh.IsReadOnly = false;
				colvarScggxh.DefaultSetting = @"";
				colvarScggxh.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScggxh);
				
				TableSchema.TableColumn colvarSchtbh = new TableSchema.TableColumn(schema);
				colvarSchtbh.ColumnName = "SCHTBH";
				colvarSchtbh.DataType = DbType.String;
				colvarSchtbh.MaxLength = 12;
				colvarSchtbh.AutoIncrement = false;
				colvarSchtbh.IsNullable = true;
				colvarSchtbh.IsPrimaryKey = false;
				colvarSchtbh.IsForeignKey = false;
				colvarSchtbh.IsReadOnly = false;
				colvarSchtbh.DefaultSetting = @"";
				colvarSchtbh.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSchtbh);
				
				TableSchema.TableColumn colvarSchtxh = new TableSchema.TableColumn(schema);
				colvarSchtxh.ColumnName = "SCHTXH";
				colvarSchtxh.DataType = DbType.Decimal;
				colvarSchtxh.MaxLength = 0;
				colvarSchtxh.AutoIncrement = false;
				colvarSchtxh.IsNullable = true;
				colvarSchtxh.IsPrimaryKey = false;
				colvarSchtxh.IsForeignKey = false;
				colvarSchtxh.IsReadOnly = false;
				colvarSchtxh.DefaultSetting = @"";
				colvarSchtxh.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSchtxh);
				
				TableSchema.TableColumn colvarXtwpks = new TableSchema.TableColumn(schema);
				colvarXtwpks.ColumnName = "XTWPKS";
				colvarXtwpks.DataType = DbType.String;
				colvarXtwpks.MaxLength = 20;
				colvarXtwpks.AutoIncrement = false;
				colvarXtwpks.IsNullable = true;
				colvarXtwpks.IsPrimaryKey = false;
				colvarXtwpks.IsForeignKey = false;
				colvarXtwpks.IsReadOnly = false;
				colvarXtwpks.DefaultSetting = @"";
				colvarXtwpks.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXtwpks);
				
				TableSchema.TableColumn colvarXtwpys = new TableSchema.TableColumn(schema);
				colvarXtwpys.ColumnName = "XTWPYS";
				colvarXtwpys.DataType = DbType.String;
				colvarXtwpys.MaxLength = 20;
				colvarXtwpys.AutoIncrement = false;
				colvarXtwpys.IsNullable = true;
				colvarXtwpys.IsPrimaryKey = false;
				colvarXtwpys.IsForeignKey = false;
				colvarXtwpys.IsReadOnly = false;
				colvarXtwpys.DefaultSetting = @"";
				colvarXtwpys.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXtwpys);
				
				TableSchema.TableColumn colvarXtxmdm = new TableSchema.TableColumn(schema);
				colvarXtxmdm.ColumnName = "XTXMDM";
				colvarXtxmdm.DataType = DbType.String;
				colvarXtxmdm.MaxLength = 10;
				colvarXtxmdm.AutoIncrement = false;
				colvarXtxmdm.IsNullable = true;
				colvarXtxmdm.IsPrimaryKey = false;
				colvarXtxmdm.IsForeignKey = false;
				colvarXtxmdm.IsReadOnly = false;
				colvarXtxmdm.DefaultSetting = @"";
				colvarXtxmdm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXtxmdm);
				
				TableSchema.TableColumn colvarSchtsl = new TableSchema.TableColumn(schema);
				colvarSchtsl.ColumnName = "SCHTSL";
				colvarSchtsl.DataType = DbType.Decimal;
				colvarSchtsl.MaxLength = 0;
				colvarSchtsl.AutoIncrement = false;
				colvarSchtsl.IsNullable = true;
				colvarSchtsl.IsPrimaryKey = false;
				colvarSchtsl.IsForeignKey = false;
				colvarSchtsl.IsReadOnly = false;
				colvarSchtsl.DefaultSetting = @"";
				colvarSchtsl.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSchtsl);
				
				TableSchema.TableColumn colvarScjgdj = new TableSchema.TableColumn(schema);
				colvarScjgdj.ColumnName = "SCJGDJ";
				colvarScjgdj.DataType = DbType.Decimal;
				colvarScjgdj.MaxLength = 0;
				colvarScjgdj.AutoIncrement = false;
				colvarScjgdj.IsNullable = true;
				colvarScjgdj.IsPrimaryKey = false;
				colvarScjgdj.IsForeignKey = false;
				colvarScjgdj.IsReadOnly = false;
				colvarScjgdj.DefaultSetting = @"";
				colvarScjgdj.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScjgdj);
				
				TableSchema.TableColumn colvarScjhrq = new TableSchema.TableColumn(schema);
				colvarScjhrq.ColumnName = "SCJHRQ";
				colvarScjhrq.DataType = DbType.DateTime;
				colvarScjhrq.MaxLength = 0;
				colvarScjhrq.AutoIncrement = false;
				colvarScjhrq.IsNullable = true;
				colvarScjhrq.IsPrimaryKey = false;
				colvarScjhrq.IsForeignKey = false;
				colvarScjhrq.IsReadOnly = false;
				colvarScjhrq.DefaultSetting = @"";
				colvarScjhrq.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScjhrq);
				
				TableSchema.TableColumn colvarScjhdd = new TableSchema.TableColumn(schema);
				colvarScjhdd.ColumnName = "SCJHDD";
				colvarScjhdd.DataType = DbType.String;
				colvarScjhdd.MaxLength = 4000;
				colvarScjhdd.AutoIncrement = false;
				colvarScjhdd.IsNullable = true;
				colvarScjhdd.IsPrimaryKey = false;
				colvarScjhdd.IsForeignKey = false;
				colvarScjhdd.IsReadOnly = false;
				colvarScjhdd.DefaultSetting = @"";
				colvarScjhdd.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScjhdd);
				
				TableSchema.TableColumn colvarXtwplj = new TableSchema.TableColumn(schema);
				colvarXtwplj.ColumnName = "XTWPLJ";
				colvarXtwplj.DataType = DbType.String;
				colvarXtwplj.MaxLength = 50;
				colvarXtwplj.AutoIncrement = false;
				colvarXtwplj.IsNullable = true;
				colvarXtwplj.IsPrimaryKey = false;
				colvarXtwplj.IsForeignKey = false;
				colvarXtwplj.IsReadOnly = false;
				colvarXtwplj.DefaultSetting = @"";
				colvarXtwplj.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXtwplj);
				
				TableSchema.TableColumn colvarScczbz = new TableSchema.TableColumn(schema);
				colvarScczbz.ColumnName = "SCCZBZ";
				colvarScczbz.DataType = DbType.String;
				colvarScczbz.MaxLength = 1;
				colvarScczbz.AutoIncrement = false;
				colvarScczbz.IsNullable = true;
				colvarScczbz.IsPrimaryKey = false;
				colvarScczbz.IsForeignKey = false;
				colvarScczbz.IsReadOnly = false;
				colvarScczbz.DefaultSetting = @"";
				colvarScczbz.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScczbz);
				
				TableSchema.TableColumn colvarScggbz = new TableSchema.TableColumn(schema);
				colvarScggbz.ColumnName = "SCGGBZ";
				colvarScggbz.DataType = DbType.String;
				colvarScggbz.MaxLength = 255;
				colvarScggbz.AutoIncrement = false;
				colvarScggbz.IsNullable = true;
				colvarScggbz.IsPrimaryKey = false;
				colvarScggbz.IsForeignKey = false;
				colvarScggbz.IsReadOnly = false;
				colvarScggbz.DefaultSetting = @"";
				colvarScggbz.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScggbz);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ErpNowthwin"].AddSchema("SCT52",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Sckgks")]
		[Bindable(true)]
		public string Sckgks 
		{
			get { return GetColumnValue<string>(Columns.Sckgks); }
			set { SetColumnValue(Columns.Sckgks, value); }
		}
		  
		[XmlAttribute("Sckgml")]
		[Bindable(true)]
		public string Sckgml 
		{
			get { return GetColumnValue<string>(Columns.Sckgml); }
			set { SetColumnValue(Columns.Sckgml, value); }
		}
		  
		[XmlAttribute("Scwpsl")]
		[Bindable(true)]
		public decimal? Scwpsl 
		{
			get { return GetColumnValue<decimal?>(Columns.Scwpsl); }
			set { SetColumnValue(Columns.Scwpsl, value); }
		}
		  
		[XmlAttribute("Xtwpbm")]
		[Bindable(true)]
		public string Xtwpbm 
		{
			get { return GetColumnValue<string>(Columns.Xtwpbm); }
			set { SetColumnValue(Columns.Xtwpbm, value); }
		}
		  
		[XmlAttribute("Fzfl")]
		[Bindable(true)]
		public string Fzfl 
		{
			get { return GetColumnValue<string>(Columns.Fzfl); }
			set { SetColumnValue(Columns.Fzfl, value); }
		}
		  
		[XmlAttribute("Scggdh")]
		[Bindable(true)]
		public string Scggdh 
		{
			get { return GetColumnValue<string>(Columns.Scggdh); }
			set { SetColumnValue(Columns.Scggdh, value); }
		}
		  
		[XmlAttribute("Scggxh")]
		[Bindable(true)]
		public decimal Scggxh 
		{
			get { return GetColumnValue<decimal>(Columns.Scggxh); }
			set { SetColumnValue(Columns.Scggxh, value); }
		}
		  
		[XmlAttribute("Schtbh")]
		[Bindable(true)]
		public string Schtbh 
		{
			get { return GetColumnValue<string>(Columns.Schtbh); }
			set { SetColumnValue(Columns.Schtbh, value); }
		}
		  
		[XmlAttribute("Schtxh")]
		[Bindable(true)]
		public decimal? Schtxh 
		{
			get { return GetColumnValue<decimal?>(Columns.Schtxh); }
			set { SetColumnValue(Columns.Schtxh, value); }
		}
		  
		[XmlAttribute("Xtwpks")]
		[Bindable(true)]
		public string Xtwpks 
		{
			get { return GetColumnValue<string>(Columns.Xtwpks); }
			set { SetColumnValue(Columns.Xtwpks, value); }
		}
		  
		[XmlAttribute("Xtwpys")]
		[Bindable(true)]
		public string Xtwpys 
		{
			get { return GetColumnValue<string>(Columns.Xtwpys); }
			set { SetColumnValue(Columns.Xtwpys, value); }
		}
		  
		[XmlAttribute("Xtxmdm")]
		[Bindable(true)]
		public string Xtxmdm 
		{
			get { return GetColumnValue<string>(Columns.Xtxmdm); }
			set { SetColumnValue(Columns.Xtxmdm, value); }
		}
		  
		[XmlAttribute("Schtsl")]
		[Bindable(true)]
		public decimal? Schtsl 
		{
			get { return GetColumnValue<decimal?>(Columns.Schtsl); }
			set { SetColumnValue(Columns.Schtsl, value); }
		}
		  
		[XmlAttribute("Scjgdj")]
		[Bindable(true)]
		public decimal? Scjgdj 
		{
			get { return GetColumnValue<decimal?>(Columns.Scjgdj); }
			set { SetColumnValue(Columns.Scjgdj, value); }
		}
		  
		[XmlAttribute("Scjhrq")]
		[Bindable(true)]
		public DateTime? Scjhrq 
		{
			get { return GetColumnValue<DateTime?>(Columns.Scjhrq); }
			set { SetColumnValue(Columns.Scjhrq, value); }
		}
		  
		[XmlAttribute("Scjhdd")]
		[Bindable(true)]
		public string Scjhdd 
		{
			get { return GetColumnValue<string>(Columns.Scjhdd); }
			set { SetColumnValue(Columns.Scjhdd, value); }
		}
		  
		[XmlAttribute("Xtwplj")]
		[Bindable(true)]
		public string Xtwplj 
		{
			get { return GetColumnValue<string>(Columns.Xtwplj); }
			set { SetColumnValue(Columns.Xtwplj, value); }
		}
		  
		[XmlAttribute("Scczbz")]
		[Bindable(true)]
		public string Scczbz 
		{
			get { return GetColumnValue<string>(Columns.Scczbz); }
			set { SetColumnValue(Columns.Scczbz, value); }
		}
		  
		[XmlAttribute("Scggbz")]
		[Bindable(true)]
		public string Scggbz 
		{
			get { return GetColumnValue<string>(Columns.Scggbz); }
			set { SetColumnValue(Columns.Scggbz, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varSckgks,string varSckgml,decimal? varScwpsl,string varXtwpbm,string varFzfl,string varScggdh,decimal varScggxh,string varSchtbh,decimal? varSchtxh,string varXtwpks,string varXtwpys,string varXtxmdm,decimal? varSchtsl,decimal? varScjgdj,DateTime? varScjhrq,string varScjhdd,string varXtwplj,string varScczbz,string varScggbz)
		{
			SCT52 item = new SCT52();
			
			item.Sckgks = varSckgks;
			
			item.Sckgml = varSckgml;
			
			item.Scwpsl = varScwpsl;
			
			item.Xtwpbm = varXtwpbm;
			
			item.Fzfl = varFzfl;
			
			item.Scggdh = varScggdh;
			
			item.Scggxh = varScggxh;
			
			item.Schtbh = varSchtbh;
			
			item.Schtxh = varSchtxh;
			
			item.Xtwpks = varXtwpks;
			
			item.Xtwpys = varXtwpys;
			
			item.Xtxmdm = varXtxmdm;
			
			item.Schtsl = varSchtsl;
			
			item.Scjgdj = varScjgdj;
			
			item.Scjhrq = varScjhrq;
			
			item.Scjhdd = varScjhdd;
			
			item.Xtwplj = varXtwplj;
			
			item.Scczbz = varScczbz;
			
			item.Scggbz = varScggbz;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(string varSckgks,string varSckgml,decimal? varScwpsl,string varXtwpbm,string varFzfl,string varScggdh,decimal varScggxh,string varSchtbh,decimal? varSchtxh,string varXtwpks,string varXtwpys,string varXtxmdm,decimal? varSchtsl,decimal? varScjgdj,DateTime? varScjhrq,string varScjhdd,string varXtwplj,string varScczbz,string varScggbz)
		{
			SCT52 item = new SCT52();
			
				item.Sckgks = varSckgks;
			
				item.Sckgml = varSckgml;
			
				item.Scwpsl = varScwpsl;
			
				item.Xtwpbm = varXtwpbm;
			
				item.Fzfl = varFzfl;
			
				item.Scggdh = varScggdh;
			
				item.Scggxh = varScggxh;
			
				item.Schtbh = varSchtbh;
			
				item.Schtxh = varSchtxh;
			
				item.Xtwpks = varXtwpks;
			
				item.Xtwpys = varXtwpys;
			
				item.Xtxmdm = varXtxmdm;
			
				item.Schtsl = varSchtsl;
			
				item.Scjgdj = varScjgdj;
			
				item.Scjhrq = varScjhrq;
			
				item.Scjhdd = varScjhdd;
			
				item.Xtwplj = varXtwplj;
			
				item.Scczbz = varScczbz;
			
				item.Scggbz = varScggbz;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn SckgksColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn SckgmlColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn ScwpslColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn XtwpbmColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn FzflColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn ScggdhColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn ScggxhColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn SchtbhColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn SchtxhColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn XtwpksColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn XtwpysColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn XtxmdmColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn SchtslColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        public static TableSchema.TableColumn ScjgdjColumn
        {
            get { return Schema.Columns[13]; }
        }
        
        
        
        public static TableSchema.TableColumn ScjhrqColumn
        {
            get { return Schema.Columns[14]; }
        }
        
        
        
        public static TableSchema.TableColumn ScjhddColumn
        {
            get { return Schema.Columns[15]; }
        }
        
        
        
        public static TableSchema.TableColumn XtwpljColumn
        {
            get { return Schema.Columns[16]; }
        }
        
        
        
        public static TableSchema.TableColumn ScczbzColumn
        {
            get { return Schema.Columns[17]; }
        }
        
        
        
        public static TableSchema.TableColumn ScggbzColumn
        {
            get { return Schema.Columns[18]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Sckgks = @"SCKGKS";
			 public static string Sckgml = @"SCKGML";
			 public static string Scwpsl = @"SCWPSL";
			 public static string Xtwpbm = @"XTWPBM";
			 public static string Fzfl = @"FZFL";
			 public static string Scggdh = @"SCGGDH";
			 public static string Scggxh = @"SCGGXH";
			 public static string Schtbh = @"SCHTBH";
			 public static string Schtxh = @"SCHTXH";
			 public static string Xtwpks = @"XTWPKS";
			 public static string Xtwpys = @"XTWPYS";
			 public static string Xtxmdm = @"XTXMDM";
			 public static string Schtsl = @"SCHTSL";
			 public static string Scjgdj = @"SCJGDJ";
			 public static string Scjhrq = @"SCJHRQ";
			 public static string Scjhdd = @"SCJHDD";
			 public static string Xtwplj = @"XTWPLJ";
			 public static string Scczbz = @"SCCZBZ";
			 public static string Scggbz = @"SCGGBZ";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}

using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace OracleDataDomain{
    /// <summary>
    /// Strongly-typed collection for the VMesOrder class.
    /// </summary>
    [Serializable]
    public partial class VMesOrderCollection : ReadOnlyList<VMesOrder, VMesOrderCollection>
    {        
        public VMesOrderCollection() {}
    }
    /// <summary>
    /// This is  Read-only wrapper class for the V_MES_ORDER view.
    /// </summary>
    [Serializable]
    public partial class VMesOrder : ReadOnlyRecord<VMesOrder>, IReadOnlyRecord
    {
    
	    #region Default Settings
	    protected static void SetSQLProps() 
	    {
		    GetTableSchema();
	    }
	    #endregion
        #region Schema Accessor
	    public static TableSchema.Table Schema
        {
            get
            {
                if (BaseSchema == null)
                {
                    SetSQLProps();
                }
                return BaseSchema;
            }
        }
    	
        private static void GetTableSchema() 
        {
            if(!IsSchemaInitialized)
            {
                //Schema declaration
                TableSchema.Table schema = new TableSchema.Table("V_MES_ORDER", TableType.View, DataService.GetInstance("ErpNowthwin"));
                schema.Columns = new TableSchema.TableColumnCollection();
                schema.SchemaName = @"FYERP";
                //columns
                
                TableSchema.TableColumn colvarStyleno = new TableSchema.TableColumn(schema);
                colvarStyleno.ColumnName = "STYLENO";
                colvarStyleno.DataType = DbType.String;
                colvarStyleno.MaxLength = 20;
                colvarStyleno.AutoIncrement = false;
                colvarStyleno.IsNullable = false;
                colvarStyleno.IsPrimaryKey = false;
                colvarStyleno.IsForeignKey = false;
                colvarStyleno.IsReadOnly = false;
                
                schema.Columns.Add(colvarStyleno);
                
                TableSchema.TableColumn colvarSyscode = new TableSchema.TableColumn(schema);
                colvarSyscode.ColumnName = "SYSCODE";
                colvarSyscode.DataType = DbType.String;
                colvarSyscode.MaxLength = 12;
                colvarSyscode.AutoIncrement = false;
                colvarSyscode.IsNullable = false;
                colvarSyscode.IsPrimaryKey = false;
                colvarSyscode.IsForeignKey = false;
                colvarSyscode.IsReadOnly = false;
                
                schema.Columns.Add(colvarSyscode);
                
                TableSchema.TableColumn colvarPropertyvalue = new TableSchema.TableColumn(schema);
                colvarPropertyvalue.ColumnName = "PROPERTYVALUE";
                colvarPropertyvalue.DataType = DbType.String;
                colvarPropertyvalue.MaxLength = 24;
                colvarPropertyvalue.AutoIncrement = false;
                colvarPropertyvalue.IsNullable = true;
                colvarPropertyvalue.IsPrimaryKey = false;
                colvarPropertyvalue.IsForeignKey = false;
                colvarPropertyvalue.IsReadOnly = false;
                
                schema.Columns.Add(colvarPropertyvalue);
                
                TableSchema.TableColumn colvarPropertyX = new TableSchema.TableColumn(schema);
                colvarPropertyX.ColumnName = "PROPERTY";
                colvarPropertyX.DataType = DbType.String;
                colvarPropertyX.MaxLength = 20;
                colvarPropertyX.AutoIncrement = false;
                colvarPropertyX.IsNullable = true;
                colvarPropertyX.IsPrimaryKey = false;
                colvarPropertyX.IsForeignKey = false;
                colvarPropertyX.IsReadOnly = false;
                
                schema.Columns.Add(colvarPropertyX);
                
                
                BaseSchema = schema;
                //add this schema to the provider
                //so we can query it later
                DataService.Providers["ErpNowthwin"].AddSchema("V_MES_ORDER",schema);
            }
        }
        #endregion
        
        #region Query Accessor
	    public static Query CreateQuery()
	    {
		    return new Query(Schema);
	    }
	    #endregion
	    
	    #region .ctors
	    public VMesOrder()
	    {
            SetSQLProps();
            SetDefaults();
            MarkNew();
        }
        public VMesOrder(bool useDatabaseDefaults)
	    {
		    SetSQLProps();
		    if(useDatabaseDefaults)
		    {
				ForceDefaults();
			}
			MarkNew();
	    }
	    
	    public VMesOrder(object keyID)
	    {
		    SetSQLProps();
		    LoadByKey(keyID);
	    }
    	 
	    public VMesOrder(string columnName, object columnValue)
        {
            SetSQLProps();
            LoadByParam(columnName,columnValue);
        }
        
	    #endregion
	    
	    #region Props
	    
          
        [XmlAttribute("Styleno")]
        [Bindable(true)]
        public string Styleno 
	    {
		    get
		    {
			    return GetColumnValue<string>("STYLENO");
		    }
            set 
		    {
			    SetColumnValue("STYLENO", value);
            }
        }
	      
        [XmlAttribute("Syscode")]
        [Bindable(true)]
        public string Syscode 
	    {
		    get
		    {
			    return GetColumnValue<string>("SYSCODE");
		    }
            set 
		    {
			    SetColumnValue("SYSCODE", value);
            }
        }
	      
        [XmlAttribute("Propertyvalue")]
        [Bindable(true)]
        public string Propertyvalue 
	    {
		    get
		    {
			    return GetColumnValue<string>("PROPERTYVALUE");
		    }
            set 
		    {
			    SetColumnValue("PROPERTYVALUE", value);
            }
        }
	      
        [XmlAttribute("PropertyX")]
        [Bindable(true)]
        public string PropertyX 
	    {
		    get
		    {
			    return GetColumnValue<string>("PROPERTY");
		    }
            set 
		    {
			    SetColumnValue("PROPERTY", value);
            }
        }
	    
	    #endregion
    
	    #region Columns Struct
	    public struct Columns
	    {
		    
		    
            public static string Styleno = @"STYLENO";
            
            public static string Syscode = @"SYSCODE";
            
            public static string Propertyvalue = @"PROPERTYVALUE";
            
            public static string PropertyX = @"PROPERTY";
            
	    }
	    #endregion
	    
	    
	    #region IAbstractRecord Members
        public new CT GetColumnValue<CT>(string columnName) {
            return base.GetColumnValue<CT>(columnName);
        }
        public object GetColumnValue(string columnName) {
            return base.GetColumnValue<object>(columnName);
        }
        #endregion
	    
    }
}

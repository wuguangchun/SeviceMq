using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace OracleDataDomain
{
	/// <summary>
	/// Strongly-typed collection for the XTT10 class.
	/// </summary>
    [Serializable]
	public partial class XTT10Collection : ActiveList<XTT10, XTT10Collection>
	{	   
		public XTT10Collection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>XTT10Collection</returns>
		public XTT10Collection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                XTT10 o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the XTT10 table.
	/// </summary>
	[Serializable]
	public partial class XTT10 : ActiveRecord<XTT10>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public XTT10()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public XTT10(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public XTT10(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public XTT10(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("XTT10", TableType.Table, DataService.GetInstance("ErpNowthwin"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"FYERP";
				//columns
				
				TableSchema.TableColumn colvarXtrzxh = new TableSchema.TableColumn(schema);
				colvarXtrzxh.ColumnName = "XTRZXH";
				colvarXtrzxh.DataType = DbType.Decimal;
				colvarXtrzxh.MaxLength = 0;
				colvarXtrzxh.AutoIncrement = false;
				colvarXtrzxh.IsNullable = false;
				colvarXtrzxh.IsPrimaryKey = true;
				colvarXtrzxh.IsForeignKey = false;
				colvarXtrzxh.IsReadOnly = false;
				colvarXtrzxh.DefaultSetting = @"";
				colvarXtrzxh.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXtrzxh);
				
				TableSchema.TableColumn colvarXtjqmc = new TableSchema.TableColumn(schema);
				colvarXtjqmc.ColumnName = "XTJQMC";
				colvarXtjqmc.DataType = DbType.String;
				colvarXtjqmc.MaxLength = 15;
				colvarXtjqmc.AutoIncrement = false;
				colvarXtjqmc.IsNullable = true;
				colvarXtjqmc.IsPrimaryKey = false;
				colvarXtjqmc.IsForeignKey = false;
				colvarXtjqmc.IsReadOnly = false;
				colvarXtjqmc.DefaultSetting = @"";
				colvarXtjqmc.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXtjqmc);
				
				TableSchema.TableColumn colvarXtipdz = new TableSchema.TableColumn(schema);
				colvarXtipdz.ColumnName = "XTIPDZ";
				colvarXtipdz.DataType = DbType.String;
				colvarXtipdz.MaxLength = 15;
				colvarXtipdz.AutoIncrement = false;
				colvarXtipdz.IsNullable = true;
				colvarXtipdz.IsPrimaryKey = false;
				colvarXtipdz.IsForeignKey = false;
				colvarXtipdz.IsReadOnly = false;
				colvarXtipdz.DefaultSetting = @"";
				colvarXtipdz.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXtipdz);
				
				TableSchema.TableColumn colvarXtyhdm = new TableSchema.TableColumn(schema);
				colvarXtyhdm.ColumnName = "XTYHDM";
				colvarXtyhdm.DataType = DbType.String;
				colvarXtyhdm.MaxLength = 8;
				colvarXtyhdm.AutoIncrement = false;
				colvarXtyhdm.IsNullable = true;
				colvarXtyhdm.IsPrimaryKey = false;
				colvarXtyhdm.IsForeignKey = false;
				colvarXtyhdm.IsReadOnly = false;
				colvarXtyhdm.DefaultSetting = @"";
				colvarXtyhdm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXtyhdm);
				
				TableSchema.TableColumn colvarXtxtdm = new TableSchema.TableColumn(schema);
				colvarXtxtdm.ColumnName = "XTXTDM";
				colvarXtxtdm.DataType = DbType.String;
				colvarXtxtdm.MaxLength = 3;
				colvarXtxtdm.AutoIncrement = false;
				colvarXtxtdm.IsNullable = true;
				colvarXtxtdm.IsPrimaryKey = false;
				colvarXtxtdm.IsForeignKey = false;
				colvarXtxtdm.IsReadOnly = false;
				colvarXtxtdm.DefaultSetting = @"";
				colvarXtxtdm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXtxtdm);
				
				TableSchema.TableColumn colvarXtczrq = new TableSchema.TableColumn(schema);
				colvarXtczrq.ColumnName = "XTCZRQ";
				colvarXtczrq.DataType = DbType.DateTime;
				colvarXtczrq.MaxLength = 0;
				colvarXtczrq.AutoIncrement = false;
				colvarXtczrq.IsNullable = true;
				colvarXtczrq.IsPrimaryKey = false;
				colvarXtczrq.IsForeignKey = false;
				colvarXtczrq.IsReadOnly = false;
				colvarXtczrq.DefaultSetting = @"";
				colvarXtczrq.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXtczrq);
				
				TableSchema.TableColumn colvarXtczbz = new TableSchema.TableColumn(schema);
				colvarXtczbz.ColumnName = "XTCZBZ";
				colvarXtczbz.DataType = DbType.String;
				colvarXtczbz.MaxLength = 3;
				colvarXtczbz.AutoIncrement = false;
				colvarXtczbz.IsNullable = true;
				colvarXtczbz.IsPrimaryKey = false;
				colvarXtczbz.IsForeignKey = false;
				colvarXtczbz.IsReadOnly = false;
				colvarXtczbz.DefaultSetting = @"";
				colvarXtczbz.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXtczbz);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ErpNowthwin"].AddSchema("XTT10",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Xtrzxh")]
		[Bindable(true)]
		public decimal Xtrzxh 
		{
			get { return GetColumnValue<decimal>(Columns.Xtrzxh); }
			set { SetColumnValue(Columns.Xtrzxh, value); }
		}
		  
		[XmlAttribute("Xtjqmc")]
		[Bindable(true)]
		public string Xtjqmc 
		{
			get { return GetColumnValue<string>(Columns.Xtjqmc); }
			set { SetColumnValue(Columns.Xtjqmc, value); }
		}
		  
		[XmlAttribute("Xtipdz")]
		[Bindable(true)]
		public string Xtipdz 
		{
			get { return GetColumnValue<string>(Columns.Xtipdz); }
			set { SetColumnValue(Columns.Xtipdz, value); }
		}
		  
		[XmlAttribute("Xtyhdm")]
		[Bindable(true)]
		public string Xtyhdm 
		{
			get { return GetColumnValue<string>(Columns.Xtyhdm); }
			set { SetColumnValue(Columns.Xtyhdm, value); }
		}
		  
		[XmlAttribute("Xtxtdm")]
		[Bindable(true)]
		public string Xtxtdm 
		{
			get { return GetColumnValue<string>(Columns.Xtxtdm); }
			set { SetColumnValue(Columns.Xtxtdm, value); }
		}
		  
		[XmlAttribute("Xtczrq")]
		[Bindable(true)]
		public DateTime? Xtczrq 
		{
			get { return GetColumnValue<DateTime?>(Columns.Xtczrq); }
			set { SetColumnValue(Columns.Xtczrq, value); }
		}
		  
		[XmlAttribute("Xtczbz")]
		[Bindable(true)]
		public string Xtczbz 
		{
			get { return GetColumnValue<string>(Columns.Xtczbz); }
			set { SetColumnValue(Columns.Xtczbz, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(decimal varXtrzxh,string varXtjqmc,string varXtipdz,string varXtyhdm,string varXtxtdm,DateTime? varXtczrq,string varXtczbz)
		{
			XTT10 item = new XTT10();
			
			item.Xtrzxh = varXtrzxh;
			
			item.Xtjqmc = varXtjqmc;
			
			item.Xtipdz = varXtipdz;
			
			item.Xtyhdm = varXtyhdm;
			
			item.Xtxtdm = varXtxtdm;
			
			item.Xtczrq = varXtczrq;
			
			item.Xtczbz = varXtczbz;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(decimal varXtrzxh,string varXtjqmc,string varXtipdz,string varXtyhdm,string varXtxtdm,DateTime? varXtczrq,string varXtczbz)
		{
			XTT10 item = new XTT10();
			
				item.Xtrzxh = varXtrzxh;
			
				item.Xtjqmc = varXtjqmc;
			
				item.Xtipdz = varXtipdz;
			
				item.Xtyhdm = varXtyhdm;
			
				item.Xtxtdm = varXtxtdm;
			
				item.Xtczrq = varXtczrq;
			
				item.Xtczbz = varXtczbz;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn XtrzxhColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn XtjqmcColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn XtipdzColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn XtyhdmColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn XtxtdmColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn XtczrqColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn XtczbzColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Xtrzxh = @"XTRZXH";
			 public static string Xtjqmc = @"XTJQMC";
			 public static string Xtipdz = @"XTIPDZ";
			 public static string Xtyhdm = @"XTYHDM";
			 public static string Xtxtdm = @"XTXTDM";
			 public static string Xtczrq = @"XTCZRQ";
			 public static string Xtczbz = @"XTCZBZ";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}

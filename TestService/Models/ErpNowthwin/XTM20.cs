using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace OracleDataDomain
{
	/// <summary>
	/// Strongly-typed collection for the XTM20 class.
	/// </summary>
    [Serializable]
	public partial class XTM20Collection : ActiveList<XTM20, XTM20Collection>
	{	   
		public XTM20Collection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>XTM20Collection</returns>
		public XTM20Collection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                XTM20 o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the XTM20 table.
	/// </summary>
	[Serializable]
	public partial class XTM20 : ActiveRecord<XTM20>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public XTM20()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public XTM20(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public XTM20(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public XTM20(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("XTM20", TableType.Table, DataService.GetInstance("ErpNowthwin"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"FYERP";
				//columns
				
				TableSchema.TableColumn colvarXtzthm = new TableSchema.TableColumn(schema);
				colvarXtzthm.ColumnName = "XTZTHM";
				colvarXtzthm.DataType = DbType.String;
				colvarXtzthm.MaxLength = 4;
				colvarXtzthm.AutoIncrement = false;
				colvarXtzthm.IsNullable = false;
				colvarXtzthm.IsPrimaryKey = true;
				colvarXtzthm.IsForeignKey = false;
				colvarXtzthm.IsReadOnly = false;
				colvarXtzthm.DefaultSetting = @"";
				colvarXtzthm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXtzthm);
				
				TableSchema.TableColumn colvarXtztmc = new TableSchema.TableColumn(schema);
				colvarXtztmc.ColumnName = "XTZTMC";
				colvarXtztmc.DataType = DbType.String;
				colvarXtztmc.MaxLength = 30;
				colvarXtztmc.AutoIncrement = false;
				colvarXtztmc.IsNullable = false;
				colvarXtztmc.IsPrimaryKey = false;
				colvarXtztmc.IsForeignKey = false;
				colvarXtztmc.IsReadOnly = false;
				colvarXtztmc.DefaultSetting = @"";
				colvarXtztmc.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXtztmc);
				
				TableSchema.TableColumn colvarXtkhyh = new TableSchema.TableColumn(schema);
				colvarXtkhyh.ColumnName = "XTKHYH";
				colvarXtkhyh.DataType = DbType.String;
				colvarXtkhyh.MaxLength = 100;
				colvarXtkhyh.AutoIncrement = false;
				colvarXtkhyh.IsNullable = true;
				colvarXtkhyh.IsPrimaryKey = false;
				colvarXtkhyh.IsForeignKey = false;
				colvarXtkhyh.IsReadOnly = false;
				colvarXtkhyh.DefaultSetting = @"";
				colvarXtkhyh.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXtkhyh);
				
				TableSchema.TableColumn colvarXtkhzh = new TableSchema.TableColumn(schema);
				colvarXtkhzh.ColumnName = "XTKHZH";
				colvarXtkhzh.DataType = DbType.String;
				colvarXtkhzh.MaxLength = 60;
				colvarXtkhzh.AutoIncrement = false;
				colvarXtkhzh.IsNullable = true;
				colvarXtkhzh.IsPrimaryKey = false;
				colvarXtkhzh.IsForeignKey = false;
				colvarXtkhzh.IsReadOnly = false;
				colvarXtkhzh.DefaultSetting = @"";
				colvarXtkhzh.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXtkhzh);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ErpNowthwin"].AddSchema("XTM20",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Xtzthm")]
		[Bindable(true)]
		public string Xtzthm 
		{
			get { return GetColumnValue<string>(Columns.Xtzthm); }
			set { SetColumnValue(Columns.Xtzthm, value); }
		}
		  
		[XmlAttribute("Xtztmc")]
		[Bindable(true)]
		public string Xtztmc 
		{
			get { return GetColumnValue<string>(Columns.Xtztmc); }
			set { SetColumnValue(Columns.Xtztmc, value); }
		}
		  
		[XmlAttribute("Xtkhyh")]
		[Bindable(true)]
		public string Xtkhyh 
		{
			get { return GetColumnValue<string>(Columns.Xtkhyh); }
			set { SetColumnValue(Columns.Xtkhyh, value); }
		}
		  
		[XmlAttribute("Xtkhzh")]
		[Bindable(true)]
		public string Xtkhzh 
		{
			get { return GetColumnValue<string>(Columns.Xtkhzh); }
			set { SetColumnValue(Columns.Xtkhzh, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varXtzthm,string varXtztmc,string varXtkhyh,string varXtkhzh)
		{
			XTM20 item = new XTM20();
			
			item.Xtzthm = varXtzthm;
			
			item.Xtztmc = varXtztmc;
			
			item.Xtkhyh = varXtkhyh;
			
			item.Xtkhzh = varXtkhzh;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(string varXtzthm,string varXtztmc,string varXtkhyh,string varXtkhzh)
		{
			XTM20 item = new XTM20();
			
				item.Xtzthm = varXtzthm;
			
				item.Xtztmc = varXtztmc;
			
				item.Xtkhyh = varXtkhyh;
			
				item.Xtkhzh = varXtkhzh;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn XtzthmColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn XtztmcColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn XtkhyhColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn XtkhzhColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Xtzthm = @"XTZTHM";
			 public static string Xtztmc = @"XTZTMC";
			 public static string Xtkhyh = @"XTKHYH";
			 public static string Xtkhzh = @"XTKHZH";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}

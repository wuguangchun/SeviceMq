using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace OracleDataDomain
{
	/// <summary>
	/// Strongly-typed collection for the XTM00 class.
	/// </summary>
    [Serializable]
	public partial class XTM00Collection : ActiveList<XTM00, XTM00Collection>
	{	   
		public XTM00Collection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>XTM00Collection</returns>
		public XTM00Collection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                XTM00 o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the XTM00 table.
	/// </summary>
	[Serializable]
	public partial class XTM00 : ActiveRecord<XTM00>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public XTM00()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public XTM00(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public XTM00(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public XTM00(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("XTM00", TableType.Table, DataService.GetInstance("ErpNowthwin"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"FYERP";
				//columns
				
				TableSchema.TableColumn colvarXtjqhm = new TableSchema.TableColumn(schema);
				colvarXtjqhm.ColumnName = "XTJQHM";
				colvarXtjqhm.DataType = DbType.String;
				colvarXtjqhm.MaxLength = 10;
				colvarXtjqhm.AutoIncrement = false;
				colvarXtjqhm.IsNullable = false;
				colvarXtjqhm.IsPrimaryKey = true;
				colvarXtjqhm.IsForeignKey = false;
				colvarXtjqhm.IsReadOnly = false;
				colvarXtjqhm.DefaultSetting = @"";
				colvarXtjqhm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXtjqhm);
				
				TableSchema.TableColumn colvarXtjqsm = new TableSchema.TableColumn(schema);
				colvarXtjqsm.ColumnName = "XTJQSM";
				colvarXtjqsm.DataType = DbType.String;
				colvarXtjqsm.MaxLength = 60;
				colvarXtjqsm.AutoIncrement = false;
				colvarXtjqsm.IsNullable = false;
				colvarXtjqsm.IsPrimaryKey = false;
				colvarXtjqsm.IsForeignKey = false;
				colvarXtjqsm.IsReadOnly = false;
				colvarXtjqsm.DefaultSetting = @"";
				colvarXtjqsm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXtjqsm);
				
				TableSchema.TableColumn colvarXtqshm = new TableSchema.TableColumn(schema);
				colvarXtqshm.ColumnName = "XTQSHM";
				colvarXtqshm.DataType = DbType.Decimal;
				colvarXtqshm.MaxLength = 0;
				colvarXtqshm.AutoIncrement = false;
				colvarXtqshm.IsNullable = true;
				colvarXtqshm.IsPrimaryKey = false;
				colvarXtqshm.IsForeignKey = false;
				colvarXtqshm.IsReadOnly = false;
				colvarXtqshm.DefaultSetting = @"";
				colvarXtqshm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXtqshm);
				
				TableSchema.TableColumn colvarXtzzhm = new TableSchema.TableColumn(schema);
				colvarXtzzhm.ColumnName = "XTZZHM";
				colvarXtzzhm.DataType = DbType.Decimal;
				colvarXtzzhm.MaxLength = 0;
				colvarXtzzhm.AutoIncrement = false;
				colvarXtzzhm.IsNullable = true;
				colvarXtzzhm.IsPrimaryKey = false;
				colvarXtzzhm.IsForeignKey = false;
				colvarXtzzhm.IsReadOnly = false;
				colvarXtzzhm.DefaultSetting = @"";
				colvarXtzzhm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXtzzhm);
				
				TableSchema.TableColumn colvarXtbjbz = new TableSchema.TableColumn(schema);
				colvarXtbjbz.ColumnName = "XTBJBZ";
				colvarXtbjbz.DataType = DbType.String;
				colvarXtbjbz.MaxLength = 1;
				colvarXtbjbz.AutoIncrement = false;
				colvarXtbjbz.IsNullable = true;
				colvarXtbjbz.IsPrimaryKey = false;
				colvarXtbjbz.IsForeignKey = false;
				colvarXtbjbz.IsReadOnly = false;
				colvarXtbjbz.DefaultSetting = @"";
				colvarXtbjbz.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXtbjbz);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ErpNowthwin"].AddSchema("XTM00",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Xtjqhm")]
		[Bindable(true)]
		public string Xtjqhm 
		{
			get { return GetColumnValue<string>(Columns.Xtjqhm); }
			set { SetColumnValue(Columns.Xtjqhm, value); }
		}
		  
		[XmlAttribute("Xtjqsm")]
		[Bindable(true)]
		public string Xtjqsm 
		{
			get { return GetColumnValue<string>(Columns.Xtjqsm); }
			set { SetColumnValue(Columns.Xtjqsm, value); }
		}
		  
		[XmlAttribute("Xtqshm")]
		[Bindable(true)]
		public decimal? Xtqshm 
		{
			get { return GetColumnValue<decimal?>(Columns.Xtqshm); }
			set { SetColumnValue(Columns.Xtqshm, value); }
		}
		  
		[XmlAttribute("Xtzzhm")]
		[Bindable(true)]
		public decimal? Xtzzhm 
		{
			get { return GetColumnValue<decimal?>(Columns.Xtzzhm); }
			set { SetColumnValue(Columns.Xtzzhm, value); }
		}
		  
		[XmlAttribute("Xtbjbz")]
		[Bindable(true)]
		public string Xtbjbz 
		{
			get { return GetColumnValue<string>(Columns.Xtbjbz); }
			set { SetColumnValue(Columns.Xtbjbz, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varXtjqhm,string varXtjqsm,decimal? varXtqshm,decimal? varXtzzhm,string varXtbjbz)
		{
			XTM00 item = new XTM00();
			
			item.Xtjqhm = varXtjqhm;
			
			item.Xtjqsm = varXtjqsm;
			
			item.Xtqshm = varXtqshm;
			
			item.Xtzzhm = varXtzzhm;
			
			item.Xtbjbz = varXtbjbz;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(string varXtjqhm,string varXtjqsm,decimal? varXtqshm,decimal? varXtzzhm,string varXtbjbz)
		{
			XTM00 item = new XTM00();
			
				item.Xtjqhm = varXtjqhm;
			
				item.Xtjqsm = varXtjqsm;
			
				item.Xtqshm = varXtqshm;
			
				item.Xtzzhm = varXtzzhm;
			
				item.Xtbjbz = varXtbjbz;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn XtjqhmColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn XtjqsmColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn XtqshmColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn XtzzhmColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn XtbjbzColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Xtjqhm = @"XTJQHM";
			 public static string Xtjqsm = @"XTJQSM";
			 public static string Xtqshm = @"XTQSHM";
			 public static string Xtzzhm = @"XTZZHM";
			 public static string Xtbjbz = @"XTBJBZ";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}

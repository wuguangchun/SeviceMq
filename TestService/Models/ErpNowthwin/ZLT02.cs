using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace OracleDataDomain
{
	/// <summary>
	/// Strongly-typed collection for the ZLT02 class.
	/// </summary>
    [Serializable]
	public partial class ZLT02Collection : ActiveList<ZLT02, ZLT02Collection>
	{	   
		public ZLT02Collection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>ZLT02Collection</returns>
		public ZLT02Collection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                ZLT02 o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the ZLT02 table.
	/// </summary>
	[Serializable]
	public partial class ZLT02 : ActiveRecord<ZLT02>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public ZLT02()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public ZLT02(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public ZLT02(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public ZLT02(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("ZLT02", TableType.Table, DataService.GetInstance("ErpNowthwin"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"FYERP";
				//columns
				
				TableSchema.TableColumn colvarZljybh = new TableSchema.TableColumn(schema);
				colvarZljybh.ColumnName = "ZLJYBH";
				colvarZljybh.DataType = DbType.String;
				colvarZljybh.MaxLength = 12;
				colvarZljybh.AutoIncrement = false;
				colvarZljybh.IsNullable = false;
				colvarZljybh.IsPrimaryKey = true;
				colvarZljybh.IsForeignKey = false;
				colvarZljybh.IsReadOnly = false;
				colvarZljybh.DefaultSetting = @"";
				colvarZljybh.ForeignKeyTableName = "";
				schema.Columns.Add(colvarZljybh);
				
				TableSchema.TableColumn colvarZljyhh = new TableSchema.TableColumn(schema);
				colvarZljyhh.ColumnName = "ZLJYHH";
				colvarZljyhh.DataType = DbType.Decimal;
				colvarZljyhh.MaxLength = 0;
				colvarZljyhh.AutoIncrement = false;
				colvarZljyhh.IsNullable = false;
				colvarZljyhh.IsPrimaryKey = true;
				colvarZljyhh.IsForeignKey = false;
				colvarZljyhh.IsReadOnly = false;
				colvarZljyhh.DefaultSetting = @"";
				colvarZljyhh.ForeignKeyTableName = "";
				schema.Columns.Add(colvarZljyhh);
				
				TableSchema.TableColumn colvarSczsbh = new TableSchema.TableColumn(schema);
				colvarSczsbh.ColumnName = "SCZSBH";
				colvarSczsbh.DataType = DbType.String;
				colvarSczsbh.MaxLength = 12;
				colvarSczsbh.AutoIncrement = false;
				colvarSczsbh.IsNullable = true;
				colvarSczsbh.IsPrimaryKey = false;
				colvarSczsbh.IsForeignKey = false;
				colvarSczsbh.IsReadOnly = false;
				colvarSczsbh.DefaultSetting = @"";
				colvarSczsbh.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSczsbh);
				
				TableSchema.TableColumn colvarXtwpks = new TableSchema.TableColumn(schema);
				colvarXtwpks.ColumnName = "XTWPKS";
				colvarXtwpks.DataType = DbType.String;
				colvarXtwpks.MaxLength = 20;
				colvarXtwpks.AutoIncrement = false;
				colvarXtwpks.IsNullable = true;
				colvarXtwpks.IsPrimaryKey = false;
				colvarXtwpks.IsForeignKey = false;
				colvarXtwpks.IsReadOnly = false;
				colvarXtwpks.DefaultSetting = @"";
				colvarXtwpks.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXtwpks);
				
				TableSchema.TableColumn colvarXtwpys = new TableSchema.TableColumn(schema);
				colvarXtwpys.ColumnName = "XTWPYS";
				colvarXtwpys.DataType = DbType.String;
				colvarXtwpys.MaxLength = 20;
				colvarXtwpys.AutoIncrement = false;
				colvarXtwpys.IsNullable = true;
				colvarXtwpys.IsPrimaryKey = false;
				colvarXtwpys.IsForeignKey = false;
				colvarXtwpys.IsReadOnly = false;
				colvarXtwpys.DefaultSetting = @"";
				colvarXtwpys.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXtwpys);
				
				TableSchema.TableColumn colvarZljysl = new TableSchema.TableColumn(schema);
				colvarZljysl.ColumnName = "ZLJYSL";
				colvarZljysl.DataType = DbType.Decimal;
				colvarZljysl.MaxLength = 0;
				colvarZljysl.AutoIncrement = false;
				colvarZljysl.IsNullable = true;
				colvarZljysl.IsPrimaryKey = false;
				colvarZljysl.IsForeignKey = false;
				colvarZljysl.IsReadOnly = false;
				colvarZljysl.DefaultSetting = @"";
				colvarZljysl.ForeignKeyTableName = "";
				schema.Columns.Add(colvarZljysl);
				
				TableSchema.TableColumn colvarZlcjsl = new TableSchema.TableColumn(schema);
				colvarZlcjsl.ColumnName = "ZLCJSL";
				colvarZlcjsl.DataType = DbType.Decimal;
				colvarZlcjsl.MaxLength = 0;
				colvarZlcjsl.AutoIncrement = false;
				colvarZlcjsl.IsNullable = true;
				colvarZlcjsl.IsPrimaryKey = false;
				colvarZlcjsl.IsForeignKey = false;
				colvarZlcjsl.IsReadOnly = false;
				colvarZlcjsl.DefaultSetting = @"";
				colvarZlcjsl.ForeignKeyTableName = "";
				schema.Columns.Add(colvarZlcjsl);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ErpNowthwin"].AddSchema("ZLT02",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Zljybh")]
		[Bindable(true)]
		public string Zljybh 
		{
			get { return GetColumnValue<string>(Columns.Zljybh); }
			set { SetColumnValue(Columns.Zljybh, value); }
		}
		  
		[XmlAttribute("Zljyhh")]
		[Bindable(true)]
		public decimal Zljyhh 
		{
			get { return GetColumnValue<decimal>(Columns.Zljyhh); }
			set { SetColumnValue(Columns.Zljyhh, value); }
		}
		  
		[XmlAttribute("Sczsbh")]
		[Bindable(true)]
		public string Sczsbh 
		{
			get { return GetColumnValue<string>(Columns.Sczsbh); }
			set { SetColumnValue(Columns.Sczsbh, value); }
		}
		  
		[XmlAttribute("Xtwpks")]
		[Bindable(true)]
		public string Xtwpks 
		{
			get { return GetColumnValue<string>(Columns.Xtwpks); }
			set { SetColumnValue(Columns.Xtwpks, value); }
		}
		  
		[XmlAttribute("Xtwpys")]
		[Bindable(true)]
		public string Xtwpys 
		{
			get { return GetColumnValue<string>(Columns.Xtwpys); }
			set { SetColumnValue(Columns.Xtwpys, value); }
		}
		  
		[XmlAttribute("Zljysl")]
		[Bindable(true)]
		public decimal? Zljysl 
		{
			get { return GetColumnValue<decimal?>(Columns.Zljysl); }
			set { SetColumnValue(Columns.Zljysl, value); }
		}
		  
		[XmlAttribute("Zlcjsl")]
		[Bindable(true)]
		public decimal? Zlcjsl 
		{
			get { return GetColumnValue<decimal?>(Columns.Zlcjsl); }
			set { SetColumnValue(Columns.Zlcjsl, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varZljybh,decimal varZljyhh,string varSczsbh,string varXtwpks,string varXtwpys,decimal? varZljysl,decimal? varZlcjsl)
		{
			ZLT02 item = new ZLT02();
			
			item.Zljybh = varZljybh;
			
			item.Zljyhh = varZljyhh;
			
			item.Sczsbh = varSczsbh;
			
			item.Xtwpks = varXtwpks;
			
			item.Xtwpys = varXtwpys;
			
			item.Zljysl = varZljysl;
			
			item.Zlcjsl = varZlcjsl;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(string varZljybh,decimal varZljyhh,string varSczsbh,string varXtwpks,string varXtwpys,decimal? varZljysl,decimal? varZlcjsl)
		{
			ZLT02 item = new ZLT02();
			
				item.Zljybh = varZljybh;
			
				item.Zljyhh = varZljyhh;
			
				item.Sczsbh = varSczsbh;
			
				item.Xtwpks = varXtwpks;
			
				item.Xtwpys = varXtwpys;
			
				item.Zljysl = varZljysl;
			
				item.Zlcjsl = varZlcjsl;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn ZljybhColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn ZljyhhColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn SczsbhColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn XtwpksColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn XtwpysColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn ZljyslColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn ZlcjslColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Zljybh = @"ZLJYBH";
			 public static string Zljyhh = @"ZLJYHH";
			 public static string Sczsbh = @"SCZSBH";
			 public static string Xtwpks = @"XTWPKS";
			 public static string Xtwpys = @"XTWPYS";
			 public static string Zljysl = @"ZLJYSL";
			 public static string Zlcjsl = @"ZLCJSL";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}

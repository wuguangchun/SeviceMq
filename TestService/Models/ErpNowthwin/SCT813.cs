using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace OracleDataDomain
{
	/// <summary>
	/// Strongly-typed collection for the SCT813 class.
	/// </summary>
    [Serializable]
	public partial class SCT813Collection : ActiveList<SCT813, SCT813Collection>
	{	   
		public SCT813Collection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>SCT813Collection</returns>
		public SCT813Collection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                SCT813 o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the SCT813 table.
	/// </summary>
	[Serializable]
	public partial class SCT813 : ActiveRecord<SCT813>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public SCT813()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public SCT813(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public SCT813(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public SCT813(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("SCT813", TableType.Table, DataService.GetInstance("ErpNowthwin"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"FYERP";
				//columns
				
				TableSchema.TableColumn colvarScsfbh = new TableSchema.TableColumn(schema);
				colvarScsfbh.ColumnName = "SCSFBH";
				colvarScsfbh.DataType = DbType.String;
				colvarScsfbh.MaxLength = 12;
				colvarScsfbh.AutoIncrement = false;
				colvarScsfbh.IsNullable = false;
				colvarScsfbh.IsPrimaryKey = true;
				colvarScsfbh.IsForeignKey = false;
				colvarScsfbh.IsReadOnly = false;
				colvarScsfbh.DefaultSetting = @"";
				colvarScsfbh.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScsfbh);
				
				TableSchema.TableColumn colvarScsfxh = new TableSchema.TableColumn(schema);
				colvarScsfxh.ColumnName = "SCSFXH";
				colvarScsfxh.DataType = DbType.Decimal;
				colvarScsfxh.MaxLength = 0;
				colvarScsfxh.AutoIncrement = false;
				colvarScsfxh.IsNullable = false;
				colvarScsfxh.IsPrimaryKey = true;
				colvarScsfxh.IsForeignKey = false;
				colvarScsfxh.IsReadOnly = false;
				colvarScsfxh.DefaultSetting = @"";
				colvarScsfxh.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScsfxh);
				
				TableSchema.TableColumn colvarSczsbh = new TableSchema.TableColumn(schema);
				colvarSczsbh.ColumnName = "SCZSBH";
				colvarSczsbh.DataType = DbType.String;
				colvarSczsbh.MaxLength = 12;
				colvarSczsbh.AutoIncrement = false;
				colvarSczsbh.IsNullable = true;
				colvarSczsbh.IsPrimaryKey = false;
				colvarSczsbh.IsForeignKey = false;
				colvarSczsbh.IsReadOnly = false;
				colvarSczsbh.DefaultSetting = @"";
				colvarSczsbh.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSczsbh);
				
				TableSchema.TableColumn colvarSchtbh = new TableSchema.TableColumn(schema);
				colvarSchtbh.ColumnName = "SCHTBH";
				colvarSchtbh.DataType = DbType.String;
				colvarSchtbh.MaxLength = 12;
				colvarSchtbh.AutoIncrement = false;
				colvarSchtbh.IsNullable = true;
				colvarSchtbh.IsPrimaryKey = false;
				colvarSchtbh.IsForeignKey = false;
				colvarSchtbh.IsReadOnly = false;
				colvarSchtbh.DefaultSetting = @"";
				colvarSchtbh.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSchtbh);
				
				TableSchema.TableColumn colvarSchtxh = new TableSchema.TableColumn(schema);
				colvarSchtxh.ColumnName = "SCHTXH";
				colvarSchtxh.DataType = DbType.Decimal;
				colvarSchtxh.MaxLength = 0;
				colvarSchtxh.AutoIncrement = false;
				colvarSchtxh.IsNullable = true;
				colvarSchtxh.IsPrimaryKey = false;
				colvarSchtxh.IsForeignKey = false;
				colvarSchtxh.IsReadOnly = false;
				colvarSchtxh.DefaultSetting = @"";
				colvarSchtxh.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSchtxh);
				
				TableSchema.TableColumn colvarScggdh = new TableSchema.TableColumn(schema);
				colvarScggdh.ColumnName = "SCGGDH";
				colvarScggdh.DataType = DbType.String;
				colvarScggdh.MaxLength = 12;
				colvarScggdh.AutoIncrement = false;
				colvarScggdh.IsNullable = true;
				colvarScggdh.IsPrimaryKey = false;
				colvarScggdh.IsForeignKey = false;
				colvarScggdh.IsReadOnly = false;
				colvarScggdh.DefaultSetting = @"";
				colvarScggdh.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScggdh);
				
				TableSchema.TableColumn colvarScggxh = new TableSchema.TableColumn(schema);
				colvarScggxh.ColumnName = "SCGGXH";
				colvarScggxh.DataType = DbType.Decimal;
				colvarScggxh.MaxLength = 0;
				colvarScggxh.AutoIncrement = false;
				colvarScggxh.IsNullable = true;
				colvarScggxh.IsPrimaryKey = false;
				colvarScggxh.IsForeignKey = false;
				colvarScggxh.IsReadOnly = false;
				colvarScggxh.DefaultSetting = @"";
				colvarScggxh.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScggxh);
				
				TableSchema.TableColumn colvarXtwpks = new TableSchema.TableColumn(schema);
				colvarXtwpks.ColumnName = "XTWPKS";
				colvarXtwpks.DataType = DbType.String;
				colvarXtwpks.MaxLength = 20;
				colvarXtwpks.AutoIncrement = false;
				colvarXtwpks.IsNullable = true;
				colvarXtwpks.IsPrimaryKey = false;
				colvarXtwpks.IsForeignKey = false;
				colvarXtwpks.IsReadOnly = false;
				colvarXtwpks.DefaultSetting = @"";
				colvarXtwpks.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXtwpks);
				
				TableSchema.TableColumn colvarXtwpys = new TableSchema.TableColumn(schema);
				colvarXtwpys.ColumnName = "XTWPYS";
				colvarXtwpys.DataType = DbType.String;
				colvarXtwpys.MaxLength = 20;
				colvarXtwpys.AutoIncrement = false;
				colvarXtwpys.IsNullable = true;
				colvarXtwpys.IsPrimaryKey = false;
				colvarXtwpys.IsForeignKey = false;
				colvarXtwpys.IsReadOnly = false;
				colvarXtwpys.DefaultSetting = @"";
				colvarXtwpys.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXtwpys);
				
				TableSchema.TableColumn colvarXtxmdm = new TableSchema.TableColumn(schema);
				colvarXtxmdm.ColumnName = "XTXMDM";
				colvarXtxmdm.DataType = DbType.String;
				colvarXtxmdm.MaxLength = 10;
				colvarXtxmdm.AutoIncrement = false;
				colvarXtxmdm.IsNullable = true;
				colvarXtxmdm.IsPrimaryKey = false;
				colvarXtxmdm.IsForeignKey = false;
				colvarXtxmdm.IsReadOnly = false;
				colvarXtxmdm.DefaultSetting = @"";
				colvarXtxmdm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXtxmdm);
				
				TableSchema.TableColumn colvarSccpxh = new TableSchema.TableColumn(schema);
				colvarSccpxh.ColumnName = "SCCPXH";
				colvarSccpxh.DataType = DbType.String;
				colvarSccpxh.MaxLength = 10;
				colvarSccpxh.AutoIncrement = false;
				colvarSccpxh.IsNullable = true;
				colvarSccpxh.IsPrimaryKey = false;
				colvarSccpxh.IsForeignKey = false;
				colvarSccpxh.IsReadOnly = false;
				colvarSccpxh.DefaultSetting = @"";
				colvarSccpxh.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSccpxh);
				
				TableSchema.TableColumn colvarScsfsl = new TableSchema.TableColumn(schema);
				colvarScsfsl.ColumnName = "SCSFSL";
				colvarScsfsl.DataType = DbType.Decimal;
				colvarScsfsl.MaxLength = 0;
				colvarScsfsl.AutoIncrement = false;
				colvarScsfsl.IsNullable = true;
				colvarScsfsl.IsPrimaryKey = false;
				colvarScsfsl.IsForeignKey = false;
				colvarScsfsl.IsReadOnly = false;
				colvarScsfsl.DefaultSetting = @"";
				colvarScsfsl.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScsfsl);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ErpNowthwin"].AddSchema("SCT813",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Scsfbh")]
		[Bindable(true)]
		public string Scsfbh 
		{
			get { return GetColumnValue<string>(Columns.Scsfbh); }
			set { SetColumnValue(Columns.Scsfbh, value); }
		}
		  
		[XmlAttribute("Scsfxh")]
		[Bindable(true)]
		public decimal Scsfxh 
		{
			get { return GetColumnValue<decimal>(Columns.Scsfxh); }
			set { SetColumnValue(Columns.Scsfxh, value); }
		}
		  
		[XmlAttribute("Sczsbh")]
		[Bindable(true)]
		public string Sczsbh 
		{
			get { return GetColumnValue<string>(Columns.Sczsbh); }
			set { SetColumnValue(Columns.Sczsbh, value); }
		}
		  
		[XmlAttribute("Schtbh")]
		[Bindable(true)]
		public string Schtbh 
		{
			get { return GetColumnValue<string>(Columns.Schtbh); }
			set { SetColumnValue(Columns.Schtbh, value); }
		}
		  
		[XmlAttribute("Schtxh")]
		[Bindable(true)]
		public decimal? Schtxh 
		{
			get { return GetColumnValue<decimal?>(Columns.Schtxh); }
			set { SetColumnValue(Columns.Schtxh, value); }
		}
		  
		[XmlAttribute("Scggdh")]
		[Bindable(true)]
		public string Scggdh 
		{
			get { return GetColumnValue<string>(Columns.Scggdh); }
			set { SetColumnValue(Columns.Scggdh, value); }
		}
		  
		[XmlAttribute("Scggxh")]
		[Bindable(true)]
		public decimal? Scggxh 
		{
			get { return GetColumnValue<decimal?>(Columns.Scggxh); }
			set { SetColumnValue(Columns.Scggxh, value); }
		}
		  
		[XmlAttribute("Xtwpks")]
		[Bindable(true)]
		public string Xtwpks 
		{
			get { return GetColumnValue<string>(Columns.Xtwpks); }
			set { SetColumnValue(Columns.Xtwpks, value); }
		}
		  
		[XmlAttribute("Xtwpys")]
		[Bindable(true)]
		public string Xtwpys 
		{
			get { return GetColumnValue<string>(Columns.Xtwpys); }
			set { SetColumnValue(Columns.Xtwpys, value); }
		}
		  
		[XmlAttribute("Xtxmdm")]
		[Bindable(true)]
		public string Xtxmdm 
		{
			get { return GetColumnValue<string>(Columns.Xtxmdm); }
			set { SetColumnValue(Columns.Xtxmdm, value); }
		}
		  
		[XmlAttribute("Sccpxh")]
		[Bindable(true)]
		public string Sccpxh 
		{
			get { return GetColumnValue<string>(Columns.Sccpxh); }
			set { SetColumnValue(Columns.Sccpxh, value); }
		}
		  
		[XmlAttribute("Scsfsl")]
		[Bindable(true)]
		public decimal? Scsfsl 
		{
			get { return GetColumnValue<decimal?>(Columns.Scsfsl); }
			set { SetColumnValue(Columns.Scsfsl, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varScsfbh,decimal varScsfxh,string varSczsbh,string varSchtbh,decimal? varSchtxh,string varScggdh,decimal? varScggxh,string varXtwpks,string varXtwpys,string varXtxmdm,string varSccpxh,decimal? varScsfsl)
		{
			SCT813 item = new SCT813();
			
			item.Scsfbh = varScsfbh;
			
			item.Scsfxh = varScsfxh;
			
			item.Sczsbh = varSczsbh;
			
			item.Schtbh = varSchtbh;
			
			item.Schtxh = varSchtxh;
			
			item.Scggdh = varScggdh;
			
			item.Scggxh = varScggxh;
			
			item.Xtwpks = varXtwpks;
			
			item.Xtwpys = varXtwpys;
			
			item.Xtxmdm = varXtxmdm;
			
			item.Sccpxh = varSccpxh;
			
			item.Scsfsl = varScsfsl;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(string varScsfbh,decimal varScsfxh,string varSczsbh,string varSchtbh,decimal? varSchtxh,string varScggdh,decimal? varScggxh,string varXtwpks,string varXtwpys,string varXtxmdm,string varSccpxh,decimal? varScsfsl)
		{
			SCT813 item = new SCT813();
			
				item.Scsfbh = varScsfbh;
			
				item.Scsfxh = varScsfxh;
			
				item.Sczsbh = varSczsbh;
			
				item.Schtbh = varSchtbh;
			
				item.Schtxh = varSchtxh;
			
				item.Scggdh = varScggdh;
			
				item.Scggxh = varScggxh;
			
				item.Xtwpks = varXtwpks;
			
				item.Xtwpys = varXtwpys;
			
				item.Xtxmdm = varXtxmdm;
			
				item.Sccpxh = varSccpxh;
			
				item.Scsfsl = varScsfsl;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn ScsfbhColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn ScsfxhColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn SczsbhColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn SchtbhColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn SchtxhColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn ScggdhColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn ScggxhColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn XtwpksColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn XtwpysColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn XtxmdmColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn SccpxhColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn ScsfslColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Scsfbh = @"SCSFBH";
			 public static string Scsfxh = @"SCSFXH";
			 public static string Sczsbh = @"SCZSBH";
			 public static string Schtbh = @"SCHTBH";
			 public static string Schtxh = @"SCHTXH";
			 public static string Scggdh = @"SCGGDH";
			 public static string Scggxh = @"SCGGXH";
			 public static string Xtwpks = @"XTWPKS";
			 public static string Xtwpys = @"XTWPYS";
			 public static string Xtxmdm = @"XTXMDM";
			 public static string Sccpxh = @"SCCPXH";
			 public static string Scsfsl = @"SCSFSL";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}

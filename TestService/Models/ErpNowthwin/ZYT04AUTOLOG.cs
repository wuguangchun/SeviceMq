using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace OracleDataDomain
{
	/// <summary>
	/// Strongly-typed collection for the ZYT04AUTOLOG class.
	/// </summary>
    [Serializable]
	public partial class ZYT04AUTOLOGCollection : ActiveList<ZYT04AUTOLOG, ZYT04AUTOLOGCollection>
	{	   
		public ZYT04AUTOLOGCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>ZYT04AUTOLOGCollection</returns>
		public ZYT04AUTOLOGCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                ZYT04AUTOLOG o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the ZYT04AUTOLOG table.
	/// </summary>
	[Serializable]
	public partial class ZYT04AUTOLOG : ActiveRecord<ZYT04AUTOLOG>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public ZYT04AUTOLOG()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public ZYT04AUTOLOG(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public ZYT04AUTOLOG(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public ZYT04AUTOLOG(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("ZYT04AUTOLOG", TableType.Table, DataService.GetInstance("ErpNowthwin"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"FYERP";
				//columns
				
				TableSchema.TableColumn colvarScggdho = new TableSchema.TableColumn(schema);
				colvarScggdho.ColumnName = "SCGGDHO";
				colvarScggdho.DataType = DbType.String;
				colvarScggdho.MaxLength = 12;
				colvarScggdho.AutoIncrement = false;
				colvarScggdho.IsNullable = true;
				colvarScggdho.IsPrimaryKey = false;
				colvarScggdho.IsForeignKey = false;
				colvarScggdho.IsReadOnly = false;
				colvarScggdho.DefaultSetting = @"";
				colvarScggdho.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScggdho);
				
				TableSchema.TableColumn colvarXttxhmo = new TableSchema.TableColumn(schema);
				colvarXttxhmo.ColumnName = "XTTXHMO";
				colvarXttxhmo.DataType = DbType.String;
				colvarXttxhmo.MaxLength = 20;
				colvarXttxhmo.AutoIncrement = false;
				colvarXttxhmo.IsNullable = true;
				colvarXttxhmo.IsPrimaryKey = false;
				colvarXttxhmo.IsForeignKey = false;
				colvarXttxhmo.IsReadOnly = false;
				colvarXttxhmo.DefaultSetting = @"";
				colvarXttxhmo.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXttxhmo);
				
				TableSchema.TableColumn colvarXtzyslo = new TableSchema.TableColumn(schema);
				colvarXtzyslo.ColumnName = "XTZYSLO";
				colvarXtzyslo.DataType = DbType.Decimal;
				colvarXtzyslo.MaxLength = 0;
				colvarXtzyslo.AutoIncrement = false;
				colvarXtzyslo.IsNullable = true;
				colvarXtzyslo.IsPrimaryKey = false;
				colvarXtzyslo.IsForeignKey = false;
				colvarXtzyslo.IsReadOnly = false;
				colvarXtzyslo.DefaultSetting = @"";
				colvarXtzyslo.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXtzyslo);
				
				TableSchema.TableColumn colvarXTYHDM1O = new TableSchema.TableColumn(schema);
				colvarXTYHDM1O.ColumnName = "XTYHDM1O";
				colvarXTYHDM1O.DataType = DbType.String;
				colvarXTYHDM1O.MaxLength = 8;
				colvarXTYHDM1O.AutoIncrement = false;
				colvarXTYHDM1O.IsNullable = true;
				colvarXTYHDM1O.IsPrimaryKey = false;
				colvarXTYHDM1O.IsForeignKey = false;
				colvarXTYHDM1O.IsReadOnly = false;
				colvarXTYHDM1O.DefaultSetting = @"";
				colvarXTYHDM1O.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXTYHDM1O);
				
				TableSchema.TableColumn colvarInstid = new TableSchema.TableColumn(schema);
				colvarInstid.ColumnName = "INSTID";
				colvarInstid.DataType = DbType.String;
				colvarInstid.MaxLength = 50;
				colvarInstid.AutoIncrement = false;
				colvarInstid.IsNullable = false;
				colvarInstid.IsPrimaryKey = true;
				colvarInstid.IsForeignKey = false;
				colvarInstid.IsReadOnly = false;
				colvarInstid.DefaultSetting = @"";
				colvarInstid.ForeignKeyTableName = "";
				schema.Columns.Add(colvarInstid);
				
				TableSchema.TableColumn colvarXtzysl = new TableSchema.TableColumn(schema);
				colvarXtzysl.ColumnName = "XTZYSL";
				colvarXtzysl.DataType = DbType.Decimal;
				colvarXtzysl.MaxLength = 0;
				colvarXtzysl.AutoIncrement = false;
				colvarXtzysl.IsNullable = true;
				colvarXtzysl.IsPrimaryKey = false;
				colvarXtzysl.IsForeignKey = false;
				colvarXtzysl.IsReadOnly = false;
				colvarXtzysl.DefaultSetting = @"";
				colvarXtzysl.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXtzysl);
				
				TableSchema.TableColumn colvarCreateuser = new TableSchema.TableColumn(schema);
				colvarCreateuser.ColumnName = "CREATEUSER";
				colvarCreateuser.DataType = DbType.String;
				colvarCreateuser.MaxLength = 12;
				colvarCreateuser.AutoIncrement = false;
				colvarCreateuser.IsNullable = true;
				colvarCreateuser.IsPrimaryKey = false;
				colvarCreateuser.IsForeignKey = false;
				colvarCreateuser.IsReadOnly = false;
				colvarCreateuser.DefaultSetting = @"";
				colvarCreateuser.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreateuser);
				
				TableSchema.TableColumn colvarCreatedate = new TableSchema.TableColumn(schema);
				colvarCreatedate.ColumnName = "CREATEDATE";
				colvarCreatedate.DataType = DbType.DateTime;
				colvarCreatedate.MaxLength = 0;
				colvarCreatedate.AutoIncrement = false;
				colvarCreatedate.IsNullable = true;
				colvarCreatedate.IsPrimaryKey = false;
				colvarCreatedate.IsForeignKey = false;
				colvarCreatedate.IsReadOnly = false;
				colvarCreatedate.DefaultSetting = @"";
				colvarCreatedate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedate);
				
				TableSchema.TableColumn colvarIfdeleted = new TableSchema.TableColumn(schema);
				colvarIfdeleted.ColumnName = "IFDELETED";
				colvarIfdeleted.DataType = DbType.String;
				colvarIfdeleted.MaxLength = 2;
				colvarIfdeleted.AutoIncrement = false;
				colvarIfdeleted.IsNullable = true;
				colvarIfdeleted.IsPrimaryKey = false;
				colvarIfdeleted.IsForeignKey = false;
				colvarIfdeleted.IsReadOnly = false;
				colvarIfdeleted.DefaultSetting = @"";
				colvarIfdeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIfdeleted);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ErpNowthwin"].AddSchema("ZYT04AUTOLOG",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Scggdho")]
		[Bindable(true)]
		public string Scggdho 
		{
			get { return GetColumnValue<string>(Columns.Scggdho); }
			set { SetColumnValue(Columns.Scggdho, value); }
		}
		  
		[XmlAttribute("Xttxhmo")]
		[Bindable(true)]
		public string Xttxhmo 
		{
			get { return GetColumnValue<string>(Columns.Xttxhmo); }
			set { SetColumnValue(Columns.Xttxhmo, value); }
		}
		  
		[XmlAttribute("Xtzyslo")]
		[Bindable(true)]
		public decimal? Xtzyslo 
		{
			get { return GetColumnValue<decimal?>(Columns.Xtzyslo); }
			set { SetColumnValue(Columns.Xtzyslo, value); }
		}
		  
		[XmlAttribute("XTYHDM1O")]
		[Bindable(true)]
		public string XTYHDM1O 
		{
			get { return GetColumnValue<string>(Columns.XTYHDM1O); }
			set { SetColumnValue(Columns.XTYHDM1O, value); }
		}
		  
		[XmlAttribute("Instid")]
		[Bindable(true)]
		public string Instid 
		{
			get { return GetColumnValue<string>(Columns.Instid); }
			set { SetColumnValue(Columns.Instid, value); }
		}
		  
		[XmlAttribute("Xtzysl")]
		[Bindable(true)]
		public decimal? Xtzysl 
		{
			get { return GetColumnValue<decimal?>(Columns.Xtzysl); }
			set { SetColumnValue(Columns.Xtzysl, value); }
		}
		  
		[XmlAttribute("Createuser")]
		[Bindable(true)]
		public string Createuser 
		{
			get { return GetColumnValue<string>(Columns.Createuser); }
			set { SetColumnValue(Columns.Createuser, value); }
		}
		  
		[XmlAttribute("Createdate")]
		[Bindable(true)]
		public DateTime? Createdate 
		{
			get { return GetColumnValue<DateTime?>(Columns.Createdate); }
			set { SetColumnValue(Columns.Createdate, value); }
		}
		  
		[XmlAttribute("Ifdeleted")]
		[Bindable(true)]
		public string Ifdeleted 
		{
			get { return GetColumnValue<string>(Columns.Ifdeleted); }
			set { SetColumnValue(Columns.Ifdeleted, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varScggdho,string varXttxhmo,decimal? varXtzyslo,string varXTYHDM1O,string varInstid,decimal? varXtzysl,string varCreateuser,DateTime? varCreatedate,string varIfdeleted)
		{
			ZYT04AUTOLOG item = new ZYT04AUTOLOG();
			
			item.Scggdho = varScggdho;
			
			item.Xttxhmo = varXttxhmo;
			
			item.Xtzyslo = varXtzyslo;
			
			item.XTYHDM1O = varXTYHDM1O;
			
			item.Instid = varInstid;
			
			item.Xtzysl = varXtzysl;
			
			item.Createuser = varCreateuser;
			
			item.Createdate = varCreatedate;
			
			item.Ifdeleted = varIfdeleted;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(string varScggdho,string varXttxhmo,decimal? varXtzyslo,string varXTYHDM1O,string varInstid,decimal? varXtzysl,string varCreateuser,DateTime? varCreatedate,string varIfdeleted)
		{
			ZYT04AUTOLOG item = new ZYT04AUTOLOG();
			
				item.Scggdho = varScggdho;
			
				item.Xttxhmo = varXttxhmo;
			
				item.Xtzyslo = varXtzyslo;
			
				item.XTYHDM1O = varXTYHDM1O;
			
				item.Instid = varInstid;
			
				item.Xtzysl = varXtzysl;
			
				item.Createuser = varCreateuser;
			
				item.Createdate = varCreatedate;
			
				item.Ifdeleted = varIfdeleted;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn ScggdhoColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn XttxhmoColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn XtzysloColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn XTYHDM1OColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn InstidColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn XtzyslColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn CreateuserColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn CreatedateColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn IfdeletedColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Scggdho = @"SCGGDHO";
			 public static string Xttxhmo = @"XTTXHMO";
			 public static string Xtzyslo = @"XTZYSLO";
			 public static string XTYHDM1O = @"XTYHDM1O";
			 public static string Instid = @"INSTID";
			 public static string Xtzysl = @"XTZYSL";
			 public static string Createuser = @"CREATEUSER";
			 public static string Createdate = @"CREATEDATE";
			 public static string Ifdeleted = @"IFDELETED";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}

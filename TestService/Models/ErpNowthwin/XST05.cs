using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace OracleDataDomain
{
	/// <summary>
	/// Strongly-typed collection for the XST05 class.
	/// </summary>
    [Serializable]
	public partial class XST05Collection : ActiveList<XST05, XST05Collection>
	{	   
		public XST05Collection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>XST05Collection</returns>
		public XST05Collection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                XST05 o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the XST05 table.
	/// </summary>
	[Serializable]
	public partial class XST05 : ActiveRecord<XST05>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public XST05()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public XST05(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public XST05(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public XST05(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("XST05", TableType.Table, DataService.GetInstance("ErpNowthwin"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"FYERP";
				//columns
				
				TableSchema.TableColumn colvarXtwldm = new TableSchema.TableColumn(schema);
				colvarXtwldm.ColumnName = "XTWLDM";
				colvarXtwldm.DataType = DbType.String;
				colvarXtwldm.MaxLength = 8;
				colvarXtwldm.AutoIncrement = false;
				colvarXtwldm.IsNullable = false;
				colvarXtwldm.IsPrimaryKey = true;
				colvarXtwldm.IsForeignKey = false;
				colvarXtwldm.IsReadOnly = false;
				colvarXtwldm.DefaultSetting = @"";
				colvarXtwldm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXtwldm);
				
				TableSchema.TableColumn colvarXsthrq = new TableSchema.TableColumn(schema);
				colvarXsthrq.ColumnName = "XSTHRQ";
				colvarXsthrq.DataType = DbType.DateTime;
				colvarXsthrq.MaxLength = 0;
				colvarXsthrq.AutoIncrement = false;
				colvarXsthrq.IsNullable = false;
				colvarXsthrq.IsPrimaryKey = true;
				colvarXsthrq.IsForeignKey = false;
				colvarXsthrq.IsReadOnly = false;
				colvarXsthrq.DefaultSetting = @"";
				colvarXsthrq.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXsthrq);
				
				TableSchema.TableColumn colvarXsfhxh = new TableSchema.TableColumn(schema);
				colvarXsfhxh.ColumnName = "XSFHXH";
				colvarXsfhxh.DataType = DbType.Decimal;
				colvarXsfhxh.MaxLength = 0;
				colvarXsfhxh.AutoIncrement = false;
				colvarXsfhxh.IsNullable = false;
				colvarXsfhxh.IsPrimaryKey = true;
				colvarXsfhxh.IsForeignKey = false;
				colvarXsfhxh.IsReadOnly = false;
				colvarXsfhxh.DefaultSetting = @"";
				colvarXsfhxh.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXsfhxh);
				
				TableSchema.TableColumn colvarXtwpdm = new TableSchema.TableColumn(schema);
				colvarXtwpdm.ColumnName = "XTWPDM";
				colvarXtwpdm.DataType = DbType.String;
				colvarXtwpdm.MaxLength = 20;
				colvarXtwpdm.AutoIncrement = false;
				colvarXtwpdm.IsNullable = false;
				colvarXtwpdm.IsPrimaryKey = false;
				colvarXtwpdm.IsForeignKey = false;
				colvarXtwpdm.IsReadOnly = false;
				colvarXtwpdm.DefaultSetting = @"";
				colvarXtwpdm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXtwpdm);
				
				TableSchema.TableColumn colvarXtjldw = new TableSchema.TableColumn(schema);
				colvarXtjldw.ColumnName = "XTJLDW";
				colvarXtjldw.DataType = DbType.String;
				colvarXtjldw.MaxLength = 6;
				colvarXtjldw.AutoIncrement = false;
				colvarXtjldw.IsNullable = true;
				colvarXtjldw.IsPrimaryKey = false;
				colvarXtjldw.IsForeignKey = false;
				colvarXtjldw.IsReadOnly = false;
				colvarXtjldw.DefaultSetting = @"";
				colvarXtjldw.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXtjldw);
				
				TableSchema.TableColumn colvarXsthsl = new TableSchema.TableColumn(schema);
				colvarXsthsl.ColumnName = "XSTHSL";
				colvarXsthsl.DataType = DbType.Decimal;
				colvarXsthsl.MaxLength = 0;
				colvarXsthsl.AutoIncrement = false;
				colvarXsthsl.IsNullable = true;
				colvarXsthsl.IsPrimaryKey = false;
				colvarXsthsl.IsForeignKey = false;
				colvarXsthsl.IsReadOnly = false;
				colvarXsthsl.DefaultSetting = @"";
				colvarXsthsl.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXsthsl);
				
				TableSchema.TableColumn colvarXskoul = new TableSchema.TableColumn(schema);
				colvarXskoul.ColumnName = "XSKOUL";
				colvarXskoul.DataType = DbType.Decimal;
				colvarXskoul.MaxLength = 0;
				colvarXskoul.AutoIncrement = false;
				colvarXskoul.IsNullable = true;
				colvarXskoul.IsPrimaryKey = false;
				colvarXskoul.IsForeignKey = false;
				colvarXskoul.IsReadOnly = false;
				colvarXskoul.DefaultSetting = @"";
				colvarXskoul.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXskoul);
				
				TableSchema.TableColumn colvarXsysje = new TableSchema.TableColumn(schema);
				colvarXsysje.ColumnName = "XSYSJE";
				colvarXsysje.DataType = DbType.Decimal;
				colvarXsysje.MaxLength = 0;
				colvarXsysje.AutoIncrement = false;
				colvarXsysje.IsNullable = true;
				colvarXsysje.IsPrimaryKey = false;
				colvarXsysje.IsForeignKey = false;
				colvarXsysje.IsReadOnly = false;
				colvarXsysje.DefaultSetting = @"";
				colvarXsysje.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXsysje);
				
				TableSchema.TableColumn colvarXslrry = new TableSchema.TableColumn(schema);
				colvarXslrry.ColumnName = "XSLRRY";
				colvarXslrry.DataType = DbType.String;
				colvarXslrry.MaxLength = 8;
				colvarXslrry.AutoIncrement = false;
				colvarXslrry.IsNullable = true;
				colvarXslrry.IsPrimaryKey = false;
				colvarXslrry.IsForeignKey = false;
				colvarXslrry.IsReadOnly = false;
				colvarXslrry.DefaultSetting = @"";
				colvarXslrry.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXslrry);
				
				TableSchema.TableColumn colvarXsdjzt = new TableSchema.TableColumn(schema);
				colvarXsdjzt.ColumnName = "XSDJZT";
				colvarXsdjzt.DataType = DbType.String;
				colvarXsdjzt.MaxLength = 1;
				colvarXsdjzt.AutoIncrement = false;
				colvarXsdjzt.IsNullable = true;
				colvarXsdjzt.IsPrimaryKey = false;
				colvarXsdjzt.IsForeignKey = false;
				colvarXsdjzt.IsReadOnly = false;
				colvarXsdjzt.DefaultSetting = @"";
				colvarXsdjzt.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXsdjzt);
				
				TableSchema.TableColumn colvarXszsyy = new TableSchema.TableColumn(schema);
				colvarXszsyy.ColumnName = "XSZSYY";
				colvarXszsyy.DataType = DbType.String;
				colvarXszsyy.MaxLength = 6;
				colvarXszsyy.AutoIncrement = false;
				colvarXszsyy.IsNullable = true;
				colvarXszsyy.IsPrimaryKey = false;
				colvarXszsyy.IsForeignKey = false;
				colvarXszsyy.IsReadOnly = false;
				colvarXszsyy.DefaultSetting = @"";
				colvarXszsyy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXszsyy);
				
				TableSchema.TableColumn colvarXsrbss = new TableSchema.TableColumn(schema);
				colvarXsrbss.ColumnName = "XSRBSS";
				colvarXsrbss.DataType = DbType.Decimal;
				colvarXsrbss.MaxLength = 0;
				colvarXsrbss.AutoIncrement = false;
				colvarXsrbss.IsNullable = true;
				colvarXsrbss.IsPrimaryKey = false;
				colvarXsrbss.IsForeignKey = false;
				colvarXsrbss.IsReadOnly = false;
				colvarXsrbss.DefaultSetting = @"";
				colvarXsrbss.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXsrbss);
				
				TableSchema.TableColumn colvarXtjqhm = new TableSchema.TableColumn(schema);
				colvarXtjqhm.ColumnName = "XTJQHM";
				colvarXtjqhm.DataType = DbType.String;
				colvarXtjqhm.MaxLength = 6;
				colvarXtjqhm.AutoIncrement = false;
				colvarXtjqhm.IsNullable = true;
				colvarXtjqhm.IsPrimaryKey = false;
				colvarXtjqhm.IsForeignKey = false;
				colvarXtjqhm.IsReadOnly = false;
				colvarXtjqhm.DefaultSetting = @"";
				colvarXtjqhm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXtjqhm);
				
				TableSchema.TableColumn colvarXslrrq = new TableSchema.TableColumn(schema);
				colvarXslrrq.ColumnName = "XSLRRQ";
				colvarXslrrq.DataType = DbType.DateTime;
				colvarXslrrq.MaxLength = 0;
				colvarXslrrq.AutoIncrement = false;
				colvarXslrrq.IsNullable = true;
				colvarXslrrq.IsPrimaryKey = false;
				colvarXslrrq.IsForeignKey = false;
				colvarXslrrq.IsReadOnly = false;
				colvarXslrrq.DefaultSetting = @"";
				colvarXslrrq.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXslrrq);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ErpNowthwin"].AddSchema("XST05",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Xtwldm")]
		[Bindable(true)]
		public string Xtwldm 
		{
			get { return GetColumnValue<string>(Columns.Xtwldm); }
			set { SetColumnValue(Columns.Xtwldm, value); }
		}
		  
		[XmlAttribute("Xsthrq")]
		[Bindable(true)]
		public DateTime Xsthrq 
		{
			get { return GetColumnValue<DateTime>(Columns.Xsthrq); }
			set { SetColumnValue(Columns.Xsthrq, value); }
		}
		  
		[XmlAttribute("Xsfhxh")]
		[Bindable(true)]
		public decimal Xsfhxh 
		{
			get { return GetColumnValue<decimal>(Columns.Xsfhxh); }
			set { SetColumnValue(Columns.Xsfhxh, value); }
		}
		  
		[XmlAttribute("Xtwpdm")]
		[Bindable(true)]
		public string Xtwpdm 
		{
			get { return GetColumnValue<string>(Columns.Xtwpdm); }
			set { SetColumnValue(Columns.Xtwpdm, value); }
		}
		  
		[XmlAttribute("Xtjldw")]
		[Bindable(true)]
		public string Xtjldw 
		{
			get { return GetColumnValue<string>(Columns.Xtjldw); }
			set { SetColumnValue(Columns.Xtjldw, value); }
		}
		  
		[XmlAttribute("Xsthsl")]
		[Bindable(true)]
		public decimal? Xsthsl 
		{
			get { return GetColumnValue<decimal?>(Columns.Xsthsl); }
			set { SetColumnValue(Columns.Xsthsl, value); }
		}
		  
		[XmlAttribute("Xskoul")]
		[Bindable(true)]
		public decimal? Xskoul 
		{
			get { return GetColumnValue<decimal?>(Columns.Xskoul); }
			set { SetColumnValue(Columns.Xskoul, value); }
		}
		  
		[XmlAttribute("Xsysje")]
		[Bindable(true)]
		public decimal? Xsysje 
		{
			get { return GetColumnValue<decimal?>(Columns.Xsysje); }
			set { SetColumnValue(Columns.Xsysje, value); }
		}
		  
		[XmlAttribute("Xslrry")]
		[Bindable(true)]
		public string Xslrry 
		{
			get { return GetColumnValue<string>(Columns.Xslrry); }
			set { SetColumnValue(Columns.Xslrry, value); }
		}
		  
		[XmlAttribute("Xsdjzt")]
		[Bindable(true)]
		public string Xsdjzt 
		{
			get { return GetColumnValue<string>(Columns.Xsdjzt); }
			set { SetColumnValue(Columns.Xsdjzt, value); }
		}
		  
		[XmlAttribute("Xszsyy")]
		[Bindable(true)]
		public string Xszsyy 
		{
			get { return GetColumnValue<string>(Columns.Xszsyy); }
			set { SetColumnValue(Columns.Xszsyy, value); }
		}
		  
		[XmlAttribute("Xsrbss")]
		[Bindable(true)]
		public decimal? Xsrbss 
		{
			get { return GetColumnValue<decimal?>(Columns.Xsrbss); }
			set { SetColumnValue(Columns.Xsrbss, value); }
		}
		  
		[XmlAttribute("Xtjqhm")]
		[Bindable(true)]
		public string Xtjqhm 
		{
			get { return GetColumnValue<string>(Columns.Xtjqhm); }
			set { SetColumnValue(Columns.Xtjqhm, value); }
		}
		  
		[XmlAttribute("Xslrrq")]
		[Bindable(true)]
		public DateTime? Xslrrq 
		{
			get { return GetColumnValue<DateTime?>(Columns.Xslrrq); }
			set { SetColumnValue(Columns.Xslrrq, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varXtwldm,DateTime varXsthrq,decimal varXsfhxh,string varXtwpdm,string varXtjldw,decimal? varXsthsl,decimal? varXskoul,decimal? varXsysje,string varXslrry,string varXsdjzt,string varXszsyy,decimal? varXsrbss,string varXtjqhm,DateTime? varXslrrq)
		{
			XST05 item = new XST05();
			
			item.Xtwldm = varXtwldm;
			
			item.Xsthrq = varXsthrq;
			
			item.Xsfhxh = varXsfhxh;
			
			item.Xtwpdm = varXtwpdm;
			
			item.Xtjldw = varXtjldw;
			
			item.Xsthsl = varXsthsl;
			
			item.Xskoul = varXskoul;
			
			item.Xsysje = varXsysje;
			
			item.Xslrry = varXslrry;
			
			item.Xsdjzt = varXsdjzt;
			
			item.Xszsyy = varXszsyy;
			
			item.Xsrbss = varXsrbss;
			
			item.Xtjqhm = varXtjqhm;
			
			item.Xslrrq = varXslrrq;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(string varXtwldm,DateTime varXsthrq,decimal varXsfhxh,string varXtwpdm,string varXtjldw,decimal? varXsthsl,decimal? varXskoul,decimal? varXsysje,string varXslrry,string varXsdjzt,string varXszsyy,decimal? varXsrbss,string varXtjqhm,DateTime? varXslrrq)
		{
			XST05 item = new XST05();
			
				item.Xtwldm = varXtwldm;
			
				item.Xsthrq = varXsthrq;
			
				item.Xsfhxh = varXsfhxh;
			
				item.Xtwpdm = varXtwpdm;
			
				item.Xtjldw = varXtjldw;
			
				item.Xsthsl = varXsthsl;
			
				item.Xskoul = varXskoul;
			
				item.Xsysje = varXsysje;
			
				item.Xslrry = varXslrry;
			
				item.Xsdjzt = varXsdjzt;
			
				item.Xszsyy = varXszsyy;
			
				item.Xsrbss = varXsrbss;
			
				item.Xtjqhm = varXtjqhm;
			
				item.Xslrrq = varXslrrq;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn XtwldmColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn XsthrqColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn XsfhxhColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn XtwpdmColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn XtjldwColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn XsthslColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn XskoulColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn XsysjeColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn XslrryColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn XsdjztColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn XszsyyColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn XsrbssColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn XtjqhmColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        public static TableSchema.TableColumn XslrrqColumn
        {
            get { return Schema.Columns[13]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Xtwldm = @"XTWLDM";
			 public static string Xsthrq = @"XSTHRQ";
			 public static string Xsfhxh = @"XSFHXH";
			 public static string Xtwpdm = @"XTWPDM";
			 public static string Xtjldw = @"XTJLDW";
			 public static string Xsthsl = @"XSTHSL";
			 public static string Xskoul = @"XSKOUL";
			 public static string Xsysje = @"XSYSJE";
			 public static string Xslrry = @"XSLRRY";
			 public static string Xsdjzt = @"XSDJZT";
			 public static string Xszsyy = @"XSZSYY";
			 public static string Xsrbss = @"XSRBSS";
			 public static string Xtjqhm = @"XTJQHM";
			 public static string Xslrrq = @"XSLRRQ";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}

using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace OracleDataDomain
{
	/// <summary>
	/// Strongly-typed collection for the XST02 class.
	/// </summary>
    [Serializable]
	public partial class XST02Collection : ActiveList<XST02, XST02Collection>
	{	   
		public XST02Collection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>XST02Collection</returns>
		public XST02Collection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                XST02 o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the XST02 table.
	/// </summary>
	[Serializable]
	public partial class XST02 : ActiveRecord<XST02>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public XST02()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public XST02(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public XST02(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public XST02(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("XST02", TableType.Table, DataService.GetInstance("ErpNowthwin"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"FYERP";
				//columns
				
				TableSchema.TableColumn colvarXsddhm = new TableSchema.TableColumn(schema);
				colvarXsddhm.ColumnName = "XSDDHM";
				colvarXsddhm.DataType = DbType.String;
				colvarXsddhm.MaxLength = 12;
				colvarXsddhm.AutoIncrement = false;
				colvarXsddhm.IsNullable = false;
				colvarXsddhm.IsPrimaryKey = true;
				colvarXsddhm.IsForeignKey = false;
				colvarXsddhm.IsReadOnly = false;
				colvarXsddhm.DefaultSetting = @"";
				colvarXsddhm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXsddhm);
				
				TableSchema.TableColumn colvarXsddhh = new TableSchema.TableColumn(schema);
				colvarXsddhh.ColumnName = "XSDDHH";
				colvarXsddhh.DataType = DbType.Decimal;
				colvarXsddhh.MaxLength = 0;
				colvarXsddhh.AutoIncrement = false;
				colvarXsddhh.IsNullable = false;
				colvarXsddhh.IsPrimaryKey = true;
				colvarXsddhh.IsForeignKey = false;
				colvarXsddhh.IsReadOnly = false;
				colvarXsddhh.DefaultSetting = @"";
				colvarXsddhh.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXsddhh);
				
				TableSchema.TableColumn colvarXtjldw = new TableSchema.TableColumn(schema);
				colvarXtjldw.ColumnName = "XTJLDW";
				colvarXtjldw.DataType = DbType.String;
				colvarXtjldw.MaxLength = 6;
				colvarXtjldw.AutoIncrement = false;
				colvarXtjldw.IsNullable = true;
				colvarXtjldw.IsPrimaryKey = false;
				colvarXtjldw.IsForeignKey = false;
				colvarXtjldw.IsReadOnly = false;
				colvarXtjldw.DefaultSetting = @"";
				colvarXtjldw.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXtjldw);
				
				TableSchema.TableColumn colvarXtwpdm = new TableSchema.TableColumn(schema);
				colvarXtwpdm.ColumnName = "XTWPDM";
				colvarXtwpdm.DataType = DbType.String;
				colvarXtwpdm.MaxLength = 20;
				colvarXtwpdm.AutoIncrement = false;
				colvarXtwpdm.IsNullable = false;
				colvarXtwpdm.IsPrimaryKey = true;
				colvarXtwpdm.IsForeignKey = false;
				colvarXtwpdm.IsReadOnly = false;
				colvarXtwpdm.DefaultSetting = @"";
				colvarXtwpdm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXtwpdm);
				
				TableSchema.TableColumn colvarXtjhdd = new TableSchema.TableColumn(schema);
				colvarXtjhdd.ColumnName = "XTJHDD";
				colvarXtjhdd.DataType = DbType.String;
				colvarXtjhdd.MaxLength = 40;
				colvarXtjhdd.AutoIncrement = false;
				colvarXtjhdd.IsNullable = true;
				colvarXtjhdd.IsPrimaryKey = false;
				colvarXtjhdd.IsForeignKey = false;
				colvarXtjhdd.IsReadOnly = false;
				colvarXtjhdd.DefaultSetting = @"";
				colvarXtjhdd.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXtjhdd);
				
				TableSchema.TableColumn colvarXsysfs = new TableSchema.TableColumn(schema);
				colvarXsysfs.ColumnName = "XSYSFS";
				colvarXsysfs.DataType = DbType.String;
				colvarXsysfs.MaxLength = 4;
				colvarXsysfs.AutoIncrement = false;
				colvarXsysfs.IsNullable = true;
				colvarXsysfs.IsPrimaryKey = false;
				colvarXsysfs.IsForeignKey = false;
				colvarXsysfs.IsReadOnly = false;
				colvarXsysfs.DefaultSetting = @"";
				colvarXsysfs.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXsysfs);
				
				TableSchema.TableColumn colvarXsddsl = new TableSchema.TableColumn(schema);
				colvarXsddsl.ColumnName = "XSDDSL";
				colvarXsddsl.DataType = DbType.Decimal;
				colvarXsddsl.MaxLength = 0;
				colvarXsddsl.AutoIncrement = false;
				colvarXsddsl.IsNullable = true;
				colvarXsddsl.IsPrimaryKey = false;
				colvarXsddsl.IsForeignKey = false;
				colvarXsddsl.IsReadOnly = false;
				colvarXsddsl.DefaultSetting = @"";
				colvarXsddsl.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXsddsl);
				
				TableSchema.TableColumn colvarXsddzk = new TableSchema.TableColumn(schema);
				colvarXsddzk.ColumnName = "XSDDZK";
				colvarXsddzk.DataType = DbType.Decimal;
				colvarXsddzk.MaxLength = 0;
				colvarXsddzk.AutoIncrement = false;
				colvarXsddzk.IsNullable = true;
				colvarXsddzk.IsPrimaryKey = false;
				colvarXsddzk.IsForeignKey = false;
				colvarXsddzk.IsReadOnly = false;
				colvarXsddzk.DefaultSetting = @"";
				colvarXsddzk.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXsddzk);
				
				TableSchema.TableColumn colvarXsddje = new TableSchema.TableColumn(schema);
				colvarXsddje.ColumnName = "XSDDJE";
				colvarXsddje.DataType = DbType.Decimal;
				colvarXsddje.MaxLength = 0;
				colvarXsddje.AutoIncrement = false;
				colvarXsddje.IsNullable = true;
				colvarXsddje.IsPrimaryKey = false;
				colvarXsddje.IsForeignKey = false;
				colvarXsddje.IsReadOnly = false;
				colvarXsddje.DefaultSetting = @"";
				colvarXsddje.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXsddje);
				
				TableSchema.TableColumn colvarXsbbje = new TableSchema.TableColumn(schema);
				colvarXsbbje.ColumnName = "XSBBJE";
				colvarXsbbje.DataType = DbType.Decimal;
				colvarXsbbje.MaxLength = 0;
				colvarXsbbje.AutoIncrement = false;
				colvarXsbbje.IsNullable = true;
				colvarXsbbje.IsPrimaryKey = false;
				colvarXsbbje.IsForeignKey = false;
				colvarXsbbje.IsReadOnly = false;
				colvarXsbbje.DefaultSetting = @"";
				colvarXsbbje.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXsbbje);
				
				TableSchema.TableColumn colvarXsxqrq = new TableSchema.TableColumn(schema);
				colvarXsxqrq.ColumnName = "XSXQRQ";
				colvarXsxqrq.DataType = DbType.DateTime;
				colvarXsxqrq.MaxLength = 0;
				colvarXsxqrq.AutoIncrement = false;
				colvarXsxqrq.IsNullable = true;
				colvarXsxqrq.IsPrimaryKey = false;
				colvarXsxqrq.IsForeignKey = false;
				colvarXsxqrq.IsReadOnly = false;
				colvarXsxqrq.DefaultSetting = @"";
				colvarXsxqrq.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXsxqrq);
				
				TableSchema.TableColumn colvarXsddbz = new TableSchema.TableColumn(schema);
				colvarXsddbz.ColumnName = "XSDDBZ";
				colvarXsddbz.DataType = DbType.String;
				colvarXsddbz.MaxLength = 255;
				colvarXsddbz.AutoIncrement = false;
				colvarXsddbz.IsNullable = true;
				colvarXsddbz.IsPrimaryKey = false;
				colvarXsddbz.IsForeignKey = false;
				colvarXsddbz.IsReadOnly = false;
				colvarXsddbz.DefaultSetting = @"";
				colvarXsddbz.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXsddbz);
				
				TableSchema.TableColumn colvarXsktdl = new TableSchema.TableColumn(schema);
				colvarXsktdl.ColumnName = "XSKTDL";
				colvarXsktdl.DataType = DbType.Decimal;
				colvarXsktdl.MaxLength = 0;
				colvarXsktdl.AutoIncrement = false;
				colvarXsktdl.IsNullable = true;
				colvarXsktdl.IsPrimaryKey = false;
				colvarXsktdl.IsForeignKey = false;
				colvarXsktdl.IsReadOnly = false;
				colvarXsktdl.DefaultSetting = @"";
				colvarXsktdl.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXsktdl);
				
				TableSchema.TableColumn colvarXsthsl = new TableSchema.TableColumn(schema);
				colvarXsthsl.ColumnName = "XSTHSL";
				colvarXsthsl.DataType = DbType.Decimal;
				colvarXsthsl.MaxLength = 0;
				colvarXsthsl.AutoIncrement = false;
				colvarXsthsl.IsNullable = true;
				colvarXsthsl.IsPrimaryKey = false;
				colvarXsthsl.IsForeignKey = false;
				colvarXsthsl.IsReadOnly = false;
				colvarXsthsl.DefaultSetting = @"";
				colvarXsthsl.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXsthsl);
				
				TableSchema.TableColumn colvarXskfpl = new TableSchema.TableColumn(schema);
				colvarXskfpl.ColumnName = "XSKFPL";
				colvarXskfpl.DataType = DbType.Decimal;
				colvarXskfpl.MaxLength = 0;
				colvarXskfpl.AutoIncrement = false;
				colvarXskfpl.IsNullable = true;
				colvarXskfpl.IsPrimaryKey = false;
				colvarXskfpl.IsForeignKey = false;
				colvarXskfpl.IsReadOnly = false;
				colvarXskfpl.DefaultSetting = @"";
				colvarXskfpl.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXskfpl);
				
				TableSchema.TableColumn colvarXskfpe = new TableSchema.TableColumn(schema);
				colvarXskfpe.ColumnName = "XSKFPE";
				colvarXskfpe.DataType = DbType.Decimal;
				colvarXskfpe.MaxLength = 0;
				colvarXskfpe.AutoIncrement = false;
				colvarXskfpe.IsNullable = true;
				colvarXskfpe.IsPrimaryKey = false;
				colvarXskfpe.IsForeignKey = false;
				colvarXskfpe.IsReadOnly = false;
				colvarXskfpe.DefaultSetting = @"";
				colvarXskfpe.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXskfpe);
				
				TableSchema.TableColumn colvarXshkje = new TableSchema.TableColumn(schema);
				colvarXshkje.ColumnName = "XSHKJE";
				colvarXshkje.DataType = DbType.Decimal;
				colvarXshkje.MaxLength = 0;
				colvarXshkje.AutoIncrement = false;
				colvarXshkje.IsNullable = true;
				colvarXshkje.IsPrimaryKey = false;
				colvarXshkje.IsForeignKey = false;
				colvarXshkje.IsReadOnly = false;
				colvarXshkje.DefaultSetting = @"";
				colvarXshkje.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXshkje);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ErpNowthwin"].AddSchema("XST02",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Xsddhm")]
		[Bindable(true)]
		public string Xsddhm 
		{
			get { return GetColumnValue<string>(Columns.Xsddhm); }
			set { SetColumnValue(Columns.Xsddhm, value); }
		}
		  
		[XmlAttribute("Xsddhh")]
		[Bindable(true)]
		public decimal Xsddhh 
		{
			get { return GetColumnValue<decimal>(Columns.Xsddhh); }
			set { SetColumnValue(Columns.Xsddhh, value); }
		}
		  
		[XmlAttribute("Xtjldw")]
		[Bindable(true)]
		public string Xtjldw 
		{
			get { return GetColumnValue<string>(Columns.Xtjldw); }
			set { SetColumnValue(Columns.Xtjldw, value); }
		}
		  
		[XmlAttribute("Xtwpdm")]
		[Bindable(true)]
		public string Xtwpdm 
		{
			get { return GetColumnValue<string>(Columns.Xtwpdm); }
			set { SetColumnValue(Columns.Xtwpdm, value); }
		}
		  
		[XmlAttribute("Xtjhdd")]
		[Bindable(true)]
		public string Xtjhdd 
		{
			get { return GetColumnValue<string>(Columns.Xtjhdd); }
			set { SetColumnValue(Columns.Xtjhdd, value); }
		}
		  
		[XmlAttribute("Xsysfs")]
		[Bindable(true)]
		public string Xsysfs 
		{
			get { return GetColumnValue<string>(Columns.Xsysfs); }
			set { SetColumnValue(Columns.Xsysfs, value); }
		}
		  
		[XmlAttribute("Xsddsl")]
		[Bindable(true)]
		public decimal? Xsddsl 
		{
			get { return GetColumnValue<decimal?>(Columns.Xsddsl); }
			set { SetColumnValue(Columns.Xsddsl, value); }
		}
		  
		[XmlAttribute("Xsddzk")]
		[Bindable(true)]
		public decimal? Xsddzk 
		{
			get { return GetColumnValue<decimal?>(Columns.Xsddzk); }
			set { SetColumnValue(Columns.Xsddzk, value); }
		}
		  
		[XmlAttribute("Xsddje")]
		[Bindable(true)]
		public decimal? Xsddje 
		{
			get { return GetColumnValue<decimal?>(Columns.Xsddje); }
			set { SetColumnValue(Columns.Xsddje, value); }
		}
		  
		[XmlAttribute("Xsbbje")]
		[Bindable(true)]
		public decimal? Xsbbje 
		{
			get { return GetColumnValue<decimal?>(Columns.Xsbbje); }
			set { SetColumnValue(Columns.Xsbbje, value); }
		}
		  
		[XmlAttribute("Xsxqrq")]
		[Bindable(true)]
		public DateTime? Xsxqrq 
		{
			get { return GetColumnValue<DateTime?>(Columns.Xsxqrq); }
			set { SetColumnValue(Columns.Xsxqrq, value); }
		}
		  
		[XmlAttribute("Xsddbz")]
		[Bindable(true)]
		public string Xsddbz 
		{
			get { return GetColumnValue<string>(Columns.Xsddbz); }
			set { SetColumnValue(Columns.Xsddbz, value); }
		}
		  
		[XmlAttribute("Xsktdl")]
		[Bindable(true)]
		public decimal? Xsktdl 
		{
			get { return GetColumnValue<decimal?>(Columns.Xsktdl); }
			set { SetColumnValue(Columns.Xsktdl, value); }
		}
		  
		[XmlAttribute("Xsthsl")]
		[Bindable(true)]
		public decimal? Xsthsl 
		{
			get { return GetColumnValue<decimal?>(Columns.Xsthsl); }
			set { SetColumnValue(Columns.Xsthsl, value); }
		}
		  
		[XmlAttribute("Xskfpl")]
		[Bindable(true)]
		public decimal? Xskfpl 
		{
			get { return GetColumnValue<decimal?>(Columns.Xskfpl); }
			set { SetColumnValue(Columns.Xskfpl, value); }
		}
		  
		[XmlAttribute("Xskfpe")]
		[Bindable(true)]
		public decimal? Xskfpe 
		{
			get { return GetColumnValue<decimal?>(Columns.Xskfpe); }
			set { SetColumnValue(Columns.Xskfpe, value); }
		}
		  
		[XmlAttribute("Xshkje")]
		[Bindable(true)]
		public decimal? Xshkje 
		{
			get { return GetColumnValue<decimal?>(Columns.Xshkje); }
			set { SetColumnValue(Columns.Xshkje, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varXsddhm,decimal varXsddhh,string varXtjldw,string varXtwpdm,string varXtjhdd,string varXsysfs,decimal? varXsddsl,decimal? varXsddzk,decimal? varXsddje,decimal? varXsbbje,DateTime? varXsxqrq,string varXsddbz,decimal? varXsktdl,decimal? varXsthsl,decimal? varXskfpl,decimal? varXskfpe,decimal? varXshkje)
		{
			XST02 item = new XST02();
			
			item.Xsddhm = varXsddhm;
			
			item.Xsddhh = varXsddhh;
			
			item.Xtjldw = varXtjldw;
			
			item.Xtwpdm = varXtwpdm;
			
			item.Xtjhdd = varXtjhdd;
			
			item.Xsysfs = varXsysfs;
			
			item.Xsddsl = varXsddsl;
			
			item.Xsddzk = varXsddzk;
			
			item.Xsddje = varXsddje;
			
			item.Xsbbje = varXsbbje;
			
			item.Xsxqrq = varXsxqrq;
			
			item.Xsddbz = varXsddbz;
			
			item.Xsktdl = varXsktdl;
			
			item.Xsthsl = varXsthsl;
			
			item.Xskfpl = varXskfpl;
			
			item.Xskfpe = varXskfpe;
			
			item.Xshkje = varXshkje;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(string varXsddhm,decimal varXsddhh,string varXtjldw,string varXtwpdm,string varXtjhdd,string varXsysfs,decimal? varXsddsl,decimal? varXsddzk,decimal? varXsddje,decimal? varXsbbje,DateTime? varXsxqrq,string varXsddbz,decimal? varXsktdl,decimal? varXsthsl,decimal? varXskfpl,decimal? varXskfpe,decimal? varXshkje)
		{
			XST02 item = new XST02();
			
				item.Xsddhm = varXsddhm;
			
				item.Xsddhh = varXsddhh;
			
				item.Xtjldw = varXtjldw;
			
				item.Xtwpdm = varXtwpdm;
			
				item.Xtjhdd = varXtjhdd;
			
				item.Xsysfs = varXsysfs;
			
				item.Xsddsl = varXsddsl;
			
				item.Xsddzk = varXsddzk;
			
				item.Xsddje = varXsddje;
			
				item.Xsbbje = varXsbbje;
			
				item.Xsxqrq = varXsxqrq;
			
				item.Xsddbz = varXsddbz;
			
				item.Xsktdl = varXsktdl;
			
				item.Xsthsl = varXsthsl;
			
				item.Xskfpl = varXskfpl;
			
				item.Xskfpe = varXskfpe;
			
				item.Xshkje = varXshkje;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn XsddhmColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn XsddhhColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn XtjldwColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn XtwpdmColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn XtjhddColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn XsysfsColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn XsddslColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn XsddzkColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn XsddjeColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn XsbbjeColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn XsxqrqColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn XsddbzColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn XsktdlColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        public static TableSchema.TableColumn XsthslColumn
        {
            get { return Schema.Columns[13]; }
        }
        
        
        
        public static TableSchema.TableColumn XskfplColumn
        {
            get { return Schema.Columns[14]; }
        }
        
        
        
        public static TableSchema.TableColumn XskfpeColumn
        {
            get { return Schema.Columns[15]; }
        }
        
        
        
        public static TableSchema.TableColumn XshkjeColumn
        {
            get { return Schema.Columns[16]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Xsddhm = @"XSDDHM";
			 public static string Xsddhh = @"XSDDHH";
			 public static string Xtjldw = @"XTJLDW";
			 public static string Xtwpdm = @"XTWPDM";
			 public static string Xtjhdd = @"XTJHDD";
			 public static string Xsysfs = @"XSYSFS";
			 public static string Xsddsl = @"XSDDSL";
			 public static string Xsddzk = @"XSDDZK";
			 public static string Xsddje = @"XSDDJE";
			 public static string Xsbbje = @"XSBBJE";
			 public static string Xsxqrq = @"XSXQRQ";
			 public static string Xsddbz = @"XSDDBZ";
			 public static string Xsktdl = @"XSKTDL";
			 public static string Xsthsl = @"XSTHSL";
			 public static string Xskfpl = @"XSKFPL";
			 public static string Xskfpe = @"XSKFPE";
			 public static string Xshkje = @"XSHKJE";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}

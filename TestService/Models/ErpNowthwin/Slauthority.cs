using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace OracleDataDomain
{
	/// <summary>
	/// Strongly-typed collection for the Slauthority class.
	/// </summary>
    [Serializable]
	public partial class SlauthorityCollection : ActiveList<Slauthority, SlauthorityCollection>
	{	   
		public SlauthorityCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>SlauthorityCollection</returns>
		public SlauthorityCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                Slauthority o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the SLAUTHORITY table.
	/// </summary>
	[Serializable]
	public partial class Slauthority : ActiveRecord<Slauthority>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public Slauthority()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public Slauthority(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public Slauthority(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public Slauthority(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("SLAUTHORITY", TableType.Table, DataService.GetInstance("ErpNowthwin"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"FYERP";
				//columns
				
				TableSchema.TableColumn colvarId = new TableSchema.TableColumn(schema);
				colvarId.ColumnName = "ID";
				colvarId.DataType = DbType.String;
				colvarId.MaxLength = 50;
				colvarId.AutoIncrement = false;
				colvarId.IsNullable = true;
				colvarId.IsPrimaryKey = false;
				colvarId.IsForeignKey = false;
				colvarId.IsReadOnly = false;
				colvarId.DefaultSetting = @"";
				colvarId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarId);
				
				TableSchema.TableColumn colvarUserid = new TableSchema.TableColumn(schema);
				colvarUserid.ColumnName = "USERID";
				colvarUserid.DataType = DbType.String;
				colvarUserid.MaxLength = 20;
				colvarUserid.AutoIncrement = false;
				colvarUserid.IsNullable = false;
				colvarUserid.IsPrimaryKey = true;
				colvarUserid.IsForeignKey = false;
				colvarUserid.IsReadOnly = false;
				colvarUserid.DefaultSetting = @"";
				colvarUserid.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUserid);
				
				TableSchema.TableColumn colvarVdll = new TableSchema.TableColumn(schema);
				colvarVdll.ColumnName = "VDLL";
				colvarVdll.DataType = DbType.String;
				colvarVdll.MaxLength = 20;
				colvarVdll.AutoIncrement = false;
				colvarVdll.IsNullable = false;
				colvarVdll.IsPrimaryKey = true;
				colvarVdll.IsForeignKey = false;
				colvarVdll.IsReadOnly = false;
				colvarVdll.DefaultSetting = @"";
				colvarVdll.ForeignKeyTableName = "";
				schema.Columns.Add(colvarVdll);
				
				TableSchema.TableColumn colvarVdspno = new TableSchema.TableColumn(schema);
				colvarVdspno.ColumnName = "VDSPNO";
				colvarVdspno.DataType = DbType.String;
				colvarVdspno.MaxLength = 20;
				colvarVdspno.AutoIncrement = false;
				colvarVdspno.IsNullable = false;
				colvarVdspno.IsPrimaryKey = true;
				colvarVdspno.IsForeignKey = false;
				colvarVdspno.IsReadOnly = false;
				colvarVdspno.DefaultSetting = @"";
				colvarVdspno.ForeignKeyTableName = "";
				schema.Columns.Add(colvarVdspno);
				
				TableSchema.TableColumn colvarIfdeleted = new TableSchema.TableColumn(schema);
				colvarIfdeleted.ColumnName = "IFDELETED";
				colvarIfdeleted.DataType = DbType.String;
				colvarIfdeleted.MaxLength = 1;
				colvarIfdeleted.AutoIncrement = false;
				colvarIfdeleted.IsNullable = true;
				colvarIfdeleted.IsPrimaryKey = false;
				colvarIfdeleted.IsForeignKey = false;
				colvarIfdeleted.IsReadOnly = false;
				colvarIfdeleted.DefaultSetting = @"";
				colvarIfdeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIfdeleted);
				
				TableSchema.TableColumn colvarCreatedate = new TableSchema.TableColumn(schema);
				colvarCreatedate.ColumnName = "CREATEDATE";
				colvarCreatedate.DataType = DbType.DateTime;
				colvarCreatedate.MaxLength = 0;
				colvarCreatedate.AutoIncrement = false;
				colvarCreatedate.IsNullable = true;
				colvarCreatedate.IsPrimaryKey = false;
				colvarCreatedate.IsForeignKey = false;
				colvarCreatedate.IsReadOnly = false;
				colvarCreatedate.DefaultSetting = @"";
				colvarCreatedate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedate);
				
				TableSchema.TableColumn colvarUpdatedate = new TableSchema.TableColumn(schema);
				colvarUpdatedate.ColumnName = "UPDATEDATE";
				colvarUpdatedate.DataType = DbType.DateTime;
				colvarUpdatedate.MaxLength = 0;
				colvarUpdatedate.AutoIncrement = false;
				colvarUpdatedate.IsNullable = true;
				colvarUpdatedate.IsPrimaryKey = false;
				colvarUpdatedate.IsForeignKey = false;
				colvarUpdatedate.IsReadOnly = false;
				colvarUpdatedate.DefaultSetting = @"";
				colvarUpdatedate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUpdatedate);
				
				TableSchema.TableColumn colvarUsername = new TableSchema.TableColumn(schema);
				colvarUsername.ColumnName = "USERNAME";
				colvarUsername.DataType = DbType.String;
				colvarUsername.MaxLength = 20;
				colvarUsername.AutoIncrement = false;
				colvarUsername.IsNullable = true;
				colvarUsername.IsPrimaryKey = false;
				colvarUsername.IsForeignKey = false;
				colvarUsername.IsReadOnly = false;
				colvarUsername.DefaultSetting = @"";
				colvarUsername.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUsername);
				
				TableSchema.TableColumn colvarCreateuser = new TableSchema.TableColumn(schema);
				colvarCreateuser.ColumnName = "CREATEUSER";
				colvarCreateuser.DataType = DbType.String;
				colvarCreateuser.MaxLength = 20;
				colvarCreateuser.AutoIncrement = false;
				colvarCreateuser.IsNullable = true;
				colvarCreateuser.IsPrimaryKey = false;
				colvarCreateuser.IsForeignKey = false;
				colvarCreateuser.IsReadOnly = false;
				colvarCreateuser.DefaultSetting = @"";
				colvarCreateuser.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreateuser);
				
				TableSchema.TableColumn colvarUpdateuser = new TableSchema.TableColumn(schema);
				colvarUpdateuser.ColumnName = "UPDATEUSER";
				colvarUpdateuser.DataType = DbType.String;
				colvarUpdateuser.MaxLength = 20;
				colvarUpdateuser.AutoIncrement = false;
				colvarUpdateuser.IsNullable = true;
				colvarUpdateuser.IsPrimaryKey = false;
				colvarUpdateuser.IsForeignKey = false;
				colvarUpdateuser.IsReadOnly = false;
				colvarUpdateuser.DefaultSetting = @"";
				colvarUpdateuser.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUpdateuser);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ErpNowthwin"].AddSchema("SLAUTHORITY",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Id")]
		[Bindable(true)]
		public string Id 
		{
			get { return GetColumnValue<string>(Columns.Id); }
			set { SetColumnValue(Columns.Id, value); }
		}
		  
		[XmlAttribute("Userid")]
		[Bindable(true)]
		public string Userid 
		{
			get { return GetColumnValue<string>(Columns.Userid); }
			set { SetColumnValue(Columns.Userid, value); }
		}
		  
		[XmlAttribute("Vdll")]
		[Bindable(true)]
		public string Vdll 
		{
			get { return GetColumnValue<string>(Columns.Vdll); }
			set { SetColumnValue(Columns.Vdll, value); }
		}
		  
		[XmlAttribute("Vdspno")]
		[Bindable(true)]
		public string Vdspno 
		{
			get { return GetColumnValue<string>(Columns.Vdspno); }
			set { SetColumnValue(Columns.Vdspno, value); }
		}
		  
		[XmlAttribute("Ifdeleted")]
		[Bindable(true)]
		public string Ifdeleted 
		{
			get { return GetColumnValue<string>(Columns.Ifdeleted); }
			set { SetColumnValue(Columns.Ifdeleted, value); }
		}
		  
		[XmlAttribute("Createdate")]
		[Bindable(true)]
		public DateTime? Createdate 
		{
			get { return GetColumnValue<DateTime?>(Columns.Createdate); }
			set { SetColumnValue(Columns.Createdate, value); }
		}
		  
		[XmlAttribute("Updatedate")]
		[Bindable(true)]
		public DateTime? Updatedate 
		{
			get { return GetColumnValue<DateTime?>(Columns.Updatedate); }
			set { SetColumnValue(Columns.Updatedate, value); }
		}
		  
		[XmlAttribute("Username")]
		[Bindable(true)]
		public string Username 
		{
			get { return GetColumnValue<string>(Columns.Username); }
			set { SetColumnValue(Columns.Username, value); }
		}
		  
		[XmlAttribute("Createuser")]
		[Bindable(true)]
		public string Createuser 
		{
			get { return GetColumnValue<string>(Columns.Createuser); }
			set { SetColumnValue(Columns.Createuser, value); }
		}
		  
		[XmlAttribute("Updateuser")]
		[Bindable(true)]
		public string Updateuser 
		{
			get { return GetColumnValue<string>(Columns.Updateuser); }
			set { SetColumnValue(Columns.Updateuser, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varId,string varUserid,string varVdll,string varVdspno,string varIfdeleted,DateTime? varCreatedate,DateTime? varUpdatedate,string varUsername,string varCreateuser,string varUpdateuser)
		{
			Slauthority item = new Slauthority();
			
			item.Id = varId;
			
			item.Userid = varUserid;
			
			item.Vdll = varVdll;
			
			item.Vdspno = varVdspno;
			
			item.Ifdeleted = varIfdeleted;
			
			item.Createdate = varCreatedate;
			
			item.Updatedate = varUpdatedate;
			
			item.Username = varUsername;
			
			item.Createuser = varCreateuser;
			
			item.Updateuser = varUpdateuser;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(string varId,string varUserid,string varVdll,string varVdspno,string varIfdeleted,DateTime? varCreatedate,DateTime? varUpdatedate,string varUsername,string varCreateuser,string varUpdateuser)
		{
			Slauthority item = new Slauthority();
			
				item.Id = varId;
			
				item.Userid = varUserid;
			
				item.Vdll = varVdll;
			
				item.Vdspno = varVdspno;
			
				item.Ifdeleted = varIfdeleted;
			
				item.Createdate = varCreatedate;
			
				item.Updatedate = varUpdatedate;
			
				item.Username = varUsername;
			
				item.Createuser = varCreateuser;
			
				item.Updateuser = varUpdateuser;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn IdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn UseridColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn VdllColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn VdspnoColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn IfdeletedColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn CreatedateColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn UpdatedateColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn UsernameColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn CreateuserColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn UpdateuserColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Id = @"ID";
			 public static string Userid = @"USERID";
			 public static string Vdll = @"VDLL";
			 public static string Vdspno = @"VDSPNO";
			 public static string Ifdeleted = @"IFDELETED";
			 public static string Createdate = @"CREATEDATE";
			 public static string Updatedate = @"UPDATEDATE";
			 public static string Username = @"USERNAME";
			 public static string Createuser = @"CREATEUSER";
			 public static string Updateuser = @"UPDATEUSER";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}

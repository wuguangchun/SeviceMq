using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace OracleDataDomain
{
	/// <summary>
	/// Strongly-typed collection for the UfCustomer class.
	/// </summary>
    [Serializable]
	public partial class UfCustomerCollection : ActiveList<UfCustomer, UfCustomerCollection>
	{	   
		public UfCustomerCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>UfCustomerCollection</returns>
		public UfCustomerCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                UfCustomer o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the UF_CUSTOMER table.
	/// </summary>
	[Serializable]
	public partial class UfCustomer : ActiveRecord<UfCustomer>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public UfCustomer()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public UfCustomer(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public UfCustomer(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public UfCustomer(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("UF_CUSTOMER", TableType.Table, DataService.GetInstance("ErpNowthwin"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"FYERP";
				//columns
				
				TableSchema.TableColumn colvarSTATUS2 = new TableSchema.TableColumn(schema);
				colvarSTATUS2.ColumnName = "STATUS2";
				colvarSTATUS2.DataType = DbType.Decimal;
				colvarSTATUS2.MaxLength = 0;
				colvarSTATUS2.AutoIncrement = false;
				colvarSTATUS2.IsNullable = true;
				colvarSTATUS2.IsPrimaryKey = false;
				colvarSTATUS2.IsForeignKey = false;
				colvarSTATUS2.IsReadOnly = false;
				colvarSTATUS2.DefaultSetting = @"";
				colvarSTATUS2.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSTATUS2);
				
				TableSchema.TableColumn colvarAutoid = new TableSchema.TableColumn(schema);
				colvarAutoid.ColumnName = "AUTOID";
				colvarAutoid.DataType = DbType.Decimal;
				colvarAutoid.MaxLength = 0;
				colvarAutoid.AutoIncrement = false;
				colvarAutoid.IsNullable = false;
				colvarAutoid.IsPrimaryKey = true;
				colvarAutoid.IsForeignKey = false;
				colvarAutoid.IsReadOnly = false;
				colvarAutoid.DefaultSetting = @"";
				colvarAutoid.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAutoid);
				
				TableSchema.TableColumn colvarCcuscode = new TableSchema.TableColumn(schema);
				colvarCcuscode.ColumnName = "CCUSCODE";
				colvarCcuscode.DataType = DbType.String;
				colvarCcuscode.MaxLength = 20;
				colvarCcuscode.AutoIncrement = false;
				colvarCcuscode.IsNullable = false;
				colvarCcuscode.IsPrimaryKey = false;
				colvarCcuscode.IsForeignKey = false;
				colvarCcuscode.IsReadOnly = false;
				colvarCcuscode.DefaultSetting = @"";
				colvarCcuscode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCcuscode);
				
				TableSchema.TableColumn colvarCcusabbname = new TableSchema.TableColumn(schema);
				colvarCcusabbname.ColumnName = "CCUSABBNAME";
				colvarCcusabbname.DataType = DbType.String;
				colvarCcusabbname.MaxLength = 60;
				colvarCcusabbname.AutoIncrement = false;
				colvarCcusabbname.IsNullable = false;
				colvarCcusabbname.IsPrimaryKey = false;
				colvarCcusabbname.IsForeignKey = false;
				colvarCcusabbname.IsReadOnly = false;
				colvarCcusabbname.DefaultSetting = @"";
				colvarCcusabbname.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCcusabbname);
				
				TableSchema.TableColumn colvarCcusname = new TableSchema.TableColumn(schema);
				colvarCcusname.ColumnName = "CCUSNAME";
				colvarCcusname.DataType = DbType.String;
				colvarCcusname.MaxLength = 120;
				colvarCcusname.AutoIncrement = false;
				colvarCcusname.IsNullable = true;
				colvarCcusname.IsPrimaryKey = false;
				colvarCcusname.IsForeignKey = false;
				colvarCcusname.IsReadOnly = false;
				colvarCcusname.DefaultSetting = @"";
				colvarCcusname.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCcusname);
				
				TableSchema.TableColumn colvarCcusccode = new TableSchema.TableColumn(schema);
				colvarCcusccode.ColumnName = "CCUSCCODE";
				colvarCcusccode.DataType = DbType.String;
				colvarCcusccode.MaxLength = 20;
				colvarCcusccode.AutoIncrement = false;
				colvarCcusccode.IsNullable = false;
				colvarCcusccode.IsPrimaryKey = false;
				colvarCcusccode.IsForeignKey = false;
				colvarCcusccode.IsReadOnly = false;
				colvarCcusccode.DefaultSetting = @"";
				colvarCcusccode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCcusccode);
				
				TableSchema.TableColumn colvarOptype = new TableSchema.TableColumn(schema);
				colvarOptype.ColumnName = "OPTYPE";
				colvarOptype.DataType = DbType.String;
				colvarOptype.MaxLength = 10;
				colvarOptype.AutoIncrement = false;
				colvarOptype.IsNullable = false;
				colvarOptype.IsPrimaryKey = false;
				colvarOptype.IsForeignKey = false;
				colvarOptype.IsReadOnly = false;
				colvarOptype.DefaultSetting = @"";
				colvarOptype.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOptype);
				
				TableSchema.TableColumn colvarCreatedate = new TableSchema.TableColumn(schema);
				colvarCreatedate.ColumnName = "CREATEDATE";
				colvarCreatedate.DataType = DbType.DateTime;
				colvarCreatedate.MaxLength = 0;
				colvarCreatedate.AutoIncrement = false;
				colvarCreatedate.IsNullable = false;
				colvarCreatedate.IsPrimaryKey = false;
				colvarCreatedate.IsForeignKey = false;
				colvarCreatedate.IsReadOnly = false;
				colvarCreatedate.DefaultSetting = @"";
				colvarCreatedate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedate);
				
				TableSchema.TableColumn colvarStatus = new TableSchema.TableColumn(schema);
				colvarStatus.ColumnName = "STATUS";
				colvarStatus.DataType = DbType.Decimal;
				colvarStatus.MaxLength = 0;
				colvarStatus.AutoIncrement = false;
				colvarStatus.IsNullable = false;
				colvarStatus.IsPrimaryKey = false;
				colvarStatus.IsForeignKey = false;
				colvarStatus.IsReadOnly = false;
				colvarStatus.DefaultSetting = @"";
				colvarStatus.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStatus);
				
				TableSchema.TableColumn colvarExedate = new TableSchema.TableColumn(schema);
				colvarExedate.ColumnName = "EXEDATE";
				colvarExedate.DataType = DbType.DateTime;
				colvarExedate.MaxLength = 0;
				colvarExedate.AutoIncrement = false;
				colvarExedate.IsNullable = true;
				colvarExedate.IsPrimaryKey = false;
				colvarExedate.IsForeignKey = false;
				colvarExedate.IsReadOnly = false;
				colvarExedate.DefaultSetting = @"";
				colvarExedate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarExedate);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ErpNowthwin"].AddSchema("UF_CUSTOMER",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("STATUS2")]
		[Bindable(true)]
		public decimal? STATUS2 
		{
			get { return GetColumnValue<decimal?>(Columns.STATUS2); }
			set { SetColumnValue(Columns.STATUS2, value); }
		}
		  
		[XmlAttribute("Autoid")]
		[Bindable(true)]
		public decimal Autoid 
		{
			get { return GetColumnValue<decimal>(Columns.Autoid); }
			set { SetColumnValue(Columns.Autoid, value); }
		}
		  
		[XmlAttribute("Ccuscode")]
		[Bindable(true)]
		public string Ccuscode 
		{
			get { return GetColumnValue<string>(Columns.Ccuscode); }
			set { SetColumnValue(Columns.Ccuscode, value); }
		}
		  
		[XmlAttribute("Ccusabbname")]
		[Bindable(true)]
		public string Ccusabbname 
		{
			get { return GetColumnValue<string>(Columns.Ccusabbname); }
			set { SetColumnValue(Columns.Ccusabbname, value); }
		}
		  
		[XmlAttribute("Ccusname")]
		[Bindable(true)]
		public string Ccusname 
		{
			get { return GetColumnValue<string>(Columns.Ccusname); }
			set { SetColumnValue(Columns.Ccusname, value); }
		}
		  
		[XmlAttribute("Ccusccode")]
		[Bindable(true)]
		public string Ccusccode 
		{
			get { return GetColumnValue<string>(Columns.Ccusccode); }
			set { SetColumnValue(Columns.Ccusccode, value); }
		}
		  
		[XmlAttribute("Optype")]
		[Bindable(true)]
		public string Optype 
		{
			get { return GetColumnValue<string>(Columns.Optype); }
			set { SetColumnValue(Columns.Optype, value); }
		}
		  
		[XmlAttribute("Createdate")]
		[Bindable(true)]
		public DateTime Createdate 
		{
			get { return GetColumnValue<DateTime>(Columns.Createdate); }
			set { SetColumnValue(Columns.Createdate, value); }
		}
		  
		[XmlAttribute("Status")]
		[Bindable(true)]
		public decimal Status 
		{
			get { return GetColumnValue<decimal>(Columns.Status); }
			set { SetColumnValue(Columns.Status, value); }
		}
		  
		[XmlAttribute("Exedate")]
		[Bindable(true)]
		public DateTime? Exedate 
		{
			get { return GetColumnValue<DateTime?>(Columns.Exedate); }
			set { SetColumnValue(Columns.Exedate, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(decimal? varSTATUS2,decimal varAutoid,string varCcuscode,string varCcusabbname,string varCcusname,string varCcusccode,string varOptype,DateTime varCreatedate,decimal varStatus,DateTime? varExedate)
		{
			UfCustomer item = new UfCustomer();
			
			item.STATUS2 = varSTATUS2;
			
			item.Autoid = varAutoid;
			
			item.Ccuscode = varCcuscode;
			
			item.Ccusabbname = varCcusabbname;
			
			item.Ccusname = varCcusname;
			
			item.Ccusccode = varCcusccode;
			
			item.Optype = varOptype;
			
			item.Createdate = varCreatedate;
			
			item.Status = varStatus;
			
			item.Exedate = varExedate;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(decimal? varSTATUS2,decimal varAutoid,string varCcuscode,string varCcusabbname,string varCcusname,string varCcusccode,string varOptype,DateTime varCreatedate,decimal varStatus,DateTime? varExedate)
		{
			UfCustomer item = new UfCustomer();
			
				item.STATUS2 = varSTATUS2;
			
				item.Autoid = varAutoid;
			
				item.Ccuscode = varCcuscode;
			
				item.Ccusabbname = varCcusabbname;
			
				item.Ccusname = varCcusname;
			
				item.Ccusccode = varCcusccode;
			
				item.Optype = varOptype;
			
				item.Createdate = varCreatedate;
			
				item.Status = varStatus;
			
				item.Exedate = varExedate;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn STATUS2Column
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn AutoidColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn CcuscodeColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn CcusabbnameColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn CcusnameColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn CcusccodeColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn OptypeColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn CreatedateColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn StatusColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn ExedateColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string STATUS2 = @"STATUS2";
			 public static string Autoid = @"AUTOID";
			 public static string Ccuscode = @"CCUSCODE";
			 public static string Ccusabbname = @"CCUSABBNAME";
			 public static string Ccusname = @"CCUSNAME";
			 public static string Ccusccode = @"CCUSCCODE";
			 public static string Optype = @"OPTYPE";
			 public static string Createdate = @"CREATEDATE";
			 public static string Status = @"STATUS";
			 public static string Exedate = @"EXEDATE";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}

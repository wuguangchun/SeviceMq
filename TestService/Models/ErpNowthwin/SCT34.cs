using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace OracleDataDomain
{
	/// <summary>
	/// Strongly-typed collection for the SCT34 class.
	/// </summary>
    [Serializable]
	public partial class SCT34Collection : ActiveList<SCT34, SCT34Collection>
	{	   
		public SCT34Collection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>SCT34Collection</returns>
		public SCT34Collection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                SCT34 o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the SCT34 table.
	/// </summary>
	[Serializable]
	public partial class SCT34 : ActiveRecord<SCT34>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public SCT34()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public SCT34(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public SCT34(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public SCT34(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("SCT34", TableType.Table, DataService.GetInstance("ErpNowthwin"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"FYERP";
				//columns
				
				TableSchema.TableColumn colvarSchtbh = new TableSchema.TableColumn(schema);
				colvarSchtbh.ColumnName = "SCHTBH";
				colvarSchtbh.DataType = DbType.String;
				colvarSchtbh.MaxLength = 12;
				colvarSchtbh.AutoIncrement = false;
				colvarSchtbh.IsNullable = false;
				colvarSchtbh.IsPrimaryKey = true;
				colvarSchtbh.IsForeignKey = false;
				colvarSchtbh.IsReadOnly = false;
				colvarSchtbh.DefaultSetting = @"";
				colvarSchtbh.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSchtbh);
				
				TableSchema.TableColumn colvarScglxh = new TableSchema.TableColumn(schema);
				colvarScglxh.ColumnName = "SCGLXH";
				colvarScglxh.DataType = DbType.Decimal;
				colvarScglxh.MaxLength = 0;
				colvarScglxh.AutoIncrement = false;
				colvarScglxh.IsNullable = false;
				colvarScglxh.IsPrimaryKey = true;
				colvarScglxh.IsForeignKey = false;
				colvarScglxh.IsReadOnly = false;
				colvarScglxh.DefaultSetting = @"";
				colvarScglxh.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScglxh);
				
				TableSchema.TableColumn colvarScclsm = new TableSchema.TableColumn(schema);
				colvarScclsm.ColumnName = "SCCLSM";
				colvarScclsm.DataType = DbType.String;
				colvarScclsm.MaxLength = 50;
				colvarScclsm.AutoIncrement = false;
				colvarScclsm.IsNullable = true;
				colvarScclsm.IsPrimaryKey = false;
				colvarScclsm.IsForeignKey = false;
				colvarScclsm.IsReadOnly = false;
				colvarScclsm.DefaultSetting = @"";
				colvarScclsm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScclsm);
				
				TableSchema.TableColumn colvarScclgg = new TableSchema.TableColumn(schema);
				colvarScclgg.ColumnName = "SCCLGG";
				colvarScclgg.DataType = DbType.String;
				colvarScclgg.MaxLength = 50;
				colvarScclgg.AutoIncrement = false;
				colvarScclgg.IsNullable = true;
				colvarScclgg.IsPrimaryKey = false;
				colvarScclgg.IsForeignKey = false;
				colvarScclgg.IsReadOnly = false;
				colvarScclgg.DefaultSetting = @"";
				colvarScclgg.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScclgg);
				
				TableSchema.TableColumn colvarScclcf = new TableSchema.TableColumn(schema);
				colvarScclcf.ColumnName = "SCCLCF";
				colvarScclcf.DataType = DbType.String;
				colvarScclcf.MaxLength = 50;
				colvarScclcf.AutoIncrement = false;
				colvarScclcf.IsNullable = true;
				colvarScclcf.IsPrimaryKey = false;
				colvarScclcf.IsForeignKey = false;
				colvarScclcf.IsReadOnly = false;
				colvarScclcf.DefaultSetting = @"";
				colvarScclcf.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScclcf);
				
				TableSchema.TableColumn colvarScclys = new TableSchema.TableColumn(schema);
				colvarScclys.ColumnName = "SCCLYS";
				colvarScclys.DataType = DbType.String;
				colvarScclys.MaxLength = 10;
				colvarScclys.AutoIncrement = false;
				colvarScclys.IsNullable = true;
				colvarScclys.IsPrimaryKey = false;
				colvarScclys.IsForeignKey = false;
				colvarScclys.IsReadOnly = false;
				colvarScclys.DefaultSetting = @"";
				colvarScclys.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScclys);
				
				TableSchema.TableColumn colvarXttxhm = new TableSchema.TableColumn(schema);
				colvarXttxhm.ColumnName = "XTTXHM";
				colvarXttxhm.DataType = DbType.String;
				colvarXttxhm.MaxLength = 20;
				colvarXttxhm.AutoIncrement = false;
				colvarXttxhm.IsNullable = true;
				colvarXttxhm.IsPrimaryKey = false;
				colvarXttxhm.IsForeignKey = false;
				colvarXttxhm.IsReadOnly = false;
				colvarXttxhm.DefaultSetting = @"";
				colvarXttxhm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXttxhm);
				
				TableSchema.TableColumn colvarScglsl = new TableSchema.TableColumn(schema);
				colvarScglsl.ColumnName = "SCGLSL";
				colvarScglsl.DataType = DbType.Decimal;
				colvarScglsl.MaxLength = 0;
				colvarScglsl.AutoIncrement = false;
				colvarScglsl.IsNullable = true;
				colvarScglsl.IsPrimaryKey = false;
				colvarScglsl.IsForeignKey = false;
				colvarScglsl.IsReadOnly = false;
				colvarScglsl.DefaultSetting = @"";
				colvarScglsl.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScglsl);
				
				TableSchema.TableColumn colvarScdhrq = new TableSchema.TableColumn(schema);
				colvarScdhrq.ColumnName = "SCDHRQ";
				colvarScdhrq.DataType = DbType.DateTime;
				colvarScdhrq.MaxLength = 0;
				colvarScdhrq.AutoIncrement = false;
				colvarScdhrq.IsNullable = true;
				colvarScdhrq.IsPrimaryKey = false;
				colvarScdhrq.IsForeignKey = false;
				colvarScdhrq.IsReadOnly = false;
				colvarScdhrq.DefaultSetting = @"";
				colvarScdhrq.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScdhrq);
				
				TableSchema.TableColumn colvarScglbz = new TableSchema.TableColumn(schema);
				colvarScglbz.ColumnName = "SCGLBZ";
				colvarScglbz.DataType = DbType.String;
				colvarScglbz.MaxLength = 255;
				colvarScglbz.AutoIncrement = false;
				colvarScglbz.IsNullable = true;
				colvarScglbz.IsPrimaryKey = false;
				colvarScglbz.IsForeignKey = false;
				colvarScglbz.IsReadOnly = false;
				colvarScglbz.DefaultSetting = @"";
				colvarScglbz.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScglbz);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ErpNowthwin"].AddSchema("SCT34",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Schtbh")]
		[Bindable(true)]
		public string Schtbh 
		{
			get { return GetColumnValue<string>(Columns.Schtbh); }
			set { SetColumnValue(Columns.Schtbh, value); }
		}
		  
		[XmlAttribute("Scglxh")]
		[Bindable(true)]
		public decimal Scglxh 
		{
			get { return GetColumnValue<decimal>(Columns.Scglxh); }
			set { SetColumnValue(Columns.Scglxh, value); }
		}
		  
		[XmlAttribute("Scclsm")]
		[Bindable(true)]
		public string Scclsm 
		{
			get { return GetColumnValue<string>(Columns.Scclsm); }
			set { SetColumnValue(Columns.Scclsm, value); }
		}
		  
		[XmlAttribute("Scclgg")]
		[Bindable(true)]
		public string Scclgg 
		{
			get { return GetColumnValue<string>(Columns.Scclgg); }
			set { SetColumnValue(Columns.Scclgg, value); }
		}
		  
		[XmlAttribute("Scclcf")]
		[Bindable(true)]
		public string Scclcf 
		{
			get { return GetColumnValue<string>(Columns.Scclcf); }
			set { SetColumnValue(Columns.Scclcf, value); }
		}
		  
		[XmlAttribute("Scclys")]
		[Bindable(true)]
		public string Scclys 
		{
			get { return GetColumnValue<string>(Columns.Scclys); }
			set { SetColumnValue(Columns.Scclys, value); }
		}
		  
		[XmlAttribute("Xttxhm")]
		[Bindable(true)]
		public string Xttxhm 
		{
			get { return GetColumnValue<string>(Columns.Xttxhm); }
			set { SetColumnValue(Columns.Xttxhm, value); }
		}
		  
		[XmlAttribute("Scglsl")]
		[Bindable(true)]
		public decimal? Scglsl 
		{
			get { return GetColumnValue<decimal?>(Columns.Scglsl); }
			set { SetColumnValue(Columns.Scglsl, value); }
		}
		  
		[XmlAttribute("Scdhrq")]
		[Bindable(true)]
		public DateTime? Scdhrq 
		{
			get { return GetColumnValue<DateTime?>(Columns.Scdhrq); }
			set { SetColumnValue(Columns.Scdhrq, value); }
		}
		  
		[XmlAttribute("Scglbz")]
		[Bindable(true)]
		public string Scglbz 
		{
			get { return GetColumnValue<string>(Columns.Scglbz); }
			set { SetColumnValue(Columns.Scglbz, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varSchtbh,decimal varScglxh,string varScclsm,string varScclgg,string varScclcf,string varScclys,string varXttxhm,decimal? varScglsl,DateTime? varScdhrq,string varScglbz)
		{
			SCT34 item = new SCT34();
			
			item.Schtbh = varSchtbh;
			
			item.Scglxh = varScglxh;
			
			item.Scclsm = varScclsm;
			
			item.Scclgg = varScclgg;
			
			item.Scclcf = varScclcf;
			
			item.Scclys = varScclys;
			
			item.Xttxhm = varXttxhm;
			
			item.Scglsl = varScglsl;
			
			item.Scdhrq = varScdhrq;
			
			item.Scglbz = varScglbz;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(string varSchtbh,decimal varScglxh,string varScclsm,string varScclgg,string varScclcf,string varScclys,string varXttxhm,decimal? varScglsl,DateTime? varScdhrq,string varScglbz)
		{
			SCT34 item = new SCT34();
			
				item.Schtbh = varSchtbh;
			
				item.Scglxh = varScglxh;
			
				item.Scclsm = varScclsm;
			
				item.Scclgg = varScclgg;
			
				item.Scclcf = varScclcf;
			
				item.Scclys = varScclys;
			
				item.Xttxhm = varXttxhm;
			
				item.Scglsl = varScglsl;
			
				item.Scdhrq = varScdhrq;
			
				item.Scglbz = varScglbz;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn SchtbhColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn ScglxhColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn ScclsmColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn ScclggColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn ScclcfColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn ScclysColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn XttxhmColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn ScglslColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn ScdhrqColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn ScglbzColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Schtbh = @"SCHTBH";
			 public static string Scglxh = @"SCGLXH";
			 public static string Scclsm = @"SCCLSM";
			 public static string Scclgg = @"SCCLGG";
			 public static string Scclcf = @"SCCLCF";
			 public static string Scclys = @"SCCLYS";
			 public static string Xttxhm = @"XTTXHM";
			 public static string Scglsl = @"SCGLSL";
			 public static string Scdhrq = @"SCDHRQ";
			 public static string Scglbz = @"SCGLBZ";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}

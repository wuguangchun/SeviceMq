using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace OracleDataDomain
{
	/// <summary>
	/// Strongly-typed collection for the SCT29 class.
	/// </summary>
    [Serializable]
	public partial class SCT29Collection : ActiveList<SCT29, SCT29Collection>
	{	   
		public SCT29Collection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>SCT29Collection</returns>
		public SCT29Collection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                SCT29 o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the SCT29 table.
	/// </summary>
	[Serializable]
	public partial class SCT29 : ActiveRecord<SCT29>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public SCT29()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public SCT29(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public SCT29(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public SCT29(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("SCT29", TableType.Table, DataService.GetInstance("ErpNowthwin"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"FYERP";
				//columns
				
				TableSchema.TableColumn colvarSclldh = new TableSchema.TableColumn(schema);
				colvarSclldh.ColumnName = "SCLLDH";
				colvarSclldh.DataType = DbType.String;
				colvarSclldh.MaxLength = 12;
				colvarSclldh.AutoIncrement = false;
				colvarSclldh.IsNullable = false;
				colvarSclldh.IsPrimaryKey = true;
				colvarSclldh.IsForeignKey = false;
				colvarSclldh.IsReadOnly = false;
				colvarSclldh.DefaultSetting = @"";
				colvarSclldh.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSclldh);
				
				TableSchema.TableColumn colvarSczsbh = new TableSchema.TableColumn(schema);
				colvarSczsbh.ColumnName = "SCZSBH";
				colvarSczsbh.DataType = DbType.String;
				colvarSczsbh.MaxLength = 12;
				colvarSczsbh.AutoIncrement = false;
				colvarSczsbh.IsNullable = true;
				colvarSczsbh.IsPrimaryKey = false;
				colvarSczsbh.IsForeignKey = false;
				colvarSczsbh.IsReadOnly = false;
				colvarSczsbh.DefaultSetting = @"";
				colvarSczsbh.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSczsbh);
				
				TableSchema.TableColumn colvarSccjdm = new TableSchema.TableColumn(schema);
				colvarSccjdm.ColumnName = "SCCJDM";
				colvarSccjdm.DataType = DbType.String;
				colvarSccjdm.MaxLength = 8;
				colvarSccjdm.AutoIncrement = false;
				colvarSccjdm.IsNullable = true;
				colvarSccjdm.IsPrimaryKey = false;
				colvarSccjdm.IsForeignKey = false;
				colvarSccjdm.IsReadOnly = false;
				colvarSccjdm.DefaultSetting = @"";
				colvarSccjdm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSccjdm);
				
				TableSchema.TableColumn colvarKcckdm = new TableSchema.TableColumn(schema);
				colvarKcckdm.ColumnName = "KCCKDM";
				colvarKcckdm.DataType = DbType.String;
				colvarKcckdm.MaxLength = 8;
				colvarKcckdm.AutoIncrement = false;
				colvarKcckdm.IsNullable = true;
				colvarKcckdm.IsPrimaryKey = false;
				colvarKcckdm.IsForeignKey = false;
				colvarKcckdm.IsReadOnly = false;
				colvarKcckdm.DefaultSetting = @"";
				colvarKcckdm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarKcckdm);
				
				TableSchema.TableColumn colvarScllry = new TableSchema.TableColumn(schema);
				colvarScllry.ColumnName = "SCLLRY";
				colvarScllry.DataType = DbType.String;
				colvarScllry.MaxLength = 10;
				colvarScllry.AutoIncrement = false;
				colvarScllry.IsNullable = true;
				colvarScllry.IsPrimaryKey = false;
				colvarScllry.IsForeignKey = false;
				colvarScllry.IsReadOnly = false;
				colvarScllry.DefaultSetting = @"";
				colvarScllry.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScllry);
				
				TableSchema.TableColumn colvarScllrq = new TableSchema.TableColumn(schema);
				colvarScllrq.ColumnName = "SCLLRQ";
				colvarScllrq.DataType = DbType.DateTime;
				colvarScllrq.MaxLength = 0;
				colvarScllrq.AutoIncrement = false;
				colvarScllrq.IsNullable = true;
				colvarScllrq.IsPrimaryKey = false;
				colvarScllrq.IsForeignKey = false;
				colvarScllrq.IsReadOnly = false;
				colvarScllrq.DefaultSetting = @"";
				colvarScllrq.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScllrq);
				
				TableSchema.TableColumn colvarSclrry = new TableSchema.TableColumn(schema);
				colvarSclrry.ColumnName = "SCLRRY";
				colvarSclrry.DataType = DbType.String;
				colvarSclrry.MaxLength = 10;
				colvarSclrry.AutoIncrement = false;
				colvarSclrry.IsNullable = true;
				colvarSclrry.IsPrimaryKey = false;
				colvarSclrry.IsForeignKey = false;
				colvarSclrry.IsReadOnly = false;
				colvarSclrry.DefaultSetting = @"";
				colvarSclrry.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSclrry);
				
				TableSchema.TableColumn colvarSclrrq = new TableSchema.TableColumn(schema);
				colvarSclrrq.ColumnName = "SCLRRQ";
				colvarSclrrq.DataType = DbType.DateTime;
				colvarSclrrq.MaxLength = 0;
				colvarSclrrq.AutoIncrement = false;
				colvarSclrrq.IsNullable = true;
				colvarSclrrq.IsPrimaryKey = false;
				colvarSclrrq.IsForeignKey = false;
				colvarSclrrq.IsReadOnly = false;
				colvarSclrrq.DefaultSetting = @"";
				colvarSclrrq.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSclrrq);
				
				TableSchema.TableColumn colvarScshry = new TableSchema.TableColumn(schema);
				colvarScshry.ColumnName = "SCSHRY";
				colvarScshry.DataType = DbType.String;
				colvarScshry.MaxLength = 10;
				colvarScshry.AutoIncrement = false;
				colvarScshry.IsNullable = true;
				colvarScshry.IsPrimaryKey = false;
				colvarScshry.IsForeignKey = false;
				colvarScshry.IsReadOnly = false;
				colvarScshry.DefaultSetting = @"";
				colvarScshry.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScshry);
				
				TableSchema.TableColumn colvarScshrq = new TableSchema.TableColumn(schema);
				colvarScshrq.ColumnName = "SCSHRQ";
				colvarScshrq.DataType = DbType.DateTime;
				colvarScshrq.MaxLength = 0;
				colvarScshrq.AutoIncrement = false;
				colvarScshrq.IsNullable = true;
				colvarScshrq.IsPrimaryKey = false;
				colvarScshrq.IsForeignKey = false;
				colvarScshrq.IsReadOnly = false;
				colvarScshrq.DefaultSetting = @"";
				colvarScshrq.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScshrq);
				
				TableSchema.TableColumn colvarScllbz = new TableSchema.TableColumn(schema);
				colvarScllbz.ColumnName = "SCLLBZ";
				colvarScllbz.DataType = DbType.String;
				colvarScllbz.MaxLength = 200;
				colvarScllbz.AutoIncrement = false;
				colvarScllbz.IsNullable = true;
				colvarScllbz.IsPrimaryKey = false;
				colvarScllbz.IsForeignKey = false;
				colvarScllbz.IsReadOnly = false;
				colvarScllbz.DefaultSetting = @"";
				colvarScllbz.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScllbz);
				
				TableSchema.TableColumn colvarScblbz = new TableSchema.TableColumn(schema);
				colvarScblbz.ColumnName = "SCBLBZ";
				colvarScblbz.DataType = DbType.String;
				colvarScblbz.MaxLength = 1;
				colvarScblbz.AutoIncrement = false;
				colvarScblbz.IsNullable = true;
				colvarScblbz.IsPrimaryKey = false;
				colvarScblbz.IsForeignKey = false;
				colvarScblbz.IsReadOnly = false;
				colvarScblbz.DefaultSetting = @"";
				colvarScblbz.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScblbz);
				
				TableSchema.TableColumn colvarScllzt = new TableSchema.TableColumn(schema);
				colvarScllzt.ColumnName = "SCLLZT";
				colvarScllzt.DataType = DbType.String;
				colvarScllzt.MaxLength = 1;
				colvarScllzt.AutoIncrement = false;
				colvarScllzt.IsNullable = true;
				colvarScllzt.IsPrimaryKey = false;
				colvarScllzt.IsForeignKey = false;
				colvarScllzt.IsReadOnly = false;
				colvarScllzt.DefaultSetting = @"";
				colvarScllzt.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScllzt);
				
				TableSchema.TableColumn colvarScfddm = new TableSchema.TableColumn(schema);
				colvarScfddm.ColumnName = "SCFDDM";
				colvarScfddm.DataType = DbType.String;
				colvarScfddm.MaxLength = 10;
				colvarScfddm.AutoIncrement = false;
				colvarScfddm.IsNullable = true;
				colvarScfddm.IsPrimaryKey = false;
				colvarScfddm.IsForeignKey = false;
				colvarScfddm.IsReadOnly = false;
				colvarScfddm.DefaultSetting = @"";
				colvarScfddm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScfddm);
				
				TableSchema.TableColumn colvarScgcdm = new TableSchema.TableColumn(schema);
				colvarScgcdm.ColumnName = "SCGCDM";
				colvarScgcdm.DataType = DbType.String;
				colvarScgcdm.MaxLength = 8;
				colvarScgcdm.AutoIncrement = false;
				colvarScgcdm.IsNullable = true;
				colvarScgcdm.IsPrimaryKey = false;
				colvarScgcdm.IsForeignKey = false;
				colvarScgcdm.IsReadOnly = false;
				colvarScgcdm.DefaultSetting = @"";
				colvarScgcdm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScgcdm);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ErpNowthwin"].AddSchema("SCT29",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Sclldh")]
		[Bindable(true)]
		public string Sclldh 
		{
			get { return GetColumnValue<string>(Columns.Sclldh); }
			set { SetColumnValue(Columns.Sclldh, value); }
		}
		  
		[XmlAttribute("Sczsbh")]
		[Bindable(true)]
		public string Sczsbh 
		{
			get { return GetColumnValue<string>(Columns.Sczsbh); }
			set { SetColumnValue(Columns.Sczsbh, value); }
		}
		  
		[XmlAttribute("Sccjdm")]
		[Bindable(true)]
		public string Sccjdm 
		{
			get { return GetColumnValue<string>(Columns.Sccjdm); }
			set { SetColumnValue(Columns.Sccjdm, value); }
		}
		  
		[XmlAttribute("Kcckdm")]
		[Bindable(true)]
		public string Kcckdm 
		{
			get { return GetColumnValue<string>(Columns.Kcckdm); }
			set { SetColumnValue(Columns.Kcckdm, value); }
		}
		  
		[XmlAttribute("Scllry")]
		[Bindable(true)]
		public string Scllry 
		{
			get { return GetColumnValue<string>(Columns.Scllry); }
			set { SetColumnValue(Columns.Scllry, value); }
		}
		  
		[XmlAttribute("Scllrq")]
		[Bindable(true)]
		public DateTime? Scllrq 
		{
			get { return GetColumnValue<DateTime?>(Columns.Scllrq); }
			set { SetColumnValue(Columns.Scllrq, value); }
		}
		  
		[XmlAttribute("Sclrry")]
		[Bindable(true)]
		public string Sclrry 
		{
			get { return GetColumnValue<string>(Columns.Sclrry); }
			set { SetColumnValue(Columns.Sclrry, value); }
		}
		  
		[XmlAttribute("Sclrrq")]
		[Bindable(true)]
		public DateTime? Sclrrq 
		{
			get { return GetColumnValue<DateTime?>(Columns.Sclrrq); }
			set { SetColumnValue(Columns.Sclrrq, value); }
		}
		  
		[XmlAttribute("Scshry")]
		[Bindable(true)]
		public string Scshry 
		{
			get { return GetColumnValue<string>(Columns.Scshry); }
			set { SetColumnValue(Columns.Scshry, value); }
		}
		  
		[XmlAttribute("Scshrq")]
		[Bindable(true)]
		public DateTime? Scshrq 
		{
			get { return GetColumnValue<DateTime?>(Columns.Scshrq); }
			set { SetColumnValue(Columns.Scshrq, value); }
		}
		  
		[XmlAttribute("Scllbz")]
		[Bindable(true)]
		public string Scllbz 
		{
			get { return GetColumnValue<string>(Columns.Scllbz); }
			set { SetColumnValue(Columns.Scllbz, value); }
		}
		  
		[XmlAttribute("Scblbz")]
		[Bindable(true)]
		public string Scblbz 
		{
			get { return GetColumnValue<string>(Columns.Scblbz); }
			set { SetColumnValue(Columns.Scblbz, value); }
		}
		  
		[XmlAttribute("Scllzt")]
		[Bindable(true)]
		public string Scllzt 
		{
			get { return GetColumnValue<string>(Columns.Scllzt); }
			set { SetColumnValue(Columns.Scllzt, value); }
		}
		  
		[XmlAttribute("Scfddm")]
		[Bindable(true)]
		public string Scfddm 
		{
			get { return GetColumnValue<string>(Columns.Scfddm); }
			set { SetColumnValue(Columns.Scfddm, value); }
		}
		  
		[XmlAttribute("Scgcdm")]
		[Bindable(true)]
		public string Scgcdm 
		{
			get { return GetColumnValue<string>(Columns.Scgcdm); }
			set { SetColumnValue(Columns.Scgcdm, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varSclldh,string varSczsbh,string varSccjdm,string varKcckdm,string varScllry,DateTime? varScllrq,string varSclrry,DateTime? varSclrrq,string varScshry,DateTime? varScshrq,string varScllbz,string varScblbz,string varScllzt,string varScfddm,string varScgcdm)
		{
			SCT29 item = new SCT29();
			
			item.Sclldh = varSclldh;
			
			item.Sczsbh = varSczsbh;
			
			item.Sccjdm = varSccjdm;
			
			item.Kcckdm = varKcckdm;
			
			item.Scllry = varScllry;
			
			item.Scllrq = varScllrq;
			
			item.Sclrry = varSclrry;
			
			item.Sclrrq = varSclrrq;
			
			item.Scshry = varScshry;
			
			item.Scshrq = varScshrq;
			
			item.Scllbz = varScllbz;
			
			item.Scblbz = varScblbz;
			
			item.Scllzt = varScllzt;
			
			item.Scfddm = varScfddm;
			
			item.Scgcdm = varScgcdm;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(string varSclldh,string varSczsbh,string varSccjdm,string varKcckdm,string varScllry,DateTime? varScllrq,string varSclrry,DateTime? varSclrrq,string varScshry,DateTime? varScshrq,string varScllbz,string varScblbz,string varScllzt,string varScfddm,string varScgcdm)
		{
			SCT29 item = new SCT29();
			
				item.Sclldh = varSclldh;
			
				item.Sczsbh = varSczsbh;
			
				item.Sccjdm = varSccjdm;
			
				item.Kcckdm = varKcckdm;
			
				item.Scllry = varScllry;
			
				item.Scllrq = varScllrq;
			
				item.Sclrry = varSclrry;
			
				item.Sclrrq = varSclrrq;
			
				item.Scshry = varScshry;
			
				item.Scshrq = varScshrq;
			
				item.Scllbz = varScllbz;
			
				item.Scblbz = varScblbz;
			
				item.Scllzt = varScllzt;
			
				item.Scfddm = varScfddm;
			
				item.Scgcdm = varScgcdm;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn SclldhColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn SczsbhColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn SccjdmColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn KcckdmColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn ScllryColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn ScllrqColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn SclrryColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn SclrrqColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn ScshryColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn ScshrqColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn ScllbzColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn ScblbzColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn ScllztColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        public static TableSchema.TableColumn ScfddmColumn
        {
            get { return Schema.Columns[13]; }
        }
        
        
        
        public static TableSchema.TableColumn ScgcdmColumn
        {
            get { return Schema.Columns[14]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Sclldh = @"SCLLDH";
			 public static string Sczsbh = @"SCZSBH";
			 public static string Sccjdm = @"SCCJDM";
			 public static string Kcckdm = @"KCCKDM";
			 public static string Scllry = @"SCLLRY";
			 public static string Scllrq = @"SCLLRQ";
			 public static string Sclrry = @"SCLRRY";
			 public static string Sclrrq = @"SCLRRQ";
			 public static string Scshry = @"SCSHRY";
			 public static string Scshrq = @"SCSHRQ";
			 public static string Scllbz = @"SCLLBZ";
			 public static string Scblbz = @"SCBLBZ";
			 public static string Scllzt = @"SCLLZT";
			 public static string Scfddm = @"SCFDDM";
			 public static string Scgcdm = @"SCGCDM";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}

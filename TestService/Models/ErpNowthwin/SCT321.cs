using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace OracleDataDomain
{
	/// <summary>
	/// Strongly-typed collection for the SCT321 class.
	/// </summary>
    [Serializable]
	public partial class SCT321Collection : ActiveList<SCT321, SCT321Collection>
	{	   
		public SCT321Collection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>SCT321Collection</returns>
		public SCT321Collection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                SCT321 o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the SCT321 table.
	/// </summary>
	[Serializable]
	public partial class SCT321 : ActiveRecord<SCT321>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public SCT321()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public SCT321(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public SCT321(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public SCT321(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("SCT321", TableType.Table, DataService.GetInstance("ErpNowthwin"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"FYERP";
				//columns
				
				TableSchema.TableColumn colvarSchtbh = new TableSchema.TableColumn(schema);
				colvarSchtbh.ColumnName = "SCHTBH";
				colvarSchtbh.DataType = DbType.String;
				colvarSchtbh.MaxLength = 12;
				colvarSchtbh.AutoIncrement = false;
				colvarSchtbh.IsNullable = false;
				colvarSchtbh.IsPrimaryKey = true;
				colvarSchtbh.IsForeignKey = false;
				colvarSchtbh.IsReadOnly = false;
				colvarSchtbh.DefaultSetting = @"";
				colvarSchtbh.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSchtbh);
				
				TableSchema.TableColumn colvarSchtxh = new TableSchema.TableColumn(schema);
				colvarSchtxh.ColumnName = "SCHTXH";
				colvarSchtxh.DataType = DbType.Decimal;
				colvarSchtxh.MaxLength = 0;
				colvarSchtxh.AutoIncrement = false;
				colvarSchtxh.IsNullable = false;
				colvarSchtxh.IsPrimaryKey = true;
				colvarSchtxh.IsForeignKey = false;
				colvarSchtxh.IsReadOnly = false;
				colvarSchtxh.DefaultSetting = @"";
				colvarSchtxh.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSchtxh);
				
				TableSchema.TableColumn colvarXtlbdm = new TableSchema.TableColumn(schema);
				colvarXtlbdm.ColumnName = "XTLBDM";
				colvarXtlbdm.DataType = DbType.String;
				colvarXtlbdm.MaxLength = 2;
				colvarXtlbdm.AutoIncrement = false;
				colvarXtlbdm.IsNullable = false;
				colvarXtlbdm.IsPrimaryKey = true;
				colvarXtlbdm.IsForeignKey = false;
				colvarXtlbdm.IsReadOnly = false;
				colvarXtlbdm.DefaultSetting = @"";
				colvarXtlbdm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXtlbdm);
				
				TableSchema.TableColumn colvarXtlxdm = new TableSchema.TableColumn(schema);
				colvarXtlxdm.ColumnName = "XTLXDM";
				colvarXtlxdm.DataType = DbType.String;
				colvarXtlxdm.MaxLength = 4;
				colvarXtlxdm.AutoIncrement = false;
				colvarXtlxdm.IsNullable = false;
				colvarXtlxdm.IsPrimaryKey = true;
				colvarXtlxdm.IsForeignKey = false;
				colvarXtlxdm.IsReadOnly = false;
				colvarXtlxdm.DefaultSetting = @"";
				colvarXtlxdm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXtlxdm);
				
				TableSchema.TableColumn colvarXtxdxh = new TableSchema.TableColumn(schema);
				colvarXtxdxh.ColumnName = "XTXDXH";
				colvarXtxdxh.DataType = DbType.Decimal;
				colvarXtxdxh.MaxLength = 0;
				colvarXtxdxh.AutoIncrement = false;
				colvarXtxdxh.IsNullable = false;
				colvarXtxdxh.IsPrimaryKey = true;
				colvarXtxdxh.IsForeignKey = false;
				colvarXtxdxh.IsReadOnly = false;
				colvarXtxdxh.DefaultSetting = @"";
				colvarXtxdxh.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXtxdxh);
				
				TableSchema.TableColumn colvarXtxmdm = new TableSchema.TableColumn(schema);
				colvarXtxmdm.ColumnName = "XTXMDM";
				colvarXtxmdm.DataType = DbType.String;
				colvarXtxmdm.MaxLength = 6;
				colvarXtxmdm.AutoIncrement = false;
				colvarXtxmdm.IsNullable = true;
				colvarXtxmdm.IsPrimaryKey = false;
				colvarXtxmdm.IsForeignKey = false;
				colvarXtxmdm.IsReadOnly = false;
				colvarXtxmdm.DefaultSetting = @"";
				colvarXtxmdm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXtxmdm);
				
				TableSchema.TableColumn colvarXtxdnr = new TableSchema.TableColumn(schema);
				colvarXtxdnr.ColumnName = "XTXDNR";
				colvarXtxdnr.DataType = DbType.String;
				colvarXtxdnr.MaxLength = 100;
				colvarXtxdnr.AutoIncrement = false;
				colvarXtxdnr.IsNullable = true;
				colvarXtxdnr.IsPrimaryKey = false;
				colvarXtxdnr.IsForeignKey = false;
				colvarXtxdnr.IsReadOnly = false;
				colvarXtxdnr.DefaultSetting = @"";
				colvarXtxdnr.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXtxdnr);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ErpNowthwin"].AddSchema("SCT321",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Schtbh")]
		[Bindable(true)]
		public string Schtbh 
		{
			get { return GetColumnValue<string>(Columns.Schtbh); }
			set { SetColumnValue(Columns.Schtbh, value); }
		}
		  
		[XmlAttribute("Schtxh")]
		[Bindable(true)]
		public decimal Schtxh 
		{
			get { return GetColumnValue<decimal>(Columns.Schtxh); }
			set { SetColumnValue(Columns.Schtxh, value); }
		}
		  
		[XmlAttribute("Xtlbdm")]
		[Bindable(true)]
		public string Xtlbdm 
		{
			get { return GetColumnValue<string>(Columns.Xtlbdm); }
			set { SetColumnValue(Columns.Xtlbdm, value); }
		}
		  
		[XmlAttribute("Xtlxdm")]
		[Bindable(true)]
		public string Xtlxdm 
		{
			get { return GetColumnValue<string>(Columns.Xtlxdm); }
			set { SetColumnValue(Columns.Xtlxdm, value); }
		}
		  
		[XmlAttribute("Xtxdxh")]
		[Bindable(true)]
		public decimal Xtxdxh 
		{
			get { return GetColumnValue<decimal>(Columns.Xtxdxh); }
			set { SetColumnValue(Columns.Xtxdxh, value); }
		}
		  
		[XmlAttribute("Xtxmdm")]
		[Bindable(true)]
		public string Xtxmdm 
		{
			get { return GetColumnValue<string>(Columns.Xtxmdm); }
			set { SetColumnValue(Columns.Xtxmdm, value); }
		}
		  
		[XmlAttribute("Xtxdnr")]
		[Bindable(true)]
		public string Xtxdnr 
		{
			get { return GetColumnValue<string>(Columns.Xtxdnr); }
			set { SetColumnValue(Columns.Xtxdnr, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varSchtbh,decimal varSchtxh,string varXtlbdm,string varXtlxdm,decimal varXtxdxh,string varXtxmdm,string varXtxdnr)
		{
			SCT321 item = new SCT321();
			
			item.Schtbh = varSchtbh;
			
			item.Schtxh = varSchtxh;
			
			item.Xtlbdm = varXtlbdm;
			
			item.Xtlxdm = varXtlxdm;
			
			item.Xtxdxh = varXtxdxh;
			
			item.Xtxmdm = varXtxmdm;
			
			item.Xtxdnr = varXtxdnr;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(string varSchtbh,decimal varSchtxh,string varXtlbdm,string varXtlxdm,decimal varXtxdxh,string varXtxmdm,string varXtxdnr)
		{
			SCT321 item = new SCT321();
			
				item.Schtbh = varSchtbh;
			
				item.Schtxh = varSchtxh;
			
				item.Xtlbdm = varXtlbdm;
			
				item.Xtlxdm = varXtlxdm;
			
				item.Xtxdxh = varXtxdxh;
			
				item.Xtxmdm = varXtxmdm;
			
				item.Xtxdnr = varXtxdnr;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn SchtbhColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn SchtxhColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn XtlbdmColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn XtlxdmColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn XtxdxhColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn XtxmdmColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn XtxdnrColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Schtbh = @"SCHTBH";
			 public static string Schtxh = @"SCHTXH";
			 public static string Xtlbdm = @"XTLBDM";
			 public static string Xtlxdm = @"XTLXDM";
			 public static string Xtxdxh = @"XTXDXH";
			 public static string Xtxmdm = @"XTXMDM";
			 public static string Xtxdnr = @"XTXDNR";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}

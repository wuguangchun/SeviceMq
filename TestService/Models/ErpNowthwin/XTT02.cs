using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace OracleDataDomain
{
	/// <summary>
	/// Strongly-typed collection for the XTT02 class.
	/// </summary>
    [Serializable]
	public partial class XTT02Collection : ActiveList<XTT02, XTT02Collection>
	{	   
		public XTT02Collection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>XTT02Collection</returns>
		public XTT02Collection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                XTT02 o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the XTT02 table.
	/// </summary>
	[Serializable]
	public partial class XTT02 : ActiveRecord<XTT02>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public XTT02()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public XTT02(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public XTT02(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public XTT02(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("XTT02", TableType.Table, DataService.GetInstance("ErpNowthwin"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"FYERP";
				//columns
				
				TableSchema.TableColumn colvarXtzthm = new TableSchema.TableColumn(schema);
				colvarXtzthm.ColumnName = "XTZTHM";
				colvarXtzthm.DataType = DbType.String;
				colvarXtzthm.MaxLength = 1;
				colvarXtzthm.AutoIncrement = false;
				colvarXtzthm.IsNullable = false;
				colvarXtzthm.IsPrimaryKey = true;
				colvarXtzthm.IsForeignKey = false;
				colvarXtzthm.IsReadOnly = false;
				colvarXtzthm.DefaultSetting = @"";
				colvarXtzthm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXtzthm);
				
				TableSchema.TableColumn colvarCgkjnd = new TableSchema.TableColumn(schema);
				colvarCgkjnd.ColumnName = "CGKJND";
				colvarCgkjnd.DataType = DbType.Decimal;
				colvarCgkjnd.MaxLength = 0;
				colvarCgkjnd.AutoIncrement = false;
				colvarCgkjnd.IsNullable = true;
				colvarCgkjnd.IsPrimaryKey = false;
				colvarCgkjnd.IsForeignKey = false;
				colvarCgkjnd.IsReadOnly = false;
				colvarCgkjnd.DefaultSetting = @"";
				colvarCgkjnd.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCgkjnd);
				
				TableSchema.TableColumn colvarCgkjyf = new TableSchema.TableColumn(schema);
				colvarCgkjyf.ColumnName = "CGKJYF";
				colvarCgkjyf.DataType = DbType.Decimal;
				colvarCgkjyf.MaxLength = 0;
				colvarCgkjyf.AutoIncrement = false;
				colvarCgkjyf.IsNullable = true;
				colvarCgkjyf.IsPrimaryKey = false;
				colvarCgkjyf.IsForeignKey = false;
				colvarCgkjyf.IsReadOnly = false;
				colvarCgkjyf.DefaultSetting = @"";
				colvarCgkjyf.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCgkjyf);
				
				TableSchema.TableColumn colvarXskjnd = new TableSchema.TableColumn(schema);
				colvarXskjnd.ColumnName = "XSKJND";
				colvarXskjnd.DataType = DbType.Decimal;
				colvarXskjnd.MaxLength = 0;
				colvarXskjnd.AutoIncrement = false;
				colvarXskjnd.IsNullable = true;
				colvarXskjnd.IsPrimaryKey = false;
				colvarXskjnd.IsForeignKey = false;
				colvarXskjnd.IsReadOnly = false;
				colvarXskjnd.DefaultSetting = @"";
				colvarXskjnd.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXskjnd);
				
				TableSchema.TableColumn colvarXskjyf = new TableSchema.TableColumn(schema);
				colvarXskjyf.ColumnName = "XSKJYF";
				colvarXskjyf.DataType = DbType.Decimal;
				colvarXskjyf.MaxLength = 0;
				colvarXskjyf.AutoIncrement = false;
				colvarXskjyf.IsNullable = true;
				colvarXskjyf.IsPrimaryKey = false;
				colvarXskjyf.IsForeignKey = false;
				colvarXskjyf.IsReadOnly = false;
				colvarXskjyf.DefaultSetting = @"";
				colvarXskjyf.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXskjyf);
				
				TableSchema.TableColumn colvarKccbnd = new TableSchema.TableColumn(schema);
				colvarKccbnd.ColumnName = "KCCBND";
				colvarKccbnd.DataType = DbType.Decimal;
				colvarKccbnd.MaxLength = 0;
				colvarKccbnd.AutoIncrement = false;
				colvarKccbnd.IsNullable = true;
				colvarKccbnd.IsPrimaryKey = false;
				colvarKccbnd.IsForeignKey = false;
				colvarKccbnd.IsReadOnly = false;
				colvarKccbnd.DefaultSetting = @"";
				colvarKccbnd.ForeignKeyTableName = "";
				schema.Columns.Add(colvarKccbnd);
				
				TableSchema.TableColumn colvarKccbyf = new TableSchema.TableColumn(schema);
				colvarKccbyf.ColumnName = "KCCBYF";
				colvarKccbyf.DataType = DbType.Decimal;
				colvarKccbyf.MaxLength = 0;
				colvarKccbyf.AutoIncrement = false;
				colvarKccbyf.IsNullable = true;
				colvarKccbyf.IsPrimaryKey = false;
				colvarKccbyf.IsForeignKey = false;
				colvarKccbyf.IsReadOnly = false;
				colvarKccbyf.DefaultSetting = @"";
				colvarKccbyf.ForeignKeyTableName = "";
				schema.Columns.Add(colvarKccbyf);
				
				TableSchema.TableColumn colvarClcbnd = new TableSchema.TableColumn(schema);
				colvarClcbnd.ColumnName = "CLCBND";
				colvarClcbnd.DataType = DbType.Decimal;
				colvarClcbnd.MaxLength = 0;
				colvarClcbnd.AutoIncrement = false;
				colvarClcbnd.IsNullable = true;
				colvarClcbnd.IsPrimaryKey = false;
				colvarClcbnd.IsForeignKey = false;
				colvarClcbnd.IsReadOnly = false;
				colvarClcbnd.DefaultSetting = @"";
				colvarClcbnd.ForeignKeyTableName = "";
				schema.Columns.Add(colvarClcbnd);
				
				TableSchema.TableColumn colvarClcbyf = new TableSchema.TableColumn(schema);
				colvarClcbyf.ColumnName = "CLCBYF";
				colvarClcbyf.DataType = DbType.Decimal;
				colvarClcbyf.MaxLength = 0;
				colvarClcbyf.AutoIncrement = false;
				colvarClcbyf.IsNullable = true;
				colvarClcbyf.IsPrimaryKey = false;
				colvarClcbyf.IsForeignKey = false;
				colvarClcbyf.IsReadOnly = false;
				colvarClcbyf.DefaultSetting = @"";
				colvarClcbyf.ForeignKeyTableName = "";
				schema.Columns.Add(colvarClcbyf);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ErpNowthwin"].AddSchema("XTT02",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Xtzthm")]
		[Bindable(true)]
		public string Xtzthm 
		{
			get { return GetColumnValue<string>(Columns.Xtzthm); }
			set { SetColumnValue(Columns.Xtzthm, value); }
		}
		  
		[XmlAttribute("Cgkjnd")]
		[Bindable(true)]
		public decimal? Cgkjnd 
		{
			get { return GetColumnValue<decimal?>(Columns.Cgkjnd); }
			set { SetColumnValue(Columns.Cgkjnd, value); }
		}
		  
		[XmlAttribute("Cgkjyf")]
		[Bindable(true)]
		public decimal? Cgkjyf 
		{
			get { return GetColumnValue<decimal?>(Columns.Cgkjyf); }
			set { SetColumnValue(Columns.Cgkjyf, value); }
		}
		  
		[XmlAttribute("Xskjnd")]
		[Bindable(true)]
		public decimal? Xskjnd 
		{
			get { return GetColumnValue<decimal?>(Columns.Xskjnd); }
			set { SetColumnValue(Columns.Xskjnd, value); }
		}
		  
		[XmlAttribute("Xskjyf")]
		[Bindable(true)]
		public decimal? Xskjyf 
		{
			get { return GetColumnValue<decimal?>(Columns.Xskjyf); }
			set { SetColumnValue(Columns.Xskjyf, value); }
		}
		  
		[XmlAttribute("Kccbnd")]
		[Bindable(true)]
		public decimal? Kccbnd 
		{
			get { return GetColumnValue<decimal?>(Columns.Kccbnd); }
			set { SetColumnValue(Columns.Kccbnd, value); }
		}
		  
		[XmlAttribute("Kccbyf")]
		[Bindable(true)]
		public decimal? Kccbyf 
		{
			get { return GetColumnValue<decimal?>(Columns.Kccbyf); }
			set { SetColumnValue(Columns.Kccbyf, value); }
		}
		  
		[XmlAttribute("Clcbnd")]
		[Bindable(true)]
		public decimal? Clcbnd 
		{
			get { return GetColumnValue<decimal?>(Columns.Clcbnd); }
			set { SetColumnValue(Columns.Clcbnd, value); }
		}
		  
		[XmlAttribute("Clcbyf")]
		[Bindable(true)]
		public decimal? Clcbyf 
		{
			get { return GetColumnValue<decimal?>(Columns.Clcbyf); }
			set { SetColumnValue(Columns.Clcbyf, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varXtzthm,decimal? varCgkjnd,decimal? varCgkjyf,decimal? varXskjnd,decimal? varXskjyf,decimal? varKccbnd,decimal? varKccbyf,decimal? varClcbnd,decimal? varClcbyf)
		{
			XTT02 item = new XTT02();
			
			item.Xtzthm = varXtzthm;
			
			item.Cgkjnd = varCgkjnd;
			
			item.Cgkjyf = varCgkjyf;
			
			item.Xskjnd = varXskjnd;
			
			item.Xskjyf = varXskjyf;
			
			item.Kccbnd = varKccbnd;
			
			item.Kccbyf = varKccbyf;
			
			item.Clcbnd = varClcbnd;
			
			item.Clcbyf = varClcbyf;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(string varXtzthm,decimal? varCgkjnd,decimal? varCgkjyf,decimal? varXskjnd,decimal? varXskjyf,decimal? varKccbnd,decimal? varKccbyf,decimal? varClcbnd,decimal? varClcbyf)
		{
			XTT02 item = new XTT02();
			
				item.Xtzthm = varXtzthm;
			
				item.Cgkjnd = varCgkjnd;
			
				item.Cgkjyf = varCgkjyf;
			
				item.Xskjnd = varXskjnd;
			
				item.Xskjyf = varXskjyf;
			
				item.Kccbnd = varKccbnd;
			
				item.Kccbyf = varKccbyf;
			
				item.Clcbnd = varClcbnd;
			
				item.Clcbyf = varClcbyf;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn XtzthmColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn CgkjndColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn CgkjyfColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn XskjndColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn XskjyfColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn KccbndColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn KccbyfColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn ClcbndColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn ClcbyfColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Xtzthm = @"XTZTHM";
			 public static string Cgkjnd = @"CGKJND";
			 public static string Cgkjyf = @"CGKJYF";
			 public static string Xskjnd = @"XSKJND";
			 public static string Xskjyf = @"XSKJYF";
			 public static string Kccbnd = @"KCCBND";
			 public static string Kccbyf = @"KCCBYF";
			 public static string Clcbnd = @"CLCBND";
			 public static string Clcbyf = @"CLCBYF";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}

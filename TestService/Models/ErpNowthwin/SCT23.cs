using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace OracleDataDomain{
    /// <summary>
    /// Strongly-typed collection for the SCT23 class.
    /// </summary>
    [Serializable]
    public partial class SCT23Collection : ReadOnlyList<SCT23, SCT23Collection>
    {        
        public SCT23Collection() {}
    }
    /// <summary>
    /// This is  Read-only wrapper class for the SCT23 view.
    /// </summary>
    [Serializable]
    public partial class SCT23 : ReadOnlyRecord<SCT23>, IReadOnlyRecord
    {
    
	    #region Default Settings
	    protected static void SetSQLProps() 
	    {
		    GetTableSchema();
	    }
	    #endregion
        #region Schema Accessor
	    public static TableSchema.Table Schema
        {
            get
            {
                if (BaseSchema == null)
                {
                    SetSQLProps();
                }
                return BaseSchema;
            }
        }
    	
        private static void GetTableSchema() 
        {
            if(!IsSchemaInitialized)
            {
                //Schema declaration
                TableSchema.Table schema = new TableSchema.Table("SCT23", TableType.View, DataService.GetInstance("ErpNowthwin"));
                schema.Columns = new TableSchema.TableColumnCollection();
                schema.SchemaName = @"FYERP";
                //columns
                
                TableSchema.TableColumn colvarScpjdm = new TableSchema.TableColumn(schema);
                colvarScpjdm.ColumnName = "SCPJDM";
                colvarScpjdm.DataType = DbType.String;
                colvarScpjdm.MaxLength = 2;
                colvarScpjdm.AutoIncrement = false;
                colvarScpjdm.IsNullable = true;
                colvarScpjdm.IsPrimaryKey = false;
                colvarScpjdm.IsForeignKey = false;
                colvarScpjdm.IsReadOnly = false;
                
                schema.Columns.Add(colvarScpjdm);
                
                TableSchema.TableColumn colvarSccndm = new TableSchema.TableColumn(schema);
                colvarSccndm.ColumnName = "SCCNDM";
                colvarSccndm.DataType = DbType.String;
                colvarSccndm.MaxLength = 4;
                colvarSccndm.AutoIncrement = false;
                colvarSccndm.IsNullable = true;
                colvarSccndm.IsPrimaryKey = false;
                colvarSccndm.IsForeignKey = false;
                colvarSccndm.IsReadOnly = false;
                
                schema.Columns.Add(colvarSccndm);
                
                TableSchema.TableColumn colvarSchtbh = new TableSchema.TableColumn(schema);
                colvarSchtbh.ColumnName = "SCHTBH";
                colvarSchtbh.DataType = DbType.String;
                colvarSchtbh.MaxLength = 12;
                colvarSchtbh.AutoIncrement = false;
                colvarSchtbh.IsNullable = true;
                colvarSchtbh.IsPrimaryKey = false;
                colvarSchtbh.IsForeignKey = false;
                colvarSchtbh.IsReadOnly = false;
                
                schema.Columns.Add(colvarSchtbh);
                
                TableSchema.TableColumn colvarSchtxh = new TableSchema.TableColumn(schema);
                colvarSchtxh.ColumnName = "SCHTXH";
                colvarSchtxh.DataType = DbType.Decimal;
                colvarSchtxh.MaxLength = 0;
                colvarSchtxh.AutoIncrement = false;
                colvarSchtxh.IsNullable = true;
                colvarSchtxh.IsPrimaryKey = false;
                colvarSchtxh.IsForeignKey = false;
                colvarSchtxh.IsReadOnly = false;
                
                schema.Columns.Add(colvarSchtxh);
                
                TableSchema.TableColumn colvarScjhrq = new TableSchema.TableColumn(schema);
                colvarScjhrq.ColumnName = "SCJHRQ";
                colvarScjhrq.DataType = DbType.DateTime;
                colvarScjhrq.MaxLength = 0;
                colvarScjhrq.AutoIncrement = false;
                colvarScjhrq.IsNullable = true;
                colvarScjhrq.IsPrimaryKey = false;
                colvarScjhrq.IsForeignKey = false;
                colvarScjhrq.IsReadOnly = false;
                
                schema.Columns.Add(colvarScjhrq);
                
                TableSchema.TableColumn colvarScapsl = new TableSchema.TableColumn(schema);
                colvarScapsl.ColumnName = "SCAPSL";
                colvarScapsl.DataType = DbType.Decimal;
                colvarScapsl.MaxLength = 0;
                colvarScapsl.AutoIncrement = false;
                colvarScapsl.IsNullable = true;
                colvarScapsl.IsPrimaryKey = false;
                colvarScapsl.IsForeignKey = false;
                colvarScapsl.IsReadOnly = false;
                
                schema.Columns.Add(colvarScapsl);
                
                TableSchema.TableColumn colvarSczhsl = new TableSchema.TableColumn(schema);
                colvarSczhsl.ColumnName = "SCZHSL";
                colvarSczhsl.DataType = DbType.Decimal;
                colvarSczhsl.MaxLength = 0;
                colvarSczhsl.AutoIncrement = false;
                colvarSczhsl.IsNullable = true;
                colvarSczhsl.IsPrimaryKey = false;
                colvarSczhsl.IsForeignKey = false;
                colvarSczhsl.IsReadOnly = false;
                
                schema.Columns.Add(colvarSczhsl);
                
                TableSchema.TableColumn colvarScddlx = new TableSchema.TableColumn(schema);
                colvarScddlx.ColumnName = "SCDDLX";
                colvarScddlx.DataType = DbType.String;
                colvarScddlx.MaxLength = 1;
                colvarScddlx.AutoIncrement = false;
                colvarScddlx.IsNullable = true;
                colvarScddlx.IsPrimaryKey = false;
                colvarScddlx.IsForeignKey = false;
                colvarScddlx.IsReadOnly = false;
                
                schema.Columns.Add(colvarScddlx);
                
                TableSchema.TableColumn colvarSccpdl = new TableSchema.TableColumn(schema);
                colvarSccpdl.ColumnName = "SCCPDL";
                colvarSccpdl.DataType = DbType.String;
                colvarSccpdl.MaxLength = 20;
                colvarSccpdl.AutoIncrement = false;
                colvarSccpdl.IsNullable = true;
                colvarSccpdl.IsPrimaryKey = false;
                colvarSccpdl.IsForeignKey = false;
                colvarSccpdl.IsReadOnly = false;
                
                schema.Columns.Add(colvarSccpdl);
                
                TableSchema.TableColumn colvarSctzzt = new TableSchema.TableColumn(schema);
                colvarSctzzt.ColumnName = "SCTZZT";
                colvarSctzzt.DataType = DbType.String;
                colvarSctzzt.MaxLength = 1;
                colvarSctzzt.AutoIncrement = false;
                colvarSctzzt.IsNullable = true;
                colvarSctzzt.IsPrimaryKey = false;
                colvarSctzzt.IsForeignKey = false;
                colvarSctzzt.IsReadOnly = false;
                
                schema.Columns.Add(colvarSctzzt);
                
                
                BaseSchema = schema;
                //add this schema to the provider
                //so we can query it later
                DataService.Providers["ErpNowthwin"].AddSchema("SCT23",schema);
            }
        }
        #endregion
        
        #region Query Accessor
	    public static Query CreateQuery()
	    {
		    return new Query(Schema);
	    }
	    #endregion
	    
	    #region .ctors
	    public SCT23()
	    {
            SetSQLProps();
            SetDefaults();
            MarkNew();
        }
        public SCT23(bool useDatabaseDefaults)
	    {
		    SetSQLProps();
		    if(useDatabaseDefaults)
		    {
				ForceDefaults();
			}
			MarkNew();
	    }
	    
	    public SCT23(object keyID)
	    {
		    SetSQLProps();
		    LoadByKey(keyID);
	    }
    	 
	    public SCT23(string columnName, object columnValue)
        {
            SetSQLProps();
            LoadByParam(columnName,columnValue);
        }
        
	    #endregion
	    
	    #region Props
	    
          
        [XmlAttribute("Scpjdm")]
        [Bindable(true)]
        public string Scpjdm 
	    {
		    get
		    {
			    return GetColumnValue<string>("SCPJDM");
		    }
            set 
		    {
			    SetColumnValue("SCPJDM", value);
            }
        }
	      
        [XmlAttribute("Sccndm")]
        [Bindable(true)]
        public string Sccndm 
	    {
		    get
		    {
			    return GetColumnValue<string>("SCCNDM");
		    }
            set 
		    {
			    SetColumnValue("SCCNDM", value);
            }
        }
	      
        [XmlAttribute("Schtbh")]
        [Bindable(true)]
        public string Schtbh 
	    {
		    get
		    {
			    return GetColumnValue<string>("SCHTBH");
		    }
            set 
		    {
			    SetColumnValue("SCHTBH", value);
            }
        }
	      
        [XmlAttribute("Schtxh")]
        [Bindable(true)]
        public decimal? Schtxh 
	    {
		    get
		    {
			    return GetColumnValue<decimal?>("SCHTXH");
		    }
            set 
		    {
			    SetColumnValue("SCHTXH", value);
            }
        }
	      
        [XmlAttribute("Scjhrq")]
        [Bindable(true)]
        public DateTime? Scjhrq 
	    {
		    get
		    {
			    return GetColumnValue<DateTime?>("SCJHRQ");
		    }
            set 
		    {
			    SetColumnValue("SCJHRQ", value);
            }
        }
	      
        [XmlAttribute("Scapsl")]
        [Bindable(true)]
        public decimal? Scapsl 
	    {
		    get
		    {
			    return GetColumnValue<decimal?>("SCAPSL");
		    }
            set 
		    {
			    SetColumnValue("SCAPSL", value);
            }
        }
	      
        [XmlAttribute("Sczhsl")]
        [Bindable(true)]
        public decimal? Sczhsl 
	    {
		    get
		    {
			    return GetColumnValue<decimal?>("SCZHSL");
		    }
            set 
		    {
			    SetColumnValue("SCZHSL", value);
            }
        }
	      
        [XmlAttribute("Scddlx")]
        [Bindable(true)]
        public string Scddlx 
	    {
		    get
		    {
			    return GetColumnValue<string>("SCDDLX");
		    }
            set 
		    {
			    SetColumnValue("SCDDLX", value);
            }
        }
	      
        [XmlAttribute("Sccpdl")]
        [Bindable(true)]
        public string Sccpdl 
	    {
		    get
		    {
			    return GetColumnValue<string>("SCCPDL");
		    }
            set 
		    {
			    SetColumnValue("SCCPDL", value);
            }
        }
	      
        [XmlAttribute("Sctzzt")]
        [Bindable(true)]
        public string Sctzzt 
	    {
		    get
		    {
			    return GetColumnValue<string>("SCTZZT");
		    }
            set 
		    {
			    SetColumnValue("SCTZZT", value);
            }
        }
	    
	    #endregion
    
	    #region Columns Struct
	    public struct Columns
	    {
		    
		    
            public static string Scpjdm = @"SCPJDM";
            
            public static string Sccndm = @"SCCNDM";
            
            public static string Schtbh = @"SCHTBH";
            
            public static string Schtxh = @"SCHTXH";
            
            public static string Scjhrq = @"SCJHRQ";
            
            public static string Scapsl = @"SCAPSL";
            
            public static string Sczhsl = @"SCZHSL";
            
            public static string Scddlx = @"SCDDLX";
            
            public static string Sccpdl = @"SCCPDL";
            
            public static string Sctzzt = @"SCTZZT";
            
	    }
	    #endregion
	    
	    
	    #region IAbstractRecord Members
        public new CT GetColumnValue<CT>(string columnName) {
            return base.GetColumnValue<CT>(columnName);
        }
        public object GetColumnValue(string columnName) {
            return base.GetColumnValue<object>(columnName);
        }
        #endregion
	    
    }
}

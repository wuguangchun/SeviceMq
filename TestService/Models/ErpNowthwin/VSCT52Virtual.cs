using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace OracleDataDomain{
    /// <summary>
    /// Strongly-typed collection for the VSCT52Virtual class.
    /// </summary>
    [Serializable]
    public partial class VSCT52VirtualCollection : ReadOnlyList<VSCT52Virtual, VSCT52VirtualCollection>
    {        
        public VSCT52VirtualCollection() {}
    }
    /// <summary>
    /// This is  Read-only wrapper class for the V_SCT52_VIRTUAL view.
    /// </summary>
    [Serializable]
    public partial class VSCT52Virtual : ReadOnlyRecord<VSCT52Virtual>, IReadOnlyRecord
    {
    
	    #region Default Settings
	    protected static void SetSQLProps() 
	    {
		    GetTableSchema();
	    }
	    #endregion
        #region Schema Accessor
	    public static TableSchema.Table Schema
        {
            get
            {
                if (BaseSchema == null)
                {
                    SetSQLProps();
                }
                return BaseSchema;
            }
        }
    	
        private static void GetTableSchema() 
        {
            if(!IsSchemaInitialized)
            {
                //Schema declaration
                TableSchema.Table schema = new TableSchema.Table("V_SCT52_VIRTUAL", TableType.View, DataService.GetInstance("ErpNowthwin"));
                schema.Columns = new TableSchema.TableColumnCollection();
                schema.SchemaName = @"FYERP";
                //columns
                
                TableSchema.TableColumn colvarSchtbh = new TableSchema.TableColumn(schema);
                colvarSchtbh.ColumnName = "SCHTBH";
                colvarSchtbh.DataType = DbType.String;
                colvarSchtbh.MaxLength = 12;
                colvarSchtbh.AutoIncrement = false;
                colvarSchtbh.IsNullable = true;
                colvarSchtbh.IsPrimaryKey = false;
                colvarSchtbh.IsForeignKey = false;
                colvarSchtbh.IsReadOnly = false;
                
                schema.Columns.Add(colvarSchtbh);
                
                TableSchema.TableColumn colvarSchtxh = new TableSchema.TableColumn(schema);
                colvarSchtxh.ColumnName = "SCHTXH";
                colvarSchtxh.DataType = DbType.Decimal;
                colvarSchtxh.MaxLength = 0;
                colvarSchtxh.AutoIncrement = false;
                colvarSchtxh.IsNullable = true;
                colvarSchtxh.IsPrimaryKey = false;
                colvarSchtxh.IsForeignKey = false;
                colvarSchtxh.IsReadOnly = false;
                
                schema.Columns.Add(colvarSchtxh);
                
                TableSchema.TableColumn colvarScggdh = new TableSchema.TableColumn(schema);
                colvarScggdh.ColumnName = "SCGGDH";
                colvarScggdh.DataType = DbType.String;
                colvarScggdh.MaxLength = 12;
                colvarScggdh.AutoIncrement = false;
                colvarScggdh.IsNullable = false;
                colvarScggdh.IsPrimaryKey = false;
                colvarScggdh.IsForeignKey = false;
                colvarScggdh.IsReadOnly = false;
                
                schema.Columns.Add(colvarScggdh);
                
                TableSchema.TableColumn colvarScggxh = new TableSchema.TableColumn(schema);
                colvarScggxh.ColumnName = "SCGGXH";
                colvarScggxh.DataType = DbType.Decimal;
                colvarScggxh.MaxLength = 0;
                colvarScggxh.AutoIncrement = false;
                colvarScggxh.IsNullable = false;
                colvarScggxh.IsPrimaryKey = false;
                colvarScggxh.IsForeignKey = false;
                colvarScggxh.IsReadOnly = false;
                
                schema.Columns.Add(colvarScggxh);
                
                TableSchema.TableColumn colvarSchtsl = new TableSchema.TableColumn(schema);
                colvarSchtsl.ColumnName = "SCHTSL";
                colvarSchtsl.DataType = DbType.Decimal;
                colvarSchtsl.MaxLength = 0;
                colvarSchtsl.AutoIncrement = false;
                colvarSchtsl.IsNullable = true;
                colvarSchtsl.IsPrimaryKey = false;
                colvarSchtsl.IsForeignKey = false;
                colvarSchtsl.IsReadOnly = false;
                
                schema.Columns.Add(colvarSchtsl);
                
                TableSchema.TableColumn colvarScjhsl = new TableSchema.TableColumn(schema);
                colvarScjhsl.ColumnName = "SCJHSL";
                colvarScjhsl.DataType = DbType.Decimal;
                colvarScjhsl.MaxLength = 0;
                colvarScjhsl.AutoIncrement = false;
                colvarScjhsl.IsNullable = true;
                colvarScjhsl.IsPrimaryKey = false;
                colvarScjhsl.IsForeignKey = false;
                colvarScjhsl.IsReadOnly = false;
                
                schema.Columns.Add(colvarScjhsl);
                
                
                BaseSchema = schema;
                //add this schema to the provider
                //so we can query it later
                DataService.Providers["ErpNowthwin"].AddSchema("V_SCT52_VIRTUAL",schema);
            }
        }
        #endregion
        
        #region Query Accessor
	    public static Query CreateQuery()
	    {
		    return new Query(Schema);
	    }
	    #endregion
	    
	    #region .ctors
	    public VSCT52Virtual()
	    {
            SetSQLProps();
            SetDefaults();
            MarkNew();
        }
        public VSCT52Virtual(bool useDatabaseDefaults)
	    {
		    SetSQLProps();
		    if(useDatabaseDefaults)
		    {
				ForceDefaults();
			}
			MarkNew();
	    }
	    
	    public VSCT52Virtual(object keyID)
	    {
		    SetSQLProps();
		    LoadByKey(keyID);
	    }
    	 
	    public VSCT52Virtual(string columnName, object columnValue)
        {
            SetSQLProps();
            LoadByParam(columnName,columnValue);
        }
        
	    #endregion
	    
	    #region Props
	    
          
        [XmlAttribute("Schtbh")]
        [Bindable(true)]
        public string Schtbh 
	    {
		    get
		    {
			    return GetColumnValue<string>("SCHTBH");
		    }
            set 
		    {
			    SetColumnValue("SCHTBH", value);
            }
        }
	      
        [XmlAttribute("Schtxh")]
        [Bindable(true)]
        public decimal? Schtxh 
	    {
		    get
		    {
			    return GetColumnValue<decimal?>("SCHTXH");
		    }
            set 
		    {
			    SetColumnValue("SCHTXH", value);
            }
        }
	      
        [XmlAttribute("Scggdh")]
        [Bindable(true)]
        public string Scggdh 
	    {
		    get
		    {
			    return GetColumnValue<string>("SCGGDH");
		    }
            set 
		    {
			    SetColumnValue("SCGGDH", value);
            }
        }
	      
        [XmlAttribute("Scggxh")]
        [Bindable(true)]
        public decimal Scggxh 
	    {
		    get
		    {
			    return GetColumnValue<decimal>("SCGGXH");
		    }
            set 
		    {
			    SetColumnValue("SCGGXH", value);
            }
        }
	      
        [XmlAttribute("Schtsl")]
        [Bindable(true)]
        public decimal? Schtsl 
	    {
		    get
		    {
			    return GetColumnValue<decimal?>("SCHTSL");
		    }
            set 
		    {
			    SetColumnValue("SCHTSL", value);
            }
        }
	      
        [XmlAttribute("Scjhsl")]
        [Bindable(true)]
        public decimal? Scjhsl 
	    {
		    get
		    {
			    return GetColumnValue<decimal?>("SCJHSL");
		    }
            set 
		    {
			    SetColumnValue("SCJHSL", value);
            }
        }
	    
	    #endregion
    
	    #region Columns Struct
	    public struct Columns
	    {
		    
		    
            public static string Schtbh = @"SCHTBH";
            
            public static string Schtxh = @"SCHTXH";
            
            public static string Scggdh = @"SCGGDH";
            
            public static string Scggxh = @"SCGGXH";
            
            public static string Schtsl = @"SCHTSL";
            
            public static string Scjhsl = @"SCJHSL";
            
	    }
	    #endregion
	    
	    
	    #region IAbstractRecord Members
        public new CT GetColumnValue<CT>(string columnName) {
            return base.GetColumnValue<CT>(columnName);
        }
        public object GetColumnValue(string columnName) {
            return base.GetColumnValue<object>(columnName);
        }
        #endregion
	    
    }
}

using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace OracleDataDomain
{
	/// <summary>
	/// Strongly-typed collection for the SCT01 class.
	/// </summary>
    [Serializable]
	public partial class SCT01Collection : ActiveList<SCT01, SCT01Collection>
	{	   
		public SCT01Collection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>SCT01Collection</returns>
		public SCT01Collection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                SCT01 o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the SCT01 table.
	/// </summary>
	[Serializable]
	public partial class SCT01 : ActiveRecord<SCT01>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public SCT01()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public SCT01(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public SCT01(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public SCT01(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("SCT01", TableType.Table, DataService.GetInstance("ErpNowthwin"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"FYERP";
				//columns
				
				TableSchema.TableColumn colvarXtwpks = new TableSchema.TableColumn(schema);
				colvarXtwpks.ColumnName = "XTWPKS";
				colvarXtwpks.DataType = DbType.String;
				colvarXtwpks.MaxLength = 20;
				colvarXtwpks.AutoIncrement = false;
				colvarXtwpks.IsNullable = false;
				colvarXtwpks.IsPrimaryKey = true;
				colvarXtwpks.IsForeignKey = false;
				colvarXtwpks.IsReadOnly = false;
				colvarXtwpks.DefaultSetting = @"";
				colvarXtwpks.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXtwpks);
				
				TableSchema.TableColumn colvarXtwpys = new TableSchema.TableColumn(schema);
				colvarXtwpys.ColumnName = "XTWPYS";
				colvarXtwpys.DataType = DbType.String;
				colvarXtwpys.MaxLength = 20;
				colvarXtwpys.AutoIncrement = false;
				colvarXtwpys.IsNullable = false;
				colvarXtwpys.IsPrimaryKey = true;
				colvarXtwpys.IsForeignKey = false;
				colvarXtwpys.IsReadOnly = false;
				colvarXtwpys.DefaultSetting = @"";
				colvarXtwpys.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXtwpys);
				
				TableSchema.TableColumn colvarScffbz = new TableSchema.TableColumn(schema);
				colvarScffbz.ColumnName = "SCFFBZ";
				colvarScffbz.DataType = DbType.String;
				colvarScffbz.MaxLength = 1;
				colvarScffbz.AutoIncrement = false;
				colvarScffbz.IsNullable = true;
				colvarScffbz.IsPrimaryKey = false;
				colvarScffbz.IsForeignKey = false;
				colvarScffbz.IsReadOnly = false;
				colvarScffbz.DefaultSetting = @"";
				colvarScffbz.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScffbz);
				
				TableSchema.TableColumn colvarScxgzt = new TableSchema.TableColumn(schema);
				colvarScxgzt.ColumnName = "SCXGZT";
				colvarScxgzt.DataType = DbType.String;
				colvarScxgzt.MaxLength = 20;
				colvarScxgzt.AutoIncrement = false;
				colvarScxgzt.IsNullable = true;
				colvarScxgzt.IsPrimaryKey = false;
				colvarScxgzt.IsForeignKey = false;
				colvarScxgzt.IsReadOnly = false;
				colvarScxgzt.DefaultSetting = @"";
				colvarScxgzt.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScxgzt);
				
				TableSchema.TableColumn colvarSczbry = new TableSchema.TableColumn(schema);
				colvarSczbry.ColumnName = "SCZBRY";
				colvarSczbry.DataType = DbType.String;
				colvarSczbry.MaxLength = 10;
				colvarSczbry.AutoIncrement = false;
				colvarSczbry.IsNullable = true;
				colvarSczbry.IsPrimaryKey = false;
				colvarSczbry.IsForeignKey = false;
				colvarSczbry.IsReadOnly = false;
				colvarSczbry.DefaultSetting = @"";
				colvarSczbry.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSczbry);
				
				TableSchema.TableColumn colvarSczbrq = new TableSchema.TableColumn(schema);
				colvarSczbrq.ColumnName = "SCZBRQ";
				colvarSczbrq.DataType = DbType.DateTime;
				colvarSczbrq.MaxLength = 0;
				colvarSczbrq.AutoIncrement = false;
				colvarSczbrq.IsNullable = true;
				colvarSczbrq.IsPrimaryKey = false;
				colvarSczbrq.IsForeignKey = false;
				colvarSczbrq.IsReadOnly = false;
				colvarSczbrq.DefaultSetting = @"";
				colvarSczbrq.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSczbrq);
				
				TableSchema.TableColumn colvarScshry = new TableSchema.TableColumn(schema);
				colvarScshry.ColumnName = "SCSHRY";
				colvarScshry.DataType = DbType.String;
				colvarScshry.MaxLength = 10;
				colvarScshry.AutoIncrement = false;
				colvarScshry.IsNullable = true;
				colvarScshry.IsPrimaryKey = false;
				colvarScshry.IsForeignKey = false;
				colvarScshry.IsReadOnly = false;
				colvarScshry.DefaultSetting = @"";
				colvarScshry.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScshry);
				
				TableSchema.TableColumn colvarScshrq = new TableSchema.TableColumn(schema);
				colvarScshrq.ColumnName = "SCSHRQ";
				colvarScshrq.DataType = DbType.DateTime;
				colvarScshrq.MaxLength = 0;
				colvarScshrq.AutoIncrement = false;
				colvarScshrq.IsNullable = true;
				colvarScshrq.IsPrimaryKey = false;
				colvarScshrq.IsForeignKey = false;
				colvarScshrq.IsReadOnly = false;
				colvarScshrq.DefaultSetting = @"";
				colvarScshrq.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScshrq);
				
				TableSchema.TableColumn colvarScjgbz = new TableSchema.TableColumn(schema);
				colvarScjgbz.ColumnName = "SCJGBZ";
				colvarScjgbz.DataType = DbType.String;
				colvarScjgbz.MaxLength = 255;
				colvarScjgbz.AutoIncrement = false;
				colvarScjgbz.IsNullable = true;
				colvarScjgbz.IsPrimaryKey = false;
				colvarScjgbz.IsForeignKey = false;
				colvarScjgbz.IsReadOnly = false;
				colvarScjgbz.DefaultSetting = @"";
				colvarScjgbz.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScjgbz);
				
				TableSchema.TableColumn colvarScjtlj = new TableSchema.TableColumn(schema);
				colvarScjtlj.ColumnName = "SCJTLJ";
				colvarScjtlj.DataType = DbType.String;
				colvarScjtlj.MaxLength = 50;
				colvarScjtlj.AutoIncrement = false;
				colvarScjtlj.IsNullable = true;
				colvarScjtlj.IsPrimaryKey = false;
				colvarScjtlj.IsForeignKey = false;
				colvarScjtlj.IsReadOnly = false;
				colvarScjtlj.DefaultSetting = @"";
				colvarScjtlj.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScjtlj);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ErpNowthwin"].AddSchema("SCT01",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Xtwpks")]
		[Bindable(true)]
		public string Xtwpks 
		{
			get { return GetColumnValue<string>(Columns.Xtwpks); }
			set { SetColumnValue(Columns.Xtwpks, value); }
		}
		  
		[XmlAttribute("Xtwpys")]
		[Bindable(true)]
		public string Xtwpys 
		{
			get { return GetColumnValue<string>(Columns.Xtwpys); }
			set { SetColumnValue(Columns.Xtwpys, value); }
		}
		  
		[XmlAttribute("Scffbz")]
		[Bindable(true)]
		public string Scffbz 
		{
			get { return GetColumnValue<string>(Columns.Scffbz); }
			set { SetColumnValue(Columns.Scffbz, value); }
		}
		  
		[XmlAttribute("Scxgzt")]
		[Bindable(true)]
		public string Scxgzt 
		{
			get { return GetColumnValue<string>(Columns.Scxgzt); }
			set { SetColumnValue(Columns.Scxgzt, value); }
		}
		  
		[XmlAttribute("Sczbry")]
		[Bindable(true)]
		public string Sczbry 
		{
			get { return GetColumnValue<string>(Columns.Sczbry); }
			set { SetColumnValue(Columns.Sczbry, value); }
		}
		  
		[XmlAttribute("Sczbrq")]
		[Bindable(true)]
		public DateTime? Sczbrq 
		{
			get { return GetColumnValue<DateTime?>(Columns.Sczbrq); }
			set { SetColumnValue(Columns.Sczbrq, value); }
		}
		  
		[XmlAttribute("Scshry")]
		[Bindable(true)]
		public string Scshry 
		{
			get { return GetColumnValue<string>(Columns.Scshry); }
			set { SetColumnValue(Columns.Scshry, value); }
		}
		  
		[XmlAttribute("Scshrq")]
		[Bindable(true)]
		public DateTime? Scshrq 
		{
			get { return GetColumnValue<DateTime?>(Columns.Scshrq); }
			set { SetColumnValue(Columns.Scshrq, value); }
		}
		  
		[XmlAttribute("Scjgbz")]
		[Bindable(true)]
		public string Scjgbz 
		{
			get { return GetColumnValue<string>(Columns.Scjgbz); }
			set { SetColumnValue(Columns.Scjgbz, value); }
		}
		  
		[XmlAttribute("Scjtlj")]
		[Bindable(true)]
		public string Scjtlj 
		{
			get { return GetColumnValue<string>(Columns.Scjtlj); }
			set { SetColumnValue(Columns.Scjtlj, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varXtwpks,string varXtwpys,string varScffbz,string varScxgzt,string varSczbry,DateTime? varSczbrq,string varScshry,DateTime? varScshrq,string varScjgbz,string varScjtlj)
		{
			SCT01 item = new SCT01();
			
			item.Xtwpks = varXtwpks;
			
			item.Xtwpys = varXtwpys;
			
			item.Scffbz = varScffbz;
			
			item.Scxgzt = varScxgzt;
			
			item.Sczbry = varSczbry;
			
			item.Sczbrq = varSczbrq;
			
			item.Scshry = varScshry;
			
			item.Scshrq = varScshrq;
			
			item.Scjgbz = varScjgbz;
			
			item.Scjtlj = varScjtlj;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(string varXtwpks,string varXtwpys,string varScffbz,string varScxgzt,string varSczbry,DateTime? varSczbrq,string varScshry,DateTime? varScshrq,string varScjgbz,string varScjtlj)
		{
			SCT01 item = new SCT01();
			
				item.Xtwpks = varXtwpks;
			
				item.Xtwpys = varXtwpys;
			
				item.Scffbz = varScffbz;
			
				item.Scxgzt = varScxgzt;
			
				item.Sczbry = varSczbry;
			
				item.Sczbrq = varSczbrq;
			
				item.Scshry = varScshry;
			
				item.Scshrq = varScshrq;
			
				item.Scjgbz = varScjgbz;
			
				item.Scjtlj = varScjtlj;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn XtwpksColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn XtwpysColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn ScffbzColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn ScxgztColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn SczbryColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn SczbrqColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn ScshryColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn ScshrqColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn ScjgbzColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn ScjtljColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Xtwpks = @"XTWPKS";
			 public static string Xtwpys = @"XTWPYS";
			 public static string Scffbz = @"SCFFBZ";
			 public static string Scxgzt = @"SCXGZT";
			 public static string Sczbry = @"SCZBRY";
			 public static string Sczbrq = @"SCZBRQ";
			 public static string Scshry = @"SCSHRY";
			 public static string Scshrq = @"SCSHRQ";
			 public static string Scjgbz = @"SCJGBZ";
			 public static string Scjtlj = @"SCJTLJ";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}

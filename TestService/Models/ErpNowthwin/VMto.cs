using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace OracleDataDomain{
    /// <summary>
    /// Strongly-typed collection for the VMto class.
    /// </summary>
    [Serializable]
    public partial class VMtoCollection : ReadOnlyList<VMto, VMtoCollection>
    {        
        public VMtoCollection() {}
    }
    /// <summary>
    /// This is  Read-only wrapper class for the V_MTO view.
    /// </summary>
    [Serializable]
    public partial class VMto : ReadOnlyRecord<VMto>, IReadOnlyRecord
    {
    
	    #region Default Settings
	    protected static void SetSQLProps() 
	    {
		    GetTableSchema();
	    }
	    #endregion
        #region Schema Accessor
	    public static TableSchema.Table Schema
        {
            get
            {
                if (BaseSchema == null)
                {
                    SetSQLProps();
                }
                return BaseSchema;
            }
        }
    	
        private static void GetTableSchema() 
        {
            if(!IsSchemaInitialized)
            {
                //Schema declaration
                TableSchema.Table schema = new TableSchema.Table("V_MTO", TableType.View, DataService.GetInstance("ErpNowthwin"));
                schema.Columns = new TableSchema.TableColumnCollection();
                schema.SchemaName = @"FYERP";
                //columns
                
                TableSchema.TableColumn colvarSchtbh = new TableSchema.TableColumn(schema);
                colvarSchtbh.ColumnName = "SCHTBH";
                colvarSchtbh.DataType = DbType.String;
                colvarSchtbh.MaxLength = 12;
                colvarSchtbh.AutoIncrement = false;
                colvarSchtbh.IsNullable = false;
                colvarSchtbh.IsPrimaryKey = false;
                colvarSchtbh.IsForeignKey = false;
                colvarSchtbh.IsReadOnly = false;
                
                schema.Columns.Add(colvarSchtbh);
                
                TableSchema.TableColumn colvarSczsbh = new TableSchema.TableColumn(schema);
                colvarSczsbh.ColumnName = "SCZSBH";
                colvarSczsbh.DataType = DbType.String;
                colvarSczsbh.MaxLength = 12;
                colvarSczsbh.AutoIncrement = false;
                colvarSczsbh.IsNullable = false;
                colvarSczsbh.IsPrimaryKey = false;
                colvarSczsbh.IsForeignKey = false;
                colvarSczsbh.IsReadOnly = false;
                
                schema.Columns.Add(colvarSczsbh);
                
                TableSchema.TableColumn colvarScxdrq = new TableSchema.TableColumn(schema);
                colvarScxdrq.ColumnName = "SCXDRQ";
                colvarScxdrq.DataType = DbType.DateTime;
                colvarScxdrq.MaxLength = 0;
                colvarScxdrq.AutoIncrement = false;
                colvarScxdrq.IsNullable = true;
                colvarScxdrq.IsPrimaryKey = false;
                colvarScxdrq.IsForeignKey = false;
                colvarScxdrq.IsReadOnly = false;
                
                schema.Columns.Add(colvarScxdrq);
                
                TableSchema.TableColumn colvarKhddhm = new TableSchema.TableColumn(schema);
                colvarKhddhm.ColumnName = "KHDDHM";
                colvarKhddhm.DataType = DbType.String;
                colvarKhddhm.MaxLength = 12;
                colvarKhddhm.AutoIncrement = false;
                colvarKhddhm.IsNullable = true;
                colvarKhddhm.IsPrimaryKey = false;
                colvarKhddhm.IsForeignKey = false;
                colvarKhddhm.IsReadOnly = false;
                
                schema.Columns.Add(colvarKhddhm);
                
                TableSchema.TableColumn colvarSckhxm = new TableSchema.TableColumn(schema);
                colvarSckhxm.ColumnName = "SCKHXM";
                colvarSckhxm.DataType = DbType.String;
                colvarSckhxm.MaxLength = 100;
                colvarSckhxm.AutoIncrement = false;
                colvarSckhxm.IsNullable = true;
                colvarSckhxm.IsPrimaryKey = false;
                colvarSckhxm.IsForeignKey = false;
                colvarSckhxm.IsReadOnly = false;
                
                schema.Columns.Add(colvarSckhxm);
                
                TableSchema.TableColumn colvarSccjjq = new TableSchema.TableColumn(schema);
                colvarSccjjq.ColumnName = "SCCJJQ";
                colvarSccjjq.DataType = DbType.DateTime;
                colvarSccjjq.MaxLength = 0;
                colvarSccjjq.AutoIncrement = false;
                colvarSccjjq.IsNullable = true;
                colvarSccjjq.IsPrimaryKey = false;
                colvarSccjjq.IsForeignKey = false;
                colvarSccjjq.IsReadOnly = false;
                
                schema.Columns.Add(colvarSccjjq);
                
                TableSchema.TableColumn colvarScfzjq = new TableSchema.TableColumn(schema);
                colvarScfzjq.ColumnName = "SCFZJQ";
                colvarScfzjq.DataType = DbType.DateTime;
                colvarScfzjq.MaxLength = 0;
                colvarScfzjq.AutoIncrement = false;
                colvarScfzjq.IsNullable = true;
                colvarScfzjq.IsPrimaryKey = false;
                colvarScfzjq.IsForeignKey = false;
                colvarScfzjq.IsReadOnly = false;
                
                schema.Columns.Add(colvarScfzjq);
                
                TableSchema.TableColumn colvarScztjq = new TableSchema.TableColumn(schema);
                colvarScztjq.ColumnName = "SCZTJQ";
                colvarScztjq.DataType = DbType.DateTime;
                colvarScztjq.MaxLength = 0;
                colvarScztjq.AutoIncrement = false;
                colvarScztjq.IsNullable = true;
                colvarScztjq.IsPrimaryKey = false;
                colvarScztjq.IsForeignKey = false;
                colvarScztjq.IsReadOnly = false;
                
                schema.Columns.Add(colvarScztjq);
                
                TableSchema.TableColumn colvarScbzjq = new TableSchema.TableColumn(schema);
                colvarScbzjq.ColumnName = "SCBZJQ";
                colvarScbzjq.DataType = DbType.DateTime;
                colvarScbzjq.MaxLength = 0;
                colvarScbzjq.AutoIncrement = false;
                colvarScbzjq.IsNullable = true;
                colvarScbzjq.IsPrimaryKey = false;
                colvarScbzjq.IsForeignKey = false;
                colvarScbzjq.IsReadOnly = false;
                
                schema.Columns.Add(colvarScbzjq);
                
                TableSchema.TableColumn colvarScjhrq = new TableSchema.TableColumn(schema);
                colvarScjhrq.ColumnName = "SCJHRQ";
                colvarScjhrq.DataType = DbType.DateTime;
                colvarScjhrq.MaxLength = 0;
                colvarScjhrq.AutoIncrement = false;
                colvarScjhrq.IsNullable = true;
                colvarScjhrq.IsPrimaryKey = false;
                colvarScjhrq.IsForeignKey = false;
                colvarScjhrq.IsReadOnly = false;
                
                schema.Columns.Add(colvarScjhrq);
                
                TableSchema.TableColumn colvarSczsbz = new TableSchema.TableColumn(schema);
                colvarSczsbz.ColumnName = "SCZSBZ";
                colvarSczsbz.DataType = DbType.String;
                colvarSczsbz.MaxLength = 255;
                colvarSczsbz.AutoIncrement = false;
                colvarSczsbz.IsNullable = true;
                colvarSczsbz.IsPrimaryKey = false;
                colvarSczsbz.IsForeignKey = false;
                colvarSczsbz.IsReadOnly = false;
                
                schema.Columns.Add(colvarSczsbz);
                
                TableSchema.TableColumn colvarXtwpks = new TableSchema.TableColumn(schema);
                colvarXtwpks.ColumnName = "XTWPKS";
                colvarXtwpks.DataType = DbType.String;
                colvarXtwpks.MaxLength = 20;
                colvarXtwpks.AutoIncrement = false;
                colvarXtwpks.IsNullable = false;
                colvarXtwpks.IsPrimaryKey = false;
                colvarXtwpks.IsForeignKey = false;
                colvarXtwpks.IsReadOnly = false;
                
                schema.Columns.Add(colvarXtwpks);
                
                TableSchema.TableColumn colvarXtwpys = new TableSchema.TableColumn(schema);
                colvarXtwpys.ColumnName = "XTWPYS";
                colvarXtwpys.DataType = DbType.String;
                colvarXtwpys.MaxLength = 20;
                colvarXtwpys.AutoIncrement = false;
                colvarXtwpys.IsNullable = false;
                colvarXtwpys.IsPrimaryKey = false;
                colvarXtwpys.IsForeignKey = false;
                colvarXtwpys.IsReadOnly = false;
                
                schema.Columns.Add(colvarXtwpys);
                
                TableSchema.TableColumn colvarSchtxh = new TableSchema.TableColumn(schema);
                colvarSchtxh.ColumnName = "SCHTXH";
                colvarSchtxh.DataType = DbType.Decimal;
                colvarSchtxh.MaxLength = 0;
                colvarSchtxh.AutoIncrement = false;
                colvarSchtxh.IsNullable = false;
                colvarSchtxh.IsPrimaryKey = false;
                colvarSchtxh.IsForeignKey = false;
                colvarSchtxh.IsReadOnly = false;
                
                schema.Columns.Add(colvarSchtxh);
                
                TableSchema.TableColumn colvarXtsjbh = new TableSchema.TableColumn(schema);
                colvarXtsjbh.ColumnName = "XTSJBH";
                colvarXtsjbh.DataType = DbType.String;
                colvarXtsjbh.MaxLength = 24;
                colvarXtsjbh.AutoIncrement = false;
                colvarXtsjbh.IsNullable = true;
                colvarXtsjbh.IsPrimaryKey = false;
                colvarXtsjbh.IsForeignKey = false;
                colvarXtsjbh.IsReadOnly = false;
                
                schema.Columns.Add(colvarXtsjbh);
                
                TableSchema.TableColumn colvarXtwpmc = new TableSchema.TableColumn(schema);
                colvarXtwpmc.ColumnName = "XTWPMC";
                colvarXtwpmc.DataType = DbType.String;
                colvarXtwpmc.MaxLength = 100;
                colvarXtwpmc.AutoIncrement = false;
                colvarXtwpmc.IsNullable = true;
                colvarXtwpmc.IsPrimaryKey = false;
                colvarXtwpmc.IsForeignKey = false;
                colvarXtwpmc.IsReadOnly = false;
                
                schema.Columns.Add(colvarXtwpmc);
                
                TableSchema.TableColumn colvarScjhdd = new TableSchema.TableColumn(schema);
                colvarScjhdd.ColumnName = "SCJHDD";
                colvarScjhdd.DataType = DbType.String;
                colvarScjhdd.MaxLength = 4000;
                colvarScjhdd.AutoIncrement = false;
                colvarScjhdd.IsNullable = true;
                colvarScjhdd.IsPrimaryKey = false;
                colvarScjhdd.IsForeignKey = false;
                colvarScjhdd.IsReadOnly = false;
                
                schema.Columns.Add(colvarScjhdd);
                
                
                BaseSchema = schema;
                //add this schema to the provider
                //so we can query it later
                DataService.Providers["ErpNowthwin"].AddSchema("V_MTO",schema);
            }
        }
        #endregion
        
        #region Query Accessor
	    public static Query CreateQuery()
	    {
		    return new Query(Schema);
	    }
	    #endregion
	    
	    #region .ctors
	    public VMto()
	    {
            SetSQLProps();
            SetDefaults();
            MarkNew();
        }
        public VMto(bool useDatabaseDefaults)
	    {
		    SetSQLProps();
		    if(useDatabaseDefaults)
		    {
				ForceDefaults();
			}
			MarkNew();
	    }
	    
	    public VMto(object keyID)
	    {
		    SetSQLProps();
		    LoadByKey(keyID);
	    }
    	 
	    public VMto(string columnName, object columnValue)
        {
            SetSQLProps();
            LoadByParam(columnName,columnValue);
        }
        
	    #endregion
	    
	    #region Props
	    
          
        [XmlAttribute("Schtbh")]
        [Bindable(true)]
        public string Schtbh 
	    {
		    get
		    {
			    return GetColumnValue<string>("SCHTBH");
		    }
            set 
		    {
			    SetColumnValue("SCHTBH", value);
            }
        }
	      
        [XmlAttribute("Sczsbh")]
        [Bindable(true)]
        public string Sczsbh 
	    {
		    get
		    {
			    return GetColumnValue<string>("SCZSBH");
		    }
            set 
		    {
			    SetColumnValue("SCZSBH", value);
            }
        }
	      
        [XmlAttribute("Scxdrq")]
        [Bindable(true)]
        public DateTime? Scxdrq 
	    {
		    get
		    {
			    return GetColumnValue<DateTime?>("SCXDRQ");
		    }
            set 
		    {
			    SetColumnValue("SCXDRQ", value);
            }
        }
	      
        [XmlAttribute("Khddhm")]
        [Bindable(true)]
        public string Khddhm 
	    {
		    get
		    {
			    return GetColumnValue<string>("KHDDHM");
		    }
            set 
		    {
			    SetColumnValue("KHDDHM", value);
            }
        }
	      
        [XmlAttribute("Sckhxm")]
        [Bindable(true)]
        public string Sckhxm 
	    {
		    get
		    {
			    return GetColumnValue<string>("SCKHXM");
		    }
            set 
		    {
			    SetColumnValue("SCKHXM", value);
            }
        }
	      
        [XmlAttribute("Sccjjq")]
        [Bindable(true)]
        public DateTime? Sccjjq 
	    {
		    get
		    {
			    return GetColumnValue<DateTime?>("SCCJJQ");
		    }
            set 
		    {
			    SetColumnValue("SCCJJQ", value);
            }
        }
	      
        [XmlAttribute("Scfzjq")]
        [Bindable(true)]
        public DateTime? Scfzjq 
	    {
		    get
		    {
			    return GetColumnValue<DateTime?>("SCFZJQ");
		    }
            set 
		    {
			    SetColumnValue("SCFZJQ", value);
            }
        }
	      
        [XmlAttribute("Scztjq")]
        [Bindable(true)]
        public DateTime? Scztjq 
	    {
		    get
		    {
			    return GetColumnValue<DateTime?>("SCZTJQ");
		    }
            set 
		    {
			    SetColumnValue("SCZTJQ", value);
            }
        }
	      
        [XmlAttribute("Scbzjq")]
        [Bindable(true)]
        public DateTime? Scbzjq 
	    {
		    get
		    {
			    return GetColumnValue<DateTime?>("SCBZJQ");
		    }
            set 
		    {
			    SetColumnValue("SCBZJQ", value);
            }
        }
	      
        [XmlAttribute("Scjhrq")]
        [Bindable(true)]
        public DateTime? Scjhrq 
	    {
		    get
		    {
			    return GetColumnValue<DateTime?>("SCJHRQ");
		    }
            set 
		    {
			    SetColumnValue("SCJHRQ", value);
            }
        }
	      
        [XmlAttribute("Sczsbz")]
        [Bindable(true)]
        public string Sczsbz 
	    {
		    get
		    {
			    return GetColumnValue<string>("SCZSBZ");
		    }
            set 
		    {
			    SetColumnValue("SCZSBZ", value);
            }
        }
	      
        [XmlAttribute("Xtwpks")]
        [Bindable(true)]
        public string Xtwpks 
	    {
		    get
		    {
			    return GetColumnValue<string>("XTWPKS");
		    }
            set 
		    {
			    SetColumnValue("XTWPKS", value);
            }
        }
	      
        [XmlAttribute("Xtwpys")]
        [Bindable(true)]
        public string Xtwpys 
	    {
		    get
		    {
			    return GetColumnValue<string>("XTWPYS");
		    }
            set 
		    {
			    SetColumnValue("XTWPYS", value);
            }
        }
	      
        [XmlAttribute("Schtxh")]
        [Bindable(true)]
        public decimal Schtxh 
	    {
		    get
		    {
			    return GetColumnValue<decimal>("SCHTXH");
		    }
            set 
		    {
			    SetColumnValue("SCHTXH", value);
            }
        }
	      
        [XmlAttribute("Xtsjbh")]
        [Bindable(true)]
        public string Xtsjbh 
	    {
		    get
		    {
			    return GetColumnValue<string>("XTSJBH");
		    }
            set 
		    {
			    SetColumnValue("XTSJBH", value);
            }
        }
	      
        [XmlAttribute("Xtwpmc")]
        [Bindable(true)]
        public string Xtwpmc 
	    {
		    get
		    {
			    return GetColumnValue<string>("XTWPMC");
		    }
            set 
		    {
			    SetColumnValue("XTWPMC", value);
            }
        }
	      
        [XmlAttribute("Scjhdd")]
        [Bindable(true)]
        public string Scjhdd 
	    {
		    get
		    {
			    return GetColumnValue<string>("SCJHDD");
		    }
            set 
		    {
			    SetColumnValue("SCJHDD", value);
            }
        }
	    
	    #endregion
    
	    #region Columns Struct
	    public struct Columns
	    {
		    
		    
            public static string Schtbh = @"SCHTBH";
            
            public static string Sczsbh = @"SCZSBH";
            
            public static string Scxdrq = @"SCXDRQ";
            
            public static string Khddhm = @"KHDDHM";
            
            public static string Sckhxm = @"SCKHXM";
            
            public static string Sccjjq = @"SCCJJQ";
            
            public static string Scfzjq = @"SCFZJQ";
            
            public static string Scztjq = @"SCZTJQ";
            
            public static string Scbzjq = @"SCBZJQ";
            
            public static string Scjhrq = @"SCJHRQ";
            
            public static string Sczsbz = @"SCZSBZ";
            
            public static string Xtwpks = @"XTWPKS";
            
            public static string Xtwpys = @"XTWPYS";
            
            public static string Schtxh = @"SCHTXH";
            
            public static string Xtsjbh = @"XTSJBH";
            
            public static string Xtwpmc = @"XTWPMC";
            
            public static string Scjhdd = @"SCJHDD";
            
	    }
	    #endregion
	    
	    
	    #region IAbstractRecord Members
        public new CT GetColumnValue<CT>(string columnName) {
            return base.GetColumnValue<CT>(columnName);
        }
        public object GetColumnValue(string columnName) {
            return base.GetColumnValue<object>(columnName);
        }
        #endregion
	    
    }
}

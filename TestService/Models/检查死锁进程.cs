using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace APSData{
    /// <summary>
    /// Strongly-typed collection for the 检查死锁进程 class.
    /// </summary>
    [Serializable]
    public partial class 检查死锁进程Collection : ReadOnlyList<检查死锁进程, 检查死锁进程Collection>
    {        
        public 检查死锁进程Collection() {}
    }
    /// <summary>
    /// This is  Read-only wrapper class for the 检查死锁进程 view.
    /// </summary>
    [Serializable]
    public partial class 检查死锁进程 : ReadOnlyRecord<检查死锁进程>, IReadOnlyRecord
    {
    
	    #region Default Settings
	    protected static void SetSQLProps() 
	    {
		    GetTableSchema();
	    }
	    #endregion
        #region Schema Accessor
	    public static TableSchema.Table Schema
        {
            get
            {
                if (BaseSchema == null)
                {
                    SetSQLProps();
                }
                return BaseSchema;
            }
        }
    	
        private static void GetTableSchema() 
        {
            if(!IsSchemaInitialized)
            {
                //Schema declaration
                TableSchema.Table schema = new TableSchema.Table("检查死锁进程", TableType.View, DataService.GetInstance("Nowthwin"));
                schema.Columns = new TableSchema.TableColumnCollection();
                schema.SchemaName = @"dbo";
                //columns
                
                TableSchema.TableColumn colvarSpid = new TableSchema.TableColumn(schema);
                colvarSpid.ColumnName = "spid";
                colvarSpid.DataType = DbType.Int16;
                colvarSpid.MaxLength = 0;
                colvarSpid.AutoIncrement = false;
                colvarSpid.IsNullable = false;
                colvarSpid.IsPrimaryKey = false;
                colvarSpid.IsForeignKey = false;
                colvarSpid.IsReadOnly = false;
                
                schema.Columns.Add(colvarSpid);
                
                TableSchema.TableColumn colvarBlocked = new TableSchema.TableColumn(schema);
                colvarBlocked.ColumnName = "blocked";
                colvarBlocked.DataType = DbType.Int16;
                colvarBlocked.MaxLength = 0;
                colvarBlocked.AutoIncrement = false;
                colvarBlocked.IsNullable = false;
                colvarBlocked.IsPrimaryKey = false;
                colvarBlocked.IsForeignKey = false;
                colvarBlocked.IsReadOnly = false;
                
                schema.Columns.Add(colvarBlocked);
                
                TableSchema.TableColumn colvarLoginame = new TableSchema.TableColumn(schema);
                colvarLoginame.ColumnName = "loginame";
                colvarLoginame.DataType = DbType.String;
                colvarLoginame.MaxLength = 128;
                colvarLoginame.AutoIncrement = false;
                colvarLoginame.IsNullable = false;
                colvarLoginame.IsPrimaryKey = false;
                colvarLoginame.IsForeignKey = false;
                colvarLoginame.IsReadOnly = false;
                
                schema.Columns.Add(colvarLoginame);
                
                TableSchema.TableColumn colvarLastBatch = new TableSchema.TableColumn(schema);
                colvarLastBatch.ColumnName = "last_batch";
                colvarLastBatch.DataType = DbType.DateTime;
                colvarLastBatch.MaxLength = 0;
                colvarLastBatch.AutoIncrement = false;
                colvarLastBatch.IsNullable = false;
                colvarLastBatch.IsPrimaryKey = false;
                colvarLastBatch.IsForeignKey = false;
                colvarLastBatch.IsReadOnly = false;
                
                schema.Columns.Add(colvarLastBatch);
                
                TableSchema.TableColumn colvarStatus = new TableSchema.TableColumn(schema);
                colvarStatus.ColumnName = "status";
                colvarStatus.DataType = DbType.String;
                colvarStatus.MaxLength = 30;
                colvarStatus.AutoIncrement = false;
                colvarStatus.IsNullable = false;
                colvarStatus.IsPrimaryKey = false;
                colvarStatus.IsForeignKey = false;
                colvarStatus.IsReadOnly = false;
                
                schema.Columns.Add(colvarStatus);
                
                TableSchema.TableColumn colvarCmd = new TableSchema.TableColumn(schema);
                colvarCmd.ColumnName = "cmd";
                colvarCmd.DataType = DbType.String;
                colvarCmd.MaxLength = 16;
                colvarCmd.AutoIncrement = false;
                colvarCmd.IsNullable = false;
                colvarCmd.IsPrimaryKey = false;
                colvarCmd.IsForeignKey = false;
                colvarCmd.IsReadOnly = false;
                
                schema.Columns.Add(colvarCmd);
                
                TableSchema.TableColumn colvarHostname = new TableSchema.TableColumn(schema);
                colvarHostname.ColumnName = "hostname";
                colvarHostname.DataType = DbType.String;
                colvarHostname.MaxLength = 128;
                colvarHostname.AutoIncrement = false;
                colvarHostname.IsNullable = false;
                colvarHostname.IsPrimaryKey = false;
                colvarHostname.IsForeignKey = false;
                colvarHostname.IsReadOnly = false;
                
                schema.Columns.Add(colvarHostname);
                
                TableSchema.TableColumn colvarProgramName = new TableSchema.TableColumn(schema);
                colvarProgramName.ColumnName = "program_name";
                colvarProgramName.DataType = DbType.String;
                colvarProgramName.MaxLength = 128;
                colvarProgramName.AutoIncrement = false;
                colvarProgramName.IsNullable = false;
                colvarProgramName.IsPrimaryKey = false;
                colvarProgramName.IsForeignKey = false;
                colvarProgramName.IsReadOnly = false;
                
                schema.Columns.Add(colvarProgramName);
                
                
                BaseSchema = schema;
                //add this schema to the provider
                //so we can query it later
                DataService.Providers["Nowthwin"].AddSchema("检查死锁进程",schema);
            }
        }
        #endregion
        
        #region Query Accessor
	    public static Query CreateQuery()
	    {
		    return new Query(Schema);
	    }
	    #endregion
	    
	    #region .ctors
	    public 检查死锁进程()
	    {
            SetSQLProps();
            SetDefaults();
            MarkNew();
        }
        public 检查死锁进程(bool useDatabaseDefaults)
	    {
		    SetSQLProps();
		    if(useDatabaseDefaults)
		    {
				ForceDefaults();
			}
			MarkNew();
	    }
	    
	    public 检查死锁进程(object keyID)
	    {
		    SetSQLProps();
		    LoadByKey(keyID);
	    }
    	 
	    public 检查死锁进程(string columnName, object columnValue)
        {
            SetSQLProps();
            LoadByParam(columnName,columnValue);
        }
        
	    #endregion
	    
	    #region Props
	    
          
        [XmlAttribute("Spid")]
        [Bindable(true)]
        public short Spid 
	    {
		    get
		    {
			    return GetColumnValue<short>("spid");
		    }
            set 
		    {
			    SetColumnValue("spid", value);
            }
        }
	      
        [XmlAttribute("Blocked")]
        [Bindable(true)]
        public short Blocked 
	    {
		    get
		    {
			    return GetColumnValue<short>("blocked");
		    }
            set 
		    {
			    SetColumnValue("blocked", value);
            }
        }
	      
        [XmlAttribute("Loginame")]
        [Bindable(true)]
        public string Loginame 
	    {
		    get
		    {
			    return GetColumnValue<string>("loginame");
		    }
            set 
		    {
			    SetColumnValue("loginame", value);
            }
        }
	      
        [XmlAttribute("LastBatch")]
        [Bindable(true)]
        public DateTime LastBatch 
	    {
		    get
		    {
			    return GetColumnValue<DateTime>("last_batch");
		    }
            set 
		    {
			    SetColumnValue("last_batch", value);
            }
        }
	      
        [XmlAttribute("Status")]
        [Bindable(true)]
        public string Status 
	    {
		    get
		    {
			    return GetColumnValue<string>("status");
		    }
            set 
		    {
			    SetColumnValue("status", value);
            }
        }
	      
        [XmlAttribute("Cmd")]
        [Bindable(true)]
        public string Cmd 
	    {
		    get
		    {
			    return GetColumnValue<string>("cmd");
		    }
            set 
		    {
			    SetColumnValue("cmd", value);
            }
        }
	      
        [XmlAttribute("Hostname")]
        [Bindable(true)]
        public string Hostname 
	    {
		    get
		    {
			    return GetColumnValue<string>("hostname");
		    }
            set 
		    {
			    SetColumnValue("hostname", value);
            }
        }
	      
        [XmlAttribute("ProgramName")]
        [Bindable(true)]
        public string ProgramName 
	    {
		    get
		    {
			    return GetColumnValue<string>("program_name");
		    }
            set 
		    {
			    SetColumnValue("program_name", value);
            }
        }
	    
	    #endregion
    
	    #region Columns Struct
	    public struct Columns
	    {
		    
		    
            public static string Spid = @"spid";
            
            public static string Blocked = @"blocked";
            
            public static string Loginame = @"loginame";
            
            public static string LastBatch = @"last_batch";
            
            public static string Status = @"status";
            
            public static string Cmd = @"cmd";
            
            public static string Hostname = @"hostname";
            
            public static string ProgramName = @"program_name";
            
	    }
	    #endregion
	    
	    
	    #region IAbstractRecord Members
        public new CT GetColumnValue<CT>(string columnName) {
            return base.GetColumnValue<CT>(columnName);
        }
        public object GetColumnValue(string columnName) {
            return base.GetColumnValue<object>(columnName);
        }
        #endregion
	    
    }
}

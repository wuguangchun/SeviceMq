using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace APSData
{
    /// <summary>
    /// Controller class for T_Analysis_OutputList
    /// </summary>
    [System.ComponentModel.DataObject]
    public partial class TAnalysisOutputListController
    {
        // Preload our schema..
        TAnalysisOutputList thisSchemaLoad = new TAnalysisOutputList();
        private string userName = String.Empty;
        protected string UserName
        {
            get
            {
				if (userName.Length == 0) 
				{
    				if (System.Web.HttpContext.Current != null)
    				{
						userName=System.Web.HttpContext.Current.User.Identity.Name;
					}
					else
					{
						userName=System.Threading.Thread.CurrentPrincipal.Identity.Name;
					}
				}
				return userName;
            }
        }
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public TAnalysisOutputListCollection FetchAll()
        {
            TAnalysisOutputListCollection coll = new TAnalysisOutputListCollection();
            Query qry = new Query(TAnalysisOutputList.Schema);
            coll.LoadAndCloseReader(qry.ExecuteReader());
            return coll;
        }
        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public TAnalysisOutputListCollection FetchByID(object OrderId)
        {
            TAnalysisOutputListCollection coll = new TAnalysisOutputListCollection().Where("orderId", OrderId).Load();
            return coll;
        }
		
		[DataObjectMethod(DataObjectMethodType.Select, false)]
        public TAnalysisOutputListCollection FetchByQuery(Query qry)
        {
            TAnalysisOutputListCollection coll = new TAnalysisOutputListCollection();
            coll.LoadAndCloseReader(qry.ExecuteReader()); 
            return coll;
        }
        [DataObjectMethod(DataObjectMethodType.Delete, true)]
        public bool Delete(object OrderId)
        {
            return (TAnalysisOutputList.Delete(OrderId) == 1);
        }
        [DataObjectMethod(DataObjectMethodType.Delete, false)]
        public bool Destroy(object OrderId)
        {
            return (TAnalysisOutputList.Destroy(OrderId) == 1);
        }
        
        
    	
	    /// <summary>
	    /// Inserts a record, can be used with the Object Data Source
	    /// </summary>
        [DataObjectMethod(DataObjectMethodType.Insert, true)]
	    public void Insert(string OrderId,string JobCode,string Project,string OrderType,string CoatType,string BodyType,string Fabric,DateTime? OrderTime,DateTime? DeliveryTime,int? SpecialTime,string SpecialCode,string Styles,string StylesResult,int? Numbers,int? PlanNum,string SupportingWay,int? Workinfo,string OrderNo,string Customer,string OriginalCode,string Abnormal,string Note,string Resources,DateTime? BeginTime,DateTime? EndTime,string MakeTime,DateTime? CreateDate,string Pbcd,string Gydm,string Scjhdd,int? FlagStatus,string Sfyp,string Sfjj,string Scggdh,string ClothType,string Tzecode)
	    {
		    TAnalysisOutputList item = new TAnalysisOutputList();
		    
            item.OrderId = OrderId;
            
            item.JobCode = JobCode;
            
            item.Project = Project;
            
            item.OrderType = OrderType;
            
            item.CoatType = CoatType;
            
            item.BodyType = BodyType;
            
            item.Fabric = Fabric;
            
            item.OrderTime = OrderTime;
            
            item.DeliveryTime = DeliveryTime;
            
            item.SpecialTime = SpecialTime;
            
            item.SpecialCode = SpecialCode;
            
            item.Styles = Styles;
            
            item.StylesResult = StylesResult;
            
            item.Numbers = Numbers;
            
            item.PlanNum = PlanNum;
            
            item.SupportingWay = SupportingWay;
            
            item.Workinfo = Workinfo;
            
            item.OrderNo = OrderNo;
            
            item.Customer = Customer;
            
            item.OriginalCode = OriginalCode;
            
            item.Abnormal = Abnormal;
            
            item.Note = Note;
            
            item.Resources = Resources;
            
            item.BeginTime = BeginTime;
            
            item.EndTime = EndTime;
            
            item.MakeTime = MakeTime;
            
            item.CreateDate = CreateDate;
            
            item.Pbcd = Pbcd;
            
            item.Gydm = Gydm;
            
            item.Scjhdd = Scjhdd;
            
            item.FlagStatus = FlagStatus;
            
            item.Sfyp = Sfyp;
            
            item.Sfjj = Sfjj;
            
            item.Scggdh = Scggdh;
            
            item.ClothType = ClothType;
            
            item.Tzecode = Tzecode;
            
	    
		    item.Save(UserName);
	    }
    	
	    /// <summary>
	    /// Updates a record, can be used with the Object Data Source
	    /// </summary>
        [DataObjectMethod(DataObjectMethodType.Update, true)]
	    public void Update(string OrderId,string JobCode,string Project,string OrderType,string CoatType,string BodyType,string Fabric,DateTime? OrderTime,DateTime? DeliveryTime,int? SpecialTime,string SpecialCode,string Styles,string StylesResult,int? Numbers,int? PlanNum,string SupportingWay,int? Workinfo,string OrderNo,string Customer,string OriginalCode,string Abnormal,string Note,string Resources,DateTime? BeginTime,DateTime? EndTime,string MakeTime,DateTime? CreateDate,string Pbcd,string Gydm,string Scjhdd,int? FlagStatus,string Sfyp,string Sfjj,string Scggdh,string ClothType,string Tzecode)
	    {
		    TAnalysisOutputList item = new TAnalysisOutputList();
	        item.MarkOld();
	        item.IsLoaded = true;
		    
			item.OrderId = OrderId;
				
			item.JobCode = JobCode;
				
			item.Project = Project;
				
			item.OrderType = OrderType;
				
			item.CoatType = CoatType;
				
			item.BodyType = BodyType;
				
			item.Fabric = Fabric;
				
			item.OrderTime = OrderTime;
				
			item.DeliveryTime = DeliveryTime;
				
			item.SpecialTime = SpecialTime;
				
			item.SpecialCode = SpecialCode;
				
			item.Styles = Styles;
				
			item.StylesResult = StylesResult;
				
			item.Numbers = Numbers;
				
			item.PlanNum = PlanNum;
				
			item.SupportingWay = SupportingWay;
				
			item.Workinfo = Workinfo;
				
			item.OrderNo = OrderNo;
				
			item.Customer = Customer;
				
			item.OriginalCode = OriginalCode;
				
			item.Abnormal = Abnormal;
				
			item.Note = Note;
				
			item.Resources = Resources;
				
			item.BeginTime = BeginTime;
				
			item.EndTime = EndTime;
				
			item.MakeTime = MakeTime;
				
			item.CreateDate = CreateDate;
				
			item.Pbcd = Pbcd;
				
			item.Gydm = Gydm;
				
			item.Scjhdd = Scjhdd;
				
			item.FlagStatus = FlagStatus;
				
			item.Sfyp = Sfyp;
				
			item.Sfjj = Sfjj;
				
			item.Scggdh = Scggdh;
				
			item.ClothType = ClothType;
				
			item.Tzecode = Tzecode;
				
	        item.Save(UserName);
	    }
    }
}

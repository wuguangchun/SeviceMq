using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace APSData
{
	/// <summary>
	/// Strongly-typed collection for the TErpOrder class.
	/// </summary>
    [Serializable]
	public partial class TErpOrderCollection : ActiveList<TErpOrder, TErpOrderCollection>
	{	   
		public TErpOrderCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>TErpOrderCollection</returns>
		public TErpOrderCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                TErpOrder o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the T_ERP_Order table.
	/// </summary>
	[Serializable]
	public partial class TErpOrder : ActiveRecord<TErpOrder>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public TErpOrder()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public TErpOrder(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public TErpOrder(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public TErpOrder(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("T_ERP_Order", TableType.Table, DataService.GetInstance("Nowthwin"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarId = new TableSchema.TableColumn(schema);
				colvarId.ColumnName = "ID";
				colvarId.DataType = DbType.String;
				colvarId.MaxLength = 50;
				colvarId.AutoIncrement = false;
				colvarId.IsNullable = false;
				colvarId.IsPrimaryKey = true;
				colvarId.IsForeignKey = false;
				colvarId.IsReadOnly = false;
				colvarId.DefaultSetting = @"";
				colvarId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarId);
				
				TableSchema.TableColumn colvarCustomerId = new TableSchema.TableColumn(schema);
				colvarCustomerId.ColumnName = "customerId";
				colvarCustomerId.DataType = DbType.String;
				colvarCustomerId.MaxLength = 50;
				colvarCustomerId.AutoIncrement = false;
				colvarCustomerId.IsNullable = true;
				colvarCustomerId.IsPrimaryKey = false;
				colvarCustomerId.IsForeignKey = false;
				colvarCustomerId.IsReadOnly = false;
				colvarCustomerId.DefaultSetting = @"";
				colvarCustomerId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCustomerId);
				
				TableSchema.TableColumn colvarNumbers = new TableSchema.TableColumn(schema);
				colvarNumbers.ColumnName = "numbers";
				colvarNumbers.DataType = DbType.Int32;
				colvarNumbers.MaxLength = 0;
				colvarNumbers.AutoIncrement = false;
				colvarNumbers.IsNullable = true;
				colvarNumbers.IsPrimaryKey = false;
				colvarNumbers.IsForeignKey = false;
				colvarNumbers.IsReadOnly = false;
				colvarNumbers.DefaultSetting = @"";
				colvarNumbers.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNumbers);
				
				TableSchema.TableColumn colvarRowNumber = new TableSchema.TableColumn(schema);
				colvarRowNumber.ColumnName = "rowNumber";
				colvarRowNumber.DataType = DbType.Int32;
				colvarRowNumber.MaxLength = 0;
				colvarRowNumber.AutoIncrement = false;
				colvarRowNumber.IsNullable = true;
				colvarRowNumber.IsPrimaryKey = false;
				colvarRowNumber.IsForeignKey = false;
				colvarRowNumber.IsReadOnly = false;
				colvarRowNumber.DefaultSetting = @"";
				colvarRowNumber.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRowNumber);
				
				TableSchema.TableColumn colvarSize = new TableSchema.TableColumn(schema);
				colvarSize.ColumnName = "size";
				colvarSize.DataType = DbType.String;
				colvarSize.MaxLength = 50;
				colvarSize.AutoIncrement = false;
				colvarSize.IsNullable = true;
				colvarSize.IsPrimaryKey = false;
				colvarSize.IsForeignKey = false;
				colvarSize.IsReadOnly = false;
				colvarSize.DefaultSetting = @"";
				colvarSize.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSize);
				
				TableSchema.TableColumn colvarSjbh = new TableSchema.TableColumn(schema);
				colvarSjbh.ColumnName = "SJBH";
				colvarSjbh.DataType = DbType.String;
				colvarSjbh.MaxLength = 50;
				colvarSjbh.AutoIncrement = false;
				colvarSjbh.IsNullable = true;
				colvarSjbh.IsPrimaryKey = false;
				colvarSjbh.IsForeignKey = false;
				colvarSjbh.IsReadOnly = false;
				colvarSjbh.DefaultSetting = @"";
				colvarSjbh.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSjbh);
				
				TableSchema.TableColumn colvarStyle = new TableSchema.TableColumn(schema);
				colvarStyle.ColumnName = "style";
				colvarStyle.DataType = DbType.String;
				colvarStyle.MaxLength = 50;
				colvarStyle.AutoIncrement = false;
				colvarStyle.IsNullable = true;
				colvarStyle.IsPrimaryKey = false;
				colvarStyle.IsForeignKey = false;
				colvarStyle.IsReadOnly = false;
				colvarStyle.DefaultSetting = @"";
				colvarStyle.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStyle);
				
				TableSchema.TableColumn colvarType = new TableSchema.TableColumn(schema);
				colvarType.ColumnName = "type";
				colvarType.DataType = DbType.String;
				colvarType.MaxLength = 50;
				colvarType.AutoIncrement = false;
				colvarType.IsNullable = true;
				colvarType.IsPrimaryKey = false;
				colvarType.IsForeignKey = false;
				colvarType.IsReadOnly = false;
				colvarType.DefaultSetting = @"";
				colvarType.ForeignKeyTableName = "";
				schema.Columns.Add(colvarType);
				
				TableSchema.TableColumn colvarFlagStatus = new TableSchema.TableColumn(schema);
				colvarFlagStatus.ColumnName = "flagStatus";
				colvarFlagStatus.DataType = DbType.Decimal;
				colvarFlagStatus.MaxLength = 0;
				colvarFlagStatus.AutoIncrement = false;
				colvarFlagStatus.IsNullable = true;
				colvarFlagStatus.IsPrimaryKey = false;
				colvarFlagStatus.IsForeignKey = false;
				colvarFlagStatus.IsReadOnly = false;
				colvarFlagStatus.DefaultSetting = @"";
				colvarFlagStatus.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFlagStatus);
				
				TableSchema.TableColumn colvarScjhdd = new TableSchema.TableColumn(schema);
				colvarScjhdd.ColumnName = "scjhdd";
				colvarScjhdd.DataType = DbType.String;
				colvarScjhdd.MaxLength = 50;
				colvarScjhdd.AutoIncrement = false;
				colvarScjhdd.IsNullable = true;
				colvarScjhdd.IsPrimaryKey = false;
				colvarScjhdd.IsForeignKey = false;
				colvarScjhdd.IsReadOnly = false;
				colvarScjhdd.DefaultSetting = @"";
				colvarScjhdd.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScjhdd);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["Nowthwin"].AddSchema("T_ERP_Order",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Id")]
		[Bindable(true)]
		public string Id 
		{
			get { return GetColumnValue<string>(Columns.Id); }
			set { SetColumnValue(Columns.Id, value); }
		}
		  
		[XmlAttribute("CustomerId")]
		[Bindable(true)]
		public string CustomerId 
		{
			get { return GetColumnValue<string>(Columns.CustomerId); }
			set { SetColumnValue(Columns.CustomerId, value); }
		}
		  
		[XmlAttribute("Numbers")]
		[Bindable(true)]
		public int? Numbers 
		{
			get { return GetColumnValue<int?>(Columns.Numbers); }
			set { SetColumnValue(Columns.Numbers, value); }
		}
		  
		[XmlAttribute("RowNumber")]
		[Bindable(true)]
		public int? RowNumber 
		{
			get { return GetColumnValue<int?>(Columns.RowNumber); }
			set { SetColumnValue(Columns.RowNumber, value); }
		}
		  
		[XmlAttribute("Size")]
		[Bindable(true)]
		public string Size 
		{
			get { return GetColumnValue<string>(Columns.Size); }
			set { SetColumnValue(Columns.Size, value); }
		}
		  
		[XmlAttribute("Sjbh")]
		[Bindable(true)]
		public string Sjbh 
		{
			get { return GetColumnValue<string>(Columns.Sjbh); }
			set { SetColumnValue(Columns.Sjbh, value); }
		}
		  
		[XmlAttribute("Style")]
		[Bindable(true)]
		public string Style 
		{
			get { return GetColumnValue<string>(Columns.Style); }
			set { SetColumnValue(Columns.Style, value); }
		}
		  
		[XmlAttribute("Type")]
		[Bindable(true)]
		public string Type 
		{
			get { return GetColumnValue<string>(Columns.Type); }
			set { SetColumnValue(Columns.Type, value); }
		}
		  
		[XmlAttribute("FlagStatus")]
		[Bindable(true)]
		public decimal? FlagStatus 
		{
			get { return GetColumnValue<decimal?>(Columns.FlagStatus); }
			set { SetColumnValue(Columns.FlagStatus, value); }
		}
		  
		[XmlAttribute("Scjhdd")]
		[Bindable(true)]
		public string Scjhdd 
		{
			get { return GetColumnValue<string>(Columns.Scjhdd); }
			set { SetColumnValue(Columns.Scjhdd, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varId,string varCustomerId,int? varNumbers,int? varRowNumber,string varSize,string varSjbh,string varStyle,string varType,decimal? varFlagStatus,string varScjhdd)
		{
			TErpOrder item = new TErpOrder();
			
			item.Id = varId;
			
			item.CustomerId = varCustomerId;
			
			item.Numbers = varNumbers;
			
			item.RowNumber = varRowNumber;
			
			item.Size = varSize;
			
			item.Sjbh = varSjbh;
			
			item.Style = varStyle;
			
			item.Type = varType;
			
			item.FlagStatus = varFlagStatus;
			
			item.Scjhdd = varScjhdd;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(string varId,string varCustomerId,int? varNumbers,int? varRowNumber,string varSize,string varSjbh,string varStyle,string varType,decimal? varFlagStatus,string varScjhdd)
		{
			TErpOrder item = new TErpOrder();
			
				item.Id = varId;
			
				item.CustomerId = varCustomerId;
			
				item.Numbers = varNumbers;
			
				item.RowNumber = varRowNumber;
			
				item.Size = varSize;
			
				item.Sjbh = varSjbh;
			
				item.Style = varStyle;
			
				item.Type = varType;
			
				item.FlagStatus = varFlagStatus;
			
				item.Scjhdd = varScjhdd;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn IdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn CustomerIdColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn NumbersColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn RowNumberColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn SizeColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn SjbhColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn StyleColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn TypeColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn FlagStatusColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn ScjhddColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Id = @"ID";
			 public static string CustomerId = @"customerId";
			 public static string Numbers = @"numbers";
			 public static string RowNumber = @"rowNumber";
			 public static string Size = @"size";
			 public static string Sjbh = @"SJBH";
			 public static string Style = @"style";
			 public static string Type = @"type";
			 public static string FlagStatus = @"flagStatus";
			 public static string Scjhdd = @"scjhdd";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}

using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace Model
{
	/// <summary>
	/// Strongly-typed collection for the TBasisIntercourse class.
	/// </summary>
    [Serializable]
	public partial class TBasisIntercourseCollection : ActiveList<TBasisIntercourse, TBasisIntercourseCollection>
	{	   
		public TBasisIntercourseCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>TBasisIntercourseCollection</returns>
		public TBasisIntercourseCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                TBasisIntercourse o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the T_Basis_Intercourse table.
	/// </summary>
	[Serializable]
	public partial class TBasisIntercourse : ActiveRecord<TBasisIntercourse>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public TBasisIntercourse()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public TBasisIntercourse(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public TBasisIntercourse(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public TBasisIntercourse(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("T_Basis_Intercourse", TableType.Table, DataService.GetInstance("Nowthwin"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarXtwldm = new TableSchema.TableColumn(schema);
				colvarXtwldm.ColumnName = "xtwldm";
				colvarXtwldm.DataType = DbType.String;
				colvarXtwldm.MaxLength = 100;
				colvarXtwldm.AutoIncrement = false;
				colvarXtwldm.IsNullable = false;
				colvarXtwldm.IsPrimaryKey = true;
				colvarXtwldm.IsForeignKey = false;
				colvarXtwldm.IsReadOnly = false;
				colvarXtwldm.DefaultSetting = @"";
				colvarXtwldm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXtwldm);
				
				TableSchema.TableColumn colvarXtwlmc = new TableSchema.TableColumn(schema);
				colvarXtwlmc.ColumnName = "xtwlmc";
				colvarXtwlmc.DataType = DbType.String;
				colvarXtwlmc.MaxLength = 200;
				colvarXtwlmc.AutoIncrement = false;
				colvarXtwlmc.IsNullable = true;
				colvarXtwlmc.IsPrimaryKey = false;
				colvarXtwlmc.IsForeignKey = false;
				colvarXtwlmc.IsReadOnly = false;
				colvarXtwlmc.DefaultSetting = @"";
				colvarXtwlmc.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXtwlmc);
				
				TableSchema.TableColumn colvarXtdqdm = new TableSchema.TableColumn(schema);
				colvarXtdqdm.ColumnName = "xtdqdm";
				colvarXtdqdm.DataType = DbType.String;
				colvarXtdqdm.MaxLength = 50;
				colvarXtdqdm.AutoIncrement = false;
				colvarXtdqdm.IsNullable = true;
				colvarXtdqdm.IsPrimaryKey = false;
				colvarXtdqdm.IsForeignKey = false;
				colvarXtdqdm.IsReadOnly = false;
				colvarXtdqdm.DefaultSetting = @"";
				colvarXtdqdm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXtdqdm);
				
				TableSchema.TableColumn colvarXtbmdm = new TableSchema.TableColumn(schema);
				colvarXtbmdm.ColumnName = "xtbmdm";
				colvarXtbmdm.DataType = DbType.String;
				colvarXtbmdm.MaxLength = 50;
				colvarXtbmdm.AutoIncrement = false;
				colvarXtbmdm.IsNullable = true;
				colvarXtbmdm.IsPrimaryKey = false;
				colvarXtbmdm.IsForeignKey = false;
				colvarXtbmdm.IsReadOnly = false;
				colvarXtbmdm.DefaultSetting = @"";
				colvarXtbmdm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXtbmdm);
				
				TableSchema.TableColumn colvarXtwlzt = new TableSchema.TableColumn(schema);
				colvarXtwlzt.ColumnName = "xtwlzt";
				colvarXtwlzt.DataType = DbType.String;
				colvarXtwlzt.MaxLength = 20;
				colvarXtwlzt.AutoIncrement = false;
				colvarXtwlzt.IsNullable = true;
				colvarXtwlzt.IsPrimaryKey = false;
				colvarXtwlzt.IsForeignKey = false;
				colvarXtwlzt.IsReadOnly = false;
				colvarXtwlzt.DefaultSetting = @"";
				colvarXtwlzt.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXtwlzt);
				
				TableSchema.TableColumn colvarXskhzb = new TableSchema.TableColumn(schema);
				colvarXskhzb.ColumnName = "xskhzb";
				colvarXskhzb.DataType = DbType.String;
				colvarXskhzb.MaxLength = 10;
				colvarXskhzb.AutoIncrement = false;
				colvarXskhzb.IsNullable = true;
				colvarXskhzb.IsPrimaryKey = false;
				colvarXskhzb.IsForeignKey = false;
				colvarXskhzb.IsReadOnly = false;
				colvarXskhzb.DefaultSetting = @"";
				colvarXskhzb.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXskhzb);
				
				TableSchema.TableColumn colvarBmscsj = new TableSchema.TableColumn(schema);
				colvarBmscsj.ColumnName = "bmscsj";
				colvarBmscsj.DataType = DbType.AnsiString;
				colvarBmscsj.MaxLength = 0;
				colvarBmscsj.AutoIncrement = false;
				colvarBmscsj.IsNullable = true;
				colvarBmscsj.IsPrimaryKey = false;
				colvarBmscsj.IsForeignKey = false;
				colvarBmscsj.IsReadOnly = false;
				colvarBmscsj.DefaultSetting = @"";
				colvarBmscsj.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBmscsj);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["Nowthwin"].AddSchema("T_Basis_Intercourse",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Xtwldm")]
		[Bindable(true)]
		public string Xtwldm 
		{
			get { return GetColumnValue<string>(Columns.Xtwldm); }
			set { SetColumnValue(Columns.Xtwldm, value); }
		}
		  
		[XmlAttribute("Xtwlmc")]
		[Bindable(true)]
		public string Xtwlmc 
		{
			get { return GetColumnValue<string>(Columns.Xtwlmc); }
			set { SetColumnValue(Columns.Xtwlmc, value); }
		}
		  
		[XmlAttribute("Xtdqdm")]
		[Bindable(true)]
		public string Xtdqdm 
		{
			get { return GetColumnValue<string>(Columns.Xtdqdm); }
			set { SetColumnValue(Columns.Xtdqdm, value); }
		}
		  
		[XmlAttribute("Xtbmdm")]
		[Bindable(true)]
		public string Xtbmdm 
		{
			get { return GetColumnValue<string>(Columns.Xtbmdm); }
			set { SetColumnValue(Columns.Xtbmdm, value); }
		}
		  
		[XmlAttribute("Xtwlzt")]
		[Bindable(true)]
		public string Xtwlzt 
		{
			get { return GetColumnValue<string>(Columns.Xtwlzt); }
			set { SetColumnValue(Columns.Xtwlzt, value); }
		}
		  
		[XmlAttribute("Xskhzb")]
		[Bindable(true)]
		public string Xskhzb 
		{
			get { return GetColumnValue<string>(Columns.Xskhzb); }
			set { SetColumnValue(Columns.Xskhzb, value); }
		}
		  
		[XmlAttribute("Bmscsj")]
		[Bindable(true)]
		public string Bmscsj 
		{
			get { return GetColumnValue<string>(Columns.Bmscsj); }
			set { SetColumnValue(Columns.Bmscsj, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varXtwldm,string varXtwlmc,string varXtdqdm,string varXtbmdm,string varXtwlzt,string varXskhzb,string varBmscsj)
		{
			TBasisIntercourse item = new TBasisIntercourse();
			
			item.Xtwldm = varXtwldm;
			
			item.Xtwlmc = varXtwlmc;
			
			item.Xtdqdm = varXtdqdm;
			
			item.Xtbmdm = varXtbmdm;
			
			item.Xtwlzt = varXtwlzt;
			
			item.Xskhzb = varXskhzb;
			
			item.Bmscsj = varBmscsj;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(string varXtwldm,string varXtwlmc,string varXtdqdm,string varXtbmdm,string varXtwlzt,string varXskhzb,string varBmscsj)
		{
			TBasisIntercourse item = new TBasisIntercourse();
			
				item.Xtwldm = varXtwldm;
			
				item.Xtwlmc = varXtwlmc;
			
				item.Xtdqdm = varXtdqdm;
			
				item.Xtbmdm = varXtbmdm;
			
				item.Xtwlzt = varXtwlzt;
			
				item.Xskhzb = varXskhzb;
			
				item.Bmscsj = varBmscsj;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn XtwldmColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn XtwlmcColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn XtdqdmColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn XtbmdmColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn XtwlztColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn XskhzbColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn BmscsjColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Xtwldm = @"xtwldm";
			 public static string Xtwlmc = @"xtwlmc";
			 public static string Xtdqdm = @"xtdqdm";
			 public static string Xtbmdm = @"xtbmdm";
			 public static string Xtwlzt = @"xtwlzt";
			 public static string Xskhzb = @"xskhzb";
			 public static string Bmscsj = @"bmscsj";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}

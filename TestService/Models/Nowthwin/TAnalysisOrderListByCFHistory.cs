using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace Model
{
	/// <summary>
	/// Strongly-typed collection for the TAnalysisOrderListByCFHistory class.
	/// </summary>
    [Serializable]
	public partial class TAnalysisOrderListByCFHistoryCollection : ActiveList<TAnalysisOrderListByCFHistory, TAnalysisOrderListByCFHistoryCollection>
	{	   
		public TAnalysisOrderListByCFHistoryCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>TAnalysisOrderListByCFHistoryCollection</returns>
		public TAnalysisOrderListByCFHistoryCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                TAnalysisOrderListByCFHistory o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the T_Analysis_OrderListByCF@History table.
	/// </summary>
	[Serializable]
	public partial class TAnalysisOrderListByCFHistory : ActiveRecord<TAnalysisOrderListByCFHistory>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public TAnalysisOrderListByCFHistory()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public TAnalysisOrderListByCFHistory(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public TAnalysisOrderListByCFHistory(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public TAnalysisOrderListByCFHistory(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("T_Analysis_OrderListByCF@History", TableType.Table, DataService.GetInstance("Nowthwin"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarOrderId = new TableSchema.TableColumn(schema);
				colvarOrderId.ColumnName = "orderId";
				colvarOrderId.DataType = DbType.String;
				colvarOrderId.MaxLength = 50;
				colvarOrderId.AutoIncrement = false;
				colvarOrderId.IsNullable = false;
				colvarOrderId.IsPrimaryKey = true;
				colvarOrderId.IsForeignKey = false;
				colvarOrderId.IsReadOnly = false;
				colvarOrderId.DefaultSetting = @"";
				colvarOrderId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOrderId);
				
				TableSchema.TableColumn colvarCustomerId = new TableSchema.TableColumn(schema);
				colvarCustomerId.ColumnName = "customerId";
				colvarCustomerId.DataType = DbType.String;
				colvarCustomerId.MaxLength = 50;
				colvarCustomerId.AutoIncrement = false;
				colvarCustomerId.IsNullable = false;
				colvarCustomerId.IsPrimaryKey = false;
				colvarCustomerId.IsForeignKey = false;
				colvarCustomerId.IsReadOnly = false;
				colvarCustomerId.DefaultSetting = @"";
				colvarCustomerId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCustomerId);
				
				TableSchema.TableColumn colvarProject = new TableSchema.TableColumn(schema);
				colvarProject.ColumnName = "project";
				colvarProject.DataType = DbType.String;
				colvarProject.MaxLength = 20;
				colvarProject.AutoIncrement = false;
				colvarProject.IsNullable = true;
				colvarProject.IsPrimaryKey = false;
				colvarProject.IsForeignKey = false;
				colvarProject.IsReadOnly = false;
				colvarProject.DefaultSetting = @"";
				colvarProject.ForeignKeyTableName = "";
				schema.Columns.Add(colvarProject);
				
				TableSchema.TableColumn colvarOrderType = new TableSchema.TableColumn(schema);
				colvarOrderType.ColumnName = "orderType";
				colvarOrderType.DataType = DbType.String;
				colvarOrderType.MaxLength = 20;
				colvarOrderType.AutoIncrement = false;
				colvarOrderType.IsNullable = true;
				colvarOrderType.IsPrimaryKey = false;
				colvarOrderType.IsForeignKey = false;
				colvarOrderType.IsReadOnly = false;
				colvarOrderType.DefaultSetting = @"";
				colvarOrderType.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOrderType);
				
				TableSchema.TableColumn colvarCoatType = new TableSchema.TableColumn(schema);
				colvarCoatType.ColumnName = "coatType";
				colvarCoatType.DataType = DbType.String;
				colvarCoatType.MaxLength = 50;
				colvarCoatType.AutoIncrement = false;
				colvarCoatType.IsNullable = true;
				colvarCoatType.IsPrimaryKey = false;
				colvarCoatType.IsForeignKey = false;
				colvarCoatType.IsReadOnly = false;
				colvarCoatType.DefaultSetting = @"";
				colvarCoatType.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCoatType);
				
				TableSchema.TableColumn colvarBodyType = new TableSchema.TableColumn(schema);
				colvarBodyType.ColumnName = "bodyType";
				colvarBodyType.DataType = DbType.String;
				colvarBodyType.MaxLength = 50;
				colvarBodyType.AutoIncrement = false;
				colvarBodyType.IsNullable = true;
				colvarBodyType.IsPrimaryKey = false;
				colvarBodyType.IsForeignKey = false;
				colvarBodyType.IsReadOnly = false;
				colvarBodyType.DefaultSetting = @"";
				colvarBodyType.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBodyType);
				
				TableSchema.TableColumn colvarFabric = new TableSchema.TableColumn(schema);
				colvarFabric.ColumnName = "fabric";
				colvarFabric.DataType = DbType.String;
				colvarFabric.MaxLength = 100;
				colvarFabric.AutoIncrement = false;
				colvarFabric.IsNullable = true;
				colvarFabric.IsPrimaryKey = false;
				colvarFabric.IsForeignKey = false;
				colvarFabric.IsReadOnly = false;
				colvarFabric.DefaultSetting = @"";
				colvarFabric.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFabric);
				
				TableSchema.TableColumn colvarMflxx = new TableSchema.TableColumn(schema);
				colvarMflxx.ColumnName = "mflxx";
				colvarMflxx.DataType = DbType.String;
				colvarMflxx.MaxLength = -1;
				colvarMflxx.AutoIncrement = false;
				colvarMflxx.IsNullable = true;
				colvarMflxx.IsPrimaryKey = false;
				colvarMflxx.IsForeignKey = false;
				colvarMflxx.IsReadOnly = false;
				colvarMflxx.DefaultSetting = @"";
				colvarMflxx.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMflxx);
				
				TableSchema.TableColumn colvarOrderTime = new TableSchema.TableColumn(schema);
				colvarOrderTime.ColumnName = "orderTime";
				colvarOrderTime.DataType = DbType.DateTime;
				colvarOrderTime.MaxLength = 0;
				colvarOrderTime.AutoIncrement = false;
				colvarOrderTime.IsNullable = true;
				colvarOrderTime.IsPrimaryKey = false;
				colvarOrderTime.IsForeignKey = false;
				colvarOrderTime.IsReadOnly = false;
				colvarOrderTime.DefaultSetting = @"";
				colvarOrderTime.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOrderTime);
				
				TableSchema.TableColumn colvarDeliveryTime = new TableSchema.TableColumn(schema);
				colvarDeliveryTime.ColumnName = "deliveryTime";
				colvarDeliveryTime.DataType = DbType.DateTime;
				colvarDeliveryTime.MaxLength = 0;
				colvarDeliveryTime.AutoIncrement = false;
				colvarDeliveryTime.IsNullable = true;
				colvarDeliveryTime.IsPrimaryKey = false;
				colvarDeliveryTime.IsForeignKey = false;
				colvarDeliveryTime.IsReadOnly = false;
				colvarDeliveryTime.DefaultSetting = @"";
				colvarDeliveryTime.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDeliveryTime);
				
				TableSchema.TableColumn colvarSpecialTime = new TableSchema.TableColumn(schema);
				colvarSpecialTime.ColumnName = "specialTime";
				colvarSpecialTime.DataType = DbType.Int32;
				colvarSpecialTime.MaxLength = 0;
				colvarSpecialTime.AutoIncrement = false;
				colvarSpecialTime.IsNullable = true;
				colvarSpecialTime.IsPrimaryKey = false;
				colvarSpecialTime.IsForeignKey = false;
				colvarSpecialTime.IsReadOnly = false;
				colvarSpecialTime.DefaultSetting = @"";
				colvarSpecialTime.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSpecialTime);
				
				TableSchema.TableColumn colvarSpecialCode = new TableSchema.TableColumn(schema);
				colvarSpecialCode.ColumnName = "specialCode";
				colvarSpecialCode.DataType = DbType.String;
				colvarSpecialCode.MaxLength = 100;
				colvarSpecialCode.AutoIncrement = false;
				colvarSpecialCode.IsNullable = true;
				colvarSpecialCode.IsPrimaryKey = false;
				colvarSpecialCode.IsForeignKey = false;
				colvarSpecialCode.IsReadOnly = false;
				colvarSpecialCode.DefaultSetting = @"";
				colvarSpecialCode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSpecialCode);
				
				TableSchema.TableColumn colvarStyles = new TableSchema.TableColumn(schema);
				colvarStyles.ColumnName = "styles";
				colvarStyles.DataType = DbType.String;
				colvarStyles.MaxLength = 100;
				colvarStyles.AutoIncrement = false;
				colvarStyles.IsNullable = true;
				colvarStyles.IsPrimaryKey = false;
				colvarStyles.IsForeignKey = false;
				colvarStyles.IsReadOnly = false;
				colvarStyles.DefaultSetting = @"";
				colvarStyles.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStyles);
				
				TableSchema.TableColumn colvarStylesResult = new TableSchema.TableColumn(schema);
				colvarStylesResult.ColumnName = "stylesResult";
				colvarStylesResult.DataType = DbType.String;
				colvarStylesResult.MaxLength = 100;
				colvarStylesResult.AutoIncrement = false;
				colvarStylesResult.IsNullable = true;
				colvarStylesResult.IsPrimaryKey = false;
				colvarStylesResult.IsForeignKey = false;
				colvarStylesResult.IsReadOnly = false;
				colvarStylesResult.DefaultSetting = @"";
				colvarStylesResult.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStylesResult);
				
				TableSchema.TableColumn colvarNumbers = new TableSchema.TableColumn(schema);
				colvarNumbers.ColumnName = "numbers";
				colvarNumbers.DataType = DbType.Int32;
				colvarNumbers.MaxLength = 0;
				colvarNumbers.AutoIncrement = false;
				colvarNumbers.IsNullable = true;
				colvarNumbers.IsPrimaryKey = false;
				colvarNumbers.IsForeignKey = false;
				colvarNumbers.IsReadOnly = false;
				colvarNumbers.DefaultSetting = @"";
				colvarNumbers.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNumbers);
				
				TableSchema.TableColumn colvarSupportingWay = new TableSchema.TableColumn(schema);
				colvarSupportingWay.ColumnName = "supportingWay";
				colvarSupportingWay.DataType = DbType.String;
				colvarSupportingWay.MaxLength = 50;
				colvarSupportingWay.AutoIncrement = false;
				colvarSupportingWay.IsNullable = true;
				colvarSupportingWay.IsPrimaryKey = false;
				colvarSupportingWay.IsForeignKey = false;
				colvarSupportingWay.IsReadOnly = false;
				colvarSupportingWay.DefaultSetting = @"";
				colvarSupportingWay.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSupportingWay);
				
				TableSchema.TableColumn colvarSizes = new TableSchema.TableColumn(schema);
				colvarSizes.ColumnName = "sizes";
				colvarSizes.DataType = DbType.String;
				colvarSizes.MaxLength = 50;
				colvarSizes.AutoIncrement = false;
				colvarSizes.IsNullable = true;
				colvarSizes.IsPrimaryKey = false;
				colvarSizes.IsForeignKey = false;
				colvarSizes.IsReadOnly = false;
				colvarSizes.DefaultSetting = @"";
				colvarSizes.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSizes);
				
				TableSchema.TableColumn colvarCustomer = new TableSchema.TableColumn(schema);
				colvarCustomer.ColumnName = "customer";
				colvarCustomer.DataType = DbType.String;
				colvarCustomer.MaxLength = 100;
				colvarCustomer.AutoIncrement = false;
				colvarCustomer.IsNullable = true;
				colvarCustomer.IsPrimaryKey = false;
				colvarCustomer.IsForeignKey = false;
				colvarCustomer.IsReadOnly = false;
				colvarCustomer.DefaultSetting = @"";
				colvarCustomer.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCustomer);
				
				TableSchema.TableColumn colvarCreateTime = new TableSchema.TableColumn(schema);
				colvarCreateTime.ColumnName = "createTime";
				colvarCreateTime.DataType = DbType.DateTime;
				colvarCreateTime.MaxLength = 0;
				colvarCreateTime.AutoIncrement = false;
				colvarCreateTime.IsNullable = true;
				colvarCreateTime.IsPrimaryKey = false;
				colvarCreateTime.IsForeignKey = false;
				colvarCreateTime.IsReadOnly = false;
				colvarCreateTime.DefaultSetting = @"";
				colvarCreateTime.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreateTime);
				
				TableSchema.TableColumn colvarOrderStatus = new TableSchema.TableColumn(schema);
				colvarOrderStatus.ColumnName = "orderStatus";
				colvarOrderStatus.DataType = DbType.String;
				colvarOrderStatus.MaxLength = 50;
				colvarOrderStatus.AutoIncrement = false;
				colvarOrderStatus.IsNullable = true;
				colvarOrderStatus.IsPrimaryKey = false;
				colvarOrderStatus.IsForeignKey = false;
				colvarOrderStatus.IsReadOnly = false;
				colvarOrderStatus.DefaultSetting = @"";
				colvarOrderStatus.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOrderStatus);
				
				TableSchema.TableColumn colvarCreateDate = new TableSchema.TableColumn(schema);
				colvarCreateDate.ColumnName = "createDate";
				colvarCreateDate.DataType = DbType.DateTime;
				colvarCreateDate.MaxLength = 0;
				colvarCreateDate.AutoIncrement = false;
				colvarCreateDate.IsNullable = true;
				colvarCreateDate.IsPrimaryKey = false;
				colvarCreateDate.IsForeignKey = false;
				colvarCreateDate.IsReadOnly = false;
				colvarCreateDate.DefaultSetting = @"";
				colvarCreateDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreateDate);
				
				TableSchema.TableColumn colvarPbcd = new TableSchema.TableColumn(schema);
				colvarPbcd.ColumnName = "pbcd";
				colvarPbcd.DataType = DbType.String;
				colvarPbcd.MaxLength = 50;
				colvarPbcd.AutoIncrement = false;
				colvarPbcd.IsNullable = true;
				colvarPbcd.IsPrimaryKey = false;
				colvarPbcd.IsForeignKey = false;
				colvarPbcd.IsReadOnly = false;
				colvarPbcd.DefaultSetting = @"";
				colvarPbcd.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPbcd);
				
				TableSchema.TableColumn colvarGydm = new TableSchema.TableColumn(schema);
				colvarGydm.ColumnName = "gydm";
				colvarGydm.DataType = DbType.String;
				colvarGydm.MaxLength = 100;
				colvarGydm.AutoIncrement = false;
				colvarGydm.IsNullable = true;
				colvarGydm.IsPrimaryKey = false;
				colvarGydm.IsForeignKey = false;
				colvarGydm.IsReadOnly = false;
				colvarGydm.DefaultSetting = @"";
				colvarGydm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGydm);
				
				TableSchema.TableColumn colvarAudittime = new TableSchema.TableColumn(schema);
				colvarAudittime.ColumnName = "audittime";
				colvarAudittime.DataType = DbType.DateTime;
				colvarAudittime.MaxLength = 0;
				colvarAudittime.AutoIncrement = false;
				colvarAudittime.IsNullable = true;
				colvarAudittime.IsPrimaryKey = false;
				colvarAudittime.IsForeignKey = false;
				colvarAudittime.IsReadOnly = false;
				colvarAudittime.DefaultSetting = @"";
				colvarAudittime.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAudittime);
				
				TableSchema.TableColumn colvarSfbcpsy = new TableSchema.TableColumn(schema);
				colvarSfbcpsy.ColumnName = "sfbcpsy";
				colvarSfbcpsy.DataType = DbType.String;
				colvarSfbcpsy.MaxLength = 50;
				colvarSfbcpsy.AutoIncrement = false;
				colvarSfbcpsy.IsNullable = true;
				colvarSfbcpsy.IsPrimaryKey = false;
				colvarSfbcpsy.IsForeignKey = false;
				colvarSfbcpsy.IsReadOnly = false;
				colvarSfbcpsy.DefaultSetting = @"";
				colvarSfbcpsy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSfbcpsy);
				
				TableSchema.TableColumn colvarTzecode = new TableSchema.TableColumn(schema);
				colvarTzecode.ColumnName = "tzecode";
				colvarTzecode.DataType = DbType.String;
				colvarTzecode.MaxLength = 50;
				colvarTzecode.AutoIncrement = false;
				colvarTzecode.IsNullable = true;
				colvarTzecode.IsPrimaryKey = false;
				colvarTzecode.IsForeignKey = false;
				colvarTzecode.IsReadOnly = false;
				colvarTzecode.DefaultSetting = @"";
				colvarTzecode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTzecode);
				
				TableSchema.TableColumn colvarScggdh = new TableSchema.TableColumn(schema);
				colvarScggdh.ColumnName = "SCGGDH";
				colvarScggdh.DataType = DbType.String;
				colvarScggdh.MaxLength = 50;
				colvarScggdh.AutoIncrement = false;
				colvarScggdh.IsNullable = true;
				colvarScggdh.IsPrimaryKey = false;
				colvarScggdh.IsForeignKey = false;
				colvarScggdh.IsReadOnly = false;
				colvarScggdh.DefaultSetting = @"";
				colvarScggdh.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScggdh);
				
				TableSchema.TableColumn colvarModifyTime = new TableSchema.TableColumn(schema);
				colvarModifyTime.ColumnName = "modifyTime";
				colvarModifyTime.DataType = DbType.DateTime;
				colvarModifyTime.MaxLength = 0;
				colvarModifyTime.AutoIncrement = false;
				colvarModifyTime.IsNullable = true;
				colvarModifyTime.IsPrimaryKey = false;
				colvarModifyTime.IsForeignKey = false;
				colvarModifyTime.IsReadOnly = false;
				colvarModifyTime.DefaultSetting = @"";
				colvarModifyTime.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifyTime);
				
				TableSchema.TableColumn colvarPbcdName = new TableSchema.TableColumn(schema);
				colvarPbcdName.ColumnName = "pbcdName";
				colvarPbcdName.DataType = DbType.String;
				colvarPbcdName.MaxLength = 50;
				colvarPbcdName.AutoIncrement = false;
				colvarPbcdName.IsNullable = true;
				colvarPbcdName.IsPrimaryKey = false;
				colvarPbcdName.IsForeignKey = false;
				colvarPbcdName.IsReadOnly = false;
				colvarPbcdName.DefaultSetting = @"";
				colvarPbcdName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPbcdName);
				
				TableSchema.TableColumn colvarEndTime = new TableSchema.TableColumn(schema);
				colvarEndTime.ColumnName = "endTime";
				colvarEndTime.DataType = DbType.DateTime;
				colvarEndTime.MaxLength = 0;
				colvarEndTime.AutoIncrement = false;
				colvarEndTime.IsNullable = true;
				colvarEndTime.IsPrimaryKey = false;
				colvarEndTime.IsForeignKey = false;
				colvarEndTime.IsReadOnly = false;
				colvarEndTime.DefaultSetting = @"";
				colvarEndTime.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEndTime);
				
				TableSchema.TableColumn colvarType = new TableSchema.TableColumn(schema);
				colvarType.ColumnName = "type";
				colvarType.DataType = DbType.String;
				colvarType.MaxLength = 50;
				colvarType.AutoIncrement = false;
				colvarType.IsNullable = true;
				colvarType.IsPrimaryKey = false;
				colvarType.IsForeignKey = false;
				colvarType.IsReadOnly = false;
				colvarType.DefaultSetting = @"";
				colvarType.ForeignKeyTableName = "";
				schema.Columns.Add(colvarType);
				
				TableSchema.TableColumn colvarTGCode = new TableSchema.TableColumn(schema);
				colvarTGCode.ColumnName = "TGCode";
				colvarTGCode.DataType = DbType.Int32;
				colvarTGCode.MaxLength = 0;
				colvarTGCode.AutoIncrement = false;
				colvarTGCode.IsNullable = true;
				colvarTGCode.IsPrimaryKey = false;
				colvarTGCode.IsForeignKey = false;
				colvarTGCode.IsReadOnly = false;
				colvarTGCode.DefaultSetting = @"";
				colvarTGCode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTGCode);
				
				TableSchema.TableColumn colvarFlagML = new TableSchema.TableColumn(schema);
				colvarFlagML.ColumnName = "flagML";
				colvarFlagML.DataType = DbType.Int32;
				colvarFlagML.MaxLength = 0;
				colvarFlagML.AutoIncrement = false;
				colvarFlagML.IsNullable = true;
				colvarFlagML.IsPrimaryKey = false;
				colvarFlagML.IsForeignKey = false;
				colvarFlagML.IsReadOnly = false;
				colvarFlagML.DefaultSetting = @"";
				colvarFlagML.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFlagML);
				
				TableSchema.TableColumn colvarFgml = new TableSchema.TableColumn(schema);
				colvarFgml.ColumnName = "fgml";
				colvarFgml.DataType = DbType.String;
				colvarFgml.MaxLength = 255;
				colvarFgml.AutoIncrement = false;
				colvarFgml.IsNullable = true;
				colvarFgml.IsPrimaryKey = false;
				colvarFgml.IsForeignKey = false;
				colvarFgml.IsReadOnly = false;
				colvarFgml.DefaultSetting = @"";
				colvarFgml.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFgml);
				
				TableSchema.TableColumn colvarGylx = new TableSchema.TableColumn(schema);
				colvarGylx.ColumnName = "gylx";
				colvarGylx.DataType = DbType.String;
				colvarGylx.MaxLength = 255;
				colvarGylx.AutoIncrement = false;
				colvarGylx.IsNullable = true;
				colvarGylx.IsPrimaryKey = false;
				colvarGylx.IsForeignKey = false;
				colvarGylx.IsReadOnly = false;
				colvarGylx.DefaultSetting = @"";
				colvarGylx.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGylx);
				
				TableSchema.TableColumn colvarGyfx = new TableSchema.TableColumn(schema);
				colvarGyfx.ColumnName = "gyfx";
				colvarGyfx.DataType = DbType.String;
				colvarGyfx.MaxLength = 255;
				colvarGyfx.AutoIncrement = false;
				colvarGyfx.IsNullable = true;
				colvarGyfx.IsPrimaryKey = false;
				colvarGyfx.IsForeignKey = false;
				colvarGyfx.IsReadOnly = false;
				colvarGyfx.DefaultSetting = @"";
				colvarGyfx.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGyfx);
				
				TableSchema.TableColumn colvarSccjjq = new TableSchema.TableColumn(schema);
				colvarSccjjq.ColumnName = "sccjjq";
				colvarSccjjq.DataType = DbType.DateTime;
				colvarSccjjq.MaxLength = 0;
				colvarSccjjq.AutoIncrement = false;
				colvarSccjjq.IsNullable = true;
				colvarSccjjq.IsPrimaryKey = false;
				colvarSccjjq.IsForeignKey = false;
				colvarSccjjq.IsReadOnly = false;
				colvarSccjjq.DefaultSetting = @"";
				colvarSccjjq.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSccjjq);
				
				TableSchema.TableColumn colvarSctcrq = new TableSchema.TableColumn(schema);
				colvarSctcrq.ColumnName = "sctcrq";
				colvarSctcrq.DataType = DbType.DateTime;
				colvarSctcrq.MaxLength = 0;
				colvarSctcrq.AutoIncrement = false;
				colvarSctcrq.IsNullable = true;
				colvarSctcrq.IsPrimaryKey = false;
				colvarSctcrq.IsForeignKey = false;
				colvarSctcrq.IsReadOnly = false;
				colvarSctcrq.DefaultSetting = @"";
				colvarSctcrq.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSctcrq);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["Nowthwin"].AddSchema("T_Analysis_OrderListByCF@History",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("OrderId")]
		[Bindable(true)]
		public string OrderId 
		{
			get { return GetColumnValue<string>(Columns.OrderId); }
			set { SetColumnValue(Columns.OrderId, value); }
		}
		  
		[XmlAttribute("CustomerId")]
		[Bindable(true)]
		public string CustomerId 
		{
			get { return GetColumnValue<string>(Columns.CustomerId); }
			set { SetColumnValue(Columns.CustomerId, value); }
		}
		  
		[XmlAttribute("Project")]
		[Bindable(true)]
		public string Project 
		{
			get { return GetColumnValue<string>(Columns.Project); }
			set { SetColumnValue(Columns.Project, value); }
		}
		  
		[XmlAttribute("OrderType")]
		[Bindable(true)]
		public string OrderType 
		{
			get { return GetColumnValue<string>(Columns.OrderType); }
			set { SetColumnValue(Columns.OrderType, value); }
		}
		  
		[XmlAttribute("CoatType")]
		[Bindable(true)]
		public string CoatType 
		{
			get { return GetColumnValue<string>(Columns.CoatType); }
			set { SetColumnValue(Columns.CoatType, value); }
		}
		  
		[XmlAttribute("BodyType")]
		[Bindable(true)]
		public string BodyType 
		{
			get { return GetColumnValue<string>(Columns.BodyType); }
			set { SetColumnValue(Columns.BodyType, value); }
		}
		  
		[XmlAttribute("Fabric")]
		[Bindable(true)]
		public string Fabric 
		{
			get { return GetColumnValue<string>(Columns.Fabric); }
			set { SetColumnValue(Columns.Fabric, value); }
		}
		  
		[XmlAttribute("Mflxx")]
		[Bindable(true)]
		public string Mflxx 
		{
			get { return GetColumnValue<string>(Columns.Mflxx); }
			set { SetColumnValue(Columns.Mflxx, value); }
		}
		  
		[XmlAttribute("OrderTime")]
		[Bindable(true)]
		public DateTime? OrderTime 
		{
			get { return GetColumnValue<DateTime?>(Columns.OrderTime); }
			set { SetColumnValue(Columns.OrderTime, value); }
		}
		  
		[XmlAttribute("DeliveryTime")]
		[Bindable(true)]
		public DateTime? DeliveryTime 
		{
			get { return GetColumnValue<DateTime?>(Columns.DeliveryTime); }
			set { SetColumnValue(Columns.DeliveryTime, value); }
		}
		  
		[XmlAttribute("SpecialTime")]
		[Bindable(true)]
		public int? SpecialTime 
		{
			get { return GetColumnValue<int?>(Columns.SpecialTime); }
			set { SetColumnValue(Columns.SpecialTime, value); }
		}
		  
		[XmlAttribute("SpecialCode")]
		[Bindable(true)]
		public string SpecialCode 
		{
			get { return GetColumnValue<string>(Columns.SpecialCode); }
			set { SetColumnValue(Columns.SpecialCode, value); }
		}
		  
		[XmlAttribute("Styles")]
		[Bindable(true)]
		public string Styles 
		{
			get { return GetColumnValue<string>(Columns.Styles); }
			set { SetColumnValue(Columns.Styles, value); }
		}
		  
		[XmlAttribute("StylesResult")]
		[Bindable(true)]
		public string StylesResult 
		{
			get { return GetColumnValue<string>(Columns.StylesResult); }
			set { SetColumnValue(Columns.StylesResult, value); }
		}
		  
		[XmlAttribute("Numbers")]
		[Bindable(true)]
		public int? Numbers 
		{
			get { return GetColumnValue<int?>(Columns.Numbers); }
			set { SetColumnValue(Columns.Numbers, value); }
		}
		  
		[XmlAttribute("SupportingWay")]
		[Bindable(true)]
		public string SupportingWay 
		{
			get { return GetColumnValue<string>(Columns.SupportingWay); }
			set { SetColumnValue(Columns.SupportingWay, value); }
		}
		  
		[XmlAttribute("Sizes")]
		[Bindable(true)]
		public string Sizes 
		{
			get { return GetColumnValue<string>(Columns.Sizes); }
			set { SetColumnValue(Columns.Sizes, value); }
		}
		  
		[XmlAttribute("Customer")]
		[Bindable(true)]
		public string Customer 
		{
			get { return GetColumnValue<string>(Columns.Customer); }
			set { SetColumnValue(Columns.Customer, value); }
		}
		  
		[XmlAttribute("CreateTime")]
		[Bindable(true)]
		public DateTime? CreateTime 
		{
			get { return GetColumnValue<DateTime?>(Columns.CreateTime); }
			set { SetColumnValue(Columns.CreateTime, value); }
		}
		  
		[XmlAttribute("OrderStatus")]
		[Bindable(true)]
		public string OrderStatus 
		{
			get { return GetColumnValue<string>(Columns.OrderStatus); }
			set { SetColumnValue(Columns.OrderStatus, value); }
		}
		  
		[XmlAttribute("CreateDate")]
		[Bindable(true)]
		public DateTime? CreateDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.CreateDate); }
			set { SetColumnValue(Columns.CreateDate, value); }
		}
		  
		[XmlAttribute("Pbcd")]
		[Bindable(true)]
		public string Pbcd 
		{
			get { return GetColumnValue<string>(Columns.Pbcd); }
			set { SetColumnValue(Columns.Pbcd, value); }
		}
		  
		[XmlAttribute("Gydm")]
		[Bindable(true)]
		public string Gydm 
		{
			get { return GetColumnValue<string>(Columns.Gydm); }
			set { SetColumnValue(Columns.Gydm, value); }
		}
		  
		[XmlAttribute("Audittime")]
		[Bindable(true)]
		public DateTime? Audittime 
		{
			get { return GetColumnValue<DateTime?>(Columns.Audittime); }
			set { SetColumnValue(Columns.Audittime, value); }
		}
		  
		[XmlAttribute("Sfbcpsy")]
		[Bindable(true)]
		public string Sfbcpsy 
		{
			get { return GetColumnValue<string>(Columns.Sfbcpsy); }
			set { SetColumnValue(Columns.Sfbcpsy, value); }
		}
		  
		[XmlAttribute("Tzecode")]
		[Bindable(true)]
		public string Tzecode 
		{
			get { return GetColumnValue<string>(Columns.Tzecode); }
			set { SetColumnValue(Columns.Tzecode, value); }
		}
		  
		[XmlAttribute("Scggdh")]
		[Bindable(true)]
		public string Scggdh 
		{
			get { return GetColumnValue<string>(Columns.Scggdh); }
			set { SetColumnValue(Columns.Scggdh, value); }
		}
		  
		[XmlAttribute("ModifyTime")]
		[Bindable(true)]
		public DateTime? ModifyTime 
		{
			get { return GetColumnValue<DateTime?>(Columns.ModifyTime); }
			set { SetColumnValue(Columns.ModifyTime, value); }
		}
		  
		[XmlAttribute("PbcdName")]
		[Bindable(true)]
		public string PbcdName 
		{
			get { return GetColumnValue<string>(Columns.PbcdName); }
			set { SetColumnValue(Columns.PbcdName, value); }
		}
		  
		[XmlAttribute("EndTime")]
		[Bindable(true)]
		public DateTime? EndTime 
		{
			get { return GetColumnValue<DateTime?>(Columns.EndTime); }
			set { SetColumnValue(Columns.EndTime, value); }
		}
		  
		[XmlAttribute("Type")]
		[Bindable(true)]
		public string Type 
		{
			get { return GetColumnValue<string>(Columns.Type); }
			set { SetColumnValue(Columns.Type, value); }
		}
		  
		[XmlAttribute("TGCode")]
		[Bindable(true)]
		public int? TGCode 
		{
			get { return GetColumnValue<int?>(Columns.TGCode); }
			set { SetColumnValue(Columns.TGCode, value); }
		}
		  
		[XmlAttribute("FlagML")]
		[Bindable(true)]
		public int? FlagML 
		{
			get { return GetColumnValue<int?>(Columns.FlagML); }
			set { SetColumnValue(Columns.FlagML, value); }
		}
		  
		[XmlAttribute("Fgml")]
		[Bindable(true)]
		public string Fgml 
		{
			get { return GetColumnValue<string>(Columns.Fgml); }
			set { SetColumnValue(Columns.Fgml, value); }
		}
		  
		[XmlAttribute("Gylx")]
		[Bindable(true)]
		public string Gylx 
		{
			get { return GetColumnValue<string>(Columns.Gylx); }
			set { SetColumnValue(Columns.Gylx, value); }
		}
		  
		[XmlAttribute("Gyfx")]
		[Bindable(true)]
		public string Gyfx 
		{
			get { return GetColumnValue<string>(Columns.Gyfx); }
			set { SetColumnValue(Columns.Gyfx, value); }
		}
		  
		[XmlAttribute("Sccjjq")]
		[Bindable(true)]
		public DateTime? Sccjjq 
		{
			get { return GetColumnValue<DateTime?>(Columns.Sccjjq); }
			set { SetColumnValue(Columns.Sccjjq, value); }
		}
		  
		[XmlAttribute("Sctcrq")]
		[Bindable(true)]
		public DateTime? Sctcrq 
		{
			get { return GetColumnValue<DateTime?>(Columns.Sctcrq); }
			set { SetColumnValue(Columns.Sctcrq, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varOrderId,string varCustomerId,string varProject,string varOrderType,string varCoatType,string varBodyType,string varFabric,string varMflxx,DateTime? varOrderTime,DateTime? varDeliveryTime,int? varSpecialTime,string varSpecialCode,string varStyles,string varStylesResult,int? varNumbers,string varSupportingWay,string varSizes,string varCustomer,DateTime? varCreateTime,string varOrderStatus,DateTime? varCreateDate,string varPbcd,string varGydm,DateTime? varAudittime,string varSfbcpsy,string varTzecode,string varScggdh,DateTime? varModifyTime,string varPbcdName,DateTime? varEndTime,string varType,int? varTGCode,int? varFlagML,string varFgml,string varGylx,string varGyfx,DateTime? varSccjjq,DateTime? varSctcrq)
		{
			TAnalysisOrderListByCFHistory item = new TAnalysisOrderListByCFHistory();
			
			item.OrderId = varOrderId;
			
			item.CustomerId = varCustomerId;
			
			item.Project = varProject;
			
			item.OrderType = varOrderType;
			
			item.CoatType = varCoatType;
			
			item.BodyType = varBodyType;
			
			item.Fabric = varFabric;
			
			item.Mflxx = varMflxx;
			
			item.OrderTime = varOrderTime;
			
			item.DeliveryTime = varDeliveryTime;
			
			item.SpecialTime = varSpecialTime;
			
			item.SpecialCode = varSpecialCode;
			
			item.Styles = varStyles;
			
			item.StylesResult = varStylesResult;
			
			item.Numbers = varNumbers;
			
			item.SupportingWay = varSupportingWay;
			
			item.Sizes = varSizes;
			
			item.Customer = varCustomer;
			
			item.CreateTime = varCreateTime;
			
			item.OrderStatus = varOrderStatus;
			
			item.CreateDate = varCreateDate;
			
			item.Pbcd = varPbcd;
			
			item.Gydm = varGydm;
			
			item.Audittime = varAudittime;
			
			item.Sfbcpsy = varSfbcpsy;
			
			item.Tzecode = varTzecode;
			
			item.Scggdh = varScggdh;
			
			item.ModifyTime = varModifyTime;
			
			item.PbcdName = varPbcdName;
			
			item.EndTime = varEndTime;
			
			item.Type = varType;
			
			item.TGCode = varTGCode;
			
			item.FlagML = varFlagML;
			
			item.Fgml = varFgml;
			
			item.Gylx = varGylx;
			
			item.Gyfx = varGyfx;
			
			item.Sccjjq = varSccjjq;
			
			item.Sctcrq = varSctcrq;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(string varOrderId,string varCustomerId,string varProject,string varOrderType,string varCoatType,string varBodyType,string varFabric,string varMflxx,DateTime? varOrderTime,DateTime? varDeliveryTime,int? varSpecialTime,string varSpecialCode,string varStyles,string varStylesResult,int? varNumbers,string varSupportingWay,string varSizes,string varCustomer,DateTime? varCreateTime,string varOrderStatus,DateTime? varCreateDate,string varPbcd,string varGydm,DateTime? varAudittime,string varSfbcpsy,string varTzecode,string varScggdh,DateTime? varModifyTime,string varPbcdName,DateTime? varEndTime,string varType,int? varTGCode,int? varFlagML,string varFgml,string varGylx,string varGyfx,DateTime? varSccjjq,DateTime? varSctcrq)
		{
			TAnalysisOrderListByCFHistory item = new TAnalysisOrderListByCFHistory();
			
				item.OrderId = varOrderId;
			
				item.CustomerId = varCustomerId;
			
				item.Project = varProject;
			
				item.OrderType = varOrderType;
			
				item.CoatType = varCoatType;
			
				item.BodyType = varBodyType;
			
				item.Fabric = varFabric;
			
				item.Mflxx = varMflxx;
			
				item.OrderTime = varOrderTime;
			
				item.DeliveryTime = varDeliveryTime;
			
				item.SpecialTime = varSpecialTime;
			
				item.SpecialCode = varSpecialCode;
			
				item.Styles = varStyles;
			
				item.StylesResult = varStylesResult;
			
				item.Numbers = varNumbers;
			
				item.SupportingWay = varSupportingWay;
			
				item.Sizes = varSizes;
			
				item.Customer = varCustomer;
			
				item.CreateTime = varCreateTime;
			
				item.OrderStatus = varOrderStatus;
			
				item.CreateDate = varCreateDate;
			
				item.Pbcd = varPbcd;
			
				item.Gydm = varGydm;
			
				item.Audittime = varAudittime;
			
				item.Sfbcpsy = varSfbcpsy;
			
				item.Tzecode = varTzecode;
			
				item.Scggdh = varScggdh;
			
				item.ModifyTime = varModifyTime;
			
				item.PbcdName = varPbcdName;
			
				item.EndTime = varEndTime;
			
				item.Type = varType;
			
				item.TGCode = varTGCode;
			
				item.FlagML = varFlagML;
			
				item.Fgml = varFgml;
			
				item.Gylx = varGylx;
			
				item.Gyfx = varGyfx;
			
				item.Sccjjq = varSccjjq;
			
				item.Sctcrq = varSctcrq;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn OrderIdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn CustomerIdColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn ProjectColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn OrderTypeColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn CoatTypeColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn BodyTypeColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn FabricColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn MflxxColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn OrderTimeColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn DeliveryTimeColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn SpecialTimeColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn SpecialCodeColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn StylesColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        public static TableSchema.TableColumn StylesResultColumn
        {
            get { return Schema.Columns[13]; }
        }
        
        
        
        public static TableSchema.TableColumn NumbersColumn
        {
            get { return Schema.Columns[14]; }
        }
        
        
        
        public static TableSchema.TableColumn SupportingWayColumn
        {
            get { return Schema.Columns[15]; }
        }
        
        
        
        public static TableSchema.TableColumn SizesColumn
        {
            get { return Schema.Columns[16]; }
        }
        
        
        
        public static TableSchema.TableColumn CustomerColumn
        {
            get { return Schema.Columns[17]; }
        }
        
        
        
        public static TableSchema.TableColumn CreateTimeColumn
        {
            get { return Schema.Columns[18]; }
        }
        
        
        
        public static TableSchema.TableColumn OrderStatusColumn
        {
            get { return Schema.Columns[19]; }
        }
        
        
        
        public static TableSchema.TableColumn CreateDateColumn
        {
            get { return Schema.Columns[20]; }
        }
        
        
        
        public static TableSchema.TableColumn PbcdColumn
        {
            get { return Schema.Columns[21]; }
        }
        
        
        
        public static TableSchema.TableColumn GydmColumn
        {
            get { return Schema.Columns[22]; }
        }
        
        
        
        public static TableSchema.TableColumn AudittimeColumn
        {
            get { return Schema.Columns[23]; }
        }
        
        
        
        public static TableSchema.TableColumn SfbcpsyColumn
        {
            get { return Schema.Columns[24]; }
        }
        
        
        
        public static TableSchema.TableColumn TzecodeColumn
        {
            get { return Schema.Columns[25]; }
        }
        
        
        
        public static TableSchema.TableColumn ScggdhColumn
        {
            get { return Schema.Columns[26]; }
        }
        
        
        
        public static TableSchema.TableColumn ModifyTimeColumn
        {
            get { return Schema.Columns[27]; }
        }
        
        
        
        public static TableSchema.TableColumn PbcdNameColumn
        {
            get { return Schema.Columns[28]; }
        }
        
        
        
        public static TableSchema.TableColumn EndTimeColumn
        {
            get { return Schema.Columns[29]; }
        }
        
        
        
        public static TableSchema.TableColumn TypeColumn
        {
            get { return Schema.Columns[30]; }
        }
        
        
        
        public static TableSchema.TableColumn TGCodeColumn
        {
            get { return Schema.Columns[31]; }
        }
        
        
        
        public static TableSchema.TableColumn FlagMLColumn
        {
            get { return Schema.Columns[32]; }
        }
        
        
        
        public static TableSchema.TableColumn FgmlColumn
        {
            get { return Schema.Columns[33]; }
        }
        
        
        
        public static TableSchema.TableColumn GylxColumn
        {
            get { return Schema.Columns[34]; }
        }
        
        
        
        public static TableSchema.TableColumn GyfxColumn
        {
            get { return Schema.Columns[35]; }
        }
        
        
        
        public static TableSchema.TableColumn SccjjqColumn
        {
            get { return Schema.Columns[36]; }
        }
        
        
        
        public static TableSchema.TableColumn SctcrqColumn
        {
            get { return Schema.Columns[37]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string OrderId = @"orderId";
			 public static string CustomerId = @"customerId";
			 public static string Project = @"project";
			 public static string OrderType = @"orderType";
			 public static string CoatType = @"coatType";
			 public static string BodyType = @"bodyType";
			 public static string Fabric = @"fabric";
			 public static string Mflxx = @"mflxx";
			 public static string OrderTime = @"orderTime";
			 public static string DeliveryTime = @"deliveryTime";
			 public static string SpecialTime = @"specialTime";
			 public static string SpecialCode = @"specialCode";
			 public static string Styles = @"styles";
			 public static string StylesResult = @"stylesResult";
			 public static string Numbers = @"numbers";
			 public static string SupportingWay = @"supportingWay";
			 public static string Sizes = @"sizes";
			 public static string Customer = @"customer";
			 public static string CreateTime = @"createTime";
			 public static string OrderStatus = @"orderStatus";
			 public static string CreateDate = @"createDate";
			 public static string Pbcd = @"pbcd";
			 public static string Gydm = @"gydm";
			 public static string Audittime = @"audittime";
			 public static string Sfbcpsy = @"sfbcpsy";
			 public static string Tzecode = @"tzecode";
			 public static string Scggdh = @"SCGGDH";
			 public static string ModifyTime = @"modifyTime";
			 public static string PbcdName = @"pbcdName";
			 public static string EndTime = @"endTime";
			 public static string Type = @"type";
			 public static string TGCode = @"TGCode";
			 public static string FlagML = @"flagML";
			 public static string Fgml = @"fgml";
			 public static string Gylx = @"gylx";
			 public static string Gyfx = @"gyfx";
			 public static string Sccjjq = @"sccjjq";
			 public static string Sctcrq = @"sctcrq";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}

using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace Model{
    /// <summary>
    /// Strongly-typed collection for the ViewPlan class.
    /// </summary>
    [Serializable]
    public partial class ViewPlanCollection : ReadOnlyList<ViewPlan, ViewPlanCollection>
    {        
        public ViewPlanCollection() {}
    }
    /// <summary>
    /// This is  Read-only wrapper class for the view_Plans view.
    /// </summary>
    [Serializable]
    public partial class ViewPlan : ReadOnlyRecord<ViewPlan>, IReadOnlyRecord
    {
    
	    #region Default Settings
	    protected static void SetSQLProps() 
	    {
		    GetTableSchema();
	    }
	    #endregion
        #region Schema Accessor
	    public static TableSchema.Table Schema
        {
            get
            {
                if (BaseSchema == null)
                {
                    SetSQLProps();
                }
                return BaseSchema;
            }
        }
    	
        private static void GetTableSchema() 
        {
            if(!IsSchemaInitialized)
            {
                //Schema declaration
                TableSchema.Table schema = new TableSchema.Table("view_Plans", TableType.View, DataService.GetInstance("Nowthwin"));
                schema.Columns = new TableSchema.TableColumnCollection();
                schema.SchemaName = @"dbo";
                //columns
                
                TableSchema.TableColumn colvarSczsbh = new TableSchema.TableColumn(schema);
                colvarSczsbh.ColumnName = "SCZSBH";
                colvarSczsbh.DataType = DbType.AnsiString;
                colvarSczsbh.MaxLength = 12;
                colvarSczsbh.AutoIncrement = false;
                colvarSczsbh.IsNullable = false;
                colvarSczsbh.IsPrimaryKey = false;
                colvarSczsbh.IsForeignKey = false;
                colvarSczsbh.IsReadOnly = false;
                
                schema.Columns.Add(colvarSczsbh);
                
                TableSchema.TableColumn colvarScxdrq = new TableSchema.TableColumn(schema);
                colvarScxdrq.ColumnName = "SCXDRQ";
                colvarScxdrq.DataType = DbType.DateTime;
                colvarScxdrq.MaxLength = 0;
                colvarScxdrq.AutoIncrement = false;
                colvarScxdrq.IsNullable = true;
                colvarScxdrq.IsPrimaryKey = false;
                colvarScxdrq.IsForeignKey = false;
                colvarScxdrq.IsReadOnly = false;
                
                schema.Columns.Add(colvarScxdrq);
                
                TableSchema.TableColumn colvarSccjjq = new TableSchema.TableColumn(schema);
                colvarSccjjq.ColumnName = "SCCJJQ";
                colvarSccjjq.DataType = DbType.DateTime;
                colvarSccjjq.MaxLength = 0;
                colvarSccjjq.AutoIncrement = false;
                colvarSccjjq.IsNullable = true;
                colvarSccjjq.IsPrimaryKey = false;
                colvarSccjjq.IsForeignKey = false;
                colvarSccjjq.IsReadOnly = false;
                
                schema.Columns.Add(colvarSccjjq);
                
                TableSchema.TableColumn colvarScfzjq = new TableSchema.TableColumn(schema);
                colvarScfzjq.ColumnName = "SCFZJQ";
                colvarScfzjq.DataType = DbType.DateTime;
                colvarScfzjq.MaxLength = 0;
                colvarScfzjq.AutoIncrement = false;
                colvarScfzjq.IsNullable = true;
                colvarScfzjq.IsPrimaryKey = false;
                colvarScfzjq.IsForeignKey = false;
                colvarScfzjq.IsReadOnly = false;
                
                schema.Columns.Add(colvarScfzjq);
                
                TableSchema.TableColumn colvarScjhrq = new TableSchema.TableColumn(schema);
                colvarScjhrq.ColumnName = "SCJHRQ";
                colvarScjhrq.DataType = DbType.DateTime;
                colvarScjhrq.MaxLength = 0;
                colvarScjhrq.AutoIncrement = false;
                colvarScjhrq.IsNullable = true;
                colvarScjhrq.IsPrimaryKey = false;
                colvarScjhrq.IsForeignKey = false;
                colvarScjhrq.IsReadOnly = false;
                
                schema.Columns.Add(colvarScjhrq);
                
                TableSchema.TableColumn colvarScjhry = new TableSchema.TableColumn(schema);
                colvarScjhry.ColumnName = "SCJHRY";
                colvarScjhry.DataType = DbType.AnsiString;
                colvarScjhry.MaxLength = 8;
                colvarScjhry.AutoIncrement = false;
                colvarScjhry.IsNullable = true;
                colvarScjhry.IsPrimaryKey = false;
                colvarScjhry.IsForeignKey = false;
                colvarScjhry.IsReadOnly = false;
                
                schema.Columns.Add(colvarScjhry);
                
                TableSchema.TableColumn colvarSczsbz = new TableSchema.TableColumn(schema);
                colvarSczsbz.ColumnName = "SCZSBZ";
                colvarSczsbz.DataType = DbType.AnsiString;
                colvarSczsbz.MaxLength = 255;
                colvarSczsbz.AutoIncrement = false;
                colvarSczsbz.IsNullable = true;
                colvarSczsbz.IsPrimaryKey = false;
                colvarSczsbz.IsForeignKey = false;
                colvarSczsbz.IsReadOnly = false;
                
                schema.Columns.Add(colvarSczsbz);
                
                TableSchema.TableColumn colvarSczszt = new TableSchema.TableColumn(schema);
                colvarSczszt.ColumnName = "SCZSZT";
                colvarSczszt.DataType = DbType.AnsiString;
                colvarSczszt.MaxLength = 1;
                colvarSczszt.AutoIncrement = false;
                colvarSczszt.IsNullable = true;
                colvarSczszt.IsPrimaryKey = false;
                colvarSczszt.IsForeignKey = false;
                colvarSczszt.IsReadOnly = false;
                
                schema.Columns.Add(colvarSczszt);
                
                TableSchema.TableColumn colvarScjqsm = new TableSchema.TableColumn(schema);
                colvarScjqsm.ColumnName = "SCJQSM";
                colvarScjqsm.DataType = DbType.AnsiString;
                colvarScjqsm.MaxLength = 100;
                colvarScjqsm.AutoIncrement = false;
                colvarScjqsm.IsNullable = true;
                colvarScjqsm.IsPrimaryKey = false;
                colvarScjqsm.IsForeignKey = false;
                colvarScjqsm.IsReadOnly = false;
                
                schema.Columns.Add(colvarScjqsm);
                
                TableSchema.TableColumn colvarScjqrq = new TableSchema.TableColumn(schema);
                colvarScjqrq.ColumnName = "SCJQRQ";
                colvarScjqrq.DataType = DbType.DateTime;
                colvarScjqrq.MaxLength = 0;
                colvarScjqrq.AutoIncrement = false;
                colvarScjqrq.IsNullable = true;
                colvarScjqrq.IsPrimaryKey = false;
                colvarScjqrq.IsForeignKey = false;
                colvarScjqrq.IsReadOnly = false;
                
                schema.Columns.Add(colvarScjqrq);
                
                TableSchema.TableColumn colvarSclrrq = new TableSchema.TableColumn(schema);
                colvarSclrrq.ColumnName = "SCLRRQ";
                colvarSclrrq.DataType = DbType.DateTime;
                colvarSclrrq.MaxLength = 0;
                colvarSclrrq.AutoIncrement = false;
                colvarSclrrq.IsNullable = true;
                colvarSclrrq.IsPrimaryKey = false;
                colvarSclrrq.IsForeignKey = false;
                colvarSclrrq.IsReadOnly = false;
                
                schema.Columns.Add(colvarSclrrq);
                
                TableSchema.TableColumn colvarSclrry = new TableSchema.TableColumn(schema);
                colvarSclrry.ColumnName = "SCLRRY";
                colvarSclrry.DataType = DbType.AnsiString;
                colvarSclrry.MaxLength = 10;
                colvarSclrry.AutoIncrement = false;
                colvarSclrry.IsNullable = true;
                colvarSclrry.IsPrimaryKey = false;
                colvarSclrry.IsForeignKey = false;
                colvarSclrry.IsReadOnly = false;
                
                schema.Columns.Add(colvarSclrry);
                
                TableSchema.TableColumn colvarScshrq = new TableSchema.TableColumn(schema);
                colvarScshrq.ColumnName = "SCSHRQ";
                colvarScshrq.DataType = DbType.DateTime;
                colvarScshrq.MaxLength = 0;
                colvarScshrq.AutoIncrement = false;
                colvarScshrq.IsNullable = true;
                colvarScshrq.IsPrimaryKey = false;
                colvarScshrq.IsForeignKey = false;
                colvarScshrq.IsReadOnly = false;
                
                schema.Columns.Add(colvarScshrq);
                
                TableSchema.TableColumn colvarScshry = new TableSchema.TableColumn(schema);
                colvarScshry.ColumnName = "SCSHRY";
                colvarScshry.DataType = DbType.AnsiString;
                colvarScshry.MaxLength = 10;
                colvarScshry.AutoIncrement = false;
                colvarScshry.IsNullable = true;
                colvarScshry.IsPrimaryKey = false;
                colvarScshry.IsForeignKey = false;
                colvarScshry.IsReadOnly = false;
                
                schema.Columns.Add(colvarScshry);
                
                TableSchema.TableColumn colvarScztjq = new TableSchema.TableColumn(schema);
                colvarScztjq.ColumnName = "SCZTJQ";
                colvarScztjq.DataType = DbType.DateTime;
                colvarScztjq.MaxLength = 0;
                colvarScztjq.AutoIncrement = false;
                colvarScztjq.IsNullable = true;
                colvarScztjq.IsPrimaryKey = false;
                colvarScztjq.IsForeignKey = false;
                colvarScztjq.IsReadOnly = false;
                
                schema.Columns.Add(colvarScztjq);
                
                TableSchema.TableColumn colvarScbzjq = new TableSchema.TableColumn(schema);
                colvarScbzjq.ColumnName = "SCBZJQ";
                colvarScbzjq.DataType = DbType.DateTime;
                colvarScbzjq.MaxLength = 0;
                colvarScbzjq.AutoIncrement = false;
                colvarScbzjq.IsNullable = true;
                colvarScbzjq.IsPrimaryKey = false;
                colvarScbzjq.IsForeignKey = false;
                colvarScbzjq.IsReadOnly = false;
                
                schema.Columns.Add(colvarScbzjq);
                
                TableSchema.TableColumn colvarSchtbh = new TableSchema.TableColumn(schema);
                colvarSchtbh.ColumnName = "SCHTBH";
                colvarSchtbh.DataType = DbType.AnsiString;
                colvarSchtbh.MaxLength = 12;
                colvarSchtbh.AutoIncrement = false;
                colvarSchtbh.IsNullable = true;
                colvarSchtbh.IsPrimaryKey = false;
                colvarSchtbh.IsForeignKey = false;
                colvarSchtbh.IsReadOnly = false;
                
                schema.Columns.Add(colvarSchtbh);
                
                TableSchema.TableColumn colvarSctcrq = new TableSchema.TableColumn(schema);
                colvarSctcrq.ColumnName = "SCTCRQ";
                colvarSctcrq.DataType = DbType.DateTime;
                colvarSctcrq.MaxLength = 0;
                colvarSctcrq.AutoIncrement = false;
                colvarSctcrq.IsNullable = true;
                colvarSctcrq.IsPrimaryKey = false;
                colvarSctcrq.IsForeignKey = false;
                colvarSctcrq.IsReadOnly = false;
                
                schema.Columns.Add(colvarSctcrq);
                
                TableSchema.TableColumn colvarScgcdm = new TableSchema.TableColumn(schema);
                colvarScgcdm.ColumnName = "scgcdm";
                colvarScgcdm.DataType = DbType.AnsiString;
                colvarScgcdm.MaxLength = 60;
                colvarScgcdm.AutoIncrement = false;
                colvarScgcdm.IsNullable = true;
                colvarScgcdm.IsPrimaryKey = false;
                colvarScgcdm.IsForeignKey = false;
                colvarScgcdm.IsReadOnly = false;
                
                schema.Columns.Add(colvarScgcdm);
                
                
                BaseSchema = schema;
                //add this schema to the provider
                //so we can query it later
                DataService.Providers["Nowthwin"].AddSchema("view_Plans",schema);
            }
        }
        #endregion
        
        #region Query Accessor
	    public static Query CreateQuery()
	    {
		    return new Query(Schema);
	    }
	    #endregion
	    
	    #region .ctors
	    public ViewPlan()
	    {
            SetSQLProps();
            SetDefaults();
            MarkNew();
        }
        public ViewPlan(bool useDatabaseDefaults)
	    {
		    SetSQLProps();
		    if(useDatabaseDefaults)
		    {
				ForceDefaults();
			}
			MarkNew();
	    }
	    
	    public ViewPlan(object keyID)
	    {
		    SetSQLProps();
		    LoadByKey(keyID);
	    }
    	 
	    public ViewPlan(string columnName, object columnValue)
        {
            SetSQLProps();
            LoadByParam(columnName,columnValue);
        }
        
	    #endregion
	    
	    #region Props
	    
          
        [XmlAttribute("Sczsbh")]
        [Bindable(true)]
        public string Sczsbh 
	    {
		    get
		    {
			    return GetColumnValue<string>("SCZSBH");
		    }
            set 
		    {
			    SetColumnValue("SCZSBH", value);
            }
        }
	      
        [XmlAttribute("Scxdrq")]
        [Bindable(true)]
        public DateTime? Scxdrq 
	    {
		    get
		    {
			    return GetColumnValue<DateTime?>("SCXDRQ");
		    }
            set 
		    {
			    SetColumnValue("SCXDRQ", value);
            }
        }
	      
        [XmlAttribute("Sccjjq")]
        [Bindable(true)]
        public DateTime? Sccjjq 
	    {
		    get
		    {
			    return GetColumnValue<DateTime?>("SCCJJQ");
		    }
            set 
		    {
			    SetColumnValue("SCCJJQ", value);
            }
        }
	      
        [XmlAttribute("Scfzjq")]
        [Bindable(true)]
        public DateTime? Scfzjq 
	    {
		    get
		    {
			    return GetColumnValue<DateTime?>("SCFZJQ");
		    }
            set 
		    {
			    SetColumnValue("SCFZJQ", value);
            }
        }
	      
        [XmlAttribute("Scjhrq")]
        [Bindable(true)]
        public DateTime? Scjhrq 
	    {
		    get
		    {
			    return GetColumnValue<DateTime?>("SCJHRQ");
		    }
            set 
		    {
			    SetColumnValue("SCJHRQ", value);
            }
        }
	      
        [XmlAttribute("Scjhry")]
        [Bindable(true)]
        public string Scjhry 
	    {
		    get
		    {
			    return GetColumnValue<string>("SCJHRY");
		    }
            set 
		    {
			    SetColumnValue("SCJHRY", value);
            }
        }
	      
        [XmlAttribute("Sczsbz")]
        [Bindable(true)]
        public string Sczsbz 
	    {
		    get
		    {
			    return GetColumnValue<string>("SCZSBZ");
		    }
            set 
		    {
			    SetColumnValue("SCZSBZ", value);
            }
        }
	      
        [XmlAttribute("Sczszt")]
        [Bindable(true)]
        public string Sczszt 
	    {
		    get
		    {
			    return GetColumnValue<string>("SCZSZT");
		    }
            set 
		    {
			    SetColumnValue("SCZSZT", value);
            }
        }
	      
        [XmlAttribute("Scjqsm")]
        [Bindable(true)]
        public string Scjqsm 
	    {
		    get
		    {
			    return GetColumnValue<string>("SCJQSM");
		    }
            set 
		    {
			    SetColumnValue("SCJQSM", value);
            }
        }
	      
        [XmlAttribute("Scjqrq")]
        [Bindable(true)]
        public DateTime? Scjqrq 
	    {
		    get
		    {
			    return GetColumnValue<DateTime?>("SCJQRQ");
		    }
            set 
		    {
			    SetColumnValue("SCJQRQ", value);
            }
        }
	      
        [XmlAttribute("Sclrrq")]
        [Bindable(true)]
        public DateTime? Sclrrq 
	    {
		    get
		    {
			    return GetColumnValue<DateTime?>("SCLRRQ");
		    }
            set 
		    {
			    SetColumnValue("SCLRRQ", value);
            }
        }
	      
        [XmlAttribute("Sclrry")]
        [Bindable(true)]
        public string Sclrry 
	    {
		    get
		    {
			    return GetColumnValue<string>("SCLRRY");
		    }
            set 
		    {
			    SetColumnValue("SCLRRY", value);
            }
        }
	      
        [XmlAttribute("Scshrq")]
        [Bindable(true)]
        public DateTime? Scshrq 
	    {
		    get
		    {
			    return GetColumnValue<DateTime?>("SCSHRQ");
		    }
            set 
		    {
			    SetColumnValue("SCSHRQ", value);
            }
        }
	      
        [XmlAttribute("Scshry")]
        [Bindable(true)]
        public string Scshry 
	    {
		    get
		    {
			    return GetColumnValue<string>("SCSHRY");
		    }
            set 
		    {
			    SetColumnValue("SCSHRY", value);
            }
        }
	      
        [XmlAttribute("Scztjq")]
        [Bindable(true)]
        public DateTime? Scztjq 
	    {
		    get
		    {
			    return GetColumnValue<DateTime?>("SCZTJQ");
		    }
            set 
		    {
			    SetColumnValue("SCZTJQ", value);
            }
        }
	      
        [XmlAttribute("Scbzjq")]
        [Bindable(true)]
        public DateTime? Scbzjq 
	    {
		    get
		    {
			    return GetColumnValue<DateTime?>("SCBZJQ");
		    }
            set 
		    {
			    SetColumnValue("SCBZJQ", value);
            }
        }
	      
        [XmlAttribute("Schtbh")]
        [Bindable(true)]
        public string Schtbh 
	    {
		    get
		    {
			    return GetColumnValue<string>("SCHTBH");
		    }
            set 
		    {
			    SetColumnValue("SCHTBH", value);
            }
        }
	      
        [XmlAttribute("Sctcrq")]
        [Bindable(true)]
        public DateTime? Sctcrq 
	    {
		    get
		    {
			    return GetColumnValue<DateTime?>("SCTCRQ");
		    }
            set 
		    {
			    SetColumnValue("SCTCRQ", value);
            }
        }
	      
        [XmlAttribute("Scgcdm")]
        [Bindable(true)]
        public string Scgcdm 
	    {
		    get
		    {
			    return GetColumnValue<string>("scgcdm");
		    }
            set 
		    {
			    SetColumnValue("scgcdm", value);
            }
        }
	    
	    #endregion
    
	    #region Columns Struct
	    public struct Columns
	    {
		    
		    
            public static string Sczsbh = @"SCZSBH";
            
            public static string Scxdrq = @"SCXDRQ";
            
            public static string Sccjjq = @"SCCJJQ";
            
            public static string Scfzjq = @"SCFZJQ";
            
            public static string Scjhrq = @"SCJHRQ";
            
            public static string Scjhry = @"SCJHRY";
            
            public static string Sczsbz = @"SCZSBZ";
            
            public static string Sczszt = @"SCZSZT";
            
            public static string Scjqsm = @"SCJQSM";
            
            public static string Scjqrq = @"SCJQRQ";
            
            public static string Sclrrq = @"SCLRRQ";
            
            public static string Sclrry = @"SCLRRY";
            
            public static string Scshrq = @"SCSHRQ";
            
            public static string Scshry = @"SCSHRY";
            
            public static string Scztjq = @"SCZTJQ";
            
            public static string Scbzjq = @"SCBZJQ";
            
            public static string Schtbh = @"SCHTBH";
            
            public static string Sctcrq = @"SCTCRQ";
            
            public static string Scgcdm = @"scgcdm";
            
	    }
	    #endregion
	    
	    
	    #region IAbstractRecord Members
        public new CT GetColumnValue<CT>(string columnName) {
            return base.GetColumnValue<CT>(columnName);
        }
        public object GetColumnValue(string columnName) {
            return base.GetColumnValue<object>(columnName);
        }
        #endregion
	    
    }
}

using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace APSData{
    /// <summary>
    /// Strongly-typed collection for the VOutPutByCAD class.
    /// </summary>
    [Serializable]
    public partial class VOutPutByCADCollection : ReadOnlyList<VOutPutByCAD, VOutPutByCADCollection>
    {        
        public VOutPutByCADCollection() {}
    }
    /// <summary>
    /// This is  Read-only wrapper class for the V_OutPutByCAD view.
    /// </summary>
    [Serializable]
    public partial class VOutPutByCAD : ReadOnlyRecord<VOutPutByCAD>, IReadOnlyRecord
    {
    
	    #region Default Settings
	    protected static void SetSQLProps() 
	    {
		    GetTableSchema();
	    }
	    #endregion
        #region Schema Accessor
	    public static TableSchema.Table Schema
        {
            get
            {
                if (BaseSchema == null)
                {
                    SetSQLProps();
                }
                return BaseSchema;
            }
        }
    	
        private static void GetTableSchema() 
        {
            if(!IsSchemaInitialized)
            {
                //Schema declaration
                TableSchema.Table schema = new TableSchema.Table("V_OutPutByCAD", TableType.View, DataService.GetInstance("Nowthwin"));
                schema.Columns = new TableSchema.TableColumnCollection();
                schema.SchemaName = @"dbo";
                //columns
                
                TableSchema.TableColumn colvarResources = new TableSchema.TableColumn(schema);
                colvarResources.ColumnName = "resources";
                colvarResources.DataType = DbType.AnsiString;
                colvarResources.MaxLength = 10;
                colvarResources.AutoIncrement = false;
                colvarResources.IsNullable = false;
                colvarResources.IsPrimaryKey = false;
                colvarResources.IsForeignKey = false;
                colvarResources.IsReadOnly = false;
                
                schema.Columns.Add(colvarResources);
                
                TableSchema.TableColumn colvarCustomerId = new TableSchema.TableColumn(schema);
                colvarCustomerId.ColumnName = "customerId";
                colvarCustomerId.DataType = DbType.String;
                colvarCustomerId.MaxLength = 50;
                colvarCustomerId.AutoIncrement = false;
                colvarCustomerId.IsNullable = true;
                colvarCustomerId.IsPrimaryKey = false;
                colvarCustomerId.IsForeignKey = false;
                colvarCustomerId.IsReadOnly = false;
                
                schema.Columns.Add(colvarCustomerId);
                
                TableSchema.TableColumn colvarBeginTime = new TableSchema.TableColumn(schema);
                colvarBeginTime.ColumnName = "beginTime";
                colvarBeginTime.DataType = DbType.DateTime;
                colvarBeginTime.MaxLength = 0;
                colvarBeginTime.AutoIncrement = false;
                colvarBeginTime.IsNullable = true;
                colvarBeginTime.IsPrimaryKey = false;
                colvarBeginTime.IsForeignKey = false;
                colvarBeginTime.IsReadOnly = false;
                
                schema.Columns.Add(colvarBeginTime);
                
                TableSchema.TableColumn colvarEndTime = new TableSchema.TableColumn(schema);
                colvarEndTime.ColumnName = "endTime";
                colvarEndTime.DataType = DbType.DateTime;
                colvarEndTime.MaxLength = 0;
                colvarEndTime.AutoIncrement = false;
                colvarEndTime.IsNullable = true;
                colvarEndTime.IsPrimaryKey = false;
                colvarEndTime.IsForeignKey = false;
                colvarEndTime.IsReadOnly = false;
                
                schema.Columns.Add(colvarEndTime);
                
                TableSchema.TableColumn colvarJobCode = new TableSchema.TableColumn(schema);
                colvarJobCode.ColumnName = "jobCode";
                colvarJobCode.DataType = DbType.String;
                colvarJobCode.MaxLength = 50;
                colvarJobCode.AutoIncrement = false;
                colvarJobCode.IsNullable = true;
                colvarJobCode.IsPrimaryKey = false;
                colvarJobCode.IsForeignKey = false;
                colvarJobCode.IsReadOnly = false;
                
                schema.Columns.Add(colvarJobCode);
                
                TableSchema.TableColumn colvarProject = new TableSchema.TableColumn(schema);
                colvarProject.ColumnName = "project";
                colvarProject.DataType = DbType.String;
                colvarProject.MaxLength = 20;
                colvarProject.AutoIncrement = false;
                colvarProject.IsNullable = true;
                colvarProject.IsPrimaryKey = false;
                colvarProject.IsForeignKey = false;
                colvarProject.IsReadOnly = false;
                
                schema.Columns.Add(colvarProject);
                
                TableSchema.TableColumn colvarAbnormal = new TableSchema.TableColumn(schema);
                colvarAbnormal.ColumnName = "abnormal";
                colvarAbnormal.DataType = DbType.String;
                colvarAbnormal.MaxLength = 50;
                colvarAbnormal.AutoIncrement = false;
                colvarAbnormal.IsNullable = true;
                colvarAbnormal.IsPrimaryKey = false;
                colvarAbnormal.IsForeignKey = false;
                colvarAbnormal.IsReadOnly = false;
                
                schema.Columns.Add(colvarAbnormal);
                
                TableSchema.TableColumn colvarNote = new TableSchema.TableColumn(schema);
                colvarNote.ColumnName = "note";
                colvarNote.DataType = DbType.String;
                colvarNote.MaxLength = 200;
                colvarNote.AutoIncrement = false;
                colvarNote.IsNullable = true;
                colvarNote.IsPrimaryKey = false;
                colvarNote.IsForeignKey = false;
                colvarNote.IsReadOnly = false;
                
                schema.Columns.Add(colvarNote);
                
                TableSchema.TableColumn colvarMakeTime = new TableSchema.TableColumn(schema);
                colvarMakeTime.ColumnName = "makeTime";
                colvarMakeTime.DataType = DbType.String;
                colvarMakeTime.MaxLength = 50;
                colvarMakeTime.AutoIncrement = false;
                colvarMakeTime.IsNullable = true;
                colvarMakeTime.IsPrimaryKey = false;
                colvarMakeTime.IsForeignKey = false;
                colvarMakeTime.IsReadOnly = false;
                
                schema.Columns.Add(colvarMakeTime);
                
                TableSchema.TableColumn colvarCreateDate = new TableSchema.TableColumn(schema);
                colvarCreateDate.ColumnName = "createDate";
                colvarCreateDate.DataType = DbType.DateTime;
                colvarCreateDate.MaxLength = 0;
                colvarCreateDate.AutoIncrement = false;
                colvarCreateDate.IsNullable = true;
                colvarCreateDate.IsPrimaryKey = false;
                colvarCreateDate.IsForeignKey = false;
                colvarCreateDate.IsReadOnly = false;
                
                schema.Columns.Add(colvarCreateDate);
                
                
                BaseSchema = schema;
                //add this schema to the provider
                //so we can query it later
                DataService.Providers["Nowthwin"].AddSchema("V_OutPutByCAD",schema);
            }
        }
        #endregion
        
        #region Query Accessor
	    public static Query CreateQuery()
	    {
		    return new Query(Schema);
	    }
	    #endregion
	    
	    #region .ctors
	    public VOutPutByCAD()
	    {
            SetSQLProps();
            SetDefaults();
            MarkNew();
        }
        public VOutPutByCAD(bool useDatabaseDefaults)
	    {
		    SetSQLProps();
		    if(useDatabaseDefaults)
		    {
				ForceDefaults();
			}
			MarkNew();
	    }
	    
	    public VOutPutByCAD(object keyID)
	    {
		    SetSQLProps();
		    LoadByKey(keyID);
	    }
    	 
	    public VOutPutByCAD(string columnName, object columnValue)
        {
            SetSQLProps();
            LoadByParam(columnName,columnValue);
        }
        
	    #endregion
	    
	    #region Props
	    
          
        [XmlAttribute("Resources")]
        [Bindable(true)]
        public string Resources 
	    {
		    get
		    {
			    return GetColumnValue<string>("resources");
		    }
            set 
		    {
			    SetColumnValue("resources", value);
            }
        }
	      
        [XmlAttribute("CustomerId")]
        [Bindable(true)]
        public string CustomerId 
	    {
		    get
		    {
			    return GetColumnValue<string>("customerId");
		    }
            set 
		    {
			    SetColumnValue("customerId", value);
            }
        }
	      
        [XmlAttribute("BeginTime")]
        [Bindable(true)]
        public DateTime? BeginTime 
	    {
		    get
		    {
			    return GetColumnValue<DateTime?>("beginTime");
		    }
            set 
		    {
			    SetColumnValue("beginTime", value);
            }
        }
	      
        [XmlAttribute("EndTime")]
        [Bindable(true)]
        public DateTime? EndTime 
	    {
		    get
		    {
			    return GetColumnValue<DateTime?>("endTime");
		    }
            set 
		    {
			    SetColumnValue("endTime", value);
            }
        }
	      
        [XmlAttribute("JobCode")]
        [Bindable(true)]
        public string JobCode 
	    {
		    get
		    {
			    return GetColumnValue<string>("jobCode");
		    }
            set 
		    {
			    SetColumnValue("jobCode", value);
            }
        }
	      
        [XmlAttribute("Project")]
        [Bindable(true)]
        public string Project 
	    {
		    get
		    {
			    return GetColumnValue<string>("project");
		    }
            set 
		    {
			    SetColumnValue("project", value);
            }
        }
	      
        [XmlAttribute("Abnormal")]
        [Bindable(true)]
        public string Abnormal 
	    {
		    get
		    {
			    return GetColumnValue<string>("abnormal");
		    }
            set 
		    {
			    SetColumnValue("abnormal", value);
            }
        }
	      
        [XmlAttribute("Note")]
        [Bindable(true)]
        public string Note 
	    {
		    get
		    {
			    return GetColumnValue<string>("note");
		    }
            set 
		    {
			    SetColumnValue("note", value);
            }
        }
	      
        [XmlAttribute("MakeTime")]
        [Bindable(true)]
        public string MakeTime 
	    {
		    get
		    {
			    return GetColumnValue<string>("makeTime");
		    }
            set 
		    {
			    SetColumnValue("makeTime", value);
            }
        }
	      
        [XmlAttribute("CreateDate")]
        [Bindable(true)]
        public DateTime? CreateDate 
	    {
		    get
		    {
			    return GetColumnValue<DateTime?>("createDate");
		    }
            set 
		    {
			    SetColumnValue("createDate", value);
            }
        }
	    
	    #endregion
    
	    #region Columns Struct
	    public struct Columns
	    {
		    
		    
            public static string Resources = @"resources";
            
            public static string CustomerId = @"customerId";
            
            public static string BeginTime = @"beginTime";
            
            public static string EndTime = @"endTime";
            
            public static string JobCode = @"jobCode";
            
            public static string Project = @"project";
            
            public static string Abnormal = @"abnormal";
            
            public static string Note = @"note";
            
            public static string MakeTime = @"makeTime";
            
            public static string CreateDate = @"createDate";
            
	    }
	    #endregion
	    
	    
	    #region IAbstractRecord Members
        public new CT GetColumnValue<CT>(string columnName) {
            return base.GetColumnValue<CT>(columnName);
        }
        public object GetColumnValue(string columnName) {
            return base.GetColumnValue<object>(columnName);
        }
        #endregion
	    
    }
}

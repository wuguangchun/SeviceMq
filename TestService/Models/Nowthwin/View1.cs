using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace APSData{
    /// <summary>
    /// Strongly-typed collection for the View1 class.
    /// </summary>
    [Serializable]
    public partial class View1Collection : ReadOnlyList<View1, View1Collection>
    {        
        public View1Collection() {}
    }
    /// <summary>
    /// This is  Read-only wrapper class for the View_1 view.
    /// </summary>
    [Serializable]
    public partial class View1 : ReadOnlyRecord<View1>, IReadOnlyRecord
    {
    
	    #region Default Settings
	    protected static void SetSQLProps() 
	    {
		    GetTableSchema();
	    }
	    #endregion
        #region Schema Accessor
	    public static TableSchema.Table Schema
        {
            get
            {
                if (BaseSchema == null)
                {
                    SetSQLProps();
                }
                return BaseSchema;
            }
        }
    	
        private static void GetTableSchema() 
        {
            if(!IsSchemaInitialized)
            {
                //Schema declaration
                TableSchema.Table schema = new TableSchema.Table("View_1", TableType.View, DataService.GetInstance("Nowthwin"));
                schema.Columns = new TableSchema.TableColumnCollection();
                schema.SchemaName = @"dbo";
                //columns
                
                TableSchema.TableColumn colvarFzx = new TableSchema.TableColumn(schema);
                colvarFzx.ColumnName = "fzx";
                colvarFzx.DataType = DbType.AnsiString;
                colvarFzx.MaxLength = -1;
                colvarFzx.AutoIncrement = false;
                colvarFzx.IsNullable = true;
                colvarFzx.IsPrimaryKey = false;
                colvarFzx.IsForeignKey = false;
                colvarFzx.IsReadOnly = false;
                
                schema.Columns.Add(colvarFzx);
                
                TableSchema.TableColumn colvarPkId = new TableSchema.TableColumn(schema);
                colvarPkId.ColumnName = "pkId";
                colvarPkId.DataType = DbType.Int32;
                colvarPkId.MaxLength = 0;
                colvarPkId.AutoIncrement = false;
                colvarPkId.IsNullable = false;
                colvarPkId.IsPrimaryKey = false;
                colvarPkId.IsForeignKey = false;
                colvarPkId.IsReadOnly = false;
                
                schema.Columns.Add(colvarPkId);
                
                TableSchema.TableColumn colvarCustomerId = new TableSchema.TableColumn(schema);
                colvarCustomerId.ColumnName = "customerId";
                colvarCustomerId.DataType = DbType.AnsiString;
                colvarCustomerId.MaxLength = 50;
                colvarCustomerId.AutoIncrement = false;
                colvarCustomerId.IsNullable = true;
                colvarCustomerId.IsPrimaryKey = false;
                colvarCustomerId.IsForeignKey = false;
                colvarCustomerId.IsReadOnly = false;
                
                schema.Columns.Add(colvarCustomerId);
                
                TableSchema.TableColumn colvarSx = new TableSchema.TableColumn(schema);
                colvarSx.ColumnName = "SX";
                colvarSx.DataType = DbType.Int32;
                colvarSx.MaxLength = 0;
                colvarSx.AutoIncrement = false;
                colvarSx.IsNullable = true;
                colvarSx.IsPrimaryKey = false;
                colvarSx.IsForeignKey = false;
                colvarSx.IsReadOnly = false;
                
                schema.Columns.Add(colvarSx);
                
                TableSchema.TableColumn colvarCoatCode = new TableSchema.TableColumn(schema);
                colvarCoatCode.ColumnName = "coatCode";
                colvarCoatCode.DataType = DbType.AnsiString;
                colvarCoatCode.MaxLength = 50;
                colvarCoatCode.AutoIncrement = false;
                colvarCoatCode.IsNullable = true;
                colvarCoatCode.IsPrimaryKey = false;
                colvarCoatCode.IsForeignKey = false;
                colvarCoatCode.IsReadOnly = false;
                
                schema.Columns.Add(colvarCoatCode);
                
                TableSchema.TableColumn colvarNum = new TableSchema.TableColumn(schema);
                colvarNum.ColumnName = "num";
                colvarNum.DataType = DbType.AnsiString;
                colvarNum.MaxLength = 50;
                colvarNum.AutoIncrement = false;
                colvarNum.IsNullable = true;
                colvarNum.IsPrimaryKey = false;
                colvarNum.IsForeignKey = false;
                colvarNum.IsReadOnly = false;
                
                schema.Columns.Add(colvarNum);
                
                TableSchema.TableColumn colvarTypeT = new TableSchema.TableColumn(schema);
                colvarTypeT.ColumnName = "typeT";
                colvarTypeT.DataType = DbType.Int32;
                colvarTypeT.MaxLength = 0;
                colvarTypeT.AutoIncrement = false;
                colvarTypeT.IsNullable = true;
                colvarTypeT.IsPrimaryKey = false;
                colvarTypeT.IsForeignKey = false;
                colvarTypeT.IsReadOnly = false;
                
                schema.Columns.Add(colvarTypeT);
                
                TableSchema.TableColumn colvarResoure = new TableSchema.TableColumn(schema);
                colvarResoure.ColumnName = "resoure";
                colvarResoure.DataType = DbType.AnsiString;
                colvarResoure.MaxLength = 50;
                colvarResoure.AutoIncrement = false;
                colvarResoure.IsNullable = true;
                colvarResoure.IsPrimaryKey = false;
                colvarResoure.IsForeignKey = false;
                colvarResoure.IsReadOnly = false;
                
                schema.Columns.Add(colvarResoure);
                
                TableSchema.TableColumn colvarTypenum = new TableSchema.TableColumn(schema);
                colvarTypenum.ColumnName = "typenum";
                colvarTypenum.DataType = DbType.Int32;
                colvarTypenum.MaxLength = 0;
                colvarTypenum.AutoIncrement = false;
                colvarTypenum.IsNullable = true;
                colvarTypenum.IsPrimaryKey = false;
                colvarTypenum.IsForeignKey = false;
                colvarTypenum.IsReadOnly = false;
                
                schema.Columns.Add(colvarTypenum);
                
                TableSchema.TableColumn colvarMxid = new TableSchema.TableColumn(schema);
                colvarMxid.ColumnName = "mxid";
                colvarMxid.DataType = DbType.Int32;
                colvarMxid.MaxLength = 0;
                colvarMxid.AutoIncrement = false;
                colvarMxid.IsNullable = false;
                colvarMxid.IsPrimaryKey = false;
                colvarMxid.IsForeignKey = false;
                colvarMxid.IsReadOnly = false;
                
                schema.Columns.Add(colvarMxid);
                
                TableSchema.TableColumn colvarJhrq = new TableSchema.TableColumn(schema);
                colvarJhrq.ColumnName = "jhrq";
                colvarJhrq.DataType = DbType.DateTime;
                colvarJhrq.MaxLength = 0;
                colvarJhrq.AutoIncrement = false;
                colvarJhrq.IsNullable = true;
                colvarJhrq.IsPrimaryKey = false;
                colvarJhrq.IsForeignKey = false;
                colvarJhrq.IsReadOnly = false;
                
                schema.Columns.Add(colvarJhrq);
                
                
                BaseSchema = schema;
                //add this schema to the provider
                //so we can query it later
                DataService.Providers["Nowthwin"].AddSchema("View_1",schema);
            }
        }
        #endregion
        
        #region Query Accessor
	    public static Query CreateQuery()
	    {
		    return new Query(Schema);
	    }
	    #endregion
	    
	    #region .ctors
	    public View1()
	    {
            SetSQLProps();
            SetDefaults();
            MarkNew();
        }
        public View1(bool useDatabaseDefaults)
	    {
		    SetSQLProps();
		    if(useDatabaseDefaults)
		    {
				ForceDefaults();
			}
			MarkNew();
	    }
	    
	    public View1(object keyID)
	    {
		    SetSQLProps();
		    LoadByKey(keyID);
	    }
    	 
	    public View1(string columnName, object columnValue)
        {
            SetSQLProps();
            LoadByParam(columnName,columnValue);
        }
        
	    #endregion
	    
	    #region Props
	    
          
        [XmlAttribute("Fzx")]
        [Bindable(true)]
        public string Fzx 
	    {
		    get
		    {
			    return GetColumnValue<string>("fzx");
		    }
            set 
		    {
			    SetColumnValue("fzx", value);
            }
        }
	      
        [XmlAttribute("PkId")]
        [Bindable(true)]
        public int PkId 
	    {
		    get
		    {
			    return GetColumnValue<int>("pkId");
		    }
            set 
		    {
			    SetColumnValue("pkId", value);
            }
        }
	      
        [XmlAttribute("CustomerId")]
        [Bindable(true)]
        public string CustomerId 
	    {
		    get
		    {
			    return GetColumnValue<string>("customerId");
		    }
            set 
		    {
			    SetColumnValue("customerId", value);
            }
        }
	      
        [XmlAttribute("Sx")]
        [Bindable(true)]
        public int? Sx 
	    {
		    get
		    {
			    return GetColumnValue<int?>("SX");
		    }
            set 
		    {
			    SetColumnValue("SX", value);
            }
        }
	      
        [XmlAttribute("CoatCode")]
        [Bindable(true)]
        public string CoatCode 
	    {
		    get
		    {
			    return GetColumnValue<string>("coatCode");
		    }
            set 
		    {
			    SetColumnValue("coatCode", value);
            }
        }
	      
        [XmlAttribute("Num")]
        [Bindable(true)]
        public string Num 
	    {
		    get
		    {
			    return GetColumnValue<string>("num");
		    }
            set 
		    {
			    SetColumnValue("num", value);
            }
        }
	      
        [XmlAttribute("TypeT")]
        [Bindable(true)]
        public int? TypeT 
	    {
		    get
		    {
			    return GetColumnValue<int?>("typeT");
		    }
            set 
		    {
			    SetColumnValue("typeT", value);
            }
        }
	      
        [XmlAttribute("Resoure")]
        [Bindable(true)]
        public string Resoure 
	    {
		    get
		    {
			    return GetColumnValue<string>("resoure");
		    }
            set 
		    {
			    SetColumnValue("resoure", value);
            }
        }
	      
        [XmlAttribute("Typenum")]
        [Bindable(true)]
        public int? Typenum 
	    {
		    get
		    {
			    return GetColumnValue<int?>("typenum");
		    }
            set 
		    {
			    SetColumnValue("typenum", value);
            }
        }
	      
        [XmlAttribute("Mxid")]
        [Bindable(true)]
        public int Mxid 
	    {
		    get
		    {
			    return GetColumnValue<int>("mxid");
		    }
            set 
		    {
			    SetColumnValue("mxid", value);
            }
        }
	      
        [XmlAttribute("Jhrq")]
        [Bindable(true)]
        public DateTime? Jhrq 
	    {
		    get
		    {
			    return GetColumnValue<DateTime?>("jhrq");
		    }
            set 
		    {
			    SetColumnValue("jhrq", value);
            }
        }
	    
	    #endregion
    
	    #region Columns Struct
	    public struct Columns
	    {
		    
		    
            public static string Fzx = @"fzx";
            
            public static string PkId = @"pkId";
            
            public static string CustomerId = @"customerId";
            
            public static string Sx = @"SX";
            
            public static string CoatCode = @"coatCode";
            
            public static string Num = @"num";
            
            public static string TypeT = @"typeT";
            
            public static string Resoure = @"resoure";
            
            public static string Typenum = @"typenum";
            
            public static string Mxid = @"mxid";
            
            public static string Jhrq = @"jhrq";
            
	    }
	    #endregion
	    
	    
	    #region IAbstractRecord Members
        public new CT GetColumnValue<CT>(string columnName) {
            return base.GetColumnValue<CT>(columnName);
        }
        public object GetColumnValue(string columnName) {
            return base.GetColumnValue<object>(columnName);
        }
        #endregion
	    
    }
}

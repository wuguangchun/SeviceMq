using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace APSData{
    /// <summary>
    /// Strongly-typed collection for the VBlankingOut class.
    /// </summary>
    [Serializable]
    public partial class VBlankingOutCollection : ReadOnlyList<VBlankingOut, VBlankingOutCollection>
    {        
        public VBlankingOutCollection() {}
    }
    /// <summary>
    /// This is  Read-only wrapper class for the V_BlankingOut view.
    /// </summary>
    [Serializable]
    public partial class VBlankingOut : ReadOnlyRecord<VBlankingOut>, IReadOnlyRecord
    {
    
	    #region Default Settings
	    protected static void SetSQLProps() 
	    {
		    GetTableSchema();
	    }
	    #endregion
        #region Schema Accessor
	    public static TableSchema.Table Schema
        {
            get
            {
                if (BaseSchema == null)
                {
                    SetSQLProps();
                }
                return BaseSchema;
            }
        }
    	
        private static void GetTableSchema() 
        {
            if(!IsSchemaInitialized)
            {
                //Schema declaration
                TableSchema.Table schema = new TableSchema.Table("V_BlankingOut", TableType.View, DataService.GetInstance("Nowthwin"));
                schema.Columns = new TableSchema.TableColumnCollection();
                schema.SchemaName = @"dbo";
                //columns
                
                TableSchema.TableColumn colvarOrderID = new TableSchema.TableColumn(schema);
                colvarOrderID.ColumnName = "OrderID";
                colvarOrderID.DataType = DbType.String;
                colvarOrderID.MaxLength = 50;
                colvarOrderID.AutoIncrement = false;
                colvarOrderID.IsNullable = true;
                colvarOrderID.IsPrimaryKey = false;
                colvarOrderID.IsForeignKey = false;
                colvarOrderID.IsReadOnly = false;
                
                schema.Columns.Add(colvarOrderID);
                
                TableSchema.TableColumn colvarCutNo = new TableSchema.TableColumn(schema);
                colvarCutNo.ColumnName = "CutNo";
                colvarCutNo.DataType = DbType.Int32;
                colvarCutNo.MaxLength = 0;
                colvarCutNo.AutoIncrement = false;
                colvarCutNo.IsNullable = true;
                colvarCutNo.IsPrimaryKey = false;
                colvarCutNo.IsForeignKey = false;
                colvarCutNo.IsReadOnly = false;
                
                schema.Columns.Add(colvarCutNo);
                
                TableSchema.TableColumn colvarBeginTime = new TableSchema.TableColumn(schema);
                colvarBeginTime.ColumnName = "BeginTime";
                colvarBeginTime.DataType = DbType.DateTime;
                colvarBeginTime.MaxLength = 0;
                colvarBeginTime.AutoIncrement = false;
                colvarBeginTime.IsNullable = true;
                colvarBeginTime.IsPrimaryKey = false;
                colvarBeginTime.IsForeignKey = false;
                colvarBeginTime.IsReadOnly = false;
                
                schema.Columns.Add(colvarBeginTime);
                
                TableSchema.TableColumn colvarCjDate = new TableSchema.TableColumn(schema);
                colvarCjDate.ColumnName = "cjDate";
                colvarCjDate.DataType = DbType.String;
                colvarCjDate.MaxLength = 50;
                colvarCjDate.AutoIncrement = false;
                colvarCjDate.IsNullable = true;
                colvarCjDate.IsPrimaryKey = false;
                colvarCjDate.IsForeignKey = false;
                colvarCjDate.IsReadOnly = false;
                
                schema.Columns.Add(colvarCjDate);
                
                TableSchema.TableColumn colvarCutTime = new TableSchema.TableColumn(schema);
                colvarCutTime.ColumnName = "CutTime";
                colvarCutTime.DataType = DbType.String;
                colvarCutTime.MaxLength = 50;
                colvarCutTime.AutoIncrement = false;
                colvarCutTime.IsNullable = true;
                colvarCutTime.IsPrimaryKey = false;
                colvarCutTime.IsForeignKey = false;
                colvarCutTime.IsReadOnly = false;
                
                schema.Columns.Add(colvarCutTime);
                
                
                BaseSchema = schema;
                //add this schema to the provider
                //so we can query it later
                DataService.Providers["Nowthwin"].AddSchema("V_BlankingOut",schema);
            }
        }
        #endregion
        
        #region Query Accessor
	    public static Query CreateQuery()
	    {
		    return new Query(Schema);
	    }
	    #endregion
	    
	    #region .ctors
	    public VBlankingOut()
	    {
            SetSQLProps();
            SetDefaults();
            MarkNew();
        }
        public VBlankingOut(bool useDatabaseDefaults)
	    {
		    SetSQLProps();
		    if(useDatabaseDefaults)
		    {
				ForceDefaults();
			}
			MarkNew();
	    }
	    
	    public VBlankingOut(object keyID)
	    {
		    SetSQLProps();
		    LoadByKey(keyID);
	    }
    	 
	    public VBlankingOut(string columnName, object columnValue)
        {
            SetSQLProps();
            LoadByParam(columnName,columnValue);
        }
        
	    #endregion
	    
	    #region Props
	    
          
        [XmlAttribute("OrderID")]
        [Bindable(true)]
        public string OrderID 
	    {
		    get
		    {
			    return GetColumnValue<string>("OrderID");
		    }
            set 
		    {
			    SetColumnValue("OrderID", value);
            }
        }
	      
        [XmlAttribute("CutNo")]
        [Bindable(true)]
        public int? CutNo 
	    {
		    get
		    {
			    return GetColumnValue<int?>("CutNo");
		    }
            set 
		    {
			    SetColumnValue("CutNo", value);
            }
        }
	      
        [XmlAttribute("BeginTime")]
        [Bindable(true)]
        public DateTime? BeginTime 
	    {
		    get
		    {
			    return GetColumnValue<DateTime?>("BeginTime");
		    }
            set 
		    {
			    SetColumnValue("BeginTime", value);
            }
        }
	      
        [XmlAttribute("CjDate")]
        [Bindable(true)]
        public string CjDate 
	    {
		    get
		    {
			    return GetColumnValue<string>("cjDate");
		    }
            set 
		    {
			    SetColumnValue("cjDate", value);
            }
        }
	      
        [XmlAttribute("CutTime")]
        [Bindable(true)]
        public string CutTime 
	    {
		    get
		    {
			    return GetColumnValue<string>("CutTime");
		    }
            set 
		    {
			    SetColumnValue("CutTime", value);
            }
        }
	    
	    #endregion
    
	    #region Columns Struct
	    public struct Columns
	    {
		    
		    
            public static string OrderID = @"OrderID";
            
            public static string CutNo = @"CutNo";
            
            public static string BeginTime = @"BeginTime";
            
            public static string CjDate = @"cjDate";
            
            public static string CutTime = @"CutTime";
            
	    }
	    #endregion
	    
	    
	    #region IAbstractRecord Members
        public new CT GetColumnValue<CT>(string columnName) {
            return base.GetColumnValue<CT>(columnName);
        }
        public object GetColumnValue(string columnName) {
            return base.GetColumnValue<object>(columnName);
        }
        #endregion
	    
    }
}

using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace APSData
{
	/// <summary>
	/// Strongly-typed collection for the TBasisGetDataSetDelete class.
	/// </summary>
    [Serializable]
	public partial class TBasisGetDataSetDeleteCollection : ActiveList<TBasisGetDataSetDelete, TBasisGetDataSetDeleteCollection>
	{	   
		public TBasisGetDataSetDeleteCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>TBasisGetDataSetDeleteCollection</returns>
		public TBasisGetDataSetDeleteCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                TBasisGetDataSetDelete o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the T_Basis_GetDataSet_delete table.
	/// </summary>
	[Serializable]
	public partial class TBasisGetDataSetDelete : ActiveRecord<TBasisGetDataSetDelete>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public TBasisGetDataSetDelete()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public TBasisGetDataSetDelete(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public TBasisGetDataSetDelete(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public TBasisGetDataSetDelete(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("T_Basis_GetDataSet_delete", TableType.Table, DataService.GetInstance("Nowthwin"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarId = new TableSchema.TableColumn(schema);
				colvarId.ColumnName = "id";
				colvarId.DataType = DbType.Int32;
				colvarId.MaxLength = 0;
				colvarId.AutoIncrement = true;
				colvarId.IsNullable = false;
				colvarId.IsPrimaryKey = true;
				colvarId.IsForeignKey = false;
				colvarId.IsReadOnly = false;
				colvarId.DefaultSetting = @"";
				colvarId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarId);
				
				TableSchema.TableColumn colvarAccessTime = new TableSchema.TableColumn(schema);
				colvarAccessTime.ColumnName = "accessTime";
				colvarAccessTime.DataType = DbType.Int32;
				colvarAccessTime.MaxLength = 0;
				colvarAccessTime.AutoIncrement = false;
				colvarAccessTime.IsNullable = true;
				colvarAccessTime.IsPrimaryKey = false;
				colvarAccessTime.IsForeignKey = false;
				colvarAccessTime.IsReadOnly = false;
				colvarAccessTime.DefaultSetting = @"";
				colvarAccessTime.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAccessTime);
				
				TableSchema.TableColumn colvarExplain = new TableSchema.TableColumn(schema);
				colvarExplain.ColumnName = "explain";
				colvarExplain.DataType = DbType.String;
				colvarExplain.MaxLength = 50;
				colvarExplain.AutoIncrement = false;
				colvarExplain.IsNullable = true;
				colvarExplain.IsPrimaryKey = false;
				colvarExplain.IsForeignKey = false;
				colvarExplain.IsReadOnly = false;
				colvarExplain.DefaultSetting = @"";
				colvarExplain.ForeignKeyTableName = "";
				schema.Columns.Add(colvarExplain);
				
				TableSchema.TableColumn colvarIsDel = new TableSchema.TableColumn(schema);
				colvarIsDel.ColumnName = "isDel";
				colvarIsDel.DataType = DbType.Int32;
				colvarIsDel.MaxLength = 0;
				colvarIsDel.AutoIncrement = false;
				colvarIsDel.IsNullable = true;
				colvarIsDel.IsPrimaryKey = false;
				colvarIsDel.IsForeignKey = false;
				colvarIsDel.IsReadOnly = false;
				colvarIsDel.DefaultSetting = @"";
				colvarIsDel.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDel);
				
				TableSchema.TableColumn colvarCreateTime = new TableSchema.TableColumn(schema);
				colvarCreateTime.ColumnName = "createTime";
				colvarCreateTime.DataType = DbType.DateTime;
				colvarCreateTime.MaxLength = 0;
				colvarCreateTime.AutoIncrement = false;
				colvarCreateTime.IsNullable = true;
				colvarCreateTime.IsPrimaryKey = false;
				colvarCreateTime.IsForeignKey = false;
				colvarCreateTime.IsReadOnly = false;
				colvarCreateTime.DefaultSetting = @"";
				colvarCreateTime.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreateTime);
				
				TableSchema.TableColumn colvarCreateMan = new TableSchema.TableColumn(schema);
				colvarCreateMan.ColumnName = "createMan";
				colvarCreateMan.DataType = DbType.String;
				colvarCreateMan.MaxLength = 50;
				colvarCreateMan.AutoIncrement = false;
				colvarCreateMan.IsNullable = true;
				colvarCreateMan.IsPrimaryKey = false;
				colvarCreateMan.IsForeignKey = false;
				colvarCreateMan.IsReadOnly = false;
				colvarCreateMan.DefaultSetting = @"";
				colvarCreateMan.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreateMan);
				
				TableSchema.TableColumn colvarAccessPlanTime = new TableSchema.TableColumn(schema);
				colvarAccessPlanTime.ColumnName = "accessPlanTime";
				colvarAccessPlanTime.DataType = DbType.Int32;
				colvarAccessPlanTime.MaxLength = 0;
				colvarAccessPlanTime.AutoIncrement = false;
				colvarAccessPlanTime.IsNullable = true;
				colvarAccessPlanTime.IsPrimaryKey = false;
				colvarAccessPlanTime.IsForeignKey = false;
				colvarAccessPlanTime.IsReadOnly = false;
				colvarAccessPlanTime.DefaultSetting = @"";
				colvarAccessPlanTime.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAccessPlanTime);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["Nowthwin"].AddSchema("T_Basis_GetDataSet_delete",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Id")]
		[Bindable(true)]
		public int Id 
		{
			get { return GetColumnValue<int>(Columns.Id); }
			set { SetColumnValue(Columns.Id, value); }
		}
		  
		[XmlAttribute("AccessTime")]
		[Bindable(true)]
		public int? AccessTime 
		{
			get { return GetColumnValue<int?>(Columns.AccessTime); }
			set { SetColumnValue(Columns.AccessTime, value); }
		}
		  
		[XmlAttribute("Explain")]
		[Bindable(true)]
		public string Explain 
		{
			get { return GetColumnValue<string>(Columns.Explain); }
			set { SetColumnValue(Columns.Explain, value); }
		}
		  
		[XmlAttribute("IsDel")]
		[Bindable(true)]
		public int? IsDel 
		{
			get { return GetColumnValue<int?>(Columns.IsDel); }
			set { SetColumnValue(Columns.IsDel, value); }
		}
		  
		[XmlAttribute("CreateTime")]
		[Bindable(true)]
		public DateTime? CreateTime 
		{
			get { return GetColumnValue<DateTime?>(Columns.CreateTime); }
			set { SetColumnValue(Columns.CreateTime, value); }
		}
		  
		[XmlAttribute("CreateMan")]
		[Bindable(true)]
		public string CreateMan 
		{
			get { return GetColumnValue<string>(Columns.CreateMan); }
			set { SetColumnValue(Columns.CreateMan, value); }
		}
		  
		[XmlAttribute("AccessPlanTime")]
		[Bindable(true)]
		public int? AccessPlanTime 
		{
			get { return GetColumnValue<int?>(Columns.AccessPlanTime); }
			set { SetColumnValue(Columns.AccessPlanTime, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(int? varAccessTime,string varExplain,int? varIsDel,DateTime? varCreateTime,string varCreateMan,int? varAccessPlanTime)
		{
			TBasisGetDataSetDelete item = new TBasisGetDataSetDelete();
			
			item.AccessTime = varAccessTime;
			
			item.Explain = varExplain;
			
			item.IsDel = varIsDel;
			
			item.CreateTime = varCreateTime;
			
			item.CreateMan = varCreateMan;
			
			item.AccessPlanTime = varAccessPlanTime;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varId,int? varAccessTime,string varExplain,int? varIsDel,DateTime? varCreateTime,string varCreateMan,int? varAccessPlanTime)
		{
			TBasisGetDataSetDelete item = new TBasisGetDataSetDelete();
			
				item.Id = varId;
			
				item.AccessTime = varAccessTime;
			
				item.Explain = varExplain;
			
				item.IsDel = varIsDel;
			
				item.CreateTime = varCreateTime;
			
				item.CreateMan = varCreateMan;
			
				item.AccessPlanTime = varAccessPlanTime;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn IdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn AccessTimeColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn ExplainColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn IsDelColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn CreateTimeColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn CreateManColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn AccessPlanTimeColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Id = @"id";
			 public static string AccessTime = @"accessTime";
			 public static string Explain = @"explain";
			 public static string IsDel = @"isDel";
			 public static string CreateTime = @"createTime";
			 public static string CreateMan = @"createMan";
			 public static string AccessPlanTime = @"accessPlanTime";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}

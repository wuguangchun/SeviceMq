using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace APSData{
    /// <summary>
    /// Strongly-typed collection for the VFactoryCalendar class.
    /// </summary>
    [Serializable]
    public partial class VFactoryCalendarCollection : ReadOnlyList<VFactoryCalendar, VFactoryCalendarCollection>
    {        
        public VFactoryCalendarCollection() {}
    }
    /// <summary>
    /// This is  Read-only wrapper class for the V_FactoryCalendar view.
    /// </summary>
    [Serializable]
    public partial class VFactoryCalendar : ReadOnlyRecord<VFactoryCalendar>, IReadOnlyRecord
    {
    
	    #region Default Settings
	    protected static void SetSQLProps() 
	    {
		    GetTableSchema();
	    }
	    #endregion
        #region Schema Accessor
	    public static TableSchema.Table Schema
        {
            get
            {
                if (BaseSchema == null)
                {
                    SetSQLProps();
                }
                return BaseSchema;
            }
        }
    	
        private static void GetTableSchema() 
        {
            if(!IsSchemaInitialized)
            {
                //Schema declaration
                TableSchema.Table schema = new TableSchema.Table("V_FactoryCalendar", TableType.View, DataService.GetInstance("Nowthwin"));
                schema.Columns = new TableSchema.TableColumnCollection();
                schema.SchemaName = @"dbo";
                //columns
                
                TableSchema.TableColumn colvarResource = new TableSchema.TableColumn(schema);
                colvarResource.ColumnName = "Resource";
                colvarResource.DataType = DbType.AnsiString;
                colvarResource.MaxLength = 50;
                colvarResource.AutoIncrement = false;
                colvarResource.IsNullable = false;
                colvarResource.IsPrimaryKey = false;
                colvarResource.IsForeignKey = false;
                colvarResource.IsReadOnly = false;
                
                schema.Columns.Add(colvarResource);
                
                TableSchema.TableColumn colvarDateX = new TableSchema.TableColumn(schema);
                colvarDateX.ColumnName = "date";
                colvarDateX.DataType = DbType.String;
                colvarDateX.MaxLength = 4000;
                colvarDateX.AutoIncrement = false;
                colvarDateX.IsNullable = true;
                colvarDateX.IsPrimaryKey = false;
                colvarDateX.IsForeignKey = false;
                colvarDateX.IsReadOnly = false;
                
                schema.Columns.Add(colvarDateX);
                
                TableSchema.TableColumn colvarFlagstatus = new TableSchema.TableColumn(schema);
                colvarFlagstatus.ColumnName = "flagstatus";
                colvarFlagstatus.DataType = DbType.AnsiString;
                colvarFlagstatus.MaxLength = 50;
                colvarFlagstatus.AutoIncrement = false;
                colvarFlagstatus.IsNullable = false;
                colvarFlagstatus.IsPrimaryKey = false;
                colvarFlagstatus.IsForeignKey = false;
                colvarFlagstatus.IsReadOnly = false;
                
                schema.Columns.Add(colvarFlagstatus);
                
                TableSchema.TableColumn colvarFirst = new TableSchema.TableColumn(schema);
                colvarFirst.ColumnName = "first";
                colvarFirst.DataType = DbType.Int32;
                colvarFirst.MaxLength = 0;
                colvarFirst.AutoIncrement = false;
                colvarFirst.IsNullable = true;
                colvarFirst.IsPrimaryKey = false;
                colvarFirst.IsForeignKey = false;
                colvarFirst.IsReadOnly = false;
                
                schema.Columns.Add(colvarFirst);
                
                
                BaseSchema = schema;
                //add this schema to the provider
                //so we can query it later
                DataService.Providers["Nowthwin"].AddSchema("V_FactoryCalendar",schema);
            }
        }
        #endregion
        
        #region Query Accessor
	    public static Query CreateQuery()
	    {
		    return new Query(Schema);
	    }
	    #endregion
	    
	    #region .ctors
	    public VFactoryCalendar()
	    {
            SetSQLProps();
            SetDefaults();
            MarkNew();
        }
        public VFactoryCalendar(bool useDatabaseDefaults)
	    {
		    SetSQLProps();
		    if(useDatabaseDefaults)
		    {
				ForceDefaults();
			}
			MarkNew();
	    }
	    
	    public VFactoryCalendar(object keyID)
	    {
		    SetSQLProps();
		    LoadByKey(keyID);
	    }
    	 
	    public VFactoryCalendar(string columnName, object columnValue)
        {
            SetSQLProps();
            LoadByParam(columnName,columnValue);
        }
        
	    #endregion
	    
	    #region Props
	    
          
        [XmlAttribute("Resource")]
        [Bindable(true)]
        public string Resource 
	    {
		    get
		    {
			    return GetColumnValue<string>("Resource");
		    }
            set 
		    {
			    SetColumnValue("Resource", value);
            }
        }
	      
        [XmlAttribute("DateX")]
        [Bindable(true)]
        public string DateX 
	    {
		    get
		    {
			    return GetColumnValue<string>("date");
		    }
            set 
		    {
			    SetColumnValue("date", value);
            }
        }
	      
        [XmlAttribute("Flagstatus")]
        [Bindable(true)]
        public string Flagstatus 
	    {
		    get
		    {
			    return GetColumnValue<string>("flagstatus");
		    }
            set 
		    {
			    SetColumnValue("flagstatus", value);
            }
        }
	      
        [XmlAttribute("First")]
        [Bindable(true)]
        public int? First 
	    {
		    get
		    {
			    return GetColumnValue<int?>("first");
		    }
            set 
		    {
			    SetColumnValue("first", value);
            }
        }
	    
	    #endregion
    
	    #region Columns Struct
	    public struct Columns
	    {
		    
		    
            public static string Resource = @"Resource";
            
            public static string DateX = @"date";
            
            public static string Flagstatus = @"flagstatus";
            
            public static string First = @"first";
            
	    }
	    #endregion
	    
	    
	    #region IAbstractRecord Members
        public new CT GetColumnValue<CT>(string columnName) {
            return base.GetColumnValue<CT>(columnName);
        }
        public object GetColumnValue(string columnName) {
            return base.GetColumnValue<object>(columnName);
        }
        #endregion
	    
    }
}

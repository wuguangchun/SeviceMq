using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace Test1{
    /// <summary>
    /// Strongly-typed collection for the TOldApsByCf class.
    /// </summary>
    [Serializable]
    public partial class TOldApsByCfCollection : ReadOnlyList<TOldApsByCf, TOldApsByCfCollection>
    {        
        public TOldApsByCfCollection() {}
    }
    /// <summary>
    /// This is  Read-only wrapper class for the T_OldApsByCf view.
    /// </summary>
    [Serializable]
    public partial class TOldApsByCf : ReadOnlyRecord<TOldApsByCf>, IReadOnlyRecord
    {
    
	    #region Default Settings
	    protected static void SetSQLProps() 
	    {
		    GetTableSchema();
	    }
	    #endregion
        #region Schema Accessor
	    public static TableSchema.Table Schema
        {
            get
            {
                if (BaseSchema == null)
                {
                    SetSQLProps();
                }
                return BaseSchema;
            }
        }
    	
        private static void GetTableSchema() 
        {
            if(!IsSchemaInitialized)
            {
                //Schema declaration
                TableSchema.Table schema = new TableSchema.Table("T_OldApsByCf", TableType.View, DataService.GetInstance("Test1"));
                schema.Columns = new TableSchema.TableColumnCollection();
                schema.SchemaName = @"dbo";
                //columns
                
                TableSchema.TableColumn colvarId = new TableSchema.TableColumn(schema);
                colvarId.ColumnName = "ID";
                colvarId.DataType = DbType.Int32;
                colvarId.MaxLength = 0;
                colvarId.AutoIncrement = false;
                colvarId.IsNullable = false;
                colvarId.IsPrimaryKey = false;
                colvarId.IsForeignKey = false;
                colvarId.IsReadOnly = false;
                
                schema.Columns.Add(colvarId);
                
                TableSchema.TableColumn colvarOrderID = new TableSchema.TableColumn(schema);
                colvarOrderID.ColumnName = "OrderID";
                colvarOrderID.DataType = DbType.String;
                colvarOrderID.MaxLength = 50;
                colvarOrderID.AutoIncrement = false;
                colvarOrderID.IsNullable = true;
                colvarOrderID.IsPrimaryKey = false;
                colvarOrderID.IsForeignKey = false;
                colvarOrderID.IsReadOnly = false;
                
                schema.Columns.Add(colvarOrderID);
                
                TableSchema.TableColumn colvarBeginTime = new TableSchema.TableColumn(schema);
                colvarBeginTime.ColumnName = "BeginTime";
                colvarBeginTime.DataType = DbType.DateTime;
                colvarBeginTime.MaxLength = 0;
                colvarBeginTime.AutoIncrement = false;
                colvarBeginTime.IsNullable = true;
                colvarBeginTime.IsPrimaryKey = false;
                colvarBeginTime.IsForeignKey = false;
                colvarBeginTime.IsReadOnly = false;
                
                schema.Columns.Add(colvarBeginTime);
                
                TableSchema.TableColumn colvarEndTime = new TableSchema.TableColumn(schema);
                colvarEndTime.ColumnName = "EndTime";
                colvarEndTime.DataType = DbType.DateTime;
                colvarEndTime.MaxLength = 0;
                colvarEndTime.AutoIncrement = false;
                colvarEndTime.IsNullable = true;
                colvarEndTime.IsPrimaryKey = false;
                colvarEndTime.IsForeignKey = false;
                colvarEndTime.IsReadOnly = false;
                
                schema.Columns.Add(colvarEndTime);
                
                TableSchema.TableColumn colvarCutDate = new TableSchema.TableColumn(schema);
                colvarCutDate.ColumnName = "CutDate";
                colvarCutDate.DataType = DbType.AnsiString;
                colvarCutDate.MaxLength = 0;
                colvarCutDate.AutoIncrement = false;
                colvarCutDate.IsNullable = true;
                colvarCutDate.IsPrimaryKey = false;
                colvarCutDate.IsForeignKey = false;
                colvarCutDate.IsReadOnly = false;
                
                schema.Columns.Add(colvarCutDate);
                
                TableSchema.TableColumn colvarCutTime = new TableSchema.TableColumn(schema);
                colvarCutTime.ColumnName = "CutTime";
                colvarCutTime.DataType = DbType.String;
                colvarCutTime.MaxLength = 50;
                colvarCutTime.AutoIncrement = false;
                colvarCutTime.IsNullable = true;
                colvarCutTime.IsPrimaryKey = false;
                colvarCutTime.IsForeignKey = false;
                colvarCutTime.IsReadOnly = false;
                
                schema.Columns.Add(colvarCutTime);
                
                TableSchema.TableColumn colvarCutNo = new TableSchema.TableColumn(schema);
                colvarCutNo.ColumnName = "CutNo";
                colvarCutNo.DataType = DbType.Int32;
                colvarCutNo.MaxLength = 0;
                colvarCutNo.AutoIncrement = false;
                colvarCutNo.IsNullable = true;
                colvarCutNo.IsPrimaryKey = false;
                colvarCutNo.IsForeignKey = false;
                colvarCutNo.IsReadOnly = false;
                
                schema.Columns.Add(colvarCutNo);
                
                TableSchema.TableColumn colvarCreateTime = new TableSchema.TableColumn(schema);
                colvarCreateTime.ColumnName = "CreateTime";
                colvarCreateTime.DataType = DbType.DateTime;
                colvarCreateTime.MaxLength = 0;
                colvarCreateTime.AutoIncrement = false;
                colvarCreateTime.IsNullable = true;
                colvarCreateTime.IsPrimaryKey = false;
                colvarCreateTime.IsForeignKey = false;
                colvarCreateTime.IsReadOnly = false;
                
                schema.Columns.Add(colvarCreateTime);
                
                TableSchema.TableColumn colvarScggdh = new TableSchema.TableColumn(schema);
                colvarScggdh.ColumnName = "Scggdh";
                colvarScggdh.DataType = DbType.String;
                colvarScggdh.MaxLength = 50;
                colvarScggdh.AutoIncrement = false;
                colvarScggdh.IsNullable = true;
                colvarScggdh.IsPrimaryKey = false;
                colvarScggdh.IsForeignKey = false;
                colvarScggdh.IsReadOnly = false;
                
                schema.Columns.Add(colvarScggdh);
                
                
                BaseSchema = schema;
                //add this schema to the provider
                //so we can query it later
                DataService.Providers["Test1"].AddSchema("T_OldApsByCf",schema);
            }
        }
        #endregion
        
        #region Query Accessor
	    public static Query CreateQuery()
	    {
		    return new Query(Schema);
	    }
	    #endregion
	    
	    #region .ctors
	    public TOldApsByCf()
	    {
            SetSQLProps();
            SetDefaults();
            MarkNew();
        }
        public TOldApsByCf(bool useDatabaseDefaults)
	    {
		    SetSQLProps();
		    if(useDatabaseDefaults)
		    {
				ForceDefaults();
			}
			MarkNew();
	    }
	    
	    public TOldApsByCf(object keyID)
	    {
		    SetSQLProps();
		    LoadByKey(keyID);
	    }
    	 
	    public TOldApsByCf(string columnName, object columnValue)
        {
            SetSQLProps();
            LoadByParam(columnName,columnValue);
        }
        
	    #endregion
	    
	    #region Props
	    
          
        [XmlAttribute("Id")]
        [Bindable(true)]
        public int Id 
	    {
		    get
		    {
			    return GetColumnValue<int>("ID");
		    }
            set 
		    {
			    SetColumnValue("ID", value);
            }
        }
	      
        [XmlAttribute("OrderID")]
        [Bindable(true)]
        public string OrderID 
	    {
		    get
		    {
			    return GetColumnValue<string>("OrderID");
		    }
            set 
		    {
			    SetColumnValue("OrderID", value);
            }
        }
	      
        [XmlAttribute("BeginTime")]
        [Bindable(true)]
        public DateTime? BeginTime 
	    {
		    get
		    {
			    return GetColumnValue<DateTime?>("BeginTime");
		    }
            set 
		    {
			    SetColumnValue("BeginTime", value);
            }
        }
	      
        [XmlAttribute("EndTime")]
        [Bindable(true)]
        public DateTime? EndTime 
	    {
		    get
		    {
			    return GetColumnValue<DateTime?>("EndTime");
		    }
            set 
		    {
			    SetColumnValue("EndTime", value);
            }
        }
	      
        [XmlAttribute("CutDate")]
        [Bindable(true)]
        public string CutDate 
	    {
		    get
		    {
			    return GetColumnValue<string>("CutDate");
		    }
            set 
		    {
			    SetColumnValue("CutDate", value);
            }
        }
	      
        [XmlAttribute("CutTime")]
        [Bindable(true)]
        public string CutTime 
	    {
		    get
		    {
			    return GetColumnValue<string>("CutTime");
		    }
            set 
		    {
			    SetColumnValue("CutTime", value);
            }
        }
	      
        [XmlAttribute("CutNo")]
        [Bindable(true)]
        public int? CutNo 
	    {
		    get
		    {
			    return GetColumnValue<int?>("CutNo");
		    }
            set 
		    {
			    SetColumnValue("CutNo", value);
            }
        }
	      
        [XmlAttribute("CreateTime")]
        [Bindable(true)]
        public DateTime? CreateTime 
	    {
		    get
		    {
			    return GetColumnValue<DateTime?>("CreateTime");
		    }
            set 
		    {
			    SetColumnValue("CreateTime", value);
            }
        }
	      
        [XmlAttribute("Scggdh")]
        [Bindable(true)]
        public string Scggdh 
	    {
		    get
		    {
			    return GetColumnValue<string>("Scggdh");
		    }
            set 
		    {
			    SetColumnValue("Scggdh", value);
            }
        }
	    
	    #endregion
    
	    #region Columns Struct
	    public struct Columns
	    {
		    
		    
            public static string Id = @"ID";
            
            public static string OrderID = @"OrderID";
            
            public static string BeginTime = @"BeginTime";
            
            public static string EndTime = @"EndTime";
            
            public static string CutDate = @"CutDate";
            
            public static string CutTime = @"CutTime";
            
            public static string CutNo = @"CutNo";
            
            public static string CreateTime = @"CreateTime";
            
            public static string Scggdh = @"Scggdh";
            
	    }
	    #endregion
	    
	    
	    #region IAbstractRecord Members
        public new CT GetColumnValue<CT>(string columnName) {
            return base.GetColumnValue<CT>(columnName);
        }
        public object GetColumnValue(string columnName) {
            return base.GetColumnValue<object>(columnName);
        }
        #endregion
	    
    }
}

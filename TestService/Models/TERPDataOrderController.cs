using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace APSData
{
    /// <summary>
    /// Controller class for T_ERPData_Order
    /// </summary>
    [System.ComponentModel.DataObject]
    public partial class TERPDataOrderController
    {
        // Preload our schema..
        TERPDataOrder thisSchemaLoad = new TERPDataOrder();
        private string userName = String.Empty;
        protected string UserName
        {
            get
            {
				if (userName.Length == 0) 
				{
    				if (System.Web.HttpContext.Current != null)
    				{
						userName=System.Web.HttpContext.Current.User.Identity.Name;
					}
					else
					{
						userName=System.Threading.Thread.CurrentPrincipal.Identity.Name;
					}
				}
				return userName;
            }
        }
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public TERPDataOrderCollection FetchAll()
        {
            TERPDataOrderCollection coll = new TERPDataOrderCollection();
            Query qry = new Query(TERPDataOrder.Schema);
            coll.LoadAndCloseReader(qry.ExecuteReader());
            return coll;
        }
        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public TERPDataOrderCollection FetchByID(object Id)
        {
            TERPDataOrderCollection coll = new TERPDataOrderCollection().Where("id", Id).Load();
            return coll;
        }
		
		[DataObjectMethod(DataObjectMethodType.Select, false)]
        public TERPDataOrderCollection FetchByQuery(Query qry)
        {
            TERPDataOrderCollection coll = new TERPDataOrderCollection();
            coll.LoadAndCloseReader(qry.ExecuteReader()); 
            return coll;
        }
        [DataObjectMethod(DataObjectMethodType.Delete, true)]
        public bool Delete(object Id)
        {
            return (TERPDataOrder.Delete(Id) == 1);
        }
        [DataObjectMethod(DataObjectMethodType.Delete, false)]
        public bool Destroy(object Id)
        {
            return (TERPDataOrder.Destroy(Id) == 1);
        }
        
        
    	
	    /// <summary>
	    /// Inserts a record, can be used with the Object Data Source
	    /// </summary>
        [DataObjectMethod(DataObjectMethodType.Insert, true)]
	    public void Insert(string Schtbh,string Scggdh,string Scggxh,string Dtxtwpmc,string WPSXLB19,string Xtwpys,DateTime? Scqdrq,DateTime? Scjhrq,string Xttxhm,string Schtsl,string Scggbz,string Sckhxm,string Sjbh,string Xtxmdm,string Scytdm,string Scytmc,string Flnm,string Xtwpmc,string Xtwpxh,string Erptype,string Scjhdd)
	    {
		    TERPDataOrder item = new TERPDataOrder();
		    
            item.Schtbh = Schtbh;
            
            item.Scggdh = Scggdh;
            
            item.Scggxh = Scggxh;
            
            item.Dtxtwpmc = Dtxtwpmc;
            
            item.WPSXLB19 = WPSXLB19;
            
            item.Xtwpys = Xtwpys;
            
            item.Scqdrq = Scqdrq;
            
            item.Scjhrq = Scjhrq;
            
            item.Xttxhm = Xttxhm;
            
            item.Schtsl = Schtsl;
            
            item.Scggbz = Scggbz;
            
            item.Sckhxm = Sckhxm;
            
            item.Sjbh = Sjbh;
            
            item.Xtxmdm = Xtxmdm;
            
            item.Scytdm = Scytdm;
            
            item.Scytmc = Scytmc;
            
            item.Flnm = Flnm;
            
            item.Xtwpmc = Xtwpmc;
            
            item.Xtwpxh = Xtwpxh;
            
            item.Erptype = Erptype;
            
            item.Scjhdd = Scjhdd;
            
	    
		    item.Save(UserName);
	    }
    	
	    /// <summary>
	    /// Updates a record, can be used with the Object Data Source
	    /// </summary>
        [DataObjectMethod(DataObjectMethodType.Update, true)]
	    public void Update(int Id,string Schtbh,string Scggdh,string Scggxh,string Dtxtwpmc,string WPSXLB19,string Xtwpys,DateTime? Scqdrq,DateTime? Scjhrq,string Xttxhm,string Schtsl,string Scggbz,string Sckhxm,string Sjbh,string Xtxmdm,string Scytdm,string Scytmc,string Flnm,string Xtwpmc,string Xtwpxh,string Erptype,string Scjhdd)
	    {
		    TERPDataOrder item = new TERPDataOrder();
	        item.MarkOld();
	        item.IsLoaded = true;
		    
			item.Id = Id;
				
			item.Schtbh = Schtbh;
				
			item.Scggdh = Scggdh;
				
			item.Scggxh = Scggxh;
				
			item.Dtxtwpmc = Dtxtwpmc;
				
			item.WPSXLB19 = WPSXLB19;
				
			item.Xtwpys = Xtwpys;
				
			item.Scqdrq = Scqdrq;
				
			item.Scjhrq = Scjhrq;
				
			item.Xttxhm = Xttxhm;
				
			item.Schtsl = Schtsl;
				
			item.Scggbz = Scggbz;
				
			item.Sckhxm = Sckhxm;
				
			item.Sjbh = Sjbh;
				
			item.Xtxmdm = Xtxmdm;
				
			item.Scytdm = Scytdm;
				
			item.Scytmc = Scytmc;
				
			item.Flnm = Flnm;
				
			item.Xtwpmc = Xtwpmc;
				
			item.Xtwpxh = Xtwpxh;
				
			item.Erptype = Erptype;
				
			item.Scjhdd = Scjhdd;
				
	        item.Save(UserName);
	    }
    }
}

using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace APSData
{
	/// <summary>
	/// Strongly-typed collection for the TAttendance class.
	/// </summary>
    [Serializable]
	public partial class TAttendanceCollection : ActiveList<TAttendance, TAttendanceCollection>
	{	   
		public TAttendanceCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>TAttendanceCollection</returns>
		public TAttendanceCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                TAttendance o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the T_Attendance table.
	/// </summary>
	[Serializable]
	public partial class TAttendance : ActiveRecord<TAttendance>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public TAttendance()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public TAttendance(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public TAttendance(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public TAttendance(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("T_Attendance", TableType.Table, DataService.GetInstance("Nowthwin"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarResource = new TableSchema.TableColumn(schema);
				colvarResource.ColumnName = "resource";
				colvarResource.DataType = DbType.AnsiString;
				colvarResource.MaxLength = 50;
				colvarResource.AutoIncrement = false;
				colvarResource.IsNullable = false;
				colvarResource.IsPrimaryKey = true;
				colvarResource.IsForeignKey = false;
				colvarResource.IsReadOnly = false;
				colvarResource.DefaultSetting = @"";
				colvarResource.ForeignKeyTableName = "";
				schema.Columns.Add(colvarResource);
				
				TableSchema.TableColumn colvarDateX = new TableSchema.TableColumn(schema);
				colvarDateX.ColumnName = "Date";
				colvarDateX.DataType = DbType.AnsiString;
				colvarDateX.MaxLength = 50;
				colvarDateX.AutoIncrement = false;
				colvarDateX.IsNullable = false;
				colvarDateX.IsPrimaryKey = true;
				colvarDateX.IsForeignKey = false;
				colvarDateX.IsReadOnly = false;
				colvarDateX.DefaultSetting = @"";
				colvarDateX.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDateX);
				
				TableSchema.TableColumn colvarFlagStatus = new TableSchema.TableColumn(schema);
				colvarFlagStatus.ColumnName = "flagStatus";
				colvarFlagStatus.DataType = DbType.AnsiString;
				colvarFlagStatus.MaxLength = 50;
				colvarFlagStatus.AutoIncrement = false;
				colvarFlagStatus.IsNullable = false;
				colvarFlagStatus.IsPrimaryKey = true;
				colvarFlagStatus.IsForeignKey = false;
				colvarFlagStatus.IsReadOnly = false;
				colvarFlagStatus.DefaultSetting = @"";
				colvarFlagStatus.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFlagStatus);
				
				TableSchema.TableColumn colvarFirst = new TableSchema.TableColumn(schema);
				colvarFirst.ColumnName = "first";
				colvarFirst.DataType = DbType.Int32;
				colvarFirst.MaxLength = 0;
				colvarFirst.AutoIncrement = false;
				colvarFirst.IsNullable = true;
				colvarFirst.IsPrimaryKey = false;
				colvarFirst.IsForeignKey = false;
				colvarFirst.IsReadOnly = false;
				colvarFirst.DefaultSetting = @"";
				colvarFirst.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFirst);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["Nowthwin"].AddSchema("T_Attendance",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Resource")]
		[Bindable(true)]
		public string Resource 
		{
			get { return GetColumnValue<string>(Columns.Resource); }
			set { SetColumnValue(Columns.Resource, value); }
		}
		  
		[XmlAttribute("DateX")]
		[Bindable(true)]
		public string DateX 
		{
			get { return GetColumnValue<string>(Columns.DateX); }
			set { SetColumnValue(Columns.DateX, value); }
		}
		  
		[XmlAttribute("FlagStatus")]
		[Bindable(true)]
		public string FlagStatus 
		{
			get { return GetColumnValue<string>(Columns.FlagStatus); }
			set { SetColumnValue(Columns.FlagStatus, value); }
		}
		  
		[XmlAttribute("First")]
		[Bindable(true)]
		public int? First 
		{
			get { return GetColumnValue<int?>(Columns.First); }
			set { SetColumnValue(Columns.First, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varResource,string varDateX,string varFlagStatus,int? varFirst)
		{
			TAttendance item = new TAttendance();
			
			item.Resource = varResource;
			
			item.DateX = varDateX;
			
			item.FlagStatus = varFlagStatus;
			
			item.First = varFirst;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(string varResource,string varDateX,string varFlagStatus,int? varFirst)
		{
			TAttendance item = new TAttendance();
			
				item.Resource = varResource;
			
				item.DateX = varDateX;
			
				item.FlagStatus = varFlagStatus;
			
				item.First = varFirst;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn ResourceColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn DateXColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn FlagStatusColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn FirstColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Resource = @"resource";
			 public static string DateX = @"Date";
			 public static string FlagStatus = @"flagStatus";
			 public static string First = @"first";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}

using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace Model
{
	/// <summary>
	/// Strongly-typed collection for the TBasisBodyList class.
	/// </summary>
    [Serializable]
	public partial class TBasisBodyListCollection : ActiveList<TBasisBodyList, TBasisBodyListCollection>
	{	   
		public TBasisBodyListCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>TBasisBodyListCollection</returns>
		public TBasisBodyListCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                TBasisBodyList o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the T_Basis_BodyList table.
	/// </summary>
	[Serializable]
	public partial class TBasisBodyList : ActiveRecord<TBasisBodyList>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public TBasisBodyList()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public TBasisBodyList(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public TBasisBodyList(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public TBasisBodyList(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("T_Basis_BodyList", TableType.Table, DataService.GetInstance("Nowthwin"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarId = new TableSchema.TableColumn(schema);
				colvarId.ColumnName = "id";
				colvarId.DataType = DbType.Int32;
				colvarId.MaxLength = 0;
				colvarId.AutoIncrement = true;
				colvarId.IsNullable = false;
				colvarId.IsPrimaryKey = true;
				colvarId.IsForeignKey = false;
				colvarId.IsReadOnly = false;
				colvarId.DefaultSetting = @"";
				colvarId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarId);
				
				TableSchema.TableColumn colvarBodyCode = new TableSchema.TableColumn(schema);
				colvarBodyCode.ColumnName = "bodyCode";
				colvarBodyCode.DataType = DbType.String;
				colvarBodyCode.MaxLength = 50;
				colvarBodyCode.AutoIncrement = false;
				colvarBodyCode.IsNullable = true;
				colvarBodyCode.IsPrimaryKey = false;
				colvarBodyCode.IsForeignKey = false;
				colvarBodyCode.IsReadOnly = false;
				colvarBodyCode.DefaultSetting = @"";
				colvarBodyCode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBodyCode);
				
				TableSchema.TableColumn colvarBodyName = new TableSchema.TableColumn(schema);
				colvarBodyName.ColumnName = "bodyName";
				colvarBodyName.DataType = DbType.String;
				colvarBodyName.MaxLength = 50;
				colvarBodyName.AutoIncrement = false;
				colvarBodyName.IsNullable = true;
				colvarBodyName.IsPrimaryKey = false;
				colvarBodyName.IsForeignKey = false;
				colvarBodyName.IsReadOnly = false;
				colvarBodyName.DefaultSetting = @"";
				colvarBodyName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBodyName);
				
				TableSchema.TableColumn colvarBodyTypeCode = new TableSchema.TableColumn(schema);
				colvarBodyTypeCode.ColumnName = "bodyTypeCode";
				colvarBodyTypeCode.DataType = DbType.String;
				colvarBodyTypeCode.MaxLength = 50;
				colvarBodyTypeCode.AutoIncrement = false;
				colvarBodyTypeCode.IsNullable = true;
				colvarBodyTypeCode.IsPrimaryKey = false;
				colvarBodyTypeCode.IsForeignKey = false;
				colvarBodyTypeCode.IsReadOnly = false;
				colvarBodyTypeCode.DefaultSetting = @"";
				colvarBodyTypeCode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBodyTypeCode);
				
				TableSchema.TableColumn colvarBodyTypeName = new TableSchema.TableColumn(schema);
				colvarBodyTypeName.ColumnName = "bodyTypeName";
				colvarBodyTypeName.DataType = DbType.String;
				colvarBodyTypeName.MaxLength = 50;
				colvarBodyTypeName.AutoIncrement = false;
				colvarBodyTypeName.IsNullable = true;
				colvarBodyTypeName.IsPrimaryKey = false;
				colvarBodyTypeName.IsForeignKey = false;
				colvarBodyTypeName.IsReadOnly = false;
				colvarBodyTypeName.DefaultSetting = @"";
				colvarBodyTypeName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBodyTypeName);
				
				TableSchema.TableColumn colvarEfficiency = new TableSchema.TableColumn(schema);
				colvarEfficiency.ColumnName = "efficiency";
				colvarEfficiency.DataType = DbType.Double;
				colvarEfficiency.MaxLength = 0;
				colvarEfficiency.AutoIncrement = false;
				colvarEfficiency.IsNullable = true;
				colvarEfficiency.IsPrimaryKey = false;
				colvarEfficiency.IsForeignKey = false;
				colvarEfficiency.IsReadOnly = false;
				colvarEfficiency.DefaultSetting = @"";
				colvarEfficiency.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEfficiency);
				
				TableSchema.TableColumn colvarAliasX = new TableSchema.TableColumn(schema);
				colvarAliasX.ColumnName = "alias";
				colvarAliasX.DataType = DbType.String;
				colvarAliasX.MaxLength = 100;
				colvarAliasX.AutoIncrement = false;
				colvarAliasX.IsNullable = true;
				colvarAliasX.IsPrimaryKey = false;
				colvarAliasX.IsForeignKey = false;
				colvarAliasX.IsReadOnly = false;
				colvarAliasX.DefaultSetting = @"";
				colvarAliasX.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAliasX);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["Nowthwin"].AddSchema("T_Basis_BodyList",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Id")]
		[Bindable(true)]
		public int Id 
		{
			get { return GetColumnValue<int>(Columns.Id); }
			set { SetColumnValue(Columns.Id, value); }
		}
		  
		[XmlAttribute("BodyCode")]
		[Bindable(true)]
		public string BodyCode 
		{
			get { return GetColumnValue<string>(Columns.BodyCode); }
			set { SetColumnValue(Columns.BodyCode, value); }
		}
		  
		[XmlAttribute("BodyName")]
		[Bindable(true)]
		public string BodyName 
		{
			get { return GetColumnValue<string>(Columns.BodyName); }
			set { SetColumnValue(Columns.BodyName, value); }
		}
		  
		[XmlAttribute("BodyTypeCode")]
		[Bindable(true)]
		public string BodyTypeCode 
		{
			get { return GetColumnValue<string>(Columns.BodyTypeCode); }
			set { SetColumnValue(Columns.BodyTypeCode, value); }
		}
		  
		[XmlAttribute("BodyTypeName")]
		[Bindable(true)]
		public string BodyTypeName 
		{
			get { return GetColumnValue<string>(Columns.BodyTypeName); }
			set { SetColumnValue(Columns.BodyTypeName, value); }
		}
		  
		[XmlAttribute("Efficiency")]
		[Bindable(true)]
		public double? Efficiency 
		{
			get { return GetColumnValue<double?>(Columns.Efficiency); }
			set { SetColumnValue(Columns.Efficiency, value); }
		}
		  
		[XmlAttribute("AliasX")]
		[Bindable(true)]
		public string AliasX 
		{
			get { return GetColumnValue<string>(Columns.AliasX); }
			set { SetColumnValue(Columns.AliasX, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varBodyCode,string varBodyName,string varBodyTypeCode,string varBodyTypeName,double? varEfficiency,string varAliasX)
		{
			TBasisBodyList item = new TBasisBodyList();
			
			item.BodyCode = varBodyCode;
			
			item.BodyName = varBodyName;
			
			item.BodyTypeCode = varBodyTypeCode;
			
			item.BodyTypeName = varBodyTypeName;
			
			item.Efficiency = varEfficiency;
			
			item.AliasX = varAliasX;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varId,string varBodyCode,string varBodyName,string varBodyTypeCode,string varBodyTypeName,double? varEfficiency,string varAliasX)
		{
			TBasisBodyList item = new TBasisBodyList();
			
				item.Id = varId;
			
				item.BodyCode = varBodyCode;
			
				item.BodyName = varBodyName;
			
				item.BodyTypeCode = varBodyTypeCode;
			
				item.BodyTypeName = varBodyTypeName;
			
				item.Efficiency = varEfficiency;
			
				item.AliasX = varAliasX;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn IdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn BodyCodeColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn BodyNameColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn BodyTypeCodeColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn BodyTypeNameColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn EfficiencyColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn AliasXColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Id = @"id";
			 public static string BodyCode = @"bodyCode";
			 public static string BodyName = @"bodyName";
			 public static string BodyTypeCode = @"bodyTypeCode";
			 public static string BodyTypeName = @"bodyTypeName";
			 public static string Efficiency = @"efficiency";
			 public static string AliasX = @"alias";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}

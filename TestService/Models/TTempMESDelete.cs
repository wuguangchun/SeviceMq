using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace APSData
{
	/// <summary>
	/// Strongly-typed collection for the TTempMESDelete class.
	/// </summary>
    [Serializable]
	public partial class TTempMESDeleteCollection : ActiveList<TTempMESDelete, TTempMESDeleteCollection>
	{	   
		public TTempMESDeleteCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>TTempMESDeleteCollection</returns>
		public TTempMESDeleteCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                TTempMESDelete o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the T_TempMES_delete table.
	/// </summary>
	[Serializable]
	public partial class TTempMESDelete : ActiveRecord<TTempMESDelete>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public TTempMESDelete()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public TTempMESDelete(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public TTempMESDelete(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public TTempMESDelete(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("T_TempMES_delete", TableType.Table, DataService.GetInstance("Nowthwin"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarId = new TableSchema.TableColumn(schema);
				colvarId.ColumnName = "ID";
				colvarId.DataType = DbType.Int32;
				colvarId.MaxLength = 0;
				colvarId.AutoIncrement = true;
				colvarId.IsNullable = false;
				colvarId.IsPrimaryKey = false;
				colvarId.IsForeignKey = false;
				colvarId.IsReadOnly = false;
				colvarId.DefaultSetting = @"";
				colvarId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarId);
				
				TableSchema.TableColumn colvarSczsbh = new TableSchema.TableColumn(schema);
				colvarSczsbh.ColumnName = "SCZSBH";
				colvarSczsbh.DataType = DbType.AnsiString;
				colvarSczsbh.MaxLength = 12;
				colvarSczsbh.AutoIncrement = false;
				colvarSczsbh.IsNullable = true;
				colvarSczsbh.IsPrimaryKey = false;
				colvarSczsbh.IsForeignKey = false;
				colvarSczsbh.IsReadOnly = false;
				colvarSczsbh.DefaultSetting = @"";
				colvarSczsbh.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSczsbh);
				
				TableSchema.TableColumn colvarScggdh = new TableSchema.TableColumn(schema);
				colvarScggdh.ColumnName = "SCGGDH";
				colvarScggdh.DataType = DbType.AnsiString;
				colvarScggdh.MaxLength = 22;
				colvarScggdh.AutoIncrement = false;
				colvarScggdh.IsNullable = false;
				colvarScggdh.IsPrimaryKey = true;
				colvarScggdh.IsForeignKey = false;
				colvarScggdh.IsReadOnly = false;
				colvarScggdh.DefaultSetting = @"";
				colvarScggdh.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScggdh);
				
				TableSchema.TableColumn colvarKhddbh = new TableSchema.TableColumn(schema);
				colvarKhddbh.ColumnName = "KHDDBH";
				colvarKhddbh.DataType = DbType.AnsiString;
				colvarKhddbh.MaxLength = 30;
				colvarKhddbh.AutoIncrement = false;
				colvarKhddbh.IsNullable = true;
				colvarKhddbh.IsPrimaryKey = false;
				colvarKhddbh.IsForeignKey = false;
				colvarKhddbh.IsReadOnly = false;
				colvarKhddbh.DefaultSetting = @"";
				colvarKhddbh.ForeignKeyTableName = "";
				schema.Columns.Add(colvarKhddbh);
				
				TableSchema.TableColumn colvarPcccbh = new TableSchema.TableColumn(schema);
				colvarPcccbh.ColumnName = "PCCCBH";
				colvarPcccbh.DataType = DbType.Int32;
				colvarPcccbh.MaxLength = 0;
				colvarPcccbh.AutoIncrement = false;
				colvarPcccbh.IsNullable = true;
				colvarPcccbh.IsPrimaryKey = false;
				colvarPcccbh.IsForeignKey = false;
				colvarPcccbh.IsReadOnly = false;
				colvarPcccbh.DefaultSetting = @"";
				colvarPcccbh.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPcccbh);
				
				TableSchema.TableColumn colvarPcccsj = new TableSchema.TableColumn(schema);
				colvarPcccsj.ColumnName = "PCCCSJ";
				colvarPcccsj.DataType = DbType.AnsiString;
				colvarPcccsj.MaxLength = 30;
				colvarPcccsj.AutoIncrement = false;
				colvarPcccsj.IsNullable = true;
				colvarPcccsj.IsPrimaryKey = false;
				colvarPcccsj.IsForeignKey = false;
				colvarPcccsj.IsReadOnly = false;
				colvarPcccsj.DefaultSetting = @"";
				colvarPcccsj.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPcccsj);
				
				TableSchema.TableColumn colvarSccjjq = new TableSchema.TableColumn(schema);
				colvarSccjjq.ColumnName = "SCCJJQ";
				colvarSccjjq.DataType = DbType.DateTime;
				colvarSccjjq.MaxLength = 0;
				colvarSccjjq.AutoIncrement = false;
				colvarSccjjq.IsNullable = true;
				colvarSccjjq.IsPrimaryKey = false;
				colvarSccjjq.IsForeignKey = false;
				colvarSccjjq.IsReadOnly = false;
				colvarSccjjq.DefaultSetting = @"";
				colvarSccjjq.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSccjjq);
				
				TableSchema.TableColumn colvarScjhrq = new TableSchema.TableColumn(schema);
				colvarScjhrq.ColumnName = "SCJHRQ";
				colvarScjhrq.DataType = DbType.DateTime;
				colvarScjhrq.MaxLength = 0;
				colvarScjhrq.AutoIncrement = false;
				colvarScjhrq.IsNullable = true;
				colvarScjhrq.IsPrimaryKey = false;
				colvarScjhrq.IsForeignKey = false;
				colvarScjhrq.IsReadOnly = false;
				colvarScjhrq.DefaultSetting = @"";
				colvarScjhrq.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScjhrq);
				
				TableSchema.TableColumn colvarSclsbh = new TableSchema.TableColumn(schema);
				colvarSclsbh.ColumnName = "SCLSBH";
				colvarSclsbh.DataType = DbType.AnsiString;
				colvarSclsbh.MaxLength = 4;
				colvarSclsbh.AutoIncrement = false;
				colvarSclsbh.IsNullable = true;
				colvarSclsbh.IsPrimaryKey = false;
				colvarSclsbh.IsForeignKey = false;
				colvarSclsbh.IsReadOnly = false;
				colvarSclsbh.DefaultSetting = @"";
				colvarSclsbh.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSclsbh);
				
				TableSchema.TableColumn colvarScfzxh = new TableSchema.TableColumn(schema);
				colvarScfzxh.ColumnName = "SCFZXH";
				colvarScfzxh.DataType = DbType.AnsiString;
				colvarScfzxh.MaxLength = 22;
				colvarScfzxh.AutoIncrement = false;
				colvarScfzxh.IsNullable = true;
				colvarScfzxh.IsPrimaryKey = false;
				colvarScfzxh.IsForeignKey = false;
				colvarScfzxh.IsReadOnly = false;
				colvarScfzxh.DefaultSetting = @"";
				colvarScfzxh.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScfzxh);
				
				TableSchema.TableColumn colvarStatus = new TableSchema.TableColumn(schema);
				colvarStatus.ColumnName = "STATUS";
				colvarStatus.DataType = DbType.AnsiString;
				colvarStatus.MaxLength = 2;
				colvarStatus.AutoIncrement = false;
				colvarStatus.IsNullable = true;
				colvarStatus.IsPrimaryKey = false;
				colvarStatus.IsForeignKey = false;
				colvarStatus.IsReadOnly = false;
				
						colvarStatus.DefaultSetting = @"('0')";
				colvarStatus.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStatus);
				
				TableSchema.TableColumn colvarWrong = new TableSchema.TableColumn(schema);
				colvarWrong.ColumnName = "WRONG";
				colvarWrong.DataType = DbType.AnsiString;
				colvarWrong.MaxLength = 2;
				colvarWrong.AutoIncrement = false;
				colvarWrong.IsNullable = true;
				colvarWrong.IsPrimaryKey = false;
				colvarWrong.IsForeignKey = false;
				colvarWrong.IsReadOnly = false;
				
						colvarWrong.DefaultSetting = @"('0')";
				colvarWrong.ForeignKeyTableName = "";
				schema.Columns.Add(colvarWrong);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["Nowthwin"].AddSchema("T_TempMES_delete",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Id")]
		[Bindable(true)]
		public int Id 
		{
			get { return GetColumnValue<int>(Columns.Id); }
			set { SetColumnValue(Columns.Id, value); }
		}
		  
		[XmlAttribute("Sczsbh")]
		[Bindable(true)]
		public string Sczsbh 
		{
			get { return GetColumnValue<string>(Columns.Sczsbh); }
			set { SetColumnValue(Columns.Sczsbh, value); }
		}
		  
		[XmlAttribute("Scggdh")]
		[Bindable(true)]
		public string Scggdh 
		{
			get { return GetColumnValue<string>(Columns.Scggdh); }
			set { SetColumnValue(Columns.Scggdh, value); }
		}
		  
		[XmlAttribute("Khddbh")]
		[Bindable(true)]
		public string Khddbh 
		{
			get { return GetColumnValue<string>(Columns.Khddbh); }
			set { SetColumnValue(Columns.Khddbh, value); }
		}
		  
		[XmlAttribute("Pcccbh")]
		[Bindable(true)]
		public int? Pcccbh 
		{
			get { return GetColumnValue<int?>(Columns.Pcccbh); }
			set { SetColumnValue(Columns.Pcccbh, value); }
		}
		  
		[XmlAttribute("Pcccsj")]
		[Bindable(true)]
		public string Pcccsj 
		{
			get { return GetColumnValue<string>(Columns.Pcccsj); }
			set { SetColumnValue(Columns.Pcccsj, value); }
		}
		  
		[XmlAttribute("Sccjjq")]
		[Bindable(true)]
		public DateTime? Sccjjq 
		{
			get { return GetColumnValue<DateTime?>(Columns.Sccjjq); }
			set { SetColumnValue(Columns.Sccjjq, value); }
		}
		  
		[XmlAttribute("Scjhrq")]
		[Bindable(true)]
		public DateTime? Scjhrq 
		{
			get { return GetColumnValue<DateTime?>(Columns.Scjhrq); }
			set { SetColumnValue(Columns.Scjhrq, value); }
		}
		  
		[XmlAttribute("Sclsbh")]
		[Bindable(true)]
		public string Sclsbh 
		{
			get { return GetColumnValue<string>(Columns.Sclsbh); }
			set { SetColumnValue(Columns.Sclsbh, value); }
		}
		  
		[XmlAttribute("Scfzxh")]
		[Bindable(true)]
		public string Scfzxh 
		{
			get { return GetColumnValue<string>(Columns.Scfzxh); }
			set { SetColumnValue(Columns.Scfzxh, value); }
		}
		  
		[XmlAttribute("Status")]
		[Bindable(true)]
		public string Status 
		{
			get { return GetColumnValue<string>(Columns.Status); }
			set { SetColumnValue(Columns.Status, value); }
		}
		  
		[XmlAttribute("Wrong")]
		[Bindable(true)]
		public string Wrong 
		{
			get { return GetColumnValue<string>(Columns.Wrong); }
			set { SetColumnValue(Columns.Wrong, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varSczsbh,string varScggdh,string varKhddbh,int? varPcccbh,string varPcccsj,DateTime? varSccjjq,DateTime? varScjhrq,string varSclsbh,string varScfzxh,string varStatus,string varWrong)
		{
			TTempMESDelete item = new TTempMESDelete();
			
			item.Sczsbh = varSczsbh;
			
			item.Scggdh = varScggdh;
			
			item.Khddbh = varKhddbh;
			
			item.Pcccbh = varPcccbh;
			
			item.Pcccsj = varPcccsj;
			
			item.Sccjjq = varSccjjq;
			
			item.Scjhrq = varScjhrq;
			
			item.Sclsbh = varSclsbh;
			
			item.Scfzxh = varScfzxh;
			
			item.Status = varStatus;
			
			item.Wrong = varWrong;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varId,string varSczsbh,string varScggdh,string varKhddbh,int? varPcccbh,string varPcccsj,DateTime? varSccjjq,DateTime? varScjhrq,string varSclsbh,string varScfzxh,string varStatus,string varWrong)
		{
			TTempMESDelete item = new TTempMESDelete();
			
				item.Id = varId;
			
				item.Sczsbh = varSczsbh;
			
				item.Scggdh = varScggdh;
			
				item.Khddbh = varKhddbh;
			
				item.Pcccbh = varPcccbh;
			
				item.Pcccsj = varPcccsj;
			
				item.Sccjjq = varSccjjq;
			
				item.Scjhrq = varScjhrq;
			
				item.Sclsbh = varSclsbh;
			
				item.Scfzxh = varScfzxh;
			
				item.Status = varStatus;
			
				item.Wrong = varWrong;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn IdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn SczsbhColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn ScggdhColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn KhddbhColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn PcccbhColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn PcccsjColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn SccjjqColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn ScjhrqColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn SclsbhColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn ScfzxhColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn StatusColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn WrongColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Id = @"ID";
			 public static string Sczsbh = @"SCZSBH";
			 public static string Scggdh = @"SCGGDH";
			 public static string Khddbh = @"KHDDBH";
			 public static string Pcccbh = @"PCCCBH";
			 public static string Pcccsj = @"PCCCSJ";
			 public static string Sccjjq = @"SCCJJQ";
			 public static string Scjhrq = @"SCJHRQ";
			 public static string Sclsbh = @"SCLSBH";
			 public static string Scfzxh = @"SCFZXH";
			 public static string Status = @"STATUS";
			 public static string Wrong = @"WRONG";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}

using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace Model
{
	/// <summary>
	/// Strongly-typed collection for the TAnalysisOutputListTzWithCodeDelete class.
	/// </summary>
    [Serializable]
	public partial class TAnalysisOutputListTzWithCodeDeleteCollection : ActiveList<TAnalysisOutputListTzWithCodeDelete, TAnalysisOutputListTzWithCodeDeleteCollection>
	{	   
		public TAnalysisOutputListTzWithCodeDeleteCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>TAnalysisOutputListTzWithCodeDeleteCollection</returns>
		public TAnalysisOutputListTzWithCodeDeleteCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                TAnalysisOutputListTzWithCodeDelete o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the T_Analysis_OutputListTzWithCode_delete table.
	/// </summary>
	[Serializable]
	public partial class TAnalysisOutputListTzWithCodeDelete : ActiveRecord<TAnalysisOutputListTzWithCodeDelete>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public TAnalysisOutputListTzWithCodeDelete()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public TAnalysisOutputListTzWithCodeDelete(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public TAnalysisOutputListTzWithCodeDelete(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public TAnalysisOutputListTzWithCodeDelete(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("T_Analysis_OutputListTzWithCode_delete", TableType.Table, DataService.GetInstance("Nowthwin"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarId = new TableSchema.TableColumn(schema);
				colvarId.ColumnName = "ID";
				colvarId.DataType = DbType.String;
				colvarId.MaxLength = 255;
				colvarId.AutoIncrement = false;
				colvarId.IsNullable = false;
				colvarId.IsPrimaryKey = true;
				colvarId.IsForeignKey = false;
				colvarId.IsReadOnly = false;
				colvarId.DefaultSetting = @"";
				colvarId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarId);
				
				TableSchema.TableColumn colvarPlans = new TableSchema.TableColumn(schema);
				colvarPlans.ColumnName = "plans";
				colvarPlans.DataType = DbType.String;
				colvarPlans.MaxLength = 255;
				colvarPlans.AutoIncrement = false;
				colvarPlans.IsNullable = true;
				colvarPlans.IsPrimaryKey = false;
				colvarPlans.IsForeignKey = false;
				colvarPlans.IsReadOnly = false;
				colvarPlans.DefaultSetting = @"";
				colvarPlans.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPlans);
				
				TableSchema.TableColumn colvarScgydm = new TableSchema.TableColumn(schema);
				colvarScgydm.ColumnName = "SCGYDM";
				colvarScgydm.DataType = DbType.String;
				colvarScgydm.MaxLength = 4;
				colvarScgydm.AutoIncrement = false;
				colvarScgydm.IsNullable = true;
				colvarScgydm.IsPrimaryKey = false;
				colvarScgydm.IsForeignKey = false;
				colvarScgydm.IsReadOnly = false;
				colvarScgydm.DefaultSetting = @"";
				colvarScgydm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScgydm);
				
				TableSchema.TableColumn colvarScjhrq = new TableSchema.TableColumn(schema);
				colvarScjhrq.ColumnName = "SCJHRQ";
				colvarScjhrq.DataType = DbType.DateTime;
				colvarScjhrq.MaxLength = 0;
				colvarScjhrq.AutoIncrement = false;
				colvarScjhrq.IsNullable = true;
				colvarScjhrq.IsPrimaryKey = false;
				colvarScjhrq.IsForeignKey = false;
				colvarScjhrq.IsReadOnly = false;
				colvarScjhrq.DefaultSetting = @"";
				colvarScjhrq.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScjhrq);
				
				TableSchema.TableColumn colvarScyspd = new TableSchema.TableColumn(schema);
				colvarScyspd.ColumnName = "SCYSPD";
				colvarScyspd.DataType = DbType.String;
				colvarScyspd.MaxLength = 12;
				colvarScyspd.AutoIncrement = false;
				colvarScyspd.IsNullable = true;
				colvarScyspd.IsPrimaryKey = false;
				colvarScyspd.IsForeignKey = false;
				colvarScyspd.IsReadOnly = false;
				colvarScyspd.DefaultSetting = @"";
				colvarScyspd.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScyspd);
				
				TableSchema.TableColumn colvarSchtbh = new TableSchema.TableColumn(schema);
				colvarSchtbh.ColumnName = "SCHTBH";
				colvarSchtbh.DataType = DbType.String;
				colvarSchtbh.MaxLength = 12;
				colvarSchtbh.AutoIncrement = false;
				colvarSchtbh.IsNullable = true;
				colvarSchtbh.IsPrimaryKey = false;
				colvarSchtbh.IsForeignKey = false;
				colvarSchtbh.IsReadOnly = false;
				colvarSchtbh.DefaultSetting = @"";
				colvarSchtbh.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSchtbh);
				
				TableSchema.TableColumn colvarScggdh = new TableSchema.TableColumn(schema);
				colvarScggdh.ColumnName = "SCGGDH";
				colvarScggdh.DataType = DbType.String;
				colvarScggdh.MaxLength = 12;
				colvarScggdh.AutoIncrement = false;
				colvarScggdh.IsNullable = false;
				colvarScggdh.IsPrimaryKey = false;
				colvarScggdh.IsForeignKey = false;
				colvarScggdh.IsReadOnly = false;
				colvarScggdh.DefaultSetting = @"";
				colvarScggdh.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScggdh);
				
				TableSchema.TableColumn colvarScggbz = new TableSchema.TableColumn(schema);
				colvarScggbz.ColumnName = "SCGGBZ";
				colvarScggbz.DataType = DbType.String;
				colvarScggbz.MaxLength = 1000;
				colvarScggbz.AutoIncrement = false;
				colvarScggbz.IsNullable = true;
				colvarScggbz.IsPrimaryKey = false;
				colvarScggbz.IsForeignKey = false;
				colvarScggbz.IsReadOnly = false;
				colvarScggbz.DefaultSetting = @"";
				colvarScggbz.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScggbz);
				
				TableSchema.TableColumn colvarSchtsl = new TableSchema.TableColumn(schema);
				colvarSchtsl.ColumnName = "SCHTSL";
				colvarSchtsl.DataType = DbType.String;
				colvarSchtsl.MaxLength = 384;
				colvarSchtsl.AutoIncrement = false;
				colvarSchtsl.IsNullable = true;
				colvarSchtsl.IsPrimaryKey = false;
				colvarSchtsl.IsForeignKey = false;
				colvarSchtsl.IsReadOnly = false;
				colvarSchtsl.DefaultSetting = @"";
				colvarSchtsl.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSchtsl);
				
				TableSchema.TableColumn colvarSchtxh = new TableSchema.TableColumn(schema);
				colvarSchtxh.ColumnName = "SCHTXH";
				colvarSchtxh.DataType = DbType.String;
				colvarSchtxh.MaxLength = 384;
				colvarSchtxh.AutoIncrement = false;
				colvarSchtxh.IsNullable = true;
				colvarSchtxh.IsPrimaryKey = false;
				colvarSchtxh.IsForeignKey = false;
				colvarSchtxh.IsReadOnly = false;
				colvarSchtxh.DefaultSetting = @"";
				colvarSchtxh.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSchtxh);
				
				TableSchema.TableColumn colvarXtwpmc = new TableSchema.TableColumn(schema);
				colvarXtwpmc.ColumnName = "XTWPMC";
				colvarXtwpmc.DataType = DbType.String;
				colvarXtwpmc.MaxLength = 100;
				colvarXtwpmc.AutoIncrement = false;
				colvarXtwpmc.IsNullable = true;
				colvarXtwpmc.IsPrimaryKey = false;
				colvarXtwpmc.IsForeignKey = false;
				colvarXtwpmc.IsReadOnly = false;
				colvarXtwpmc.DefaultSetting = @"";
				colvarXtwpmc.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXtwpmc);
				
				TableSchema.TableColumn colvarXtwpks = new TableSchema.TableColumn(schema);
				colvarXtwpks.ColumnName = "XTWPKS";
				colvarXtwpks.DataType = DbType.String;
				colvarXtwpks.MaxLength = 20;
				colvarXtwpks.AutoIncrement = false;
				colvarXtwpks.IsNullable = true;
				colvarXtwpks.IsPrimaryKey = false;
				colvarXtwpks.IsForeignKey = false;
				colvarXtwpks.IsReadOnly = false;
				colvarXtwpks.DefaultSetting = @"";
				colvarXtwpks.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXtwpks);
				
				TableSchema.TableColumn colvarXtwpys = new TableSchema.TableColumn(schema);
				colvarXtwpys.ColumnName = "XTWPYS";
				colvarXtwpys.DataType = DbType.String;
				colvarXtwpys.MaxLength = 20;
				colvarXtwpys.AutoIncrement = false;
				colvarXtwpys.IsNullable = true;
				colvarXtwpys.IsPrimaryKey = false;
				colvarXtwpys.IsForeignKey = false;
				colvarXtwpys.IsReadOnly = false;
				colvarXtwpys.DefaultSetting = @"";
				colvarXtwpys.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXtwpys);
				
				TableSchema.TableColumn colvarPtfs = new TableSchema.TableColumn(schema);
				colvarPtfs.ColumnName = "PTFS";
				colvarPtfs.DataType = DbType.String;
				colvarPtfs.MaxLength = 255;
				colvarPtfs.AutoIncrement = false;
				colvarPtfs.IsNullable = true;
				colvarPtfs.IsPrimaryKey = false;
				colvarPtfs.IsForeignKey = false;
				colvarPtfs.IsReadOnly = false;
				colvarPtfs.DefaultSetting = @"";
				colvarPtfs.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPtfs);
				
				TableSchema.TableColumn colvarXtwldm = new TableSchema.TableColumn(schema);
				colvarXtwldm.ColumnName = "XTWLDM";
				colvarXtwldm.DataType = DbType.String;
				colvarXtwldm.MaxLength = 8;
				colvarXtwldm.AutoIncrement = false;
				colvarXtwldm.IsNullable = true;
				colvarXtwldm.IsPrimaryKey = false;
				colvarXtwldm.IsForeignKey = false;
				colvarXtwldm.IsReadOnly = false;
				colvarXtwldm.DefaultSetting = @"";
				colvarXtwldm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXtwldm);
				
				TableSchema.TableColumn colvarSckhxm = new TableSchema.TableColumn(schema);
				colvarSckhxm.ColumnName = "SCKHXM";
				colvarSckhxm.DataType = DbType.String;
				colvarSckhxm.MaxLength = 100;
				colvarSckhxm.AutoIncrement = false;
				colvarSckhxm.IsNullable = true;
				colvarSckhxm.IsPrimaryKey = false;
				colvarSckhxm.IsForeignKey = false;
				colvarSckhxm.IsReadOnly = false;
				colvarSckhxm.DefaultSetting = @"";
				colvarSckhxm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSckhxm);
				
				TableSchema.TableColumn colvarSex = new TableSchema.TableColumn(schema);
				colvarSex.ColumnName = "sex";
				colvarSex.DataType = DbType.AnsiString;
				colvarSex.MaxLength = 2;
				colvarSex.AutoIncrement = false;
				colvarSex.IsNullable = false;
				colvarSex.IsPrimaryKey = false;
				colvarSex.IsForeignKey = false;
				colvarSex.IsReadOnly = false;
				colvarSex.DefaultSetting = @"";
				colvarSex.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSex);
				
				TableSchema.TableColumn colvarClothType = new TableSchema.TableColumn(schema);
				colvarClothType.ColumnName = "clothType";
				colvarClothType.DataType = DbType.AnsiString;
				colvarClothType.MaxLength = 2;
				colvarClothType.AutoIncrement = false;
				colvarClothType.IsNullable = false;
				colvarClothType.IsPrimaryKey = false;
				colvarClothType.IsForeignKey = false;
				colvarClothType.IsReadOnly = false;
				colvarClothType.DefaultSetting = @"";
				colvarClothType.ForeignKeyTableName = "";
				schema.Columns.Add(colvarClothType);
				
				TableSchema.TableColumn colvarCreateTime = new TableSchema.TableColumn(schema);
				colvarCreateTime.ColumnName = "CreateTime";
				colvarCreateTime.DataType = DbType.DateTime;
				colvarCreateTime.MaxLength = 0;
				colvarCreateTime.AutoIncrement = false;
				colvarCreateTime.IsNullable = false;
				colvarCreateTime.IsPrimaryKey = false;
				colvarCreateTime.IsForeignKey = false;
				colvarCreateTime.IsReadOnly = false;
				colvarCreateTime.DefaultSetting = @"";
				colvarCreateTime.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreateTime);
				
				TableSchema.TableColumn colvarZhxs = new TableSchema.TableColumn(schema);
				colvarZhxs.ColumnName = "ZHXS";
				colvarZhxs.DataType = DbType.Double;
				colvarZhxs.MaxLength = 0;
				colvarZhxs.AutoIncrement = false;
				colvarZhxs.IsNullable = true;
				colvarZhxs.IsPrimaryKey = false;
				colvarZhxs.IsForeignKey = false;
				colvarZhxs.IsReadOnly = false;
				colvarZhxs.DefaultSetting = @"";
				colvarZhxs.ForeignKeyTableName = "";
				schema.Columns.Add(colvarZhxs);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["Nowthwin"].AddSchema("T_Analysis_OutputListTzWithCode_delete",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Id")]
		[Bindable(true)]
		public string Id 
		{
			get { return GetColumnValue<string>(Columns.Id); }
			set { SetColumnValue(Columns.Id, value); }
		}
		  
		[XmlAttribute("Plans")]
		[Bindable(true)]
		public string Plans 
		{
			get { return GetColumnValue<string>(Columns.Plans); }
			set { SetColumnValue(Columns.Plans, value); }
		}
		  
		[XmlAttribute("Scgydm")]
		[Bindable(true)]
		public string Scgydm 
		{
			get { return GetColumnValue<string>(Columns.Scgydm); }
			set { SetColumnValue(Columns.Scgydm, value); }
		}
		  
		[XmlAttribute("Scjhrq")]
		[Bindable(true)]
		public DateTime? Scjhrq 
		{
			get { return GetColumnValue<DateTime?>(Columns.Scjhrq); }
			set { SetColumnValue(Columns.Scjhrq, value); }
		}
		  
		[XmlAttribute("Scyspd")]
		[Bindable(true)]
		public string Scyspd 
		{
			get { return GetColumnValue<string>(Columns.Scyspd); }
			set { SetColumnValue(Columns.Scyspd, value); }
		}
		  
		[XmlAttribute("Schtbh")]
		[Bindable(true)]
		public string Schtbh 
		{
			get { return GetColumnValue<string>(Columns.Schtbh); }
			set { SetColumnValue(Columns.Schtbh, value); }
		}
		  
		[XmlAttribute("Scggdh")]
		[Bindable(true)]
		public string Scggdh 
		{
			get { return GetColumnValue<string>(Columns.Scggdh); }
			set { SetColumnValue(Columns.Scggdh, value); }
		}
		  
		[XmlAttribute("Scggbz")]
		[Bindable(true)]
		public string Scggbz 
		{
			get { return GetColumnValue<string>(Columns.Scggbz); }
			set { SetColumnValue(Columns.Scggbz, value); }
		}
		  
		[XmlAttribute("Schtsl")]
		[Bindable(true)]
		public string Schtsl 
		{
			get { return GetColumnValue<string>(Columns.Schtsl); }
			set { SetColumnValue(Columns.Schtsl, value); }
		}
		  
		[XmlAttribute("Schtxh")]
		[Bindable(true)]
		public string Schtxh 
		{
			get { return GetColumnValue<string>(Columns.Schtxh); }
			set { SetColumnValue(Columns.Schtxh, value); }
		}
		  
		[XmlAttribute("Xtwpmc")]
		[Bindable(true)]
		public string Xtwpmc 
		{
			get { return GetColumnValue<string>(Columns.Xtwpmc); }
			set { SetColumnValue(Columns.Xtwpmc, value); }
		}
		  
		[XmlAttribute("Xtwpks")]
		[Bindable(true)]
		public string Xtwpks 
		{
			get { return GetColumnValue<string>(Columns.Xtwpks); }
			set { SetColumnValue(Columns.Xtwpks, value); }
		}
		  
		[XmlAttribute("Xtwpys")]
		[Bindable(true)]
		public string Xtwpys 
		{
			get { return GetColumnValue<string>(Columns.Xtwpys); }
			set { SetColumnValue(Columns.Xtwpys, value); }
		}
		  
		[XmlAttribute("Ptfs")]
		[Bindable(true)]
		public string Ptfs 
		{
			get { return GetColumnValue<string>(Columns.Ptfs); }
			set { SetColumnValue(Columns.Ptfs, value); }
		}
		  
		[XmlAttribute("Xtwldm")]
		[Bindable(true)]
		public string Xtwldm 
		{
			get { return GetColumnValue<string>(Columns.Xtwldm); }
			set { SetColumnValue(Columns.Xtwldm, value); }
		}
		  
		[XmlAttribute("Sckhxm")]
		[Bindable(true)]
		public string Sckhxm 
		{
			get { return GetColumnValue<string>(Columns.Sckhxm); }
			set { SetColumnValue(Columns.Sckhxm, value); }
		}
		  
		[XmlAttribute("Sex")]
		[Bindable(true)]
		public string Sex 
		{
			get { return GetColumnValue<string>(Columns.Sex); }
			set { SetColumnValue(Columns.Sex, value); }
		}
		  
		[XmlAttribute("ClothType")]
		[Bindable(true)]
		public string ClothType 
		{
			get { return GetColumnValue<string>(Columns.ClothType); }
			set { SetColumnValue(Columns.ClothType, value); }
		}
		  
		[XmlAttribute("CreateTime")]
		[Bindable(true)]
		public DateTime CreateTime 
		{
			get { return GetColumnValue<DateTime>(Columns.CreateTime); }
			set { SetColumnValue(Columns.CreateTime, value); }
		}
		  
		[XmlAttribute("Zhxs")]
		[Bindable(true)]
		public double? Zhxs 
		{
			get { return GetColumnValue<double?>(Columns.Zhxs); }
			set { SetColumnValue(Columns.Zhxs, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varId,string varPlans,string varScgydm,DateTime? varScjhrq,string varScyspd,string varSchtbh,string varScggdh,string varScggbz,string varSchtsl,string varSchtxh,string varXtwpmc,string varXtwpks,string varXtwpys,string varPtfs,string varXtwldm,string varSckhxm,string varSex,string varClothType,DateTime varCreateTime,double? varZhxs)
		{
			TAnalysisOutputListTzWithCodeDelete item = new TAnalysisOutputListTzWithCodeDelete();
			
			item.Id = varId;
			
			item.Plans = varPlans;
			
			item.Scgydm = varScgydm;
			
			item.Scjhrq = varScjhrq;
			
			item.Scyspd = varScyspd;
			
			item.Schtbh = varSchtbh;
			
			item.Scggdh = varScggdh;
			
			item.Scggbz = varScggbz;
			
			item.Schtsl = varSchtsl;
			
			item.Schtxh = varSchtxh;
			
			item.Xtwpmc = varXtwpmc;
			
			item.Xtwpks = varXtwpks;
			
			item.Xtwpys = varXtwpys;
			
			item.Ptfs = varPtfs;
			
			item.Xtwldm = varXtwldm;
			
			item.Sckhxm = varSckhxm;
			
			item.Sex = varSex;
			
			item.ClothType = varClothType;
			
			item.CreateTime = varCreateTime;
			
			item.Zhxs = varZhxs;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(string varId,string varPlans,string varScgydm,DateTime? varScjhrq,string varScyspd,string varSchtbh,string varScggdh,string varScggbz,string varSchtsl,string varSchtxh,string varXtwpmc,string varXtwpks,string varXtwpys,string varPtfs,string varXtwldm,string varSckhxm,string varSex,string varClothType,DateTime varCreateTime,double? varZhxs)
		{
			TAnalysisOutputListTzWithCodeDelete item = new TAnalysisOutputListTzWithCodeDelete();
			
				item.Id = varId;
			
				item.Plans = varPlans;
			
				item.Scgydm = varScgydm;
			
				item.Scjhrq = varScjhrq;
			
				item.Scyspd = varScyspd;
			
				item.Schtbh = varSchtbh;
			
				item.Scggdh = varScggdh;
			
				item.Scggbz = varScggbz;
			
				item.Schtsl = varSchtsl;
			
				item.Schtxh = varSchtxh;
			
				item.Xtwpmc = varXtwpmc;
			
				item.Xtwpks = varXtwpks;
			
				item.Xtwpys = varXtwpys;
			
				item.Ptfs = varPtfs;
			
				item.Xtwldm = varXtwldm;
			
				item.Sckhxm = varSckhxm;
			
				item.Sex = varSex;
			
				item.ClothType = varClothType;
			
				item.CreateTime = varCreateTime;
			
				item.Zhxs = varZhxs;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn IdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn PlansColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn ScgydmColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn ScjhrqColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn ScyspdColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn SchtbhColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn ScggdhColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn ScggbzColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn SchtslColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn SchtxhColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn XtwpmcColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn XtwpksColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn XtwpysColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        public static TableSchema.TableColumn PtfsColumn
        {
            get { return Schema.Columns[13]; }
        }
        
        
        
        public static TableSchema.TableColumn XtwldmColumn
        {
            get { return Schema.Columns[14]; }
        }
        
        
        
        public static TableSchema.TableColumn SckhxmColumn
        {
            get { return Schema.Columns[15]; }
        }
        
        
        
        public static TableSchema.TableColumn SexColumn
        {
            get { return Schema.Columns[16]; }
        }
        
        
        
        public static TableSchema.TableColumn ClothTypeColumn
        {
            get { return Schema.Columns[17]; }
        }
        
        
        
        public static TableSchema.TableColumn CreateTimeColumn
        {
            get { return Schema.Columns[18]; }
        }
        
        
        
        public static TableSchema.TableColumn ZhxsColumn
        {
            get { return Schema.Columns[19]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Id = @"ID";
			 public static string Plans = @"plans";
			 public static string Scgydm = @"SCGYDM";
			 public static string Scjhrq = @"SCJHRQ";
			 public static string Scyspd = @"SCYSPD";
			 public static string Schtbh = @"SCHTBH";
			 public static string Scggdh = @"SCGGDH";
			 public static string Scggbz = @"SCGGBZ";
			 public static string Schtsl = @"SCHTSL";
			 public static string Schtxh = @"SCHTXH";
			 public static string Xtwpmc = @"XTWPMC";
			 public static string Xtwpks = @"XTWPKS";
			 public static string Xtwpys = @"XTWPYS";
			 public static string Ptfs = @"PTFS";
			 public static string Xtwldm = @"XTWLDM";
			 public static string Sckhxm = @"SCKHXM";
			 public static string Sex = @"sex";
			 public static string ClothType = @"clothType";
			 public static string CreateTime = @"CreateTime";
			 public static string Zhxs = @"ZHXS";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}

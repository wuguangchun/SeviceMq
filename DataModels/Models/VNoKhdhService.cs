using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace Model{
    /// <summary>
    /// Strongly-typed collection for the VNoKhdhService class.
    /// </summary>
    [Serializable]
    public partial class VNoKhdhServiceCollection : ReadOnlyList<VNoKhdhService, VNoKhdhServiceCollection>
    {        
        public VNoKhdhServiceCollection() {}
    }
    /// <summary>
    /// This is  Read-only wrapper class for the V_NoKhdhService view.
    /// </summary>
    [Serializable]
    public partial class VNoKhdhService : ReadOnlyRecord<VNoKhdhService>, IReadOnlyRecord
    {
    
	    #region Default Settings
	    protected static void SetSQLProps() 
	    {
		    GetTableSchema();
	    }
	    #endregion
        #region Schema Accessor
	    public static TableSchema.Table Schema
        {
            get
            {
                if (BaseSchema == null)
                {
                    SetSQLProps();
                }
                return BaseSchema;
            }
        }
    	
        private static void GetTableSchema() 
        {
            if(!IsSchemaInitialized)
            {
                //Schema declaration
                TableSchema.Table schema = new TableSchema.Table("V_NoKhdhService", TableType.View, DataService.GetInstance("Nowthwin"));
                schema.Columns = new TableSchema.TableColumnCollection();
                schema.SchemaName = @"dbo";
                //columns
                
                TableSchema.TableColumn colvarId = new TableSchema.TableColumn(schema);
                colvarId.ColumnName = "ID";
                colvarId.DataType = DbType.Int32;
                colvarId.MaxLength = 0;
                colvarId.AutoIncrement = false;
                colvarId.IsNullable = false;
                colvarId.IsPrimaryKey = false;
                colvarId.IsForeignKey = false;
                colvarId.IsReadOnly = false;
                
                schema.Columns.Add(colvarId);
                
                TableSchema.TableColumn colvarKhdh = new TableSchema.TableColumn(schema);
                colvarKhdh.ColumnName = "Khdh";
                colvarKhdh.DataType = DbType.String;
                colvarKhdh.MaxLength = 100;
                colvarKhdh.AutoIncrement = false;
                colvarKhdh.IsNullable = false;
                colvarKhdh.IsPrimaryKey = false;
                colvarKhdh.IsForeignKey = false;
                colvarKhdh.IsReadOnly = false;
                
                schema.Columns.Add(colvarKhdh);
                
                TableSchema.TableColumn colvarLable = new TableSchema.TableColumn(schema);
                colvarLable.ColumnName = "Lable";
                colvarLable.DataType = DbType.String;
                colvarLable.MaxLength = 100;
                colvarLable.AutoIncrement = false;
                colvarLable.IsNullable = false;
                colvarLable.IsPrimaryKey = false;
                colvarLable.IsForeignKey = false;
                colvarLable.IsReadOnly = false;
                
                schema.Columns.Add(colvarLable);
                
                TableSchema.TableColumn colvarMessagePath = new TableSchema.TableColumn(schema);
                colvarMessagePath.ColumnName = "MessagePath";
                colvarMessagePath.DataType = DbType.String;
                colvarMessagePath.MaxLength = 200;
                colvarMessagePath.AutoIncrement = false;
                colvarMessagePath.IsNullable = false;
                colvarMessagePath.IsPrimaryKey = false;
                colvarMessagePath.IsForeignKey = false;
                colvarMessagePath.IsReadOnly = false;
                
                schema.Columns.Add(colvarMessagePath);
                
                TableSchema.TableColumn colvarCallBackUrl = new TableSchema.TableColumn(schema);
                colvarCallBackUrl.ColumnName = "CallBackUrl";
                colvarCallBackUrl.DataType = DbType.String;
                colvarCallBackUrl.MaxLength = 200;
                colvarCallBackUrl.AutoIncrement = false;
                colvarCallBackUrl.IsNullable = true;
                colvarCallBackUrl.IsPrimaryKey = false;
                colvarCallBackUrl.IsForeignKey = false;
                colvarCallBackUrl.IsReadOnly = false;
                
                schema.Columns.Add(colvarCallBackUrl);
                
                TableSchema.TableColumn colvarCreateTime = new TableSchema.TableColumn(schema);
                colvarCreateTime.ColumnName = "CreateTime";
                colvarCreateTime.DataType = DbType.DateTime;
                colvarCreateTime.MaxLength = 0;
                colvarCreateTime.AutoIncrement = false;
                colvarCreateTime.IsNullable = true;
                colvarCreateTime.IsPrimaryKey = false;
                colvarCreateTime.IsForeignKey = false;
                colvarCreateTime.IsReadOnly = false;
                
                schema.Columns.Add(colvarCreateTime);
                
                TableSchema.TableColumn colvarContext = new TableSchema.TableColumn(schema);
                colvarContext.ColumnName = "Context";
                colvarContext.DataType = DbType.String;
                colvarContext.MaxLength = 1073741823;
                colvarContext.AutoIncrement = false;
                colvarContext.IsNullable = true;
                colvarContext.IsPrimaryKey = false;
                colvarContext.IsForeignKey = false;
                colvarContext.IsReadOnly = false;
                
                schema.Columns.Add(colvarContext);
                
                TableSchema.TableColumn colvarMessageID = new TableSchema.TableColumn(schema);
                colvarMessageID.ColumnName = "MessageID";
                colvarMessageID.DataType = DbType.String;
                colvarMessageID.MaxLength = 200;
                colvarMessageID.AutoIncrement = false;
                colvarMessageID.IsNullable = true;
                colvarMessageID.IsPrimaryKey = false;
                colvarMessageID.IsForeignKey = false;
                colvarMessageID.IsReadOnly = false;
                
                schema.Columns.Add(colvarMessageID);
                
                
                BaseSchema = schema;
                //add this schema to the provider
                //so we can query it later
                DataService.Providers["Nowthwin"].AddSchema("V_NoKhdhService",schema);
            }
        }
        #endregion
        
        #region Query Accessor
	    public static Query CreateQuery()
	    {
		    return new Query(Schema);
	    }
	    #endregion
	    
	    #region .ctors
	    public VNoKhdhService()
	    {
            SetSQLProps();
            SetDefaults();
            MarkNew();
        }
        public VNoKhdhService(bool useDatabaseDefaults)
	    {
		    SetSQLProps();
		    if(useDatabaseDefaults)
		    {
				ForceDefaults();
			}
			MarkNew();
	    }
	    
	    public VNoKhdhService(object keyID)
	    {
		    SetSQLProps();
		    LoadByKey(keyID);
	    }
    	 
	    public VNoKhdhService(string columnName, object columnValue)
        {
            SetSQLProps();
            LoadByParam(columnName,columnValue);
        }
        
	    #endregion
	    
	    #region Props
	    
          
        [XmlAttribute("Id")]
        [Bindable(true)]
        public int Id 
	    {
		    get
		    {
			    return GetColumnValue<int>("ID");
		    }
            set 
		    {
			    SetColumnValue("ID", value);
            }
        }
	      
        [XmlAttribute("Khdh")]
        [Bindable(true)]
        public string Khdh 
	    {
		    get
		    {
			    return GetColumnValue<string>("Khdh");
		    }
            set 
		    {
			    SetColumnValue("Khdh", value);
            }
        }
	      
        [XmlAttribute("Lable")]
        [Bindable(true)]
        public string Lable 
	    {
		    get
		    {
			    return GetColumnValue<string>("Lable");
		    }
            set 
		    {
			    SetColumnValue("Lable", value);
            }
        }
	      
        [XmlAttribute("MessagePath")]
        [Bindable(true)]
        public string MessagePath 
	    {
		    get
		    {
			    return GetColumnValue<string>("MessagePath");
		    }
            set 
		    {
			    SetColumnValue("MessagePath", value);
            }
        }
	      
        [XmlAttribute("CallBackUrl")]
        [Bindable(true)]
        public string CallBackUrl 
	    {
		    get
		    {
			    return GetColumnValue<string>("CallBackUrl");
		    }
            set 
		    {
			    SetColumnValue("CallBackUrl", value);
            }
        }
	      
        [XmlAttribute("CreateTime")]
        [Bindable(true)]
        public DateTime? CreateTime 
	    {
		    get
		    {
			    return GetColumnValue<DateTime?>("CreateTime");
		    }
            set 
		    {
			    SetColumnValue("CreateTime", value);
            }
        }
	      
        [XmlAttribute("Context")]
        [Bindable(true)]
        public string Context 
	    {
		    get
		    {
			    return GetColumnValue<string>("Context");
		    }
            set 
		    {
			    SetColumnValue("Context", value);
            }
        }
	      
        [XmlAttribute("MessageID")]
        [Bindable(true)]
        public string MessageID 
	    {
		    get
		    {
			    return GetColumnValue<string>("MessageID");
		    }
            set 
		    {
			    SetColumnValue("MessageID", value);
            }
        }
	    
	    #endregion
    
	    #region Columns Struct
	    public struct Columns
	    {
		    
		    
            public static string Id = @"ID";
            
            public static string Khdh = @"Khdh";
            
            public static string Lable = @"Lable";
            
            public static string MessagePath = @"MessagePath";
            
            public static string CallBackUrl = @"CallBackUrl";
            
            public static string CreateTime = @"CreateTime";
            
            public static string Context = @"Context";
            
            public static string MessageID = @"MessageID";
            
	    }
	    #endregion
	    
	    
	    #region IAbstractRecord Members
        public new CT GetColumnValue<CT>(string columnName) {
            return base.GetColumnValue<CT>(columnName);
        }
        public object GetColumnValue(string columnName) {
            return base.GetColumnValue<object>(columnName);
        }
        #endregion
	    
    }
}

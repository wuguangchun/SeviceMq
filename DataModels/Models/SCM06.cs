using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace Model
{
	/// <summary>
	/// Strongly-typed collection for the SCM06 class.
	/// </summary>
    [Serializable]
	public partial class SCM06Collection : ActiveList<SCM06, SCM06Collection>
	{	   
		public SCM06Collection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>SCM06Collection</returns>
		public SCM06Collection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                SCM06 o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the SCM06 table.
	/// </summary>
	[Serializable]
	public partial class SCM06 : ActiveRecord<SCM06>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public SCM06()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public SCM06(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public SCM06(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public SCM06(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("SCM06", TableType.Table, DataService.GetInstance("Nowthwin"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarScgcdm = new TableSchema.TableColumn(schema);
				colvarScgcdm.ColumnName = "SCGCDM";
				colvarScgcdm.DataType = DbType.AnsiString;
				colvarScgcdm.MaxLength = 8;
				colvarScgcdm.AutoIncrement = false;
				colvarScgcdm.IsNullable = false;
				colvarScgcdm.IsPrimaryKey = true;
				colvarScgcdm.IsForeignKey = false;
				colvarScgcdm.IsReadOnly = false;
				colvarScgcdm.DefaultSetting = @"";
				colvarScgcdm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScgcdm);
				
				TableSchema.TableColumn colvarScgcmc = new TableSchema.TableColumn(schema);
				colvarScgcmc.ColumnName = "SCGCMC";
				colvarScgcmc.DataType = DbType.AnsiString;
				colvarScgcmc.MaxLength = 60;
				colvarScgcmc.AutoIncrement = false;
				colvarScgcmc.IsNullable = true;
				colvarScgcmc.IsPrimaryKey = false;
				colvarScgcmc.IsForeignKey = false;
				colvarScgcmc.IsReadOnly = false;
				colvarScgcmc.DefaultSetting = @"";
				colvarScgcmc.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScgcmc);
				
				TableSchema.TableColumn colvarScjhbb = new TableSchema.TableColumn(schema);
				colvarScjhbb.ColumnName = "SCJHBB";
				colvarScjhbb.DataType = DbType.AnsiString;
				colvarScjhbb.MaxLength = 60;
				colvarScjhbb.AutoIncrement = false;
				colvarScjhbb.IsNullable = true;
				colvarScjhbb.IsPrimaryKey = false;
				colvarScjhbb.IsForeignKey = false;
				colvarScjhbb.IsReadOnly = false;
				colvarScjhbb.DefaultSetting = @"";
				colvarScjhbb.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScjhbb);
				
				TableSchema.TableColumn colvarXtcbzx = new TableSchema.TableColumn(schema);
				colvarXtcbzx.ColumnName = "XTCBZX";
				colvarXtcbzx.DataType = DbType.AnsiString;
				colvarXtcbzx.MaxLength = 10;
				colvarXtcbzx.AutoIncrement = false;
				colvarXtcbzx.IsNullable = true;
				colvarXtcbzx.IsPrimaryKey = false;
				colvarXtcbzx.IsForeignKey = false;
				colvarXtcbzx.IsReadOnly = false;
				colvarXtcbzx.DefaultSetting = @"";
				colvarXtcbzx.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXtcbzx);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["Nowthwin"].AddSchema("SCM06",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Scgcdm")]
		[Bindable(true)]
		public string Scgcdm 
		{
			get { return GetColumnValue<string>(Columns.Scgcdm); }
			set { SetColumnValue(Columns.Scgcdm, value); }
		}
		  
		[XmlAttribute("Scgcmc")]
		[Bindable(true)]
		public string Scgcmc 
		{
			get { return GetColumnValue<string>(Columns.Scgcmc); }
			set { SetColumnValue(Columns.Scgcmc, value); }
		}
		  
		[XmlAttribute("Scjhbb")]
		[Bindable(true)]
		public string Scjhbb 
		{
			get { return GetColumnValue<string>(Columns.Scjhbb); }
			set { SetColumnValue(Columns.Scjhbb, value); }
		}
		  
		[XmlAttribute("Xtcbzx")]
		[Bindable(true)]
		public string Xtcbzx 
		{
			get { return GetColumnValue<string>(Columns.Xtcbzx); }
			set { SetColumnValue(Columns.Xtcbzx, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varScgcdm,string varScgcmc,string varScjhbb,string varXtcbzx)
		{
			SCM06 item = new SCM06();
			
			item.Scgcdm = varScgcdm;
			
			item.Scgcmc = varScgcmc;
			
			item.Scjhbb = varScjhbb;
			
			item.Xtcbzx = varXtcbzx;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(string varScgcdm,string varScgcmc,string varScjhbb,string varXtcbzx)
		{
			SCM06 item = new SCM06();
			
				item.Scgcdm = varScgcdm;
			
				item.Scgcmc = varScgcmc;
			
				item.Scjhbb = varScjhbb;
			
				item.Xtcbzx = varXtcbzx;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn ScgcdmColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn ScgcmcColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn ScjhbbColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn XtcbzxColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Scgcdm = @"SCGCDM";
			 public static string Scgcmc = @"SCGCMC";
			 public static string Scjhbb = @"SCJHBB";
			 public static string Xtcbzx = @"XTCBZX";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}

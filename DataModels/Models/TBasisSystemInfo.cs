using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace Model
{
	/// <summary>
	/// Strongly-typed collection for the TBasisSystemInfo class.
	/// </summary>
    [Serializable]
	public partial class TBasisSystemInfoCollection : ActiveList<TBasisSystemInfo, TBasisSystemInfoCollection>
	{	   
		public TBasisSystemInfoCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>TBasisSystemInfoCollection</returns>
		public TBasisSystemInfoCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                TBasisSystemInfo o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the T_Basis_SystemInfo table.
	/// </summary>
	[Serializable]
	public partial class TBasisSystemInfo : ActiveRecord<TBasisSystemInfo>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public TBasisSystemInfo()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public TBasisSystemInfo(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public TBasisSystemInfo(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public TBasisSystemInfo(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("T_Basis_SystemInfo", TableType.Table, DataService.GetInstance("Nowthwin"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarId = new TableSchema.TableColumn(schema);
				colvarId.ColumnName = "id";
				colvarId.DataType = DbType.Int32;
				colvarId.MaxLength = 0;
				colvarId.AutoIncrement = true;
				colvarId.IsNullable = false;
				colvarId.IsPrimaryKey = true;
				colvarId.IsForeignKey = false;
				colvarId.IsReadOnly = false;
				colvarId.DefaultSetting = @"";
				colvarId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarId);
				
				TableSchema.TableColumn colvarSystemName = new TableSchema.TableColumn(schema);
				colvarSystemName.ColumnName = "systemName";
				colvarSystemName.DataType = DbType.String;
				colvarSystemName.MaxLength = 50;
				colvarSystemName.AutoIncrement = false;
				colvarSystemName.IsNullable = true;
				colvarSystemName.IsPrimaryKey = false;
				colvarSystemName.IsForeignKey = false;
				colvarSystemName.IsReadOnly = false;
				colvarSystemName.DefaultSetting = @"";
				colvarSystemName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSystemName);
				
				TableSchema.TableColumn colvarSubsystemName = new TableSchema.TableColumn(schema);
				colvarSubsystemName.ColumnName = "subsystemName";
				colvarSubsystemName.DataType = DbType.String;
				colvarSubsystemName.MaxLength = 50;
				colvarSubsystemName.AutoIncrement = false;
				colvarSubsystemName.IsNullable = true;
				colvarSubsystemName.IsPrimaryKey = false;
				colvarSubsystemName.IsForeignKey = false;
				colvarSubsystemName.IsReadOnly = false;
				colvarSubsystemName.DefaultSetting = @"";
				colvarSubsystemName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSubsystemName);
				
				TableSchema.TableColumn colvarLastTime = new TableSchema.TableColumn(schema);
				colvarLastTime.ColumnName = "lastTime";
				colvarLastTime.DataType = DbType.DateTime;
				colvarLastTime.MaxLength = 0;
				colvarLastTime.AutoIncrement = false;
				colvarLastTime.IsNullable = true;
				colvarLastTime.IsPrimaryKey = false;
				colvarLastTime.IsForeignKey = false;
				colvarLastTime.IsReadOnly = false;
				colvarLastTime.DefaultSetting = @"";
				colvarLastTime.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLastTime);
				
				TableSchema.TableColumn colvarIsSuccess = new TableSchema.TableColumn(schema);
				colvarIsSuccess.ColumnName = "isSuccess";
				colvarIsSuccess.DataType = DbType.Boolean;
				colvarIsSuccess.MaxLength = 0;
				colvarIsSuccess.AutoIncrement = false;
				colvarIsSuccess.IsNullable = true;
				colvarIsSuccess.IsPrimaryKey = false;
				colvarIsSuccess.IsForeignKey = false;
				colvarIsSuccess.IsReadOnly = false;
				colvarIsSuccess.DefaultSetting = @"";
				colvarIsSuccess.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsSuccess);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["Nowthwin"].AddSchema("T_Basis_SystemInfo",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Id")]
		[Bindable(true)]
		public int Id 
		{
			get { return GetColumnValue<int>(Columns.Id); }
			set { SetColumnValue(Columns.Id, value); }
		}
		  
		[XmlAttribute("SystemName")]
		[Bindable(true)]
		public string SystemName 
		{
			get { return GetColumnValue<string>(Columns.SystemName); }
			set { SetColumnValue(Columns.SystemName, value); }
		}
		  
		[XmlAttribute("SubsystemName")]
		[Bindable(true)]
		public string SubsystemName 
		{
			get { return GetColumnValue<string>(Columns.SubsystemName); }
			set { SetColumnValue(Columns.SubsystemName, value); }
		}
		  
		[XmlAttribute("LastTime")]
		[Bindable(true)]
		public DateTime? LastTime 
		{
			get { return GetColumnValue<DateTime?>(Columns.LastTime); }
			set { SetColumnValue(Columns.LastTime, value); }
		}
		  
		[XmlAttribute("IsSuccess")]
		[Bindable(true)]
		public bool? IsSuccess 
		{
			get { return GetColumnValue<bool?>(Columns.IsSuccess); }
			set { SetColumnValue(Columns.IsSuccess, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varSystemName,string varSubsystemName,DateTime? varLastTime,bool? varIsSuccess)
		{
			TBasisSystemInfo item = new TBasisSystemInfo();
			
			item.SystemName = varSystemName;
			
			item.SubsystemName = varSubsystemName;
			
			item.LastTime = varLastTime;
			
			item.IsSuccess = varIsSuccess;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varId,string varSystemName,string varSubsystemName,DateTime? varLastTime,bool? varIsSuccess)
		{
			TBasisSystemInfo item = new TBasisSystemInfo();
			
				item.Id = varId;
			
				item.SystemName = varSystemName;
			
				item.SubsystemName = varSubsystemName;
			
				item.LastTime = varLastTime;
			
				item.IsSuccess = varIsSuccess;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn IdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn SystemNameColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn SubsystemNameColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn LastTimeColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn IsSuccessColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Id = @"id";
			 public static string SystemName = @"systemName";
			 public static string SubsystemName = @"subsystemName";
			 public static string LastTime = @"lastTime";
			 public static string IsSuccess = @"isSuccess";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}

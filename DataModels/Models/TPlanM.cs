using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace Model
{
	/// <summary>
	/// Strongly-typed collection for the TPlanM class.
	/// </summary>
    [Serializable]
	public partial class TPlanMCollection : ActiveList<TPlanM, TPlanMCollection>
	{	   
		public TPlanMCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>TPlanMCollection</returns>
		public TPlanMCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                TPlanM o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the T_PlanM table.
	/// </summary>
	[Serializable]
	public partial class TPlanM : ActiveRecord<TPlanM>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public TPlanM()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public TPlanM(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public TPlanM(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public TPlanM(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("T_PlanM", TableType.Table, DataService.GetInstance("Nowthwin"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarPlanMID = new TableSchema.TableColumn(schema);
				colvarPlanMID.ColumnName = "PlanMID";
				colvarPlanMID.DataType = DbType.Int32;
				colvarPlanMID.MaxLength = 0;
				colvarPlanMID.AutoIncrement = true;
				colvarPlanMID.IsNullable = false;
				colvarPlanMID.IsPrimaryKey = false;
				colvarPlanMID.IsForeignKey = false;
				colvarPlanMID.IsReadOnly = false;
				colvarPlanMID.DefaultSetting = @"";
				colvarPlanMID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPlanMID);
				
				TableSchema.TableColumn colvarScggdh = new TableSchema.TableColumn(schema);
				colvarScggdh.ColumnName = "SCGGDH";
				colvarScggdh.DataType = DbType.AnsiString;
				colvarScggdh.MaxLength = 20;
				colvarScggdh.AutoIncrement = false;
				colvarScggdh.IsNullable = false;
				colvarScggdh.IsPrimaryKey = true;
				colvarScggdh.IsForeignKey = false;
				colvarScggdh.IsReadOnly = false;
				colvarScggdh.DefaultSetting = @"";
				colvarScggdh.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScggdh);
				
				TableSchema.TableColumn colvarSczsbh = new TableSchema.TableColumn(schema);
				colvarSczsbh.ColumnName = "SCZSBH";
				colvarSczsbh.DataType = DbType.AnsiString;
				colvarSczsbh.MaxLength = 20;
				colvarSczsbh.AutoIncrement = false;
				colvarSczsbh.IsNullable = false;
				colvarSczsbh.IsPrimaryKey = false;
				colvarSczsbh.IsForeignKey = false;
				colvarSczsbh.IsReadOnly = false;
				colvarSczsbh.DefaultSetting = @"";
				colvarSczsbh.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSczsbh);
				
				TableSchema.TableColumn colvarSchtbh = new TableSchema.TableColumn(schema);
				colvarSchtbh.ColumnName = "SCHTBH";
				colvarSchtbh.DataType = DbType.AnsiString;
				colvarSchtbh.MaxLength = 20;
				colvarSchtbh.AutoIncrement = false;
				colvarSchtbh.IsNullable = false;
				colvarSchtbh.IsPrimaryKey = false;
				colvarSchtbh.IsForeignKey = false;
				colvarSchtbh.IsReadOnly = false;
				colvarSchtbh.DefaultSetting = @"";
				colvarSchtbh.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSchtbh);
				
				TableSchema.TableColumn colvarScgcmc = new TableSchema.TableColumn(schema);
				colvarScgcmc.ColumnName = "SCGCMC";
				colvarScgcmc.DataType = DbType.AnsiString;
				colvarScgcmc.MaxLength = 20;
				colvarScgcmc.AutoIncrement = false;
				colvarScgcmc.IsNullable = false;
				colvarScgcmc.IsPrimaryKey = false;
				colvarScgcmc.IsForeignKey = false;
				colvarScgcmc.IsReadOnly = false;
				colvarScgcmc.DefaultSetting = @"";
				colvarScgcmc.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScgcmc);
				
				TableSchema.TableColumn colvarSczsdl = new TableSchema.TableColumn(schema);
				colvarSczsdl.ColumnName = "SCZSDL";
				colvarSczsdl.DataType = DbType.AnsiString;
				colvarSczsdl.MaxLength = 200;
				colvarSczsdl.AutoIncrement = false;
				colvarSczsdl.IsNullable = false;
				colvarSczsdl.IsPrimaryKey = false;
				colvarSczsdl.IsForeignKey = false;
				colvarSczsdl.IsReadOnly = false;
				colvarSczsdl.DefaultSetting = @"";
				colvarSczsdl.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSczsdl);
				
				TableSchema.TableColumn colvarScnlzy = new TableSchema.TableColumn(schema);
				colvarScnlzy.ColumnName = "SCNLZY";
				colvarScnlzy.DataType = DbType.Decimal;
				colvarScnlzy.MaxLength = 0;
				colvarScnlzy.AutoIncrement = false;
				colvarScnlzy.IsNullable = false;
				colvarScnlzy.IsPrimaryKey = false;
				colvarScnlzy.IsForeignKey = false;
				colvarScnlzy.IsReadOnly = false;
				
						colvarScnlzy.DefaultSetting = @"((0))";
				colvarScnlzy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScnlzy);
				
				TableSchema.TableColumn colvarWlbm = new TableSchema.TableColumn(schema);
				colvarWlbm.ColumnName = "WLBM";
				colvarWlbm.DataType = DbType.AnsiString;
				colvarWlbm.MaxLength = 50;
				colvarWlbm.AutoIncrement = false;
				colvarWlbm.IsNullable = false;
				colvarWlbm.IsPrimaryKey = false;
				colvarWlbm.IsForeignKey = false;
				colvarWlbm.IsReadOnly = false;
				colvarWlbm.DefaultSetting = @"";
				colvarWlbm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarWlbm);
				
				TableSchema.TableColumn colvarStatus = new TableSchema.TableColumn(schema);
				colvarStatus.ColumnName = "STATUS";
				colvarStatus.DataType = DbType.Int16;
				colvarStatus.MaxLength = 0;
				colvarStatus.AutoIncrement = false;
				colvarStatus.IsNullable = false;
				colvarStatus.IsPrimaryKey = false;
				colvarStatus.IsForeignKey = false;
				colvarStatus.IsReadOnly = false;
				colvarStatus.DefaultSetting = @"";
				colvarStatus.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStatus);
				
				TableSchema.TableColumn colvarPlanType = new TableSchema.TableColumn(schema);
				colvarPlanType.ColumnName = "PlanType";
				colvarPlanType.DataType = DbType.AnsiString;
				colvarPlanType.MaxLength = 8;
				colvarPlanType.AutoIncrement = false;
				colvarPlanType.IsNullable = false;
				colvarPlanType.IsPrimaryKey = false;
				colvarPlanType.IsForeignKey = false;
				colvarPlanType.IsReadOnly = false;
				colvarPlanType.DefaultSetting = @"";
				colvarPlanType.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPlanType);
				
				TableSchema.TableColumn colvarDdjhrq = new TableSchema.TableColumn(schema);
				colvarDdjhrq.ColumnName = "DDJHRQ";
				colvarDdjhrq.DataType = DbType.DateTime;
				colvarDdjhrq.MaxLength = 0;
				colvarDdjhrq.AutoIncrement = false;
				colvarDdjhrq.IsNullable = true;
				colvarDdjhrq.IsPrimaryKey = false;
				colvarDdjhrq.IsForeignKey = false;
				colvarDdjhrq.IsReadOnly = false;
				colvarDdjhrq.DefaultSetting = @"";
				colvarDdjhrq.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDdjhrq);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["Nowthwin"].AddSchema("T_PlanM",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("PlanMID")]
		[Bindable(true)]
		public int PlanMID 
		{
			get { return GetColumnValue<int>(Columns.PlanMID); }
			set { SetColumnValue(Columns.PlanMID, value); }
		}
		  
		[XmlAttribute("Scggdh")]
		[Bindable(true)]
		public string Scggdh 
		{
			get { return GetColumnValue<string>(Columns.Scggdh); }
			set { SetColumnValue(Columns.Scggdh, value); }
		}
		  
		[XmlAttribute("Sczsbh")]
		[Bindable(true)]
		public string Sczsbh 
		{
			get { return GetColumnValue<string>(Columns.Sczsbh); }
			set { SetColumnValue(Columns.Sczsbh, value); }
		}
		  
		[XmlAttribute("Schtbh")]
		[Bindable(true)]
		public string Schtbh 
		{
			get { return GetColumnValue<string>(Columns.Schtbh); }
			set { SetColumnValue(Columns.Schtbh, value); }
		}
		  
		[XmlAttribute("Scgcmc")]
		[Bindable(true)]
		public string Scgcmc 
		{
			get { return GetColumnValue<string>(Columns.Scgcmc); }
			set { SetColumnValue(Columns.Scgcmc, value); }
		}
		  
		[XmlAttribute("Sczsdl")]
		[Bindable(true)]
		public string Sczsdl 
		{
			get { return GetColumnValue<string>(Columns.Sczsdl); }
			set { SetColumnValue(Columns.Sczsdl, value); }
		}
		  
		[XmlAttribute("Scnlzy")]
		[Bindable(true)]
		public decimal Scnlzy 
		{
			get { return GetColumnValue<decimal>(Columns.Scnlzy); }
			set { SetColumnValue(Columns.Scnlzy, value); }
		}
		  
		[XmlAttribute("Wlbm")]
		[Bindable(true)]
		public string Wlbm 
		{
			get { return GetColumnValue<string>(Columns.Wlbm); }
			set { SetColumnValue(Columns.Wlbm, value); }
		}
		  
		[XmlAttribute("Status")]
		[Bindable(true)]
		public short Status 
		{
			get { return GetColumnValue<short>(Columns.Status); }
			set { SetColumnValue(Columns.Status, value); }
		}
		  
		[XmlAttribute("PlanType")]
		[Bindable(true)]
		public string PlanType 
		{
			get { return GetColumnValue<string>(Columns.PlanType); }
			set { SetColumnValue(Columns.PlanType, value); }
		}
		  
		[XmlAttribute("Ddjhrq")]
		[Bindable(true)]
		public DateTime? Ddjhrq 
		{
			get { return GetColumnValue<DateTime?>(Columns.Ddjhrq); }
			set { SetColumnValue(Columns.Ddjhrq, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varScggdh,string varSczsbh,string varSchtbh,string varScgcmc,string varSczsdl,decimal varScnlzy,string varWlbm,short varStatus,string varPlanType,DateTime? varDdjhrq)
		{
			TPlanM item = new TPlanM();
			
			item.Scggdh = varScggdh;
			
			item.Sczsbh = varSczsbh;
			
			item.Schtbh = varSchtbh;
			
			item.Scgcmc = varScgcmc;
			
			item.Sczsdl = varSczsdl;
			
			item.Scnlzy = varScnlzy;
			
			item.Wlbm = varWlbm;
			
			item.Status = varStatus;
			
			item.PlanType = varPlanType;
			
			item.Ddjhrq = varDdjhrq;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varPlanMID,string varScggdh,string varSczsbh,string varSchtbh,string varScgcmc,string varSczsdl,decimal varScnlzy,string varWlbm,short varStatus,string varPlanType,DateTime? varDdjhrq)
		{
			TPlanM item = new TPlanM();
			
				item.PlanMID = varPlanMID;
			
				item.Scggdh = varScggdh;
			
				item.Sczsbh = varSczsbh;
			
				item.Schtbh = varSchtbh;
			
				item.Scgcmc = varScgcmc;
			
				item.Sczsdl = varSczsdl;
			
				item.Scnlzy = varScnlzy;
			
				item.Wlbm = varWlbm;
			
				item.Status = varStatus;
			
				item.PlanType = varPlanType;
			
				item.Ddjhrq = varDdjhrq;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn PlanMIDColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn ScggdhColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn SczsbhColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn SchtbhColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn ScgcmcColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn SczsdlColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn ScnlzyColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn WlbmColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn StatusColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn PlanTypeColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn DdjhrqColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string PlanMID = @"PlanMID";
			 public static string Scggdh = @"SCGGDH";
			 public static string Sczsbh = @"SCZSBH";
			 public static string Schtbh = @"SCHTBH";
			 public static string Scgcmc = @"SCGCMC";
			 public static string Sczsdl = @"SCZSDL";
			 public static string Scnlzy = @"SCNLZY";
			 public static string Wlbm = @"WLBM";
			 public static string Status = @"STATUS";
			 public static string PlanType = @"PlanType";
			 public static string Ddjhrq = @"DDJHRQ";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}

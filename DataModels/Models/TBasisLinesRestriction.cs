using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace Model
{
	/// <summary>
	/// Strongly-typed collection for the TBasisLinesRestriction class.
	/// </summary>
    [Serializable]
	public partial class TBasisLinesRestrictionCollection : ActiveList<TBasisLinesRestriction, TBasisLinesRestrictionCollection>
	{	   
		public TBasisLinesRestrictionCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>TBasisLinesRestrictionCollection</returns>
		public TBasisLinesRestrictionCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                TBasisLinesRestriction o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the T_Basis_LinesRestriction table.
	/// </summary>
	[Serializable]
	public partial class TBasisLinesRestriction : ActiveRecord<TBasisLinesRestriction>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public TBasisLinesRestriction()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public TBasisLinesRestriction(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public TBasisLinesRestriction(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public TBasisLinesRestriction(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("T_Basis_LinesRestriction", TableType.Table, DataService.GetInstance("Nowthwin"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarLineName = new TableSchema.TableColumn(schema);
				colvarLineName.ColumnName = "LineName";
				colvarLineName.DataType = DbType.String;
				colvarLineName.MaxLength = 100;
				colvarLineName.AutoIncrement = false;
				colvarLineName.IsNullable = true;
				colvarLineName.IsPrimaryKey = false;
				colvarLineName.IsForeignKey = false;
				colvarLineName.IsReadOnly = false;
				colvarLineName.DefaultSetting = @"";
				colvarLineName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLineName);
				
				TableSchema.TableColumn colvarCapacity = new TableSchema.TableColumn(schema);
				colvarCapacity.ColumnName = "Capacity";
				colvarCapacity.DataType = DbType.Int32;
				colvarCapacity.MaxLength = 0;
				colvarCapacity.AutoIncrement = false;
				colvarCapacity.IsNullable = true;
				colvarCapacity.IsPrimaryKey = false;
				colvarCapacity.IsForeignKey = false;
				colvarCapacity.IsReadOnly = false;
				colvarCapacity.DefaultSetting = @"";
				colvarCapacity.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCapacity);
				
				TableSchema.TableColumn colvarRestriction = new TableSchema.TableColumn(schema);
				colvarRestriction.ColumnName = "Restriction";
				colvarRestriction.DataType = DbType.String;
				colvarRestriction.MaxLength = 200;
				colvarRestriction.AutoIncrement = false;
				colvarRestriction.IsNullable = false;
				colvarRestriction.IsPrimaryKey = true;
				colvarRestriction.IsForeignKey = false;
				colvarRestriction.IsReadOnly = false;
				colvarRestriction.DefaultSetting = @"";
				colvarRestriction.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRestriction);
				
				TableSchema.TableColumn colvarIdentifies = new TableSchema.TableColumn(schema);
				colvarIdentifies.ColumnName = "Identifies";
				colvarIdentifies.DataType = DbType.String;
				colvarIdentifies.MaxLength = 50;
				colvarIdentifies.AutoIncrement = false;
				colvarIdentifies.IsNullable = false;
				colvarIdentifies.IsPrimaryKey = true;
				colvarIdentifies.IsForeignKey = false;
				colvarIdentifies.IsReadOnly = false;
				colvarIdentifies.DefaultSetting = @"";
				colvarIdentifies.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIdentifies);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["Nowthwin"].AddSchema("T_Basis_LinesRestriction",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("LineName")]
		[Bindable(true)]
		public string LineName 
		{
			get { return GetColumnValue<string>(Columns.LineName); }
			set { SetColumnValue(Columns.LineName, value); }
		}
		  
		[XmlAttribute("Capacity")]
		[Bindable(true)]
		public int? Capacity 
		{
			get { return GetColumnValue<int?>(Columns.Capacity); }
			set { SetColumnValue(Columns.Capacity, value); }
		}
		  
		[XmlAttribute("Restriction")]
		[Bindable(true)]
		public string Restriction 
		{
			get { return GetColumnValue<string>(Columns.Restriction); }
			set { SetColumnValue(Columns.Restriction, value); }
		}
		  
		[XmlAttribute("Identifies")]
		[Bindable(true)]
		public string Identifies 
		{
			get { return GetColumnValue<string>(Columns.Identifies); }
			set { SetColumnValue(Columns.Identifies, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varLineName,int? varCapacity,string varRestriction,string varIdentifies)
		{
			TBasisLinesRestriction item = new TBasisLinesRestriction();
			
			item.LineName = varLineName;
			
			item.Capacity = varCapacity;
			
			item.Restriction = varRestriction;
			
			item.Identifies = varIdentifies;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(string varLineName,int? varCapacity,string varRestriction,string varIdentifies)
		{
			TBasisLinesRestriction item = new TBasisLinesRestriction();
			
				item.LineName = varLineName;
			
				item.Capacity = varCapacity;
			
				item.Restriction = varRestriction;
			
				item.Identifies = varIdentifies;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn LineNameColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn CapacityColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn RestrictionColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn IdentifiesColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string LineName = @"LineName";
			 public static string Capacity = @"Capacity";
			 public static string Restriction = @"Restriction";
			 public static string Identifies = @"Identifies";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}

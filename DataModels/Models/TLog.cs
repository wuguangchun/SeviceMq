using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace Model
{
	/// <summary>
	/// Strongly-typed collection for the TLog class.
	/// </summary>
    [Serializable]
	public partial class TLogCollection : ActiveList<TLog, TLogCollection>
	{	   
		public TLogCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>TLogCollection</returns>
		public TLogCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                TLog o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the T_Log table.
	/// </summary>
	[Serializable]
	public partial class TLog : ActiveRecord<TLog>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public TLog()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public TLog(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public TLog(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public TLog(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("T_Log", TableType.Table, DataService.GetInstance("Nowthwin"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarPkId = new TableSchema.TableColumn(schema);
				colvarPkId.ColumnName = "PkId";
				colvarPkId.DataType = DbType.String;
				colvarPkId.MaxLength = 50;
				colvarPkId.AutoIncrement = false;
				colvarPkId.IsNullable = false;
				colvarPkId.IsPrimaryKey = true;
				colvarPkId.IsForeignKey = false;
				colvarPkId.IsReadOnly = false;
				colvarPkId.DefaultSetting = @"";
				colvarPkId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPkId);
				
				TableSchema.TableColumn colvarOperationType = new TableSchema.TableColumn(schema);
				colvarOperationType.ColumnName = "operationType";
				colvarOperationType.DataType = DbType.String;
				colvarOperationType.MaxLength = 50;
				colvarOperationType.AutoIncrement = false;
				colvarOperationType.IsNullable = true;
				colvarOperationType.IsPrimaryKey = false;
				colvarOperationType.IsForeignKey = false;
				colvarOperationType.IsReadOnly = false;
				colvarOperationType.DefaultSetting = @"";
				colvarOperationType.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOperationType);
				
				TableSchema.TableColumn colvarContents = new TableSchema.TableColumn(schema);
				colvarContents.ColumnName = "contents";
				colvarContents.DataType = DbType.String;
				colvarContents.MaxLength = -1;
				colvarContents.AutoIncrement = false;
				colvarContents.IsNullable = true;
				colvarContents.IsPrimaryKey = false;
				colvarContents.IsForeignKey = false;
				colvarContents.IsReadOnly = false;
				colvarContents.DefaultSetting = @"";
				colvarContents.ForeignKeyTableName = "";
				schema.Columns.Add(colvarContents);
				
				TableSchema.TableColumn colvarCreateTime = new TableSchema.TableColumn(schema);
				colvarCreateTime.ColumnName = "createTime";
				colvarCreateTime.DataType = DbType.DateTime;
				colvarCreateTime.MaxLength = 0;
				colvarCreateTime.AutoIncrement = false;
				colvarCreateTime.IsNullable = true;
				colvarCreateTime.IsPrimaryKey = false;
				colvarCreateTime.IsForeignKey = false;
				colvarCreateTime.IsReadOnly = false;
				colvarCreateTime.DefaultSetting = @"";
				colvarCreateTime.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreateTime);
				
				TableSchema.TableColumn colvarSource = new TableSchema.TableColumn(schema);
				colvarSource.ColumnName = "source";
				colvarSource.DataType = DbType.String;
				colvarSource.MaxLength = 50;
				colvarSource.AutoIncrement = false;
				colvarSource.IsNullable = true;
				colvarSource.IsPrimaryKey = false;
				colvarSource.IsForeignKey = false;
				colvarSource.IsReadOnly = false;
				colvarSource.DefaultSetting = @"";
				colvarSource.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSource);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["Nowthwin"].AddSchema("T_Log",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("PkId")]
		[Bindable(true)]
		public string PkId 
		{
			get { return GetColumnValue<string>(Columns.PkId); }
			set { SetColumnValue(Columns.PkId, value); }
		}
		  
		[XmlAttribute("OperationType")]
		[Bindable(true)]
		public string OperationType 
		{
			get { return GetColumnValue<string>(Columns.OperationType); }
			set { SetColumnValue(Columns.OperationType, value); }
		}
		  
		[XmlAttribute("Contents")]
		[Bindable(true)]
		public string Contents 
		{
			get { return GetColumnValue<string>(Columns.Contents); }
			set { SetColumnValue(Columns.Contents, value); }
		}
		  
		[XmlAttribute("CreateTime")]
		[Bindable(true)]
		public DateTime? CreateTime 
		{
			get { return GetColumnValue<DateTime?>(Columns.CreateTime); }
			set { SetColumnValue(Columns.CreateTime, value); }
		}
		  
		[XmlAttribute("Source")]
		[Bindable(true)]
		public string Source 
		{
			get { return GetColumnValue<string>(Columns.Source); }
			set { SetColumnValue(Columns.Source, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varPkId,string varOperationType,string varContents,DateTime? varCreateTime,string varSource)
		{
			TLog item = new TLog();
			
			item.PkId = varPkId;
			
			item.OperationType = varOperationType;
			
			item.Contents = varContents;
			
			item.CreateTime = varCreateTime;
			
			item.Source = varSource;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(string varPkId,string varOperationType,string varContents,DateTime? varCreateTime,string varSource)
		{
			TLog item = new TLog();
			
				item.PkId = varPkId;
			
				item.OperationType = varOperationType;
			
				item.Contents = varContents;
			
				item.CreateTime = varCreateTime;
			
				item.Source = varSource;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn PkIdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn OperationTypeColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn ContentsColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn CreateTimeColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn SourceColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string PkId = @"PkId";
			 public static string OperationType = @"operationType";
			 public static string Contents = @"contents";
			 public static string CreateTime = @"createTime";
			 public static string Source = @"source";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}

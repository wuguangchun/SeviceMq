using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace Model
{
	/// <summary>
	/// Strongly-typed collection for the TFZsecondOrder class.
	/// </summary>
    [Serializable]
	public partial class TFZsecondOrderCollection : ActiveList<TFZsecondOrder, TFZsecondOrderCollection>
	{	   
		public TFZsecondOrderCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>TFZsecondOrderCollection</returns>
		public TFZsecondOrderCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                TFZsecondOrder o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the T_FZsecondOrder table.
	/// </summary>
	[Serializable]
	public partial class TFZsecondOrder : ActiveRecord<TFZsecondOrder>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public TFZsecondOrder()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public TFZsecondOrder(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public TFZsecondOrder(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public TFZsecondOrder(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("T_FZsecondOrder", TableType.Table, DataService.GetInstance("Nowthwin"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarPkId = new TableSchema.TableColumn(schema);
				colvarPkId.ColumnName = "pkId";
				colvarPkId.DataType = DbType.Int32;
				colvarPkId.MaxLength = 0;
				colvarPkId.AutoIncrement = false;
				colvarPkId.IsNullable = false;
				colvarPkId.IsPrimaryKey = true;
				colvarPkId.IsForeignKey = false;
				colvarPkId.IsReadOnly = false;
				colvarPkId.DefaultSetting = @"";
				colvarPkId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPkId);
				
				TableSchema.TableColumn colvarCustomerId = new TableSchema.TableColumn(schema);
				colvarCustomerId.ColumnName = "customerId";
				colvarCustomerId.DataType = DbType.AnsiString;
				colvarCustomerId.MaxLength = 50;
				colvarCustomerId.AutoIncrement = false;
				colvarCustomerId.IsNullable = true;
				colvarCustomerId.IsPrimaryKey = false;
				colvarCustomerId.IsForeignKey = false;
				colvarCustomerId.IsReadOnly = false;
				colvarCustomerId.DefaultSetting = @"";
				colvarCustomerId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCustomerId);
				
				TableSchema.TableColumn colvarResourse = new TableSchema.TableColumn(schema);
				colvarResourse.ColumnName = "resourse";
				colvarResourse.DataType = DbType.AnsiString;
				colvarResourse.MaxLength = 50;
				colvarResourse.AutoIncrement = false;
				colvarResourse.IsNullable = true;
				colvarResourse.IsPrimaryKey = false;
				colvarResourse.IsForeignKey = false;
				colvarResourse.IsReadOnly = false;
				colvarResourse.DefaultSetting = @"";
				colvarResourse.ForeignKeyTableName = "";
				schema.Columns.Add(colvarResourse);
				
				TableSchema.TableColumn colvarSx = new TableSchema.TableColumn(schema);
				colvarSx.ColumnName = "SX";
				colvarSx.DataType = DbType.Int32;
				colvarSx.MaxLength = 0;
				colvarSx.AutoIncrement = false;
				colvarSx.IsNullable = true;
				colvarSx.IsPrimaryKey = false;
				colvarSx.IsForeignKey = false;
				colvarSx.IsReadOnly = false;
				colvarSx.DefaultSetting = @"";
				colvarSx.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSx);
				
				TableSchema.TableColumn colvarCoatCode = new TableSchema.TableColumn(schema);
				colvarCoatCode.ColumnName = "coatCode";
				colvarCoatCode.DataType = DbType.AnsiString;
				colvarCoatCode.MaxLength = 50;
				colvarCoatCode.AutoIncrement = false;
				colvarCoatCode.IsNullable = true;
				colvarCoatCode.IsPrimaryKey = false;
				colvarCoatCode.IsForeignKey = false;
				colvarCoatCode.IsReadOnly = false;
				colvarCoatCode.DefaultSetting = @"";
				colvarCoatCode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCoatCode);
				
				TableSchema.TableColumn colvarNum = new TableSchema.TableColumn(schema);
				colvarNum.ColumnName = "num";
				colvarNum.DataType = DbType.AnsiString;
				colvarNum.MaxLength = 50;
				colvarNum.AutoIncrement = false;
				colvarNum.IsNullable = true;
				colvarNum.IsPrimaryKey = false;
				colvarNum.IsForeignKey = false;
				colvarNum.IsReadOnly = false;
				colvarNum.DefaultSetting = @"";
				colvarNum.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNum);
				
				TableSchema.TableColumn colvarTypeT = new TableSchema.TableColumn(schema);
				colvarTypeT.ColumnName = "typeT";
				colvarTypeT.DataType = DbType.Int32;
				colvarTypeT.MaxLength = 0;
				colvarTypeT.AutoIncrement = false;
				colvarTypeT.IsNullable = true;
				colvarTypeT.IsPrimaryKey = false;
				colvarTypeT.IsForeignKey = false;
				colvarTypeT.IsReadOnly = false;
				colvarTypeT.DefaultSetting = @"";
				colvarTypeT.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTypeT);
				
				TableSchema.TableColumn colvarTypenum = new TableSchema.TableColumn(schema);
				colvarTypenum.ColumnName = "typenum";
				colvarTypenum.DataType = DbType.Int32;
				colvarTypenum.MaxLength = 0;
				colvarTypenum.AutoIncrement = false;
				colvarTypenum.IsNullable = true;
				colvarTypenum.IsPrimaryKey = false;
				colvarTypenum.IsForeignKey = false;
				colvarTypenum.IsReadOnly = false;
				colvarTypenum.DefaultSetting = @"";
				colvarTypenum.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTypenum);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["Nowthwin"].AddSchema("T_FZsecondOrder",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("PkId")]
		[Bindable(true)]
		public int PkId 
		{
			get { return GetColumnValue<int>(Columns.PkId); }
			set { SetColumnValue(Columns.PkId, value); }
		}
		  
		[XmlAttribute("CustomerId")]
		[Bindable(true)]
		public string CustomerId 
		{
			get { return GetColumnValue<string>(Columns.CustomerId); }
			set { SetColumnValue(Columns.CustomerId, value); }
		}
		  
		[XmlAttribute("Resourse")]
		[Bindable(true)]
		public string Resourse 
		{
			get { return GetColumnValue<string>(Columns.Resourse); }
			set { SetColumnValue(Columns.Resourse, value); }
		}
		  
		[XmlAttribute("Sx")]
		[Bindable(true)]
		public int? Sx 
		{
			get { return GetColumnValue<int?>(Columns.Sx); }
			set { SetColumnValue(Columns.Sx, value); }
		}
		  
		[XmlAttribute("CoatCode")]
		[Bindable(true)]
		public string CoatCode 
		{
			get { return GetColumnValue<string>(Columns.CoatCode); }
			set { SetColumnValue(Columns.CoatCode, value); }
		}
		  
		[XmlAttribute("Num")]
		[Bindable(true)]
		public string Num 
		{
			get { return GetColumnValue<string>(Columns.Num); }
			set { SetColumnValue(Columns.Num, value); }
		}
		  
		[XmlAttribute("TypeT")]
		[Bindable(true)]
		public int? TypeT 
		{
			get { return GetColumnValue<int?>(Columns.TypeT); }
			set { SetColumnValue(Columns.TypeT, value); }
		}
		  
		[XmlAttribute("Typenum")]
		[Bindable(true)]
		public int? Typenum 
		{
			get { return GetColumnValue<int?>(Columns.Typenum); }
			set { SetColumnValue(Columns.Typenum, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(int varPkId,string varCustomerId,string varResourse,int? varSx,string varCoatCode,string varNum,int? varTypeT,int? varTypenum)
		{
			TFZsecondOrder item = new TFZsecondOrder();
			
			item.PkId = varPkId;
			
			item.CustomerId = varCustomerId;
			
			item.Resourse = varResourse;
			
			item.Sx = varSx;
			
			item.CoatCode = varCoatCode;
			
			item.Num = varNum;
			
			item.TypeT = varTypeT;
			
			item.Typenum = varTypenum;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varPkId,string varCustomerId,string varResourse,int? varSx,string varCoatCode,string varNum,int? varTypeT,int? varTypenum)
		{
			TFZsecondOrder item = new TFZsecondOrder();
			
				item.PkId = varPkId;
			
				item.CustomerId = varCustomerId;
			
				item.Resourse = varResourse;
			
				item.Sx = varSx;
			
				item.CoatCode = varCoatCode;
			
				item.Num = varNum;
			
				item.TypeT = varTypeT;
			
				item.Typenum = varTypenum;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn PkIdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn CustomerIdColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn ResourseColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn SxColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn CoatCodeColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn NumColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn TypeTColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn TypenumColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string PkId = @"pkId";
			 public static string CustomerId = @"customerId";
			 public static string Resourse = @"resourse";
			 public static string Sx = @"SX";
			 public static string CoatCode = @"coatCode";
			 public static string Num = @"num";
			 public static string TypeT = @"typeT";
			 public static string Typenum = @"typenum";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}

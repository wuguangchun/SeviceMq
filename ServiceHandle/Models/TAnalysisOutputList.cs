using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace Model
{
	/// <summary>
	/// Strongly-typed collection for the TAnalysisOutputList class.
	/// </summary>
    [Serializable]
	public partial class TAnalysisOutputListCollection : ActiveList<TAnalysisOutputList, TAnalysisOutputListCollection>
	{	   
		public TAnalysisOutputListCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>TAnalysisOutputListCollection</returns>
		public TAnalysisOutputListCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                TAnalysisOutputList o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the T_Analysis_OutputList table.
	/// </summary>
	[Serializable]
	public partial class TAnalysisOutputList : ActiveRecord<TAnalysisOutputList>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public TAnalysisOutputList()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public TAnalysisOutputList(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public TAnalysisOutputList(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public TAnalysisOutputList(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("T_Analysis_OutputList", TableType.Table, DataService.GetInstance("Nowthwin"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarOrderId = new TableSchema.TableColumn(schema);
				colvarOrderId.ColumnName = "orderId";
				colvarOrderId.DataType = DbType.String;
				colvarOrderId.MaxLength = 50;
				colvarOrderId.AutoIncrement = false;
				colvarOrderId.IsNullable = false;
				colvarOrderId.IsPrimaryKey = true;
				colvarOrderId.IsForeignKey = false;
				colvarOrderId.IsReadOnly = false;
				colvarOrderId.DefaultSetting = @"";
				colvarOrderId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOrderId);
				
				TableSchema.TableColumn colvarJobCode = new TableSchema.TableColumn(schema);
				colvarJobCode.ColumnName = "jobCode";
				colvarJobCode.DataType = DbType.String;
				colvarJobCode.MaxLength = 50;
				colvarJobCode.AutoIncrement = false;
				colvarJobCode.IsNullable = true;
				colvarJobCode.IsPrimaryKey = false;
				colvarJobCode.IsForeignKey = false;
				colvarJobCode.IsReadOnly = false;
				colvarJobCode.DefaultSetting = @"";
				colvarJobCode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarJobCode);
				
				TableSchema.TableColumn colvarProject = new TableSchema.TableColumn(schema);
				colvarProject.ColumnName = "project";
				colvarProject.DataType = DbType.String;
				colvarProject.MaxLength = 20;
				colvarProject.AutoIncrement = false;
				colvarProject.IsNullable = true;
				colvarProject.IsPrimaryKey = false;
				colvarProject.IsForeignKey = false;
				colvarProject.IsReadOnly = false;
				colvarProject.DefaultSetting = @"";
				colvarProject.ForeignKeyTableName = "";
				schema.Columns.Add(colvarProject);
				
				TableSchema.TableColumn colvarOrderType = new TableSchema.TableColumn(schema);
				colvarOrderType.ColumnName = "orderType";
				colvarOrderType.DataType = DbType.String;
				colvarOrderType.MaxLength = 20;
				colvarOrderType.AutoIncrement = false;
				colvarOrderType.IsNullable = true;
				colvarOrderType.IsPrimaryKey = false;
				colvarOrderType.IsForeignKey = false;
				colvarOrderType.IsReadOnly = false;
				colvarOrderType.DefaultSetting = @"";
				colvarOrderType.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOrderType);
				
				TableSchema.TableColumn colvarCoatType = new TableSchema.TableColumn(schema);
				colvarCoatType.ColumnName = "coatType";
				colvarCoatType.DataType = DbType.String;
				colvarCoatType.MaxLength = 50;
				colvarCoatType.AutoIncrement = false;
				colvarCoatType.IsNullable = true;
				colvarCoatType.IsPrimaryKey = false;
				colvarCoatType.IsForeignKey = false;
				colvarCoatType.IsReadOnly = false;
				colvarCoatType.DefaultSetting = @"";
				colvarCoatType.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCoatType);
				
				TableSchema.TableColumn colvarBodyType = new TableSchema.TableColumn(schema);
				colvarBodyType.ColumnName = "bodyType";
				colvarBodyType.DataType = DbType.String;
				colvarBodyType.MaxLength = 50;
				colvarBodyType.AutoIncrement = false;
				colvarBodyType.IsNullable = true;
				colvarBodyType.IsPrimaryKey = false;
				colvarBodyType.IsForeignKey = false;
				colvarBodyType.IsReadOnly = false;
				colvarBodyType.DefaultSetting = @"";
				colvarBodyType.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBodyType);
				
				TableSchema.TableColumn colvarFabric = new TableSchema.TableColumn(schema);
				colvarFabric.ColumnName = "fabric";
				colvarFabric.DataType = DbType.String;
				colvarFabric.MaxLength = 50;
				colvarFabric.AutoIncrement = false;
				colvarFabric.IsNullable = true;
				colvarFabric.IsPrimaryKey = false;
				colvarFabric.IsForeignKey = false;
				colvarFabric.IsReadOnly = false;
				colvarFabric.DefaultSetting = @"";
				colvarFabric.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFabric);
				
				TableSchema.TableColumn colvarOrderTime = new TableSchema.TableColumn(schema);
				colvarOrderTime.ColumnName = "orderTime";
				colvarOrderTime.DataType = DbType.DateTime;
				colvarOrderTime.MaxLength = 0;
				colvarOrderTime.AutoIncrement = false;
				colvarOrderTime.IsNullable = true;
				colvarOrderTime.IsPrimaryKey = false;
				colvarOrderTime.IsForeignKey = false;
				colvarOrderTime.IsReadOnly = false;
				colvarOrderTime.DefaultSetting = @"";
				colvarOrderTime.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOrderTime);
				
				TableSchema.TableColumn colvarDeliveryTime = new TableSchema.TableColumn(schema);
				colvarDeliveryTime.ColumnName = "deliveryTime";
				colvarDeliveryTime.DataType = DbType.DateTime;
				colvarDeliveryTime.MaxLength = 0;
				colvarDeliveryTime.AutoIncrement = false;
				colvarDeliveryTime.IsNullable = true;
				colvarDeliveryTime.IsPrimaryKey = false;
				colvarDeliveryTime.IsForeignKey = false;
				colvarDeliveryTime.IsReadOnly = false;
				colvarDeliveryTime.DefaultSetting = @"";
				colvarDeliveryTime.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDeliveryTime);
				
				TableSchema.TableColumn colvarSpecialTime = new TableSchema.TableColumn(schema);
				colvarSpecialTime.ColumnName = "specialTime";
				colvarSpecialTime.DataType = DbType.Int32;
				colvarSpecialTime.MaxLength = 0;
				colvarSpecialTime.AutoIncrement = false;
				colvarSpecialTime.IsNullable = true;
				colvarSpecialTime.IsPrimaryKey = false;
				colvarSpecialTime.IsForeignKey = false;
				colvarSpecialTime.IsReadOnly = false;
				colvarSpecialTime.DefaultSetting = @"";
				colvarSpecialTime.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSpecialTime);
				
				TableSchema.TableColumn colvarSpecialCode = new TableSchema.TableColumn(schema);
				colvarSpecialCode.ColumnName = "specialCode";
				colvarSpecialCode.DataType = DbType.String;
				colvarSpecialCode.MaxLength = 100;
				colvarSpecialCode.AutoIncrement = false;
				colvarSpecialCode.IsNullable = true;
				colvarSpecialCode.IsPrimaryKey = false;
				colvarSpecialCode.IsForeignKey = false;
				colvarSpecialCode.IsReadOnly = false;
				colvarSpecialCode.DefaultSetting = @"";
				colvarSpecialCode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSpecialCode);
				
				TableSchema.TableColumn colvarStyles = new TableSchema.TableColumn(schema);
				colvarStyles.ColumnName = "styles";
				colvarStyles.DataType = DbType.String;
				colvarStyles.MaxLength = 100;
				colvarStyles.AutoIncrement = false;
				colvarStyles.IsNullable = true;
				colvarStyles.IsPrimaryKey = false;
				colvarStyles.IsForeignKey = false;
				colvarStyles.IsReadOnly = false;
				colvarStyles.DefaultSetting = @"";
				colvarStyles.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStyles);
				
				TableSchema.TableColumn colvarStylesResult = new TableSchema.TableColumn(schema);
				colvarStylesResult.ColumnName = "stylesResult";
				colvarStylesResult.DataType = DbType.String;
				colvarStylesResult.MaxLength = 100;
				colvarStylesResult.AutoIncrement = false;
				colvarStylesResult.IsNullable = true;
				colvarStylesResult.IsPrimaryKey = false;
				colvarStylesResult.IsForeignKey = false;
				colvarStylesResult.IsReadOnly = false;
				colvarStylesResult.DefaultSetting = @"";
				colvarStylesResult.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStylesResult);
				
				TableSchema.TableColumn colvarNumbers = new TableSchema.TableColumn(schema);
				colvarNumbers.ColumnName = "numbers";
				colvarNumbers.DataType = DbType.Int32;
				colvarNumbers.MaxLength = 0;
				colvarNumbers.AutoIncrement = false;
				colvarNumbers.IsNullable = true;
				colvarNumbers.IsPrimaryKey = false;
				colvarNumbers.IsForeignKey = false;
				colvarNumbers.IsReadOnly = false;
				colvarNumbers.DefaultSetting = @"";
				colvarNumbers.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNumbers);
				
				TableSchema.TableColumn colvarPlanNum = new TableSchema.TableColumn(schema);
				colvarPlanNum.ColumnName = "planNum";
				colvarPlanNum.DataType = DbType.Int32;
				colvarPlanNum.MaxLength = 0;
				colvarPlanNum.AutoIncrement = false;
				colvarPlanNum.IsNullable = true;
				colvarPlanNum.IsPrimaryKey = false;
				colvarPlanNum.IsForeignKey = false;
				colvarPlanNum.IsReadOnly = false;
				colvarPlanNum.DefaultSetting = @"";
				colvarPlanNum.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPlanNum);
				
				TableSchema.TableColumn colvarSupportingWay = new TableSchema.TableColumn(schema);
				colvarSupportingWay.ColumnName = "supportingWay";
				colvarSupportingWay.DataType = DbType.String;
				colvarSupportingWay.MaxLength = 50;
				colvarSupportingWay.AutoIncrement = false;
				colvarSupportingWay.IsNullable = true;
				colvarSupportingWay.IsPrimaryKey = false;
				colvarSupportingWay.IsForeignKey = false;
				colvarSupportingWay.IsReadOnly = false;
				colvarSupportingWay.DefaultSetting = @"";
				colvarSupportingWay.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSupportingWay);
				
				TableSchema.TableColumn colvarWorkinfo = new TableSchema.TableColumn(schema);
				colvarWorkinfo.ColumnName = "workinfo";
				colvarWorkinfo.DataType = DbType.Int32;
				colvarWorkinfo.MaxLength = 0;
				colvarWorkinfo.AutoIncrement = false;
				colvarWorkinfo.IsNullable = true;
				colvarWorkinfo.IsPrimaryKey = false;
				colvarWorkinfo.IsForeignKey = false;
				colvarWorkinfo.IsReadOnly = false;
				colvarWorkinfo.DefaultSetting = @"";
				colvarWorkinfo.ForeignKeyTableName = "";
				schema.Columns.Add(colvarWorkinfo);
				
				TableSchema.TableColumn colvarOrderNo = new TableSchema.TableColumn(schema);
				colvarOrderNo.ColumnName = "orderNo";
				colvarOrderNo.DataType = DbType.String;
				colvarOrderNo.MaxLength = 50;
				colvarOrderNo.AutoIncrement = false;
				colvarOrderNo.IsNullable = true;
				colvarOrderNo.IsPrimaryKey = false;
				colvarOrderNo.IsForeignKey = false;
				colvarOrderNo.IsReadOnly = false;
				colvarOrderNo.DefaultSetting = @"";
				colvarOrderNo.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOrderNo);
				
				TableSchema.TableColumn colvarCustomer = new TableSchema.TableColumn(schema);
				colvarCustomer.ColumnName = "customer";
				colvarCustomer.DataType = DbType.String;
				colvarCustomer.MaxLength = 100;
				colvarCustomer.AutoIncrement = false;
				colvarCustomer.IsNullable = true;
				colvarCustomer.IsPrimaryKey = false;
				colvarCustomer.IsForeignKey = false;
				colvarCustomer.IsReadOnly = false;
				colvarCustomer.DefaultSetting = @"";
				colvarCustomer.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCustomer);
				
				TableSchema.TableColumn colvarOriginalCode = new TableSchema.TableColumn(schema);
				colvarOriginalCode.ColumnName = "originalCode";
				colvarOriginalCode.DataType = DbType.String;
				colvarOriginalCode.MaxLength = 50;
				colvarOriginalCode.AutoIncrement = false;
				colvarOriginalCode.IsNullable = true;
				colvarOriginalCode.IsPrimaryKey = false;
				colvarOriginalCode.IsForeignKey = false;
				colvarOriginalCode.IsReadOnly = false;
				colvarOriginalCode.DefaultSetting = @"";
				colvarOriginalCode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOriginalCode);
				
				TableSchema.TableColumn colvarAbnormal = new TableSchema.TableColumn(schema);
				colvarAbnormal.ColumnName = "abnormal";
				colvarAbnormal.DataType = DbType.String;
				colvarAbnormal.MaxLength = 50;
				colvarAbnormal.AutoIncrement = false;
				colvarAbnormal.IsNullable = true;
				colvarAbnormal.IsPrimaryKey = false;
				colvarAbnormal.IsForeignKey = false;
				colvarAbnormal.IsReadOnly = false;
				colvarAbnormal.DefaultSetting = @"";
				colvarAbnormal.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAbnormal);
				
				TableSchema.TableColumn colvarNote = new TableSchema.TableColumn(schema);
				colvarNote.ColumnName = "note";
				colvarNote.DataType = DbType.String;
				colvarNote.MaxLength = 200;
				colvarNote.AutoIncrement = false;
				colvarNote.IsNullable = true;
				colvarNote.IsPrimaryKey = false;
				colvarNote.IsForeignKey = false;
				colvarNote.IsReadOnly = false;
				colvarNote.DefaultSetting = @"";
				colvarNote.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNote);
				
				TableSchema.TableColumn colvarResources = new TableSchema.TableColumn(schema);
				colvarResources.ColumnName = "resources";
				colvarResources.DataType = DbType.String;
				colvarResources.MaxLength = 1000;
				colvarResources.AutoIncrement = false;
				colvarResources.IsNullable = true;
				colvarResources.IsPrimaryKey = false;
				colvarResources.IsForeignKey = false;
				colvarResources.IsReadOnly = false;
				colvarResources.DefaultSetting = @"";
				colvarResources.ForeignKeyTableName = "";
				schema.Columns.Add(colvarResources);
				
				TableSchema.TableColumn colvarBeginTime = new TableSchema.TableColumn(schema);
				colvarBeginTime.ColumnName = "beginTime";
				colvarBeginTime.DataType = DbType.DateTime;
				colvarBeginTime.MaxLength = 0;
				colvarBeginTime.AutoIncrement = false;
				colvarBeginTime.IsNullable = true;
				colvarBeginTime.IsPrimaryKey = false;
				colvarBeginTime.IsForeignKey = false;
				colvarBeginTime.IsReadOnly = false;
				colvarBeginTime.DefaultSetting = @"";
				colvarBeginTime.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBeginTime);
				
				TableSchema.TableColumn colvarEndTime = new TableSchema.TableColumn(schema);
				colvarEndTime.ColumnName = "endTime";
				colvarEndTime.DataType = DbType.DateTime;
				colvarEndTime.MaxLength = 0;
				colvarEndTime.AutoIncrement = false;
				colvarEndTime.IsNullable = true;
				colvarEndTime.IsPrimaryKey = false;
				colvarEndTime.IsForeignKey = false;
				colvarEndTime.IsReadOnly = false;
				colvarEndTime.DefaultSetting = @"";
				colvarEndTime.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEndTime);
				
				TableSchema.TableColumn colvarMakeTime = new TableSchema.TableColumn(schema);
				colvarMakeTime.ColumnName = "makeTime";
				colvarMakeTime.DataType = DbType.String;
				colvarMakeTime.MaxLength = 50;
				colvarMakeTime.AutoIncrement = false;
				colvarMakeTime.IsNullable = true;
				colvarMakeTime.IsPrimaryKey = false;
				colvarMakeTime.IsForeignKey = false;
				colvarMakeTime.IsReadOnly = false;
				colvarMakeTime.DefaultSetting = @"";
				colvarMakeTime.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMakeTime);
				
				TableSchema.TableColumn colvarCreateDate = new TableSchema.TableColumn(schema);
				colvarCreateDate.ColumnName = "createDate";
				colvarCreateDate.DataType = DbType.DateTime;
				colvarCreateDate.MaxLength = 0;
				colvarCreateDate.AutoIncrement = false;
				colvarCreateDate.IsNullable = true;
				colvarCreateDate.IsPrimaryKey = false;
				colvarCreateDate.IsForeignKey = false;
				colvarCreateDate.IsReadOnly = false;
				colvarCreateDate.DefaultSetting = @"";
				colvarCreateDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreateDate);
				
				TableSchema.TableColumn colvarPbcd = new TableSchema.TableColumn(schema);
				colvarPbcd.ColumnName = "pbcd";
				colvarPbcd.DataType = DbType.String;
				colvarPbcd.MaxLength = 50;
				colvarPbcd.AutoIncrement = false;
				colvarPbcd.IsNullable = true;
				colvarPbcd.IsPrimaryKey = false;
				colvarPbcd.IsForeignKey = false;
				colvarPbcd.IsReadOnly = false;
				colvarPbcd.DefaultSetting = @"";
				colvarPbcd.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPbcd);
				
				TableSchema.TableColumn colvarGydm = new TableSchema.TableColumn(schema);
				colvarGydm.ColumnName = "gydm";
				colvarGydm.DataType = DbType.String;
				colvarGydm.MaxLength = 200;
				colvarGydm.AutoIncrement = false;
				colvarGydm.IsNullable = true;
				colvarGydm.IsPrimaryKey = false;
				colvarGydm.IsForeignKey = false;
				colvarGydm.IsReadOnly = false;
				colvarGydm.DefaultSetting = @"";
				colvarGydm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGydm);
				
				TableSchema.TableColumn colvarScjhdd = new TableSchema.TableColumn(schema);
				colvarScjhdd.ColumnName = "scjhdd";
				colvarScjhdd.DataType = DbType.String;
				colvarScjhdd.MaxLength = 50;
				colvarScjhdd.AutoIncrement = false;
				colvarScjhdd.IsNullable = true;
				colvarScjhdd.IsPrimaryKey = false;
				colvarScjhdd.IsForeignKey = false;
				colvarScjhdd.IsReadOnly = false;
				colvarScjhdd.DefaultSetting = @"";
				colvarScjhdd.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScjhdd);
				
				TableSchema.TableColumn colvarFlagStatus = new TableSchema.TableColumn(schema);
				colvarFlagStatus.ColumnName = "flagStatus";
				colvarFlagStatus.DataType = DbType.Int32;
				colvarFlagStatus.MaxLength = 0;
				colvarFlagStatus.AutoIncrement = false;
				colvarFlagStatus.IsNullable = true;
				colvarFlagStatus.IsPrimaryKey = false;
				colvarFlagStatus.IsForeignKey = false;
				colvarFlagStatus.IsReadOnly = false;
				
						colvarFlagStatus.DefaultSetting = @"((0))";
				colvarFlagStatus.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFlagStatus);
				
				TableSchema.TableColumn colvarSfyp = new TableSchema.TableColumn(schema);
				colvarSfyp.ColumnName = "sfyp";
				colvarSfyp.DataType = DbType.String;
				colvarSfyp.MaxLength = 50;
				colvarSfyp.AutoIncrement = false;
				colvarSfyp.IsNullable = true;
				colvarSfyp.IsPrimaryKey = false;
				colvarSfyp.IsForeignKey = false;
				colvarSfyp.IsReadOnly = false;
				colvarSfyp.DefaultSetting = @"";
				colvarSfyp.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSfyp);
				
				TableSchema.TableColumn colvarSfjj = new TableSchema.TableColumn(schema);
				colvarSfjj.ColumnName = "sfjj";
				colvarSfjj.DataType = DbType.String;
				colvarSfjj.MaxLength = 50;
				colvarSfjj.AutoIncrement = false;
				colvarSfjj.IsNullable = true;
				colvarSfjj.IsPrimaryKey = false;
				colvarSfjj.IsForeignKey = false;
				colvarSfjj.IsReadOnly = false;
				colvarSfjj.DefaultSetting = @"";
				colvarSfjj.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSfjj);
				
				TableSchema.TableColumn colvarScggdh = new TableSchema.TableColumn(schema);
				colvarScggdh.ColumnName = "SCGGDH";
				colvarScggdh.DataType = DbType.String;
				colvarScggdh.MaxLength = 50;
				colvarScggdh.AutoIncrement = false;
				colvarScggdh.IsNullable = true;
				colvarScggdh.IsPrimaryKey = false;
				colvarScggdh.IsForeignKey = false;
				colvarScggdh.IsReadOnly = false;
				colvarScggdh.DefaultSetting = @"";
				colvarScggdh.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScggdh);
				
				TableSchema.TableColumn colvarClothType = new TableSchema.TableColumn(schema);
				colvarClothType.ColumnName = "ClothType";
				colvarClothType.DataType = DbType.String;
				colvarClothType.MaxLength = 50;
				colvarClothType.AutoIncrement = false;
				colvarClothType.IsNullable = true;
				colvarClothType.IsPrimaryKey = false;
				colvarClothType.IsForeignKey = false;
				colvarClothType.IsReadOnly = false;
				colvarClothType.DefaultSetting = @"";
				colvarClothType.ForeignKeyTableName = "";
				schema.Columns.Add(colvarClothType);
				
				TableSchema.TableColumn colvarTzecode = new TableSchema.TableColumn(schema);
				colvarTzecode.ColumnName = "tzecode";
				colvarTzecode.DataType = DbType.String;
				colvarTzecode.MaxLength = 50;
				colvarTzecode.AutoIncrement = false;
				colvarTzecode.IsNullable = true;
				colvarTzecode.IsPrimaryKey = false;
				colvarTzecode.IsForeignKey = false;
				colvarTzecode.IsReadOnly = false;
				colvarTzecode.DefaultSetting = @"";
				colvarTzecode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTzecode);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["Nowthwin"].AddSchema("T_Analysis_OutputList",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("OrderId")]
		[Bindable(true)]
		public string OrderId 
		{
			get { return GetColumnValue<string>(Columns.OrderId); }
			set { SetColumnValue(Columns.OrderId, value); }
		}
		  
		[XmlAttribute("JobCode")]
		[Bindable(true)]
		public string JobCode 
		{
			get { return GetColumnValue<string>(Columns.JobCode); }
			set { SetColumnValue(Columns.JobCode, value); }
		}
		  
		[XmlAttribute("Project")]
		[Bindable(true)]
		public string Project 
		{
			get { return GetColumnValue<string>(Columns.Project); }
			set { SetColumnValue(Columns.Project, value); }
		}
		  
		[XmlAttribute("OrderType")]
		[Bindable(true)]
		public string OrderType 
		{
			get { return GetColumnValue<string>(Columns.OrderType); }
			set { SetColumnValue(Columns.OrderType, value); }
		}
		  
		[XmlAttribute("CoatType")]
		[Bindable(true)]
		public string CoatType 
		{
			get { return GetColumnValue<string>(Columns.CoatType); }
			set { SetColumnValue(Columns.CoatType, value); }
		}
		  
		[XmlAttribute("BodyType")]
		[Bindable(true)]
		public string BodyType 
		{
			get { return GetColumnValue<string>(Columns.BodyType); }
			set { SetColumnValue(Columns.BodyType, value); }
		}
		  
		[XmlAttribute("Fabric")]
		[Bindable(true)]
		public string Fabric 
		{
			get { return GetColumnValue<string>(Columns.Fabric); }
			set { SetColumnValue(Columns.Fabric, value); }
		}
		  
		[XmlAttribute("OrderTime")]
		[Bindable(true)]
		public DateTime? OrderTime 
		{
			get { return GetColumnValue<DateTime?>(Columns.OrderTime); }
			set { SetColumnValue(Columns.OrderTime, value); }
		}
		  
		[XmlAttribute("DeliveryTime")]
		[Bindable(true)]
		public DateTime? DeliveryTime 
		{
			get { return GetColumnValue<DateTime?>(Columns.DeliveryTime); }
			set { SetColumnValue(Columns.DeliveryTime, value); }
		}
		  
		[XmlAttribute("SpecialTime")]
		[Bindable(true)]
		public int? SpecialTime 
		{
			get { return GetColumnValue<int?>(Columns.SpecialTime); }
			set { SetColumnValue(Columns.SpecialTime, value); }
		}
		  
		[XmlAttribute("SpecialCode")]
		[Bindable(true)]
		public string SpecialCode 
		{
			get { return GetColumnValue<string>(Columns.SpecialCode); }
			set { SetColumnValue(Columns.SpecialCode, value); }
		}
		  
		[XmlAttribute("Styles")]
		[Bindable(true)]
		public string Styles 
		{
			get { return GetColumnValue<string>(Columns.Styles); }
			set { SetColumnValue(Columns.Styles, value); }
		}
		  
		[XmlAttribute("StylesResult")]
		[Bindable(true)]
		public string StylesResult 
		{
			get { return GetColumnValue<string>(Columns.StylesResult); }
			set { SetColumnValue(Columns.StylesResult, value); }
		}
		  
		[XmlAttribute("Numbers")]
		[Bindable(true)]
		public int? Numbers 
		{
			get { return GetColumnValue<int?>(Columns.Numbers); }
			set { SetColumnValue(Columns.Numbers, value); }
		}
		  
		[XmlAttribute("PlanNum")]
		[Bindable(true)]
		public int? PlanNum 
		{
			get { return GetColumnValue<int?>(Columns.PlanNum); }
			set { SetColumnValue(Columns.PlanNum, value); }
		}
		  
		[XmlAttribute("SupportingWay")]
		[Bindable(true)]
		public string SupportingWay 
		{
			get { return GetColumnValue<string>(Columns.SupportingWay); }
			set { SetColumnValue(Columns.SupportingWay, value); }
		}
		  
		[XmlAttribute("Workinfo")]
		[Bindable(true)]
		public int? Workinfo 
		{
			get { return GetColumnValue<int?>(Columns.Workinfo); }
			set { SetColumnValue(Columns.Workinfo, value); }
		}
		  
		[XmlAttribute("OrderNo")]
		[Bindable(true)]
		public string OrderNo 
		{
			get { return GetColumnValue<string>(Columns.OrderNo); }
			set { SetColumnValue(Columns.OrderNo, value); }
		}
		  
		[XmlAttribute("Customer")]
		[Bindable(true)]
		public string Customer 
		{
			get { return GetColumnValue<string>(Columns.Customer); }
			set { SetColumnValue(Columns.Customer, value); }
		}
		  
		[XmlAttribute("OriginalCode")]
		[Bindable(true)]
		public string OriginalCode 
		{
			get { return GetColumnValue<string>(Columns.OriginalCode); }
			set { SetColumnValue(Columns.OriginalCode, value); }
		}
		  
		[XmlAttribute("Abnormal")]
		[Bindable(true)]
		public string Abnormal 
		{
			get { return GetColumnValue<string>(Columns.Abnormal); }
			set { SetColumnValue(Columns.Abnormal, value); }
		}
		  
		[XmlAttribute("Note")]
		[Bindable(true)]
		public string Note 
		{
			get { return GetColumnValue<string>(Columns.Note); }
			set { SetColumnValue(Columns.Note, value); }
		}
		  
		[XmlAttribute("Resources")]
		[Bindable(true)]
		public string Resources 
		{
			get { return GetColumnValue<string>(Columns.Resources); }
			set { SetColumnValue(Columns.Resources, value); }
		}
		  
		[XmlAttribute("BeginTime")]
		[Bindable(true)]
		public DateTime? BeginTime 
		{
			get { return GetColumnValue<DateTime?>(Columns.BeginTime); }
			set { SetColumnValue(Columns.BeginTime, value); }
		}
		  
		[XmlAttribute("EndTime")]
		[Bindable(true)]
		public DateTime? EndTime 
		{
			get { return GetColumnValue<DateTime?>(Columns.EndTime); }
			set { SetColumnValue(Columns.EndTime, value); }
		}
		  
		[XmlAttribute("MakeTime")]
		[Bindable(true)]
		public string MakeTime 
		{
			get { return GetColumnValue<string>(Columns.MakeTime); }
			set { SetColumnValue(Columns.MakeTime, value); }
		}
		  
		[XmlAttribute("CreateDate")]
		[Bindable(true)]
		public DateTime? CreateDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.CreateDate); }
			set { SetColumnValue(Columns.CreateDate, value); }
		}
		  
		[XmlAttribute("Pbcd")]
		[Bindable(true)]
		public string Pbcd 
		{
			get { return GetColumnValue<string>(Columns.Pbcd); }
			set { SetColumnValue(Columns.Pbcd, value); }
		}
		  
		[XmlAttribute("Gydm")]
		[Bindable(true)]
		public string Gydm 
		{
			get { return GetColumnValue<string>(Columns.Gydm); }
			set { SetColumnValue(Columns.Gydm, value); }
		}
		  
		[XmlAttribute("Scjhdd")]
		[Bindable(true)]
		public string Scjhdd 
		{
			get { return GetColumnValue<string>(Columns.Scjhdd); }
			set { SetColumnValue(Columns.Scjhdd, value); }
		}
		  
		[XmlAttribute("FlagStatus")]
		[Bindable(true)]
		public int? FlagStatus 
		{
			get { return GetColumnValue<int?>(Columns.FlagStatus); }
			set { SetColumnValue(Columns.FlagStatus, value); }
		}
		  
		[XmlAttribute("Sfyp")]
		[Bindable(true)]
		public string Sfyp 
		{
			get { return GetColumnValue<string>(Columns.Sfyp); }
			set { SetColumnValue(Columns.Sfyp, value); }
		}
		  
		[XmlAttribute("Sfjj")]
		[Bindable(true)]
		public string Sfjj 
		{
			get { return GetColumnValue<string>(Columns.Sfjj); }
			set { SetColumnValue(Columns.Sfjj, value); }
		}
		  
		[XmlAttribute("Scggdh")]
		[Bindable(true)]
		public string Scggdh 
		{
			get { return GetColumnValue<string>(Columns.Scggdh); }
			set { SetColumnValue(Columns.Scggdh, value); }
		}
		  
		[XmlAttribute("ClothType")]
		[Bindable(true)]
		public string ClothType 
		{
			get { return GetColumnValue<string>(Columns.ClothType); }
			set { SetColumnValue(Columns.ClothType, value); }
		}
		  
		[XmlAttribute("Tzecode")]
		[Bindable(true)]
		public string Tzecode 
		{
			get { return GetColumnValue<string>(Columns.Tzecode); }
			set { SetColumnValue(Columns.Tzecode, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varOrderId,string varJobCode,string varProject,string varOrderType,string varCoatType,string varBodyType,string varFabric,DateTime? varOrderTime,DateTime? varDeliveryTime,int? varSpecialTime,string varSpecialCode,string varStyles,string varStylesResult,int? varNumbers,int? varPlanNum,string varSupportingWay,int? varWorkinfo,string varOrderNo,string varCustomer,string varOriginalCode,string varAbnormal,string varNote,string varResources,DateTime? varBeginTime,DateTime? varEndTime,string varMakeTime,DateTime? varCreateDate,string varPbcd,string varGydm,string varScjhdd,int? varFlagStatus,string varSfyp,string varSfjj,string varScggdh,string varClothType,string varTzecode)
		{
			TAnalysisOutputList item = new TAnalysisOutputList();
			
			item.OrderId = varOrderId;
			
			item.JobCode = varJobCode;
			
			item.Project = varProject;
			
			item.OrderType = varOrderType;
			
			item.CoatType = varCoatType;
			
			item.BodyType = varBodyType;
			
			item.Fabric = varFabric;
			
			item.OrderTime = varOrderTime;
			
			item.DeliveryTime = varDeliveryTime;
			
			item.SpecialTime = varSpecialTime;
			
			item.SpecialCode = varSpecialCode;
			
			item.Styles = varStyles;
			
			item.StylesResult = varStylesResult;
			
			item.Numbers = varNumbers;
			
			item.PlanNum = varPlanNum;
			
			item.SupportingWay = varSupportingWay;
			
			item.Workinfo = varWorkinfo;
			
			item.OrderNo = varOrderNo;
			
			item.Customer = varCustomer;
			
			item.OriginalCode = varOriginalCode;
			
			item.Abnormal = varAbnormal;
			
			item.Note = varNote;
			
			item.Resources = varResources;
			
			item.BeginTime = varBeginTime;
			
			item.EndTime = varEndTime;
			
			item.MakeTime = varMakeTime;
			
			item.CreateDate = varCreateDate;
			
			item.Pbcd = varPbcd;
			
			item.Gydm = varGydm;
			
			item.Scjhdd = varScjhdd;
			
			item.FlagStatus = varFlagStatus;
			
			item.Sfyp = varSfyp;
			
			item.Sfjj = varSfjj;
			
			item.Scggdh = varScggdh;
			
			item.ClothType = varClothType;
			
			item.Tzecode = varTzecode;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(string varOrderId,string varJobCode,string varProject,string varOrderType,string varCoatType,string varBodyType,string varFabric,DateTime? varOrderTime,DateTime? varDeliveryTime,int? varSpecialTime,string varSpecialCode,string varStyles,string varStylesResult,int? varNumbers,int? varPlanNum,string varSupportingWay,int? varWorkinfo,string varOrderNo,string varCustomer,string varOriginalCode,string varAbnormal,string varNote,string varResources,DateTime? varBeginTime,DateTime? varEndTime,string varMakeTime,DateTime? varCreateDate,string varPbcd,string varGydm,string varScjhdd,int? varFlagStatus,string varSfyp,string varSfjj,string varScggdh,string varClothType,string varTzecode)
		{
			TAnalysisOutputList item = new TAnalysisOutputList();
			
				item.OrderId = varOrderId;
			
				item.JobCode = varJobCode;
			
				item.Project = varProject;
			
				item.OrderType = varOrderType;
			
				item.CoatType = varCoatType;
			
				item.BodyType = varBodyType;
			
				item.Fabric = varFabric;
			
				item.OrderTime = varOrderTime;
			
				item.DeliveryTime = varDeliveryTime;
			
				item.SpecialTime = varSpecialTime;
			
				item.SpecialCode = varSpecialCode;
			
				item.Styles = varStyles;
			
				item.StylesResult = varStylesResult;
			
				item.Numbers = varNumbers;
			
				item.PlanNum = varPlanNum;
			
				item.SupportingWay = varSupportingWay;
			
				item.Workinfo = varWorkinfo;
			
				item.OrderNo = varOrderNo;
			
				item.Customer = varCustomer;
			
				item.OriginalCode = varOriginalCode;
			
				item.Abnormal = varAbnormal;
			
				item.Note = varNote;
			
				item.Resources = varResources;
			
				item.BeginTime = varBeginTime;
			
				item.EndTime = varEndTime;
			
				item.MakeTime = varMakeTime;
			
				item.CreateDate = varCreateDate;
			
				item.Pbcd = varPbcd;
			
				item.Gydm = varGydm;
			
				item.Scjhdd = varScjhdd;
			
				item.FlagStatus = varFlagStatus;
			
				item.Sfyp = varSfyp;
			
				item.Sfjj = varSfjj;
			
				item.Scggdh = varScggdh;
			
				item.ClothType = varClothType;
			
				item.Tzecode = varTzecode;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn OrderIdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn JobCodeColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn ProjectColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn OrderTypeColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn CoatTypeColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn BodyTypeColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn FabricColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn OrderTimeColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn DeliveryTimeColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn SpecialTimeColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn SpecialCodeColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn StylesColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn StylesResultColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        public static TableSchema.TableColumn NumbersColumn
        {
            get { return Schema.Columns[13]; }
        }
        
        
        
        public static TableSchema.TableColumn PlanNumColumn
        {
            get { return Schema.Columns[14]; }
        }
        
        
        
        public static TableSchema.TableColumn SupportingWayColumn
        {
            get { return Schema.Columns[15]; }
        }
        
        
        
        public static TableSchema.TableColumn WorkinfoColumn
        {
            get { return Schema.Columns[16]; }
        }
        
        
        
        public static TableSchema.TableColumn OrderNoColumn
        {
            get { return Schema.Columns[17]; }
        }
        
        
        
        public static TableSchema.TableColumn CustomerColumn
        {
            get { return Schema.Columns[18]; }
        }
        
        
        
        public static TableSchema.TableColumn OriginalCodeColumn
        {
            get { return Schema.Columns[19]; }
        }
        
        
        
        public static TableSchema.TableColumn AbnormalColumn
        {
            get { return Schema.Columns[20]; }
        }
        
        
        
        public static TableSchema.TableColumn NoteColumn
        {
            get { return Schema.Columns[21]; }
        }
        
        
        
        public static TableSchema.TableColumn ResourcesColumn
        {
            get { return Schema.Columns[22]; }
        }
        
        
        
        public static TableSchema.TableColumn BeginTimeColumn
        {
            get { return Schema.Columns[23]; }
        }
        
        
        
        public static TableSchema.TableColumn EndTimeColumn
        {
            get { return Schema.Columns[24]; }
        }
        
        
        
        public static TableSchema.TableColumn MakeTimeColumn
        {
            get { return Schema.Columns[25]; }
        }
        
        
        
        public static TableSchema.TableColumn CreateDateColumn
        {
            get { return Schema.Columns[26]; }
        }
        
        
        
        public static TableSchema.TableColumn PbcdColumn
        {
            get { return Schema.Columns[27]; }
        }
        
        
        
        public static TableSchema.TableColumn GydmColumn
        {
            get { return Schema.Columns[28]; }
        }
        
        
        
        public static TableSchema.TableColumn ScjhddColumn
        {
            get { return Schema.Columns[29]; }
        }
        
        
        
        public static TableSchema.TableColumn FlagStatusColumn
        {
            get { return Schema.Columns[30]; }
        }
        
        
        
        public static TableSchema.TableColumn SfypColumn
        {
            get { return Schema.Columns[31]; }
        }
        
        
        
        public static TableSchema.TableColumn SfjjColumn
        {
            get { return Schema.Columns[32]; }
        }
        
        
        
        public static TableSchema.TableColumn ScggdhColumn
        {
            get { return Schema.Columns[33]; }
        }
        
        
        
        public static TableSchema.TableColumn ClothTypeColumn
        {
            get { return Schema.Columns[34]; }
        }
        
        
        
        public static TableSchema.TableColumn TzecodeColumn
        {
            get { return Schema.Columns[35]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string OrderId = @"orderId";
			 public static string JobCode = @"jobCode";
			 public static string Project = @"project";
			 public static string OrderType = @"orderType";
			 public static string CoatType = @"coatType";
			 public static string BodyType = @"bodyType";
			 public static string Fabric = @"fabric";
			 public static string OrderTime = @"orderTime";
			 public static string DeliveryTime = @"deliveryTime";
			 public static string SpecialTime = @"specialTime";
			 public static string SpecialCode = @"specialCode";
			 public static string Styles = @"styles";
			 public static string StylesResult = @"stylesResult";
			 public static string Numbers = @"numbers";
			 public static string PlanNum = @"planNum";
			 public static string SupportingWay = @"supportingWay";
			 public static string Workinfo = @"workinfo";
			 public static string OrderNo = @"orderNo";
			 public static string Customer = @"customer";
			 public static string OriginalCode = @"originalCode";
			 public static string Abnormal = @"abnormal";
			 public static string Note = @"note";
			 public static string Resources = @"resources";
			 public static string BeginTime = @"beginTime";
			 public static string EndTime = @"endTime";
			 public static string MakeTime = @"makeTime";
			 public static string CreateDate = @"createDate";
			 public static string Pbcd = @"pbcd";
			 public static string Gydm = @"gydm";
			 public static string Scjhdd = @"scjhdd";
			 public static string FlagStatus = @"flagStatus";
			 public static string Sfyp = @"sfyp";
			 public static string Sfjj = @"sfjj";
			 public static string Scggdh = @"SCGGDH";
			 public static string ClothType = @"ClothType";
			 public static string Tzecode = @"tzecode";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}

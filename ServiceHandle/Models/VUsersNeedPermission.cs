using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace Model{
    /// <summary>
    /// Strongly-typed collection for the VUsersNeedPermission class.
    /// </summary>
    [Serializable]
    public partial class VUsersNeedPermissionCollection : ReadOnlyList<VUsersNeedPermission, VUsersNeedPermissionCollection>
    {        
        public VUsersNeedPermissionCollection() {}
    }
    /// <summary>
    /// This is  Read-only wrapper class for the V_UsersNeedPermissions view.
    /// </summary>
    [Serializable]
    public partial class VUsersNeedPermission : ReadOnlyRecord<VUsersNeedPermission>, IReadOnlyRecord
    {
    
	    #region Default Settings
	    protected static void SetSQLProps() 
	    {
		    GetTableSchema();
	    }
	    #endregion
        #region Schema Accessor
	    public static TableSchema.Table Schema
        {
            get
            {
                if (BaseSchema == null)
                {
                    SetSQLProps();
                }
                return BaseSchema;
            }
        }
    	
        private static void GetTableSchema() 
        {
            if(!IsSchemaInitialized)
            {
                //Schema declaration
                TableSchema.Table schema = new TableSchema.Table("V_UsersNeedPermissions", TableType.View, DataService.GetInstance("Nowthwin"));
                schema.Columns = new TableSchema.TableColumnCollection();
                schema.SchemaName = @"dbo";
                //columns
                
                TableSchema.TableColumn colvarId = new TableSchema.TableColumn(schema);
                colvarId.ColumnName = "ID";
                colvarId.DataType = DbType.Int32;
                colvarId.MaxLength = 0;
                colvarId.AutoIncrement = false;
                colvarId.IsNullable = false;
                colvarId.IsPrimaryKey = false;
                colvarId.IsForeignKey = false;
                colvarId.IsReadOnly = false;
                
                schema.Columns.Add(colvarId);
                
                TableSchema.TableColumn colvarUserName = new TableSchema.TableColumn(schema);
                colvarUserName.ColumnName = "UserName";
                colvarUserName.DataType = DbType.String;
                colvarUserName.MaxLength = 20;
                colvarUserName.AutoIncrement = false;
                colvarUserName.IsNullable = false;
                colvarUserName.IsPrimaryKey = false;
                colvarUserName.IsForeignKey = false;
                colvarUserName.IsReadOnly = false;
                
                schema.Columns.Add(colvarUserName);
                
                TableSchema.TableColumn colvarGroupName = new TableSchema.TableColumn(schema);
                colvarGroupName.ColumnName = "GroupName";
                colvarGroupName.DataType = DbType.String;
                colvarGroupName.MaxLength = 255;
                colvarGroupName.AutoIncrement = false;
                colvarGroupName.IsNullable = true;
                colvarGroupName.IsPrimaryKey = false;
                colvarGroupName.IsForeignKey = false;
                colvarGroupName.IsReadOnly = false;
                
                schema.Columns.Add(colvarGroupName);
                
                TableSchema.TableColumn colvarEmail = new TableSchema.TableColumn(schema);
                colvarEmail.ColumnName = "Email";
                colvarEmail.DataType = DbType.String;
                colvarEmail.MaxLength = 100;
                colvarEmail.AutoIncrement = false;
                colvarEmail.IsNullable = true;
                colvarEmail.IsPrimaryKey = false;
                colvarEmail.IsForeignKey = false;
                colvarEmail.IsReadOnly = false;
                
                schema.Columns.Add(colvarEmail);
                
                TableSchema.TableColumn colvarTelphone = new TableSchema.TableColumn(schema);
                colvarTelphone.ColumnName = "Telphone";
                colvarTelphone.DataType = DbType.String;
                colvarTelphone.MaxLength = 20;
                colvarTelphone.AutoIncrement = false;
                colvarTelphone.IsNullable = true;
                colvarTelphone.IsPrimaryKey = false;
                colvarTelphone.IsForeignKey = false;
                colvarTelphone.IsReadOnly = false;
                
                schema.Columns.Add(colvarTelphone);
                
                TableSchema.TableColumn colvarAccount = new TableSchema.TableColumn(schema);
                colvarAccount.ColumnName = "Account";
                colvarAccount.DataType = DbType.String;
                colvarAccount.MaxLength = 255;
                colvarAccount.AutoIncrement = false;
                colvarAccount.IsNullable = false;
                colvarAccount.IsPrimaryKey = false;
                colvarAccount.IsForeignKey = false;
                colvarAccount.IsReadOnly = false;
                
                schema.Columns.Add(colvarAccount);
                
                TableSchema.TableColumn colvarPageName = new TableSchema.TableColumn(schema);
                colvarPageName.ColumnName = "PageName";
                colvarPageName.DataType = DbType.String;
                colvarPageName.MaxLength = 255;
                colvarPageName.AutoIncrement = false;
                colvarPageName.IsNullable = false;
                colvarPageName.IsPrimaryKey = false;
                colvarPageName.IsForeignKey = false;
                colvarPageName.IsReadOnly = false;
                
                schema.Columns.Add(colvarPageName);
                
                TableSchema.TableColumn colvarPageUrl = new TableSchema.TableColumn(schema);
                colvarPageUrl.ColumnName = "PageUrl";
                colvarPageUrl.DataType = DbType.String;
                colvarPageUrl.MaxLength = 255;
                colvarPageUrl.AutoIncrement = false;
                colvarPageUrl.IsNullable = true;
                colvarPageUrl.IsPrimaryKey = false;
                colvarPageUrl.IsForeignKey = false;
                colvarPageUrl.IsReadOnly = false;
                
                schema.Columns.Add(colvarPageUrl);
                
                TableSchema.TableColumn colvarUserID = new TableSchema.TableColumn(schema);
                colvarUserID.ColumnName = "UserID";
                colvarUserID.DataType = DbType.Int32;
                colvarUserID.MaxLength = 0;
                colvarUserID.AutoIncrement = false;
                colvarUserID.IsNullable = false;
                colvarUserID.IsPrimaryKey = false;
                colvarUserID.IsForeignKey = false;
                colvarUserID.IsReadOnly = false;
                
                schema.Columns.Add(colvarUserID);
                
                TableSchema.TableColumn colvarPageID = new TableSchema.TableColumn(schema);
                colvarPageID.ColumnName = "PageID";
                colvarPageID.DataType = DbType.Int32;
                colvarPageID.MaxLength = 0;
                colvarPageID.AutoIncrement = false;
                colvarPageID.IsNullable = false;
                colvarPageID.IsPrimaryKey = false;
                colvarPageID.IsForeignKey = false;
                colvarPageID.IsReadOnly = false;
                
                schema.Columns.Add(colvarPageID);
                
                TableSchema.TableColumn colvarContent = new TableSchema.TableColumn(schema);
                colvarContent.ColumnName = "Content";
                colvarContent.DataType = DbType.String;
                colvarContent.MaxLength = 200;
                colvarContent.AutoIncrement = false;
                colvarContent.IsNullable = false;
                colvarContent.IsPrimaryKey = false;
                colvarContent.IsForeignKey = false;
                colvarContent.IsReadOnly = false;
                
                schema.Columns.Add(colvarContent);
                
                TableSchema.TableColumn colvarCreateTime = new TableSchema.TableColumn(schema);
                colvarCreateTime.ColumnName = "CreateTime";
                colvarCreateTime.DataType = DbType.DateTime;
                colvarCreateTime.MaxLength = 0;
                colvarCreateTime.AutoIncrement = false;
                colvarCreateTime.IsNullable = false;
                colvarCreateTime.IsPrimaryKey = false;
                colvarCreateTime.IsForeignKey = false;
                colvarCreateTime.IsReadOnly = false;
                
                schema.Columns.Add(colvarCreateTime);
                
                
                BaseSchema = schema;
                //add this schema to the provider
                //so we can query it later
                DataService.Providers["Nowthwin"].AddSchema("V_UsersNeedPermissions",schema);
            }
        }
        #endregion
        
        #region Query Accessor
	    public static Query CreateQuery()
	    {
		    return new Query(Schema);
	    }
	    #endregion
	    
	    #region .ctors
	    public VUsersNeedPermission()
	    {
            SetSQLProps();
            SetDefaults();
            MarkNew();
        }
        public VUsersNeedPermission(bool useDatabaseDefaults)
	    {
		    SetSQLProps();
		    if(useDatabaseDefaults)
		    {
				ForceDefaults();
			}
			MarkNew();
	    }
	    
	    public VUsersNeedPermission(object keyID)
	    {
		    SetSQLProps();
		    LoadByKey(keyID);
	    }
    	 
	    public VUsersNeedPermission(string columnName, object columnValue)
        {
            SetSQLProps();
            LoadByParam(columnName,columnValue);
        }
        
	    #endregion
	    
	    #region Props
	    
          
        [XmlAttribute("Id")]
        [Bindable(true)]
        public int Id 
	    {
		    get
		    {
			    return GetColumnValue<int>("ID");
		    }
            set 
		    {
			    SetColumnValue("ID", value);
            }
        }
	      
        [XmlAttribute("UserName")]
        [Bindable(true)]
        public string UserName 
	    {
		    get
		    {
			    return GetColumnValue<string>("UserName");
		    }
            set 
		    {
			    SetColumnValue("UserName", value);
            }
        }
	      
        [XmlAttribute("GroupName")]
        [Bindable(true)]
        public string GroupName 
	    {
		    get
		    {
			    return GetColumnValue<string>("GroupName");
		    }
            set 
		    {
			    SetColumnValue("GroupName", value);
            }
        }
	      
        [XmlAttribute("Email")]
        [Bindable(true)]
        public string Email 
	    {
		    get
		    {
			    return GetColumnValue<string>("Email");
		    }
            set 
		    {
			    SetColumnValue("Email", value);
            }
        }
	      
        [XmlAttribute("Telphone")]
        [Bindable(true)]
        public string Telphone 
	    {
		    get
		    {
			    return GetColumnValue<string>("Telphone");
		    }
            set 
		    {
			    SetColumnValue("Telphone", value);
            }
        }
	      
        [XmlAttribute("Account")]
        [Bindable(true)]
        public string Account 
	    {
		    get
		    {
			    return GetColumnValue<string>("Account");
		    }
            set 
		    {
			    SetColumnValue("Account", value);
            }
        }
	      
        [XmlAttribute("PageName")]
        [Bindable(true)]
        public string PageName 
	    {
		    get
		    {
			    return GetColumnValue<string>("PageName");
		    }
            set 
		    {
			    SetColumnValue("PageName", value);
            }
        }
	      
        [XmlAttribute("PageUrl")]
        [Bindable(true)]
        public string PageUrl 
	    {
		    get
		    {
			    return GetColumnValue<string>("PageUrl");
		    }
            set 
		    {
			    SetColumnValue("PageUrl", value);
            }
        }
	      
        [XmlAttribute("UserID")]
        [Bindable(true)]
        public int UserID 
	    {
		    get
		    {
			    return GetColumnValue<int>("UserID");
		    }
            set 
		    {
			    SetColumnValue("UserID", value);
            }
        }
	      
        [XmlAttribute("PageID")]
        [Bindable(true)]
        public int PageID 
	    {
		    get
		    {
			    return GetColumnValue<int>("PageID");
		    }
            set 
		    {
			    SetColumnValue("PageID", value);
            }
        }
	      
        [XmlAttribute("Content")]
        [Bindable(true)]
        public string Content 
	    {
		    get
		    {
			    return GetColumnValue<string>("Content");
		    }
            set 
		    {
			    SetColumnValue("Content", value);
            }
        }
	      
        [XmlAttribute("CreateTime")]
        [Bindable(true)]
        public DateTime CreateTime 
	    {
		    get
		    {
			    return GetColumnValue<DateTime>("CreateTime");
		    }
            set 
		    {
			    SetColumnValue("CreateTime", value);
            }
        }
	    
	    #endregion
    
	    #region Columns Struct
	    public struct Columns
	    {
		    
		    
            public static string Id = @"ID";
            
            public static string UserName = @"UserName";
            
            public static string GroupName = @"GroupName";
            
            public static string Email = @"Email";
            
            public static string Telphone = @"Telphone";
            
            public static string Account = @"Account";
            
            public static string PageName = @"PageName";
            
            public static string PageUrl = @"PageUrl";
            
            public static string UserID = @"UserID";
            
            public static string PageID = @"PageID";
            
            public static string Content = @"Content";
            
            public static string CreateTime = @"CreateTime";
            
	    }
	    #endregion
	    
	    
	    #region IAbstractRecord Members
        public new CT GetColumnValue<CT>(string columnName) {
            return base.GetColumnValue<CT>(columnName);
        }
        public object GetColumnValue(string columnName) {
            return base.GetColumnValue<object>(columnName);
        }
        #endregion
	    
    }
}

using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace Model
{
    /// <summary>
    /// Controller class for T_Analysis_OutputListWithCodeLS
    /// </summary>
    [System.ComponentModel.DataObject]
    public partial class TAnalysisOutputListWithCodeLController
    {
        // Preload our schema..
        TAnalysisOutputListWithCodeL thisSchemaLoad = new TAnalysisOutputListWithCodeL();
        private string userName = String.Empty;
        protected string UserName
        {
            get
            {
				if (userName.Length == 0) 
				{
    				if (System.Web.HttpContext.Current != null)
    				{
						userName=System.Web.HttpContext.Current.User.Identity.Name;
					}
					else
					{
						userName=System.Threading.Thread.CurrentPrincipal.Identity.Name;
					}
				}
				return userName;
            }
        }
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public TAnalysisOutputListWithCodeLCollection FetchAll()
        {
            TAnalysisOutputListWithCodeLCollection coll = new TAnalysisOutputListWithCodeLCollection();
            Query qry = new Query(TAnalysisOutputListWithCodeL.Schema);
            coll.LoadAndCloseReader(qry.ExecuteReader());
            return coll;
        }
        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public TAnalysisOutputListWithCodeLCollection FetchByID(object PkId)
        {
            TAnalysisOutputListWithCodeLCollection coll = new TAnalysisOutputListWithCodeLCollection().Where("pkId", PkId).Load();
            return coll;
        }
		
		[DataObjectMethod(DataObjectMethodType.Select, false)]
        public TAnalysisOutputListWithCodeLCollection FetchByQuery(Query qry)
        {
            TAnalysisOutputListWithCodeLCollection coll = new TAnalysisOutputListWithCodeLCollection();
            coll.LoadAndCloseReader(qry.ExecuteReader()); 
            return coll;
        }
        [DataObjectMethod(DataObjectMethodType.Delete, true)]
        public bool Delete(object PkId)
        {
            return (TAnalysisOutputListWithCodeL.Delete(PkId) == 1);
        }
        [DataObjectMethod(DataObjectMethodType.Delete, false)]
        public bool Destroy(object PkId)
        {
            return (TAnalysisOutputListWithCodeL.Destroy(PkId) == 1);
        }
        
        
    	
	    /// <summary>
	    /// Inserts a record, can be used with the Object Data Source
	    /// </summary>
        [DataObjectMethod(DataObjectMethodType.Insert, true)]
	    public void Insert(string PkId,string PlanId,int? JobCode,string Project,string OrderType,string CoatType,string BodyType,string Fabric,DateTime? OrderTime,DateTime? DeliveryTime,int? SpecialTime,string SpecialCode,string Styles,string StylesResult,int? Numbers,int PlanNum,string SupportingWay,int Workinfo,string OrderNo,string Customer,int? OriginalCode,int? Abnormal,int? Note,string Resources,DateTime? BeginTime,DateTime? EndTime,int? MakeTime,DateTime? CreateDate,int? Scjhdd,string Scggdh,int Scgcdm,string ClothType,string Tzecode,string PbcdName,string Xtwpmc)
	    {
		    TAnalysisOutputListWithCodeL item = new TAnalysisOutputListWithCodeL();
		    
            item.PkId = PkId;
            
            item.PlanId = PlanId;
            
            item.JobCode = JobCode;
            
            item.Project = Project;
            
            item.OrderType = OrderType;
            
            item.CoatType = CoatType;
            
            item.BodyType = BodyType;
            
            item.Fabric = Fabric;
            
            item.OrderTime = OrderTime;
            
            item.DeliveryTime = DeliveryTime;
            
            item.SpecialTime = SpecialTime;
            
            item.SpecialCode = SpecialCode;
            
            item.Styles = Styles;
            
            item.StylesResult = StylesResult;
            
            item.Numbers = Numbers;
            
            item.PlanNum = PlanNum;
            
            item.SupportingWay = SupportingWay;
            
            item.Workinfo = Workinfo;
            
            item.OrderNo = OrderNo;
            
            item.Customer = Customer;
            
            item.OriginalCode = OriginalCode;
            
            item.Abnormal = Abnormal;
            
            item.Note = Note;
            
            item.Resources = Resources;
            
            item.BeginTime = BeginTime;
            
            item.EndTime = EndTime;
            
            item.MakeTime = MakeTime;
            
            item.CreateDate = CreateDate;
            
            item.Scjhdd = Scjhdd;
            
            item.Scggdh = Scggdh;
            
            item.Scgcdm = Scgcdm;
            
            item.ClothType = ClothType;
            
            item.Tzecode = Tzecode;
            
            item.PbcdName = PbcdName;
            
            item.Xtwpmc = Xtwpmc;
            
	    
		    item.Save(UserName);
	    }
    	
	    /// <summary>
	    /// Updates a record, can be used with the Object Data Source
	    /// </summary>
        [DataObjectMethod(DataObjectMethodType.Update, true)]
	    public void Update(string PkId,string PlanId,int? JobCode,string Project,string OrderType,string CoatType,string BodyType,string Fabric,DateTime? OrderTime,DateTime? DeliveryTime,int? SpecialTime,string SpecialCode,string Styles,string StylesResult,int? Numbers,int PlanNum,string SupportingWay,int Workinfo,string OrderNo,string Customer,int? OriginalCode,int? Abnormal,int? Note,string Resources,DateTime? BeginTime,DateTime? EndTime,int? MakeTime,DateTime? CreateDate,int? Scjhdd,string Scggdh,int Scgcdm,string ClothType,string Tzecode,string PbcdName,string Xtwpmc)
	    {
		    TAnalysisOutputListWithCodeL item = new TAnalysisOutputListWithCodeL();
	        item.MarkOld();
	        item.IsLoaded = true;
		    
			item.PkId = PkId;
				
			item.PlanId = PlanId;
				
			item.JobCode = JobCode;
				
			item.Project = Project;
				
			item.OrderType = OrderType;
				
			item.CoatType = CoatType;
				
			item.BodyType = BodyType;
				
			item.Fabric = Fabric;
				
			item.OrderTime = OrderTime;
				
			item.DeliveryTime = DeliveryTime;
				
			item.SpecialTime = SpecialTime;
				
			item.SpecialCode = SpecialCode;
				
			item.Styles = Styles;
				
			item.StylesResult = StylesResult;
				
			item.Numbers = Numbers;
				
			item.PlanNum = PlanNum;
				
			item.SupportingWay = SupportingWay;
				
			item.Workinfo = Workinfo;
				
			item.OrderNo = OrderNo;
				
			item.Customer = Customer;
				
			item.OriginalCode = OriginalCode;
				
			item.Abnormal = Abnormal;
				
			item.Note = Note;
				
			item.Resources = Resources;
				
			item.BeginTime = BeginTime;
				
			item.EndTime = EndTime;
				
			item.MakeTime = MakeTime;
				
			item.CreateDate = CreateDate;
				
			item.Scjhdd = Scjhdd;
				
			item.Scggdh = Scggdh;
				
			item.Scgcdm = Scgcdm;
				
			item.ClothType = ClothType;
				
			item.Tzecode = Tzecode;
				
			item.PbcdName = PbcdName;
				
			item.Xtwpmc = Xtwpmc;
				
	        item.Save(UserName);
	    }
    }
}

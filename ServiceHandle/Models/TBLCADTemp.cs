using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace Model
{
	/// <summary>
	/// Strongly-typed collection for the TBLCADTemp class.
	/// </summary>
    [Serializable]
	public partial class TBLCADTempCollection : ActiveList<TBLCADTemp, TBLCADTempCollection>
	{	   
		public TBLCADTempCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>TBLCADTempCollection</returns>
		public TBLCADTempCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                TBLCADTemp o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the T_BLCADTemp table.
	/// </summary>
	[Serializable]
	public partial class TBLCADTemp : ActiveRecord<TBLCADTemp>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public TBLCADTemp()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public TBLCADTemp(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public TBLCADTemp(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public TBLCADTemp(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("T_BLCADTemp", TableType.Table, DataService.GetInstance("Nowthwin"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarCustomerID = new TableSchema.TableColumn(schema);
				colvarCustomerID.ColumnName = "CustomerID";
				colvarCustomerID.DataType = DbType.String;
				colvarCustomerID.MaxLength = 100;
				colvarCustomerID.AutoIncrement = false;
				colvarCustomerID.IsNullable = false;
				colvarCustomerID.IsPrimaryKey = true;
				colvarCustomerID.IsForeignKey = false;
				colvarCustomerID.IsReadOnly = false;
				colvarCustomerID.DefaultSetting = @"";
				colvarCustomerID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCustomerID);
				
				TableSchema.TableColumn colvarJobCode = new TableSchema.TableColumn(schema);
				colvarJobCode.ColumnName = "jobCode";
				colvarJobCode.DataType = DbType.String;
				colvarJobCode.MaxLength = 50;
				colvarJobCode.AutoIncrement = false;
				colvarJobCode.IsNullable = true;
				colvarJobCode.IsPrimaryKey = false;
				colvarJobCode.IsForeignKey = false;
				colvarJobCode.IsReadOnly = false;
				colvarJobCode.DefaultSetting = @"";
				colvarJobCode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarJobCode);
				
				TableSchema.TableColumn colvarProject = new TableSchema.TableColumn(schema);
				colvarProject.ColumnName = "Project";
				colvarProject.DataType = DbType.String;
				colvarProject.MaxLength = 20;
				colvarProject.AutoIncrement = false;
				colvarProject.IsNullable = true;
				colvarProject.IsPrimaryKey = false;
				colvarProject.IsForeignKey = false;
				colvarProject.IsReadOnly = false;
				colvarProject.DefaultSetting = @"";
				colvarProject.ForeignKeyTableName = "";
				schema.Columns.Add(colvarProject);
				
				TableSchema.TableColumn colvarNote = new TableSchema.TableColumn(schema);
				colvarNote.ColumnName = "Note";
				colvarNote.DataType = DbType.String;
				colvarNote.MaxLength = 200;
				colvarNote.AutoIncrement = false;
				colvarNote.IsNullable = true;
				colvarNote.IsPrimaryKey = false;
				colvarNote.IsForeignKey = false;
				colvarNote.IsReadOnly = false;
				colvarNote.DefaultSetting = @"";
				colvarNote.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNote);
				
				TableSchema.TableColumn colvarResources = new TableSchema.TableColumn(schema);
				colvarResources.ColumnName = "Resources";
				colvarResources.DataType = DbType.String;
				colvarResources.MaxLength = 1000;
				colvarResources.AutoIncrement = false;
				colvarResources.IsNullable = false;
				colvarResources.IsPrimaryKey = false;
				colvarResources.IsForeignKey = false;
				colvarResources.IsReadOnly = false;
				colvarResources.DefaultSetting = @"";
				colvarResources.ForeignKeyTableName = "";
				schema.Columns.Add(colvarResources);
				
				TableSchema.TableColumn colvarBeginTime = new TableSchema.TableColumn(schema);
				colvarBeginTime.ColumnName = "BeginTime";
				colvarBeginTime.DataType = DbType.DateTime;
				colvarBeginTime.MaxLength = 0;
				colvarBeginTime.AutoIncrement = false;
				colvarBeginTime.IsNullable = false;
				colvarBeginTime.IsPrimaryKey = false;
				colvarBeginTime.IsForeignKey = false;
				colvarBeginTime.IsReadOnly = false;
				colvarBeginTime.DefaultSetting = @"";
				colvarBeginTime.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBeginTime);
				
				TableSchema.TableColumn colvarEndTime = new TableSchema.TableColumn(schema);
				colvarEndTime.ColumnName = "EndTime";
				colvarEndTime.DataType = DbType.DateTime;
				colvarEndTime.MaxLength = 0;
				colvarEndTime.AutoIncrement = false;
				colvarEndTime.IsNullable = false;
				colvarEndTime.IsPrimaryKey = false;
				colvarEndTime.IsForeignKey = false;
				colvarEndTime.IsReadOnly = false;
				colvarEndTime.DefaultSetting = @"";
				colvarEndTime.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEndTime);
				
				TableSchema.TableColumn colvarMakeTime = new TableSchema.TableColumn(schema);
				colvarMakeTime.ColumnName = "MakeTime";
				colvarMakeTime.DataType = DbType.String;
				colvarMakeTime.MaxLength = 50;
				colvarMakeTime.AutoIncrement = false;
				colvarMakeTime.IsNullable = false;
				colvarMakeTime.IsPrimaryKey = false;
				colvarMakeTime.IsForeignKey = false;
				colvarMakeTime.IsReadOnly = false;
				colvarMakeTime.DefaultSetting = @"";
				colvarMakeTime.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMakeTime);
				
				TableSchema.TableColumn colvarCreateTime = new TableSchema.TableColumn(schema);
				colvarCreateTime.ColumnName = "CreateTime";
				colvarCreateTime.DataType = DbType.DateTime;
				colvarCreateTime.MaxLength = 0;
				colvarCreateTime.AutoIncrement = false;
				colvarCreateTime.IsNullable = true;
				colvarCreateTime.IsPrimaryKey = false;
				colvarCreateTime.IsForeignKey = false;
				colvarCreateTime.IsReadOnly = false;
				colvarCreateTime.DefaultSetting = @"";
				colvarCreateTime.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreateTime);
				
				TableSchema.TableColumn colvarMtmOrTz = new TableSchema.TableColumn(schema);
				colvarMtmOrTz.ColumnName = "MtmOrTz";
				colvarMtmOrTz.DataType = DbType.Int32;
				colvarMtmOrTz.MaxLength = 0;
				colvarMtmOrTz.AutoIncrement = false;
				colvarMtmOrTz.IsNullable = false;
				colvarMtmOrTz.IsPrimaryKey = false;
				colvarMtmOrTz.IsForeignKey = false;
				colvarMtmOrTz.IsReadOnly = false;
				colvarMtmOrTz.DefaultSetting = @"";
				colvarMtmOrTz.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMtmOrTz);
				
				TableSchema.TableColumn colvarGrabTime = new TableSchema.TableColumn(schema);
				colvarGrabTime.ColumnName = "GrabTime";
				colvarGrabTime.DataType = DbType.DateTime;
				colvarGrabTime.MaxLength = 0;
				colvarGrabTime.AutoIncrement = false;
				colvarGrabTime.IsNullable = false;
				colvarGrabTime.IsPrimaryKey = false;
				colvarGrabTime.IsForeignKey = false;
				colvarGrabTime.IsReadOnly = false;
				colvarGrabTime.DefaultSetting = @"";
				colvarGrabTime.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGrabTime);
				
				TableSchema.TableColumn colvarState = new TableSchema.TableColumn(schema);
				colvarState.ColumnName = "State";
				colvarState.DataType = DbType.Int32;
				colvarState.MaxLength = 0;
				colvarState.AutoIncrement = false;
				colvarState.IsNullable = false;
				colvarState.IsPrimaryKey = false;
				colvarState.IsForeignKey = false;
				colvarState.IsReadOnly = false;
				
						colvarState.DefaultSetting = @"((0))";
				colvarState.ForeignKeyTableName = "";
				schema.Columns.Add(colvarState);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["Nowthwin"].AddSchema("T_BLCADTemp",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("CustomerID")]
		[Bindable(true)]
		public string CustomerID 
		{
			get { return GetColumnValue<string>(Columns.CustomerID); }
			set { SetColumnValue(Columns.CustomerID, value); }
		}
		  
		[XmlAttribute("JobCode")]
		[Bindable(true)]
		public string JobCode 
		{
			get { return GetColumnValue<string>(Columns.JobCode); }
			set { SetColumnValue(Columns.JobCode, value); }
		}
		  
		[XmlAttribute("Project")]
		[Bindable(true)]
		public string Project 
		{
			get { return GetColumnValue<string>(Columns.Project); }
			set { SetColumnValue(Columns.Project, value); }
		}
		  
		[XmlAttribute("Note")]
		[Bindable(true)]
		public string Note 
		{
			get { return GetColumnValue<string>(Columns.Note); }
			set { SetColumnValue(Columns.Note, value); }
		}
		  
		[XmlAttribute("Resources")]
		[Bindable(true)]
		public string Resources 
		{
			get { return GetColumnValue<string>(Columns.Resources); }
			set { SetColumnValue(Columns.Resources, value); }
		}
		  
		[XmlAttribute("BeginTime")]
		[Bindable(true)]
		public DateTime BeginTime 
		{
			get { return GetColumnValue<DateTime>(Columns.BeginTime); }
			set { SetColumnValue(Columns.BeginTime, value); }
		}
		  
		[XmlAttribute("EndTime")]
		[Bindable(true)]
		public DateTime EndTime 
		{
			get { return GetColumnValue<DateTime>(Columns.EndTime); }
			set { SetColumnValue(Columns.EndTime, value); }
		}
		  
		[XmlAttribute("MakeTime")]
		[Bindable(true)]
		public string MakeTime 
		{
			get { return GetColumnValue<string>(Columns.MakeTime); }
			set { SetColumnValue(Columns.MakeTime, value); }
		}
		  
		[XmlAttribute("CreateTime")]
		[Bindable(true)]
		public DateTime? CreateTime 
		{
			get { return GetColumnValue<DateTime?>(Columns.CreateTime); }
			set { SetColumnValue(Columns.CreateTime, value); }
		}
		  
		[XmlAttribute("MtmOrTz")]
		[Bindable(true)]
		public int MtmOrTz 
		{
			get { return GetColumnValue<int>(Columns.MtmOrTz); }
			set { SetColumnValue(Columns.MtmOrTz, value); }
		}
		  
		[XmlAttribute("GrabTime")]
		[Bindable(true)]
		public DateTime GrabTime 
		{
			get { return GetColumnValue<DateTime>(Columns.GrabTime); }
			set { SetColumnValue(Columns.GrabTime, value); }
		}
		  
		[XmlAttribute("State")]
		[Bindable(true)]
		public int State 
		{
			get { return GetColumnValue<int>(Columns.State); }
			set { SetColumnValue(Columns.State, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varCustomerID,string varJobCode,string varProject,string varNote,string varResources,DateTime varBeginTime,DateTime varEndTime,string varMakeTime,DateTime? varCreateTime,int varMtmOrTz,DateTime varGrabTime,int varState)
		{
			TBLCADTemp item = new TBLCADTemp();
			
			item.CustomerID = varCustomerID;
			
			item.JobCode = varJobCode;
			
			item.Project = varProject;
			
			item.Note = varNote;
			
			item.Resources = varResources;
			
			item.BeginTime = varBeginTime;
			
			item.EndTime = varEndTime;
			
			item.MakeTime = varMakeTime;
			
			item.CreateTime = varCreateTime;
			
			item.MtmOrTz = varMtmOrTz;
			
			item.GrabTime = varGrabTime;
			
			item.State = varState;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(string varCustomerID,string varJobCode,string varProject,string varNote,string varResources,DateTime varBeginTime,DateTime varEndTime,string varMakeTime,DateTime? varCreateTime,int varMtmOrTz,DateTime varGrabTime,int varState)
		{
			TBLCADTemp item = new TBLCADTemp();
			
				item.CustomerID = varCustomerID;
			
				item.JobCode = varJobCode;
			
				item.Project = varProject;
			
				item.Note = varNote;
			
				item.Resources = varResources;
			
				item.BeginTime = varBeginTime;
			
				item.EndTime = varEndTime;
			
				item.MakeTime = varMakeTime;
			
				item.CreateTime = varCreateTime;
			
				item.MtmOrTz = varMtmOrTz;
			
				item.GrabTime = varGrabTime;
			
				item.State = varState;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn CustomerIDColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn JobCodeColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn ProjectColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn NoteColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn ResourcesColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn BeginTimeColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn EndTimeColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn MakeTimeColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn CreateTimeColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn MtmOrTzColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn GrabTimeColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn StateColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string CustomerID = @"CustomerID";
			 public static string JobCode = @"jobCode";
			 public static string Project = @"Project";
			 public static string Note = @"Note";
			 public static string Resources = @"Resources";
			 public static string BeginTime = @"BeginTime";
			 public static string EndTime = @"EndTime";
			 public static string MakeTime = @"MakeTime";
			 public static string CreateTime = @"CreateTime";
			 public static string MtmOrTz = @"MtmOrTz";
			 public static string GrabTime = @"GrabTime";
			 public static string State = @"State";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
